
EX_SD_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c4  0800e3c0  0800e3c0  0000f3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb84  0800fb84  000111ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fb84  0800fb84  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb8c  0800fb8c  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb8c  0800fb8c  00010b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb90  0800fb90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800fb94  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067ec  200001ec  0800fd80  000111ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200069d8  0800fd80  000119d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016711  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003969  00000000  00000000  0002792d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e21  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e31  00000000  00000000  0002d329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adef  00000000  00000000  0004e15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd40e  00000000  00000000  00068f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb4  00000000  00000000  0012639c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e3a8 	.word	0x0800e3a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800e3a8 	.word	0x0800e3a8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	f002 fc2b 	bl	800381a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	f002 fc42 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200c      	movs	r0, #12
 8000fd0:	f002 fc23 	bl	800381a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fd4:	200c      	movs	r0, #12
 8000fd6:	f002 fc3a 	bl	800384e <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <SELECT>:
 * SPI 함수들 ( SPI 신호 동작관련 )
 **************************************/

/* 슬레이브 선택! */
static void SELECT(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);  // CS를 LOW로
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f003 f866 	bl	80040c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f002 fb11 	bl	8003620 <HAL_Delay>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <DESELECT>:

/* 슬레이브 선택 해제! */
static void DESELECT(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);    // CS를 HIGH로
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f003 f859 	bl	80040c4 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8001012:	2001      	movs	r0, #1
 8001014:	f002 fb04 	bl	8003620 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <SPI_TxByte>:

/* SPI 데이터 송신! */
static void SPI_TxByte(uint8_t data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE)); // TX 버퍼 비울 때까지 대기
 8001026:	bf00      	nop
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <SPI_TxByte+0x30>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d1f8      	bne.n	8001028 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT); // 1바이트 전송
 8001036:	1df9      	adds	r1, r7, #7
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <SPI_TxByte+0x30>)
 800103e:	f004 f8d6 	bl	80051ee <HAL_SPI_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200047b0 	.word	0x200047b0

08001050 <SPI_TxBuffer>:

/* SPI 전송 버퍼! */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800105c:	bf00      	nop
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b02      	cmp	r3, #2
 800106a:	d1f8      	bne.n	800105e <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001074:	f004 f8bb 	bl	80051ee <HAL_SPI_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200047b0 	.word	0x200047b0

08001084 <SPI_RxByte>:

/* SPI 데이터 수신! */
static uint8_t SPI_RxByte(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF; // SD카드는 0xFF를 보내야 응답함
 800108a:	23ff      	movs	r3, #255	@ 0xff
 800108c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800108e:	bf00      	nop
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <SPI_RxByte+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d1f8      	bne.n	8001090 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800109e:	1dba      	adds	r2, r7, #6
 80010a0:	1df9      	adds	r1, r7, #7
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <SPI_RxByte+0x34>)
 80010aa:	f004 fa16 	bl	80054da <HAL_SPI_TransmitReceive>

    return data;
 80010ae:	79bb      	ldrb	r3, [r7, #6]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200047b0 	.word	0x200047b0

080010bc <SPI_RxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터  */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 80010c4:	f7ff ffde 	bl	8001084 <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SD_ReadyWait>:
 * SD 함수
 **************************************/

/*  SD카드 준비 상태 확인 */
static uint8_t SD_ReadyWait(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 타임아웃 설정 */
    Timer2 = 500;
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SD_ReadyWait+0x30>)
 80010e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010e4:	801a      	strh	r2, [r3, #0]
		0x00: 바쁨 (busy)
		기타값: 에러 또는 처리중
     */

    do {
        res = SPI_RxByte();
 80010e6:	f7ff ffcd 	bl	8001084 <SPI_RxByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2bff      	cmp	r3, #255	@ 0xff
 80010f2:	d004      	beq.n	80010fe <SD_ReadyWait+0x26>
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SD_ReadyWait+0x30>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f3      	bne.n	80010e6 <SD_ReadyWait+0xe>

    return res;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002596 	.word	0x20002596

0800110c <SD_PowerOn>:

/* 전원 제어 */
static void SD_PowerOn(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // 약 8000번 시도
 8001112:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001116:	60fb      	str	r3, [r7, #12]

    /* 1단계: 웨이크업 시퀀스 */
    DESELECT(); // 슬레이브 선택 해제!
 8001118:	f7ff ff73 	bl	8001002 <DESELECT>
    for(int i = 0; i < 10; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e005      	b.n	800112e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF); // 80클럭 펄스 생성 (10바이트 × 8비트)
 8001122:	20ff      	movs	r0, #255	@ 0xff
 8001124:	f7ff ff7a 	bl	800101c <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b09      	cmp	r3, #9
 8001132:	ddf6      	ble.n	8001122 <SD_PowerOn+0x16>
    }

    /* 슬레이브 선택! */
    SELECT();
 8001134:	f7ff ff58 	bl	8000fe8 <SELECT>

    /* 2단계: 카드 선택 및 IDLE 명령 */
    args[0] = CMD0;     // 명령어: GO_IDLE_STATE
 8001138:	2340      	movs	r3, #64	@ 0x40
 800113a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;        // 인수 [31:24] = 0
 800113c:	2300      	movs	r3, #0
 800113e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;        // 인수 [23:16] = 0
 8001140:	2300      	movs	r3, #0
 8001142:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;        // 인수 [15:8] = 0
 8001144:	2300      	movs	r3, #0
 8001146:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;        // 인수 [7:0] = 0
 8001148:	2300      	movs	r3, #0
 800114a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     // CRC (CMD0용 고정값)
 800114c:	2395      	movs	r3, #149	@ 0x95
 800114e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args)); // 6바이트 전송
 8001150:	463b      	mov	r3, r7
 8001152:	2106      	movs	r1, #6
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff7b 	bl	8001050 <SPI_TxBuffer>

    /* 3단계: 응답 대기 (R1 응답 = 0x01 기대) */
    while ((SPI_RxByte() != 0x01) && cnt)
 800115a:	e002      	b.n	8001162 <SD_PowerOn+0x56>
    {
        cnt--; // 타임아웃 카운터
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3b01      	subs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8001162:	f7ff ff8f 	bl	8001084 <SPI_RxByte>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <SD_PowerOn+0x66>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f4      	bne.n	800115c <SD_PowerOn+0x50>
    }

    DESELECT(); // 명령 완료 후 비활성화
 8001172:	f7ff ff46 	bl	8001002 <DESELECT>
    SPI_TxByte(0XFF); // 추가 클럭 제공
 8001176:	20ff      	movs	r0, #255	@ 0xff
 8001178:	f7ff ff50 	bl	800101c <SPI_TxByte>

    PowerFlag = 1; // 전원 상태 플래그 설정
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <SD_PowerOn+0x80>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000209 	.word	0x20000209

08001190 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <SD_PowerOff+0x14>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000209 	.word	0x20000209

080011a8 <SD_CheckPower>:

/* Power Flag 체크용 함수! */
static uint8_t SD_CheckPower(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    return PowerFlag;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <SD_CheckPower+0x14>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000209 	.word	0x20000209

080011c0 <SD_RxDataBlock>:

/* 데이터 블록 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 200ms 타임아웃 */
    Timer1 = 200;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <SD_RxDataBlock+0x5c>)
 80011cc:	22c8      	movs	r2, #200	@ 0xc8
 80011ce:	801a      	strh	r2, [r3, #0]

    /* 응답을 받을때 까지 or 타임아웃 시간까지 루프를 돕니다. */
    // 1단계: 데이터 토큰 대기
    do {
        token = SPI_RxByte();
 80011d0:	f7ff ff58 	bl	8001084 <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	d104      	bne.n	80011e8 <SD_RxDataBlock+0x28>
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <SD_RxDataBlock+0x5c>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <SD_RxDataBlock+0x10>

    // 2단계: 토큰 검증
    if(token != 0xFE) return FALSE;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ec:	d007      	beq.n	80011fe <SD_RxDataBlock+0x3e>
 80011ee:	2300      	movs	r3, #0
 80011f0:	e00f      	b.n	8001212 <SD_RxDataBlock+0x52>

    // 3단계: 실제 데이터 수신
    while(len--) {
        SPI_RxBytePtr(buff++);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <SPI_RxBytePtr>
    while(len--) {
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	603a      	str	r2, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f4      	bne.n	80011f2 <SD_RxDataBlock+0x32>
    }

    // 4단계: CRC 무시 (사용 안 함)
    SPI_RxByte();
 8001208:	f7ff ff3c 	bl	8001084 <SPI_RxByte>
    SPI_RxByte();
 800120c:	f7ff ff3a 	bl	8001084 <SPI_RxByte>

    return TRUE;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20002598 	.word	0x20002598

08001220 <SD_TxDataBlock>:


/* 데이터 블록 전송 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 800122c:	23ff      	movs	r3, #255	@ 0xff
 800122e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	73bb      	strb	r3, [r7, #14]

    // 1단계: 카드 준비 상태 확인
    if (SD_ReadyWait() != 0xFF) return FALSE;
 8001234:	f7ff ff50 	bl	80010d8 <SD_ReadyWait>
 8001238:	4603      	mov	r3, r0
 800123a:	2bff      	cmp	r3, #255	@ 0xff
 800123c:	d001      	beq.n	8001242 <SD_TxDataBlock+0x22>
 800123e:	2300      	movs	r3, #0
 8001240:	e037      	b.n	80012b2 <SD_TxDataBlock+0x92>

    // 2단계: 토큰 전송
    SPI_TxByte(token); // 0xFE(단일블록) 또는 0xFC(다중블록)
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fee9 	bl	800101c <SPI_TxByte>

    // 3단계: 데이터 전송 (STOP 토큰이 아닌 경우만)
    if (token != 0xFD) // 0xFD = STOP_TRANSMISSION 토큰
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	2bfd      	cmp	r3, #253	@ 0xfd
 800124e:	d028      	beq.n	80012a2 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);  // 512바이트 데이터
 8001250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fefb 	bl	8001050 <SPI_TxBuffer>

        SPI_RxByte();  // 더미 CRC 상위
 800125a:	f7ff ff13 	bl	8001084 <SPI_RxByte>
        SPI_RxByte();  // 더미 CRC 하위
 800125e:	f7ff ff11 	bl	8001084 <SPI_RxByte>

        // 4단계: 데이터 응답 토큰 수신
        while (i <= 64)
 8001262:	e00b      	b.n	800127c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8001264:	f7ff ff0e 	bl	8001084 <SPI_RxByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]

            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2b05      	cmp	r3, #5
 8001274:	d006      	beq.n	8001284 <SD_TxDataBlock+0x64>
            i++;
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b40      	cmp	r3, #64	@ 0x40
 8001280:	d9f0      	bls.n	8001264 <SD_TxDataBlock+0x44>
 8001282:	e000      	b.n	8001286 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 8001284:	bf00      	nop
        }

        // 5단계: 바쁨 상태 대기
        Timer1 = 200; // 200ms 타임아웃
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <SD_TxDataBlock+0x9c>)
 8001288:	22c8      	movs	r2, #200	@ 0xc8
 800128a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800128c:	bf00      	nop
 800128e:	f7ff fef9 	bl	8001084 <SPI_RxByte>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <SD_TxDataBlock+0x82>
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <SD_TxDataBlock+0x9c>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f5      	bne.n	800128e <SD_TxDataBlock+0x6e>
    }
    if ((resp & 0x1F) == 0x05) return TRUE;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d101      	bne.n	80012b0 <SD_TxDataBlock+0x90>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <SD_TxDataBlock+0x92>

    return FALSE;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20002598 	.word	0x20002598

080012c0 <SD_SendCmd>:
#endif /* _USE_WRITE */


/* 명령어 전송 함수!*/
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    // 1단계: 카드 준비 대기
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012cc:	f7ff ff04 	bl	80010d8 <SD_ReadyWait>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2bff      	cmp	r3, #255	@ 0xff
 80012d4:	d001      	beq.n	80012da <SD_SendCmd+0x1a>
 80012d6:	23ff      	movs	r3, #255	@ 0xff
 80012d8:	e042      	b.n	8001360 <SD_SendCmd+0xa0>

    // 2단계: 명령어 패킷 전송 (6바이트)
    SPI_TxByte(cmd);                    // 명령어 바이트
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe9d 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   // 인수 [31:24]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0e1b      	lsrs	r3, r3, #24
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe97 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   // 인수 [23:16]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe91 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    // 인수 [15:8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe8b 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           // 인수 [7:0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe86 	bl	800101c <SPI_TxByte>

    // 3단계: CRC 계산 및 전송
    if(cmd == CMD0) crc = 0x95;         // CMD0은 항상 0x95
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b40      	cmp	r3, #64	@ 0x40
 8001314:	d102      	bne.n	800131c <SD_SendCmd+0x5c>
 8001316:	2395      	movs	r3, #149	@ 0x95
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e007      	b.n	800132c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    // CMD8(0x1AA)는 0x87
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b48      	cmp	r3, #72	@ 0x48
 8001320:	d102      	bne.n	8001328 <SD_SendCmd+0x68>
 8001322:	2387      	movs	r3, #135	@ 0x87
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e001      	b.n	800132c <SD_SendCmd+0x6c>
    else crc = 1;                       // 나머지는 더미 CRC
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]

    SPI_TxByte(crc);
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe74 	bl	800101c <SPI_TxByte>

    // 4단계: CMD12 특수 처리
    if (cmd == CMD12) SPI_RxByte();     // STOP_TRANSMISSION 후 더미바이트
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b4c      	cmp	r3, #76	@ 0x4c
 8001338:	d101      	bne.n	800133e <SD_SendCmd+0x7e>
 800133a:	f7ff fea3 	bl	8001084 <SPI_RxByte>

    // 5단계: R1 응답 수신 (최대 10번 시도)
    uint8_t n = 10;
 800133e:	230a      	movs	r3, #10
 8001340:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8001342:	f7ff fe9f 	bl	8001084 <SPI_RxByte>
 8001346:	4603      	mov	r3, r0
 8001348:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);      // MSB가 0이 될 때까지
 800134a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da05      	bge.n	800135e <SD_SendCmd+0x9e>
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	3b01      	subs	r3, #1
 8001356:	73bb      	strb	r3, [r7, #14]
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f1      	bne.n	8001342 <SD_SendCmd+0x82>

    return res;
 800135e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <SD_disk_initialize>:
 * 사용자 정의 diskio.c 함수!
 **************************************/

/* SD 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x14>
 8001378:	2301      	movs	r3, #1
 800137a:	e0d6      	b.n	800152a <SD_disk_initialize+0x1c2>

    // 2단계: 물리적 디스크 존재 확인
    if(Stat & STA_NODISK) return Stat;
 800137c:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <SD_disk_initialize+0x2a>
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	e0cb      	b.n	800152a <SD_disk_initialize+0x1c2>

    // 3단계: 전원 켜기
    SD_PowerOn();
 8001392:	f7ff febb 	bl	800110c <SD_PowerOn>

    // 4단계: 카드 선택
    SELECT();
 8001396:	f7ff fe27 	bl	8000fe8 <SELECT>

    type = 0;  // 카드 타입 초기화
 800139a:	2300      	movs	r3, #0
 800139c:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (SD_SendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 800139e:	2100      	movs	r1, #0
 80013a0:	2040      	movs	r0, #64	@ 0x40
 80013a2:	f7ff ff8d 	bl	80012c0 <SD_SendCmd>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 80a6 	bne.w	80014fa <SD_disk_initialize+0x192>
    {
        Timer1 = 1000;  // 1초 타임아웃
 80013ae:	4b62      	ldr	r3, [pc, #392]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80013b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013b4:	801a      	strh	r2, [r3, #0]

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (SD_SendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 80013b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013ba:	2048      	movs	r0, #72	@ 0x48
 80013bc:	f7ff ff80 	bl	80012c0 <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d158      	bne.n	8001478 <SD_disk_initialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e00c      	b.n	80013e6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 80013cc:	7bfc      	ldrb	r4, [r7, #15]
 80013ce:	f7ff fe59 	bl	8001084 <SPI_RxByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	f104 0310 	add.w	r3, r4, #16
 80013da:	443b      	add	r3, r7
 80013dc:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d9ef      	bls.n	80013cc <SD_disk_initialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 80013ec:	7abb      	ldrb	r3, [r7, #10]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 8083 	bne.w	80014fa <SD_disk_initialize+0x192>
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	2baa      	cmp	r3, #170	@ 0xaa
 80013f8:	d17f      	bne.n	80014fa <SD_disk_initialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013fa:	2100      	movs	r1, #0
 80013fc:	2077      	movs	r0, #119	@ 0x77
 80013fe:	f7ff ff5f 	bl	80012c0 <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d807      	bhi.n	8001418 <SD_disk_initialize+0xb0>
                        SD_SendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 8001408:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800140c:	2069      	movs	r0, #105	@ 0x69
 800140e:	f7ff ff57 	bl	80012c0 <SD_SendCmd>
 8001412:	4603      	mov	r3, r0
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <SD_disk_initialize+0xbc>
                        break;
                } while (Timer1);
 8001418:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <SD_disk_initialize+0x1d0>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1eb      	bne.n	80013fa <SD_disk_initialize+0x92>
 8001422:	e000      	b.n	8001426 <SD_disk_initialize+0xbe>
                        break;
 8001424:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <SD_disk_initialize+0x1d0>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d064      	beq.n	80014fa <SD_disk_initialize+0x192>
 8001430:	2100      	movs	r1, #0
 8001432:	207a      	movs	r0, #122	@ 0x7a
 8001434:	f7ff ff44 	bl	80012c0 <SD_SendCmd>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d15d      	bne.n	80014fa <SD_disk_initialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e00c      	b.n	800145e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8001444:	7bfc      	ldrb	r4, [r7, #15]
 8001446:	f7ff fe1d 	bl	8001084 <SPI_RxByte>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	f104 0310 	add.w	r3, r4, #16
 8001452:	443b      	add	r3, r7
 8001454:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d9ef      	bls.n	8001444 <SD_disk_initialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001464:	7a3b      	ldrb	r3, [r7, #8]
 8001466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_initialize+0x10a>
 800146e:	230c      	movs	r3, #12
 8001470:	e000      	b.n	8001474 <SD_disk_initialize+0x10c>
 8001472:	2304      	movs	r3, #4
 8001474:	73bb      	strb	r3, [r7, #14]
 8001476:	e040      	b.n	80014fa <SD_disk_initialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1)
 8001478:	2100      	movs	r1, #0
 800147a:	2077      	movs	r0, #119	@ 0x77
 800147c:	f7ff ff20 	bl	80012c0 <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d808      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001486:	2100      	movs	r1, #0
 8001488:	2069      	movs	r0, #105	@ 0x69
 800148a:	f7ff ff19 	bl	80012c0 <SD_SendCmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d801      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001494:	2302      	movs	r3, #2
 8001496:	e000      	b.n	800149a <SD_disk_initialize+0x132>
 8001498:	2301      	movs	r3, #1
 800149a:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d10e      	bne.n	80014c0 <SD_disk_initialize+0x158>
                {
                    // SD v1: ACMD41
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014a2:	2100      	movs	r1, #0
 80014a4:	2077      	movs	r0, #119	@ 0x77
 80014a6:	f7ff ff0b 	bl	80012c0 <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d80e      	bhi.n	80014ce <SD_disk_initialize+0x166>
 80014b0:	2100      	movs	r1, #0
 80014b2:	2069      	movs	r0, #105	@ 0x69
 80014b4:	f7ff ff04 	bl	80012c0 <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <SD_disk_initialize+0x166>
                        break;
 80014be:	e00d      	b.n	80014dc <SD_disk_initialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 80014c0:	2100      	movs	r1, #0
 80014c2:	2041      	movs	r0, #65	@ 0x41
 80014c4:	f7ff fefc 	bl	80012c0 <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <SD_disk_initialize+0x172>
                }
            } while (Timer1);
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e1      	bne.n	800149c <SD_disk_initialize+0x134>
 80014d8:	e000      	b.n	80014dc <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 80014da:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SD_disk_initialize+0x18e>
 80014e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ea:	2050      	movs	r0, #80	@ 0x50
 80014ec:	f7ff fee8 	bl	80012c0 <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_initialize+0x192>
                type = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;  // 감지된 카드 타입 저장
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <SD_disk_initialize+0x1d4>)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	7013      	strb	r3, [r2, #0]

    DESELECT();      // 카드 비활성화
 8001500:	f7ff fd7f 	bl	8001002 <DESELECT>
    SPI_RxByte();    // 추가 클럭
 8001504:	f7ff fdbe 	bl	8001084 <SPI_RxByte>

    // 상태 업데이트
    if (type)
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;  // 초기화 완료 플래그 제거
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <SD_disk_initialize+0x1cc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e001      	b.n	8001524 <SD_disk_initialize+0x1bc>
    }
    else
    {
        SD_PowerOff();        // 초기화 실패 시 전원 끄기
 8001520:	f7ff fe36 	bl	8001190 <SD_PowerOff>
    }

    return Stat;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <SD_disk_initialize+0x1cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000
 8001538:	20002598 	.word	0x20002598
 800153c:	20000208 	.word	0x20000208

08001540 <SD_disk_status>:

/* SD 상태 리턴함수! */
DSTATUS SD_disk_status(BYTE drv)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_status+0x14>
 8001550:	2301      	movs	r3, #1
 8001552:	e002      	b.n	800155a <SD_disk_status+0x1a>
    return Stat;
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SD_disk_status+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <SD_disk_read>:

/* 섹터 읽기 함수! */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_read+0x20>
 8001588:	2304      	movs	r3, #4
 800158a:	e051      	b.n	8001630 <SD_disk_read+0xc4>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <SD_disk_read+0xcc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_read+0x32>
 800159a:	2303      	movs	r3, #3
 800159c:	e048      	b.n	8001630 <SD_disk_read+0xc4>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <SD_disk_read+0xd0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <SD_disk_read+0x44>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	607b      	str	r3, [r7, #4]

    SELECT();
 80015b0:	f7ff fd1a 	bl	8000fe8 <SELECT>

    if (count == 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d111      	bne.n	80015de <SD_disk_read+0x72>
    {
        // 단일 블록 읽기
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2051      	movs	r0, #81	@ 0x51
 80015be:	f7ff fe7f 	bl	80012c0 <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <SD_disk_read+0xb0>
 80015c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fdf7 	bl	80011c0 <SD_RxDataBlock>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <SD_disk_read+0xb0>
            count = 0;  // 성공 시 count를 0으로
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e01e      	b.n	800161c <SD_disk_read+0xb0>
    }
    else
    {
        // 다중 블록 읽기
        if (SD_SendCmd(CMD18, sector) == 0)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2052      	movs	r0, #82	@ 0x52
 80015e2:	f7ff fe6d 	bl	80012c0 <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 80015ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fde5 	bl	80011c0 <SD_RxDataBlock>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <SD_disk_read+0xa6>
                buff += 512;  // 다음 블록 버퍼 위치
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001602:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <SD_disk_read+0x80>
 8001610:	e000      	b.n	8001614 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 8001612:	bf00      	nop

            SD_SendCmd(CMD12, 0);  // 전송 중지 명령
 8001614:	2100      	movs	r1, #0
 8001616:	204c      	movs	r0, #76	@ 0x4c
 8001618:	f7ff fe52 	bl	80012c0 <SD_SendCmd>
        }
    }

    DESELECT();
 800161c:	f7ff fcf1 	bl	8001002 <DESELECT>
    SPI_RxByte();
 8001620:	f7ff fd30 	bl	8001084 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000208 	.word	0x20000208

08001640 <SD_disk_write>:
/* 섹터 쓰기 함수! */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <SD_disk_write+0x1c>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <SD_disk_write+0x20>
 800165c:	2304      	movs	r3, #4
 800165e:	e06b      	b.n	8001738 <SD_disk_write+0xf8>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001660:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <SD_disk_write+0x100>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SD_disk_write+0x32>
 800166e:	2303      	movs	r3, #3
 8001670:	e062      	b.n	8001738 <SD_disk_write+0xf8>

    // 3단계: 쓰기 보호 확인
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8001672:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <SD_disk_write+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_write+0x44>
 8001680:	2302      	movs	r3, #2
 8001682:	e059      	b.n	8001738 <SD_disk_write+0xf8>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <SD_disk_write+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <SD_disk_write+0x56>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	607b      	str	r3, [r7, #4]

    SELECT();
 8001696:	f7ff fca7 	bl	8000fe8 <SELECT>

    if (count == 1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d110      	bne.n	80016c2 <SD_disk_write+0x82>
    {
        // 단일 블록 쓰기
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2058      	movs	r0, #88	@ 0x58
 80016a4:	f7ff fe0c 	bl	80012c0 <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13a      	bne.n	8001724 <SD_disk_write+0xe4>
 80016ae:	21fe      	movs	r1, #254	@ 0xfe
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7ff fdb5 	bl	8001220 <SD_TxDataBlock>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <SD_disk_write+0xe4>
            count = 0;  // 성공 시 count를 0으로
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e030      	b.n	8001724 <SD_disk_write+0xe4>
    }
    else
    {
        // 다중 블록 쓰기
        if (CardType & CT_SD1)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <SD_disk_write+0x104>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2077      	movs	r0, #119	@ 0x77
 80016d2:	f7ff fdf5 	bl	80012c0 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2057      	movs	r0, #87	@ 0x57
 80016da:	f7ff fdf1 	bl	80012c0 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2059      	movs	r0, #89	@ 0x59
 80016e2:	f7ff fded 	bl	80012c0 <SD_SendCmd>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ec:	21fc      	movs	r1, #252	@ 0xfc
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fd96 	bl	8001220 <SD_TxDataBlock>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <SD_disk_write+0xd0>
                buff += 512;  // 다음 블록 버퍼 위치
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001700:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <SD_disk_write+0xac>
 800170e:	e000      	b.n	8001712 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001710:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!SD_TxDataBlock(0, 0xFD))
 8001712:	21fd      	movs	r1, #253	@ 0xfd
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fd83 	bl	8001220 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0xe4>
            {
                count = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 8001724:	f7ff fc6d 	bl	8001002 <DESELECT>
    SPI_RxByte();
 8001728:	f7ff fcac 	bl	8001084 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000208 	.word	0x20000208

08001748 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	@ 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SD_disk_ioctl+0x1e>
 8001762:	2304      	movs	r3, #4
 8001764:	e0ad      	b.n	80018c2 <SD_disk_ioctl+0x17a>
    res = RES_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d124      	bne.n	80017bc <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d012      	beq.n	80017a0 <SD_disk_ioctl+0x58>
 800177a:	2b02      	cmp	r3, #2
 800177c:	dc1a      	bgt.n	80017b4 <SD_disk_ioctl+0x6c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SD_disk_ioctl+0x40>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d006      	beq.n	8001794 <SD_disk_ioctl+0x4c>
 8001786:	e015      	b.n	80017b4 <SD_disk_ioctl+0x6c>
        {
        case 0: SD_PowerOff(); res = RES_OK; break;      // 전원 끄기
 8001788:	f7ff fd02 	bl	8001190 <SD_PowerOff>
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001792:	e094      	b.n	80018be <SD_disk_ioctl+0x176>
        case 1: SD_PowerOn(); res = RES_OK; break;       // 전원 켜기
 8001794:	f7ff fcba 	bl	800110c <SD_PowerOn>
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800179e:	e08e      	b.n	80018be <SD_disk_ioctl+0x176>
        case 2: *(ptr + 1) = SD_CheckPower(); res = RES_OK; break; // 전원 상태 확인
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	1c5c      	adds	r4, r3, #1
 80017a4:	f7ff fd00 	bl	80011a8 <SD_CheckPower>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017b2:	e084      	b.n	80018be <SD_disk_ioctl+0x176>
        default: res = RES_PARERR;
 80017b4:	2304      	movs	r3, #4
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ba:	e080      	b.n	80018be <SD_disk_ioctl+0x176>
        }
    }
    else
    {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017bc:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <SD_disk_ioctl+0x184>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SD_disk_ioctl+0x86>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e079      	b.n	80018c2 <SD_disk_ioctl+0x17a>

        SELECT();
 80017ce:	f7ff fc0b 	bl	8000fe8 <SELECT>

        switch (ctrl)
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d05a      	beq.n	800188e <SD_disk_ioctl+0x146>
 80017d8:	2b02      	cmp	r3, #2
 80017da:	dc6c      	bgt.n	80018b6 <SD_disk_ioctl+0x16e>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d05e      	beq.n	800189e <SD_disk_ioctl+0x156>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d168      	bne.n	80018b6 <SD_disk_ioctl+0x16e>
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017e4:	2100      	movs	r1, #0
 80017e6:	2049      	movs	r0, #73	@ 0x49
 80017e8:	f7ff fd6a 	bl	80012c0 <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d15e      	bne.n	80018b0 <SD_disk_ioctl+0x168>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2110      	movs	r1, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fce1 	bl	80011c0 <SD_RxDataBlock>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d055      	beq.n	80018b0 <SD_disk_ioctl+0x168>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 8001804:	7a3b      	ldrb	r3, [r7, #8]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10f      	bne.n	800182e <SD_disk_ioctl+0xe6>
                {
                    // FIX 5: SDv2 CSD 파싱 수정
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8001816:	7c3b      	ldrb	r3, [r7, #16]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4313      	orrs	r3, r2
 800181c:	7c7a      	ldrb	r2, [r7, #17]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;  // (C_SIZE+1) * 1024
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	3301      	adds	r3, #1
 8001826:	029a      	lsls	r2, r3, #10
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e02b      	b.n	8001886 <SD_disk_ioctl+0x13e>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	b2da      	uxtb	r2, r3
 8001836:	7cbb      	ldrb	r3, [r7, #18]
 8001838:	09db      	lsrs	r3, r3, #7
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b2da      	uxtb	r2, r3
 8001840:	7c7b      	ldrb	r3, [r7, #17]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0306 	and.w	r3, r3, #6
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3302      	adds	r3, #2
 8001852:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001854:	7c3b      	ldrb	r3, [r7, #16]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29a      	uxth	r2, r3
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	b29b      	uxth	r3, r3
 800186c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800187a:	8bba      	ldrh	r2, [r7, #28]
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	3b09      	subs	r3, #9
 8001880:	409a      	lsls	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800188c:	e010      	b.n	80018b0 <SD_disk_ioctl+0x168>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001894:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800189c:	e00b      	b.n	80018b6 <SD_disk_ioctl+0x16e>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800189e:	f7ff fc1b 	bl	80010d8 <SD_ReadyWait>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2bff      	cmp	r3, #255	@ 0xff
 80018a6:	d105      	bne.n	80018b4 <SD_disk_ioctl+0x16c>
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80018ae:	e001      	b.n	80018b4 <SD_disk_ioctl+0x16c>
            break;
 80018b0:	bf00      	nop
 80018b2:	e000      	b.n	80018b6 <SD_disk_ioctl+0x16e>
            break;
 80018b4:	bf00      	nop

        // 추가 정보들...
        }

        DESELECT();
 80018b6:	f7ff fba4 	bl	8001002 <DESELECT>
        SPI_RxByte();
 80018ba:	f7ff fbe3 	bl	8001084 <SPI_RxByte>
    }

    return res;
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	372c      	adds	r7, #44	@ 0x2c
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b3e      	ldr	r3, [pc, #248]	@ (80019e0 <MX_GPIO_Init+0x110>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	4a3d      	ldr	r2, [pc, #244]	@ (80019e0 <MX_GPIO_Init+0x110>)
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <MX_GPIO_Init+0x110>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <MX_GPIO_Init+0x110>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <MX_GPIO_Init+0x110>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <MX_GPIO_Init+0x110>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <MX_GPIO_Init+0x110>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <MX_GPIO_Init+0x110>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <MX_GPIO_Init+0x110>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2110      	movs	r1, #16
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f002 fbc5 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001940:	4828      	ldr	r0, [pc, #160]	@ (80019e4 <MX_GPIO_Init+0x114>)
 8001942:	f002 fbbf 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800194c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001950:	f002 fbb8 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <MX_GPIO_Init+0x114>)
 800195a:	f002 fbb3 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800195e:	2310      	movs	r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001978:	f002 fa0a 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800197c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4619      	mov	r1, r3
 8001994:	4813      	ldr	r0, [pc, #76]	@ (80019e4 <MX_GPIO_Init+0x114>)
 8001996:	f002 f9fb 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 800199a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800199e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b6:	f002 f9eb 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80019ba:	2310      	movs	r3, #16
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4619      	mov	r1, r3
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <MX_GPIO_Init+0x114>)
 80019d2:	f002 f9dd 	bl	8003d90 <HAL_GPIO_Init>

}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48000400 	.word	0x48000400

080019e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80019f0:	1d39      	adds	r1, r7, #4
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <__io_putchar+0x20>)
 80019f8:	f004 f942 	bl	8005c80 <HAL_UART_Transmit>
	return ch;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200048d4 	.word	0x200048d4

08001a0c <SD_IsCardDetected>:

/* SD카드 감지 함수 */
uint8_t SD_IsCardDetected(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	// CD 핀이 LOW면 카드 삽입됨
	return (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_RESET);
 8001a10:	2110      	movs	r1, #16
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <SD_IsCardDetected+0x1c>)
 8001a14:	f002 fb3e 	bl	8004094 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	48000400 	.word	0x48000400

08001a2c <SDMount>:

/* SD카드 마운트 함수 */
void SDMount(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af02      	add	r7, sp, #8
	fres = f_mount(&fs, "", 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	4914      	ldr	r1, [pc, #80]	@ (8001a88 <SDMount+0x5c>)
 8001a36:	4815      	ldr	r0, [pc, #84]	@ (8001a8c <SDMount+0x60>)
 8001a38:	f008 fc3a 	bl	800a2b0 <f_mount>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <SDMount+0x64>)
 8001a42:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <SDMount+0x64>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d113      	bne.n	8001a74 <SDMount+0x48>
		printf("SD Card mounted Successfully!\r\n");
 8001a4c:	4811      	ldr	r0, [pc, #68]	@ (8001a94 <SDMount+0x68>)
 8001a4e:	f00a fc11 	bl	800c274 <puts>
		oled_drawString(30, 0, "                  ", &font_07x10, 15); // 화면 위쪽
 8001a52:	230f      	movs	r3, #15
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <SDMount+0x6c>)
 8001a58:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <SDMount+0x70>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	201e      	movs	r0, #30
 8001a5e:	f001 f8f1 	bl	8002c44 <oled_drawString>
		oled_drawString(30, 0, "SD Card Mounted", &font_07x10, 15); // 화면 위쪽
 8001a62:	230f      	movs	r3, #15
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <SDMount+0x6c>)
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <SDMount+0x74>)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	201e      	movs	r0, #30
 8001a6e:	f001 f8e9 	bl	8002c44 <oled_drawString>
	} else if (fres != FR_OK) {
		printf("SD Card mount error!!\r\n");
	}
}
 8001a72:	e006      	b.n	8001a82 <SDMount+0x56>
	} else if (fres != FR_OK) {
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <SDMount+0x64>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <SDMount+0x56>
		printf("SD Card mount error!!\r\n");
 8001a7c:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <SDMount+0x78>)
 8001a7e:	f00a fbf9 	bl	800c274 <puts>
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800e3c0 	.word	0x0800e3c0
 8001a8c:	200025a0 	.word	0x200025a0
 8001a90:	20003718 	.word	0x20003718
 8001a94:	0800e3c4 	.word	0x0800e3c4
 8001a98:	0800f384 	.word	0x0800f384
 8001a9c:	0800e3e4 	.word	0x0800e3e4
 8001aa0:	0800e3f8 	.word	0x0800e3f8
 8001aa4:	0800e408 	.word	0x0800e408

08001aa8 <SDUnmount>:
/* SD카드 마운트 해제 함수 */
void SDUnmount(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af02      	add	r7, sp, #8
	fres = f_mount(NULL, "", 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4914      	ldr	r1, [pc, #80]	@ (8001b04 <SDUnmount+0x5c>)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f008 fbfc 	bl	800a2b0 <f_mount>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <SDUnmount+0x60>)
 8001abe:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <SDUnmount+0x60>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <SDUnmount+0x48>
		printf("SD Card Un-mounted Successfully!\r\n");
 8001ac8:	4810      	ldr	r0, [pc, #64]	@ (8001b0c <SDUnmount+0x64>)
 8001aca:	f00a fbd3 	bl	800c274 <puts>
		oled_drawString(30, 0, "                  ", &font_07x10, 15); // 화면 위쪽
 8001ace:	230f      	movs	r3, #15
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <SDUnmount+0x68>)
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <SDUnmount+0x6c>)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201e      	movs	r0, #30
 8001ada:	f001 f8b3 	bl	8002c44 <oled_drawString>
		oled_drawString(30, 0, "SD Card Un-Mounted", &font_07x10, 15); // 화면 위쪽
 8001ade:	230f      	movs	r3, #15
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <SDUnmount+0x68>)
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <SDUnmount+0x70>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	201e      	movs	r0, #30
 8001aea:	f001 f8ab 	bl	8002c44 <oled_drawString>
	} else if (fres != FR_OK) {
		printf("SD Card Un-mount error!!\r\n");
	}
}
 8001aee:	e006      	b.n	8001afe <SDUnmount+0x56>
	} else if (fres != FR_OK) {
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <SDUnmount+0x60>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <SDUnmount+0x56>
		printf("SD Card Un-mount error!!\r\n");
 8001af8:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <SDUnmount+0x74>)
 8001afa:	f00a fbbb 	bl	800c274 <puts>
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	0800e3c0 	.word	0x0800e3c0
 8001b08:	20003718 	.word	0x20003718
 8001b0c:	0800e420 	.word	0x0800e420
 8001b10:	0800f384 	.word	0x0800f384
 8001b14:	0800e3e4 	.word	0x0800e3e4
 8001b18:	0800e444 	.word	0x0800e444
 8001b1c:	0800e458 	.word	0x0800e458

08001b20 <OpenFile>:

void OpenFile(char *fileName) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	6078      	str	r0, [r7, #4]
	if (closeFlag == 0) {
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <OpenFile+0xa4>)
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <OpenFile+0x1a>
		printf("File already open! Close it first.\r\n");
 8001b32:	4825      	ldr	r0, [pc, #148]	@ (8001bc8 <OpenFile+0xa8>)
 8001b34:	f00a fb9e 	bl	800c274 <puts>
		return;
 8001b38:	e040      	b.n	8001bbc <OpenFile+0x9c>
	}

	// 파일이 있으면 열고, 없으면 생성하여 append 모드로 사용
	fres = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001b3a:	2213      	movs	r2, #19
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4823      	ldr	r0, [pc, #140]	@ (8001bcc <OpenFile+0xac>)
 8001b40:	f008 fbfc 	bl	800a33c <f_open>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <OpenFile+0xb0>)
 8001b4a:	701a      	strb	r2, [r3, #0]

	if (fres == FR_OK) {
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <OpenFile+0xb0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d128      	bne.n	8001ba6 <OpenFile+0x86>
		// 파일 끝으로 이동 (기존 내용 보존하며 append)
		f_lseek(&fil, f_size(&fil));
 8001b54:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <OpenFile+0xac>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <OpenFile+0xac>)
 8001b5c:	f009 f951 	bl	800ae02 <f_lseek>

		printf("File '%s' ready for writing!\r\n", fileName);
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	481c      	ldr	r0, [pc, #112]	@ (8001bd4 <OpenFile+0xb4>)
 8001b64:	f00a fb1e 	bl	800c1a4 <iprintf>
		//====================================================================================
		oled_drawString(30, 20, "                           ", &font_07x10, 15); // 화면 위쪽
 8001b68:	230f      	movs	r3, #15
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <OpenFile+0xb8>)
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <OpenFile+0xbc>)
 8001b70:	2114      	movs	r1, #20
 8001b72:	201e      	movs	r0, #30
 8001b74:	f001 f866 	bl	8002c44 <oled_drawString>
		oled_drawString(30, 20, "File Ready!!", &font_07x10, 15); // 화면 위쪽
 8001b78:	230f      	movs	r3, #15
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <OpenFile+0xb8>)
 8001b7e:	4a18      	ldr	r2, [pc, #96]	@ (8001be0 <OpenFile+0xc0>)
 8001b80:	2114      	movs	r1, #20
 8001b82:	201e      	movs	r0, #30
 8001b84:	f001 f85e 	bl	8002c44 <oled_drawString>
		//====================================================================================
		if (f_size(&fil) > 0) {
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <OpenFile+0xac>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <OpenFile+0x7e>
			printf("File size: %lu bytes\r\n", f_size(&fil));
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <OpenFile+0xac>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <OpenFile+0xc4>)
 8001b98:	f00a fb04 	bl	800c1a4 <iprintf>
 8001b9c:	e00b      	b.n	8001bb6 <OpenFile+0x96>
		} else {
			printf("New file created.\r\n");
 8001b9e:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <OpenFile+0xc8>)
 8001ba0:	f00a fb68 	bl	800c274 <puts>
 8001ba4:	e007      	b.n	8001bb6 <OpenFile+0x96>
		}
	} else {
		printf("Failed to open/create file '%s'. Error: %d\r\n", fileName,
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <OpenFile+0xb0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	480f      	ldr	r0, [pc, #60]	@ (8001bec <OpenFile+0xcc>)
 8001bb0:	f00a faf8 	bl	800c1a4 <iprintf>
				fres);
		return;
 8001bb4:	e002      	b.n	8001bbc <OpenFile+0x9c>
	}

	closeFlag = 0;
 8001bb6:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <OpenFile+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
}
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000001 	.word	0x20000001
 8001bc8:	0800e474 	.word	0x0800e474
 8001bcc:	2000371c 	.word	0x2000371c
 8001bd0:	20003718 	.word	0x20003718
 8001bd4:	0800e498 	.word	0x0800e498
 8001bd8:	0800f384 	.word	0x0800f384
 8001bdc:	0800e4b8 	.word	0x0800e4b8
 8001be0:	0800e4d4 	.word	0x0800e4d4
 8001be4:	0800e4e4 	.word	0x0800e4e4
 8001be8:	0800e4fc 	.word	0x0800e4fc
 8001bec:	0800e510 	.word	0x0800e510

08001bf0 <CloseFile>:

void CloseFile(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af02      	add	r7, sp, #8
	fres = f_close(&fil);
 8001bf6:	4816      	ldr	r0, [pc, #88]	@ (8001c50 <CloseFile+0x60>)
 8001bf8:	f009 f8d9 	bl	800adae <f_close>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <CloseFile+0x64>)
 8001c02:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <CloseFile+0x64>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <CloseFile+0x44>
		printf("File Closed !\r\n");
 8001c0c:	4812      	ldr	r0, [pc, #72]	@ (8001c58 <CloseFile+0x68>)
 8001c0e:	f00a fb31 	bl	800c274 <puts>
		//====================================================================================
		oled_drawString(30, 20, "                           ", &font_07x10, 15); // 화면 위쪽
 8001c12:	230f      	movs	r3, #15
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <CloseFile+0x6c>)
 8001c18:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <CloseFile+0x70>)
 8001c1a:	2114      	movs	r1, #20
 8001c1c:	201e      	movs	r0, #30
 8001c1e:	f001 f811 	bl	8002c44 <oled_drawString>
		oled_drawString(30, 20, "File Closed!!", &font_07x10, 15); // 화면 위쪽
 8001c22:	230f      	movs	r3, #15
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <CloseFile+0x6c>)
 8001c28:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <CloseFile+0x74>)
 8001c2a:	2114      	movs	r1, #20
 8001c2c:	201e      	movs	r0, #30
 8001c2e:	f001 f809 	bl	8002c44 <oled_drawString>
 8001c32:	e006      	b.n	8001c42 <CloseFile+0x52>
		//====================================================================================
	} else if (fres != FR_OK) {
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <CloseFile+0x64>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <CloseFile+0x52>
		printf("File Close Failed... \r\n");
 8001c3c:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <CloseFile+0x78>)
 8001c3e:	f00a fb19 	bl	800c274 <puts>
	}
	closeFlag = 1;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <CloseFile+0x7c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000371c 	.word	0x2000371c
 8001c54:	20003718 	.word	0x20003718
 8001c58:	0800e540 	.word	0x0800e540
 8001c5c:	0800f384 	.word	0x0800f384
 8001c60:	0800e4b8 	.word	0x0800e4b8
 8001c64:	0800e550 	.word	0x0800e550
 8001c68:	0800e560 	.word	0x0800e560
 8001c6c:	20000001 	.word	0x20000001

08001c70 <CheckSize>:

void CheckSize(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b09a      	sub	sp, #104	@ 0x68
 8001c74:	af00      	add	r7, sp, #0

	fres = f_getfree("", &fre_clust, &pfs);
 8001c76:	4a2e      	ldr	r2, [pc, #184]	@ (8001d30 <CheckSize+0xc0>)
 8001c78:	492e      	ldr	r1, [pc, #184]	@ (8001d34 <CheckSize+0xc4>)
 8001c7a:	482f      	ldr	r0, [pc, #188]	@ (8001d38 <CheckSize+0xc8>)
 8001c7c:	f009 fae5 	bl	800b24a <f_getfree>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <CheckSize+0xcc>)
 8001c86:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c88:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <CheckSize+0xc0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	3b02      	subs	r3, #2
 8001c90:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <CheckSize+0xc0>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	8952      	ldrh	r2, [r2, #10]
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc6a 	bl	8000574 <__aeabi_ui2d>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <CheckSize+0xd0>)
 8001ca6:	f7fe fcdf 	bl	8000668 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ffb1 	bl	8000c18 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <CheckSize+0xd4>)
 8001cba:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) ((fre_clust * pfs->csize * 0.5));
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <CheckSize+0xc0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	895b      	ldrh	r3, [r3, #10]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <CheckSize+0xc4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc51 	bl	8000574 <__aeabi_ui2d>
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <CheckSize+0xd0>)
 8001cd8:	f7fe fcc6 	bl	8000668 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff98 	bl	8000c18 <__aeabi_d2uiz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <CheckSize+0xd8>)
 8001cec:	6013      	str	r3, [r2, #0]
	char mSize[100];
	sprintf(mSize, "%lu", freeSpace);
 8001cee:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <CheckSize+0xd8>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4915      	ldr	r1, [pc, #84]	@ (8001d4c <CheckSize+0xdc>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00a fac4 	bl	800c284 <siprintf>
	if (fres == FR_OK) {
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <CheckSize+0xcc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <CheckSize+0xaa>
		printf("The free Space is : ");
 8001d04:	4812      	ldr	r0, [pc, #72]	@ (8001d50 <CheckSize+0xe0>)
 8001d06:	f00a fa4d 	bl	800c1a4 <iprintf>
		printf(mSize);
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00a fa49 	bl	800c1a4 <iprintf>
		printf("\r\n");
 8001d12:	4810      	ldr	r0, [pc, #64]	@ (8001d54 <CheckSize+0xe4>)
 8001d14:	f00a faae 	bl	800c274 <puts>
	} else if (fres != FR_OK) {
		printf("The free Space could not be determined!\r\n");
	}
}
 8001d18:	e006      	b.n	8001d28 <CheckSize+0xb8>
	} else if (fres != FR_OK) {
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <CheckSize+0xcc>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <CheckSize+0xb8>
		printf("The free Space could not be determined!\r\n");
 8001d22:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <CheckSize+0xe8>)
 8001d24:	f00a faa6 	bl	800c274 <puts>
}
 8001d28:	bf00      	nop
 8001d2a:	3768      	adds	r7, #104	@ 0x68
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200036b0 	.word	0x200036b0
 8001d34:	2000259c 	.word	0x2000259c
 8001d38:	0800e3c0 	.word	0x0800e3c0
 8001d3c:	20003718 	.word	0x20003718
 8001d40:	3fe00000 	.word	0x3fe00000
 8001d44:	200035d8 	.word	0x200035d8
 8001d48:	200036ac 	.word	0x200036ac
 8001d4c:	0800e578 	.word	0x0800e578
 8001d50:	0800e57c 	.word	0x0800e57c
 8001d54:	0800e594 	.word	0x0800e594
 8001d58:	0800e598 	.word	0x0800e598

08001d5c <WriteFile>:

void WriteFile(char *text) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	if (closeFlag) {
 8001d64:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <WriteFile+0x8c>)
 8001d66:	f993 3000 	ldrsb.w	r3, [r3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <WriteFile+0x1a>
		printf("No file is open! Use 'open <filename>' first.\r\n");
 8001d6e:	481f      	ldr	r0, [pc, #124]	@ (8001dec <WriteFile+0x90>)
 8001d70:	f00a fa80 	bl	800c274 <puts>
		return;
 8001d74:	e034      	b.n	8001de0 <WriteFile+0x84>
	}

	// 파일 끝으로 이동 (append)
	fres = f_lseek(&fil, f_size(&fil));
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <WriteFile+0x94>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481c      	ldr	r0, [pc, #112]	@ (8001df0 <WriteFile+0x94>)
 8001d7e:	f009 f840 	bl	800ae02 <f_lseek>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <WriteFile+0x98>)
 8001d88:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <WriteFile+0x98>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <WriteFile+0x3e>
		printf("Can't move to end of file\r\n");
 8001d92:	4819      	ldr	r0, [pc, #100]	@ (8001df8 <WriteFile+0x9c>)
 8001d94:	f00a fa6e 	bl	800c274 <puts>
		return;
 8001d98:	e022      	b.n	8001de0 <WriteFile+0x84>
	}

	sprintf(buffer, "%s\r\n", text);
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4917      	ldr	r1, [pc, #92]	@ (8001dfc <WriteFile+0xa0>)
 8001d9e:	4818      	ldr	r0, [pc, #96]	@ (8001e00 <WriteFile+0xa4>)
 8001da0:	f00a fa70 	bl	800c284 <siprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bw);
 8001da4:	4816      	ldr	r0, [pc, #88]	@ (8001e00 <WriteFile+0xa4>)
 8001da6:	f7fe fa9b 	bl	80002e0 <strlen>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <WriteFile+0xa8>)
 8001dae:	4914      	ldr	r1, [pc, #80]	@ (8001e00 <WriteFile+0xa4>)
 8001db0:	480f      	ldr	r0, [pc, #60]	@ (8001df0 <WriteFile+0x94>)
 8001db2:	f008 fdea 	bl	800a98a <f_write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <WriteFile+0x98>)
 8001dbc:	701a      	strb	r2, [r3, #0]

	if (fres == FR_OK) {
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <WriteFile+0x98>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <WriteFile+0x7e>
		printf("Writing Complete! %lu bytes written.\r\n", bw);
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <WriteFile+0xa8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480e      	ldr	r0, [pc, #56]	@ (8001e08 <WriteFile+0xac>)
 8001dce:	f00a f9e9 	bl	800c1a4 <iprintf>
		f_sync(&fil);  // 즉시 저장
 8001dd2:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <WriteFile+0x94>)
 8001dd4:	f008 ff6d 	bl	800acb2 <f_sync>
 8001dd8:	e002      	b.n	8001de0 <WriteFile+0x84>
	} else {
		printf("Writing Failed\r\n");
 8001dda:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <WriteFile+0xb0>)
 8001ddc:	f00a fa4a 	bl	800c274 <puts>
	}
}
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000001 	.word	0x20000001
 8001dec:	0800e5c4 	.word	0x0800e5c4
 8001df0:	2000371c 	.word	0x2000371c
 8001df4:	20003718 	.word	0x20003718
 8001df8:	0800e5f4 	.word	0x0800e5f4
 8001dfc:	0800e610 	.word	0x0800e610
 8001e00:	200035e0 	.word	0x200035e0
 8001e04:	200036a8 	.word	0x200036a8
 8001e08:	0800e618 	.word	0x0800e618
 8001e0c:	0800e640 	.word	0x0800e640

08001e10 <ReadFile>:

void ReadFile(char *fileName) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// 현재 열린 파일이 있으면 닫기
	if (closeFlag == 0)
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <ReadFile+0xc0>)
 8001e1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <ReadFile+0x16>
		CloseFile();
 8001e22:	f7ff fee5 	bl	8001bf0 <CloseFile>

	fres = f_open(&fil, fileName, FA_READ);
 8001e26:	2201      	movs	r2, #1
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	482a      	ldr	r0, [pc, #168]	@ (8001ed4 <ReadFile+0xc4>)
 8001e2c:	f008 fa86 	bl	800a33c <f_open>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <ReadFile+0xc8>)
 8001e36:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <ReadFile+0xc8>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d117      	bne.n	8001e70 <ReadFile+0x60>
		printf("File '%s' opened for reading.\r\n", fileName);
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4826      	ldr	r0, [pc, #152]	@ (8001edc <ReadFile+0xcc>)
 8001e44:	f00a f9ae 	bl	800c1a4 <iprintf>
		printf("Failed to open file '%s' for reading!\r\n", fileName);
		return;
	}

	// 파일 전체 읽기
	memset(buffer, 0, sizeof(buffer));
 8001e48:	2264      	movs	r2, #100	@ 0x64
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4824      	ldr	r0, [pc, #144]	@ (8001ee0 <ReadFile+0xd0>)
 8001e4e:	f00a fb13 	bl	800c478 <memset>
	fres = f_read(&fil, buffer, sizeof(buffer) - 1, &br);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <ReadFile+0xd4>)
 8001e54:	2263      	movs	r2, #99	@ 0x63
 8001e56:	4922      	ldr	r1, [pc, #136]	@ (8001ee0 <ReadFile+0xd0>)
 8001e58:	481e      	ldr	r0, [pc, #120]	@ (8001ed4 <ReadFile+0xc4>)
 8001e5a:	f008 fc37 	bl	800a6cc <f_read>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <ReadFile+0xc8>)
 8001e64:	701a      	strb	r2, [r3, #0]

	if (fres == FR_OK && br > 0) {
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <ReadFile+0xc8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d126      	bne.n	8001ebc <ReadFile+0xac>
 8001e6e:	e004      	b.n	8001e7a <ReadFile+0x6a>
		printf("Failed to open file '%s' for reading!\r\n", fileName);
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	481d      	ldr	r0, [pc, #116]	@ (8001ee8 <ReadFile+0xd8>)
 8001e74:	f00a f996 	bl	800c1a4 <iprintf>
		return;
 8001e78:	e026      	b.n	8001ec8 <ReadFile+0xb8>
	if (fres == FR_OK && br > 0) {
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <ReadFile+0xd4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01c      	beq.n	8001ebc <ReadFile+0xac>
		printf("-----------FILE CONTENT----------\r\n");
 8001e82:	481a      	ldr	r0, [pc, #104]	@ (8001eec <ReadFile+0xdc>)
 8001e84:	f00a f9f6 	bl	800c274 <puts>
		printf("%s", buffer);
 8001e88:	4915      	ldr	r1, [pc, #84]	@ (8001ee0 <ReadFile+0xd0>)
 8001e8a:	4819      	ldr	r0, [pc, #100]	@ (8001ef0 <ReadFile+0xe0>)
 8001e8c:	f00a f98a 	bl	800c1a4 <iprintf>
		if (buffer[strlen(buffer) - 1] != '\n')
 8001e90:	4813      	ldr	r0, [pc, #76]	@ (8001ee0 <ReadFile+0xd0>)
 8001e92:	f7fe fa25 	bl	80002e0 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <ReadFile+0xd0>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d002      	beq.n	8001ea8 <ReadFile+0x98>
			printf("\r\n");
 8001ea2:	4814      	ldr	r0, [pc, #80]	@ (8001ef4 <ReadFile+0xe4>)
 8001ea4:	f00a f9e6 	bl	800c274 <puts>
		printf("-----------END OF FILE-----------\r\n");
 8001ea8:	4813      	ldr	r0, [pc, #76]	@ (8001ef8 <ReadFile+0xe8>)
 8001eaa:	f00a f9e3 	bl	800c274 <puts>
		printf("%lu bytes read.\r\n", br);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <ReadFile+0xd4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4811      	ldr	r0, [pc, #68]	@ (8001efc <ReadFile+0xec>)
 8001eb6:	f00a f975 	bl	800c1a4 <iprintf>
 8001eba:	e002      	b.n	8001ec2 <ReadFile+0xb2>
	} else {
		printf("File is empty or read failed!\r\n");
 8001ebc:	4810      	ldr	r0, [pc, #64]	@ (8001f00 <ReadFile+0xf0>)
 8001ebe:	f00a f9d9 	bl	800c274 <puts>
	}

	f_close(&fil);  // 읽기 후 파일 닫기
 8001ec2:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <ReadFile+0xc4>)
 8001ec4:	f008 ff73 	bl	800adae <f_close>
}
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000001 	.word	0x20000001
 8001ed4:	2000371c 	.word	0x2000371c
 8001ed8:	20003718 	.word	0x20003718
 8001edc:	0800e650 	.word	0x0800e650
 8001ee0:	200035e0 	.word	0x200035e0
 8001ee4:	200035dc 	.word	0x200035dc
 8001ee8:	0800e670 	.word	0x0800e670
 8001eec:	0800e698 	.word	0x0800e698
 8001ef0:	0800e6bc 	.word	0x0800e6bc
 8001ef4:	0800e594 	.word	0x0800e594
 8001ef8:	0800e6c0 	.word	0x0800e6c0
 8001efc:	0800e6e4 	.word	0x0800e6e4
 8001f00:	0800e6f8 	.word	0x0800e6f8

08001f04 <ProcessCommand>:

// ========== 인터페이스 함수 =================

// 명령어 처리 함수
void ProcessCommand(char *command)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	printf("Command received: %s\r\n", command);
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4848      	ldr	r0, [pc, #288]	@ (8002030 <ProcessCommand+0x12c>)
 8001f10:	f00a f948 	bl	800c1a4 <iprintf>

	if (strcmp(command, "mount") == 0)
 8001f14:	4947      	ldr	r1, [pc, #284]	@ (8002034 <ProcessCommand+0x130>)
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe f982 	bl	8000220 <strcmp>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <ProcessCommand+0x24>
	{
		SDMount();
 8001f22:	f7ff fd83 	bl	8001a2c <SDMount>
		OLED_setCameraMode();
	} else {
		printf("Unknown command: %s\r\n", command);
		printf("Type 'help' for available commands.\r\n");
	}
}
 8001f26:	e07e      	b.n	8002026 <ProcessCommand+0x122>
	else if (strcmp(command, "unmount") == 0)
 8001f28:	4943      	ldr	r1, [pc, #268]	@ (8002038 <ProcessCommand+0x134>)
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe f978 	bl	8000220 <strcmp>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <ProcessCommand+0x38>
		SDUnmount();
 8001f36:	f7ff fdb7 	bl	8001aa8 <SDUnmount>
}
 8001f3a:	e074      	b.n	8002026 <ProcessCommand+0x122>
	else if (strncmp(command, "open ", 5) == 0)
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	493f      	ldr	r1, [pc, #252]	@ (800203c <ProcessCommand+0x138>)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00a faa1 	bl	800c488 <strncmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <ProcessCommand+0x56>
		char *filename = command + 5;  // "open " 다음 부분
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3305      	adds	r3, #5
 8001f50:	60bb      	str	r3, [r7, #8]
		OpenFile(filename);
 8001f52:	68b8      	ldr	r0, [r7, #8]
 8001f54:	f7ff fde4 	bl	8001b20 <OpenFile>
}
 8001f58:	e065      	b.n	8002026 <ProcessCommand+0x122>
	else if (strcmp(command, "close") == 0)
 8001f5a:	4939      	ldr	r1, [pc, #228]	@ (8002040 <ProcessCommand+0x13c>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe f95f 	bl	8000220 <strcmp>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <ProcessCommand+0x6a>
		CloseFile();
 8001f68:	f7ff fe42 	bl	8001bf0 <CloseFile>
}
 8001f6c:	e05b      	b.n	8002026 <ProcessCommand+0x122>
	else if (strncmp(command, "write ", 6) == 0)
 8001f6e:	2206      	movs	r2, #6
 8001f70:	4934      	ldr	r1, [pc, #208]	@ (8002044 <ProcessCommand+0x140>)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f00a fa88 	bl	800c488 <strncmp>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <ProcessCommand+0x88>
		char *text = command + 6;  // "write " 다음 부분
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3306      	adds	r3, #6
 8001f82:	60fb      	str	r3, [r7, #12]
		WriteFile(text);
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fee9 	bl	8001d5c <WriteFile>
}
 8001f8a:	e04c      	b.n	8002026 <ProcessCommand+0x122>
	} else if (strncmp(command, "read ", 5) == 0) {
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	492e      	ldr	r1, [pc, #184]	@ (8002048 <ProcessCommand+0x144>)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f00a fa79 	bl	800c488 <strncmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <ProcessCommand+0xa6>
		char *filename = command + 5;  // "read " 다음 부분
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3305      	adds	r3, #5
 8001fa0:	613b      	str	r3, [r7, #16]
		ReadFile(filename);
 8001fa2:	6938      	ldr	r0, [r7, #16]
 8001fa4:	f7ff ff34 	bl	8001e10 <ReadFile>
}
 8001fa8:	e03d      	b.n	8002026 <ProcessCommand+0x122>
	} else if (strncmp(command, "image ", 6) == 0) {  // 새로운 명령어 추가
 8001faa:	2206      	movs	r2, #6
 8001fac:	4927      	ldr	r1, [pc, #156]	@ (800204c <ProcessCommand+0x148>)
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f00a fa6a 	bl	800c488 <strncmp>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <ProcessCommand+0xc4>
        char *filename = command + 6;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3306      	adds	r3, #6
 8001fbe:	617b      	str	r3, [r7, #20]
        DisplayImageFromSD_Enhanced(filename);
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f000 f88d 	bl	80020e0 <DisplayImageFromSD_Enhanced>
}
 8001fc6:	e02e      	b.n	8002026 <ProcessCommand+0x122>
	} else if (strcmp(command, "size") == 0) {
 8001fc8:	4921      	ldr	r1, [pc, #132]	@ (8002050 <ProcessCommand+0x14c>)
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe f928 	bl	8000220 <strcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <ProcessCommand+0xd8>
		CheckSize();
 8001fd6:	f7ff fe4b 	bl	8001c70 <CheckSize>
}
 8001fda:	e024      	b.n	8002026 <ProcessCommand+0x122>
	} else if (strcmp(command, "help") == 0) {
 8001fdc:	491d      	ldr	r1, [pc, #116]	@ (8002054 <ProcessCommand+0x150>)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe f91e 	bl	8000220 <strcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <ProcessCommand+0xec>
		ShowHelp();
 8001fea:	f000 f83d 	bl	8002068 <ShowHelp>
}
 8001fee:	e01a      	b.n	8002026 <ProcessCommand+0x122>
	} else if (strcmp(command, "antiflicker") == 0) {
 8001ff0:	4919      	ldr	r1, [pc, #100]	@ (8002058 <ProcessCommand+0x154>)
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe f914 	bl	8000220 <strcmp>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <ProcessCommand+0x100>
	    OLED_setAntiFlicker();
 8001ffe:	f000 fecf 	bl	8002da0 <OLED_setAntiFlicker>
}
 8002002:	e010      	b.n	8002026 <ProcessCommand+0x122>
	else if (strcmp(command, "camera") == 0)
 8002004:	4915      	ldr	r1, [pc, #84]	@ (800205c <ProcessCommand+0x158>)
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe f90a 	bl	8000220 <strcmp>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <ProcessCommand+0x114>
		OLED_setCameraMode();
 8002012:	f000 fee5 	bl	8002de0 <OLED_setCameraMode>
}
 8002016:	e006      	b.n	8002026 <ProcessCommand+0x122>
		printf("Unknown command: %s\r\n", command);
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4811      	ldr	r0, [pc, #68]	@ (8002060 <ProcessCommand+0x15c>)
 800201c:	f00a f8c2 	bl	800c1a4 <iprintf>
		printf("Type 'help' for available commands.\r\n");
 8002020:	4810      	ldr	r0, [pc, #64]	@ (8002064 <ProcessCommand+0x160>)
 8002022:	f00a f927 	bl	800c274 <puts>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800e718 	.word	0x0800e718
 8002034:	0800e730 	.word	0x0800e730
 8002038:	0800e738 	.word	0x0800e738
 800203c:	0800e740 	.word	0x0800e740
 8002040:	0800e748 	.word	0x0800e748
 8002044:	0800e750 	.word	0x0800e750
 8002048:	0800e758 	.word	0x0800e758
 800204c:	0800e760 	.word	0x0800e760
 8002050:	0800e768 	.word	0x0800e768
 8002054:	0800e770 	.word	0x0800e770
 8002058:	0800e778 	.word	0x0800e778
 800205c:	0800e784 	.word	0x0800e784
 8002060:	0800e78c 	.word	0x0800e78c
 8002064:	0800e7a4 	.word	0x0800e7a4

08002068 <ShowHelp>:

// 도움말 함수
void ShowHelp(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
    printf("\r\n=== Available Commands ===\r\n");
 800206c:	4811      	ldr	r0, [pc, #68]	@ (80020b4 <ShowHelp+0x4c>)
 800206e:	f00a f901 	bl	800c274 <puts>
    printf("mount              - Mount SD card\r\n");
 8002072:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <ShowHelp+0x50>)
 8002074:	f00a f8fe 	bl	800c274 <puts>
    printf("unmount            - Unmount SD card\r\n");
 8002078:	4810      	ldr	r0, [pc, #64]	@ (80020bc <ShowHelp+0x54>)
 800207a:	f00a f8fb 	bl	800c274 <puts>
    printf("open <filename>    - Open file\r\n");
 800207e:	4810      	ldr	r0, [pc, #64]	@ (80020c0 <ShowHelp+0x58>)
 8002080:	f00a f8f8 	bl	800c274 <puts>
    printf("close              - Close current file\r\n");
 8002084:	480f      	ldr	r0, [pc, #60]	@ (80020c4 <ShowHelp+0x5c>)
 8002086:	f00a f8f5 	bl	800c274 <puts>
    printf("write <text>       - Write text to file\r\n");
 800208a:	480f      	ldr	r0, [pc, #60]	@ (80020c8 <ShowHelp+0x60>)
 800208c:	f00a f8f2 	bl	800c274 <puts>
    printf("read <filename>    - Read file content\r\n");
 8002090:	480e      	ldr	r0, [pc, #56]	@ (80020cc <ShowHelp+0x64>)
 8002092:	f00a f8ef 	bl	800c274 <puts>
    printf("image <filename>   - Display BMP image on OLED\r\n");  // 추가
 8002096:	480e      	ldr	r0, [pc, #56]	@ (80020d0 <ShowHelp+0x68>)
 8002098:	f00a f8ec 	bl	800c274 <puts>
    printf("size               - Check SD card free space\r\n");
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <ShowHelp+0x6c>)
 800209e:	f00a f8e9 	bl	800c274 <puts>
    printf("help               - Show this help\r\n");
 80020a2:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <ShowHelp+0x70>)
 80020a4:	f00a f8e6 	bl	800c274 <puts>
    printf("==========================\r\n");
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <ShowHelp+0x74>)
 80020aa:	f00a f8e3 	bl	800c274 <puts>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	0800e7cc 	.word	0x0800e7cc
 80020b8:	0800e7ec 	.word	0x0800e7ec
 80020bc:	0800e810 	.word	0x0800e810
 80020c0:	0800e838 	.word	0x0800e838
 80020c4:	0800e858 	.word	0x0800e858
 80020c8:	0800e884 	.word	0x0800e884
 80020cc:	0800e8b0 	.word	0x0800e8b0
 80020d0:	0800e8d8 	.word	0x0800e8d8
 80020d4:	0800e908 	.word	0x0800e908
 80020d8:	0800e938 	.word	0x0800e938
 80020dc:	0800e960 	.word	0x0800e960

080020e0 <DisplayImageFromSD_Enhanced>:
uint8_t gammaCorrectGrayscale(uint8_t r, uint8_t g, uint8_t b) {
    uint16_t gray = (r * 299 + g * 587 + b * 114) / 1000;
    return gammaTable[gray];
}
// 이미지를 두 번 읽는 방식: 첫 번째는 히스토그램 분석, 두 번째는 실제 출력
void DisplayImageFromSD_Enhanced(char *fileName) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0a8      	sub	sp, #160	@ 0xa0
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    if (closeFlag == 0) {
 80020e8:	4ba5      	ldr	r3, [pc, #660]	@ (8002380 <DisplayImageFromSD_Enhanced+0x2a0>)
 80020ea:	f993 3000 	ldrsb.w	r3, [r3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <DisplayImageFromSD_Enhanced+0x16>
        CloseFile();
 80020f2:	f7ff fd7d 	bl	8001bf0 <CloseFile>
    }

    fres = f_open(&fil, fileName, FA_READ);
 80020f6:	2201      	movs	r2, #1
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	48a2      	ldr	r0, [pc, #648]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 80020fc:	f008 f91e 	bl	800a33c <f_open>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4ba0      	ldr	r3, [pc, #640]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002106:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8002108:	4b9f      	ldr	r3, [pc, #636]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <DisplayImageFromSD_Enhanced+0x3a>
        printf("Failed to open image file '%s'!\r\n", fileName);
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	489e      	ldr	r0, [pc, #632]	@ (800238c <DisplayImageFromSD_Enhanced+0x2ac>)
 8002114:	f00a f846 	bl	800c1a4 <iprintf>
        return;
 8002118:	e1e3      	b.n	80024e2 <DisplayImageFromSD_Enhanced+0x402>
    }

    // BMP 헤더 읽기 (기존과 동일)
    uint8_t bmpHeader[54];
    fres = f_read(&fil, bmpHeader, 54, &br);
 800211a:	f107 010c 	add.w	r1, r7, #12
 800211e:	4b9c      	ldr	r3, [pc, #624]	@ (8002390 <DisplayImageFromSD_Enhanced+0x2b0>)
 8002120:	2236      	movs	r2, #54	@ 0x36
 8002122:	4898      	ldr	r0, [pc, #608]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002124:	f008 fad2 	bl	800a6cc <f_read>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	4b96      	ldr	r3, [pc, #600]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 800212e:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK || br < 54) {
 8002130:	4b95      	ldr	r3, [pc, #596]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <DisplayImageFromSD_Enhanced+0x60>
 8002138:	4b95      	ldr	r3, [pc, #596]	@ (8002390 <DisplayImageFromSD_Enhanced+0x2b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b35      	cmp	r3, #53	@ 0x35
 800213e:	d806      	bhi.n	800214e <DisplayImageFromSD_Enhanced+0x6e>
        printf("Failed to read BMP header!\r\n");
 8002140:	4894      	ldr	r0, [pc, #592]	@ (8002394 <DisplayImageFromSD_Enhanced+0x2b4>)
 8002142:	f00a f897 	bl	800c274 <puts>
        f_close(&fil);
 8002146:	488f      	ldr	r0, [pc, #572]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002148:	f008 fe31 	bl	800adae <f_close>
        return;
 800214c:	e1c9      	b.n	80024e2 <DisplayImageFromSD_Enhanced+0x402>
    }

    uint32_t dataOffset = *(uint32_t*)&bmpHeader[10];
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	330a      	adds	r3, #10
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t width = *(uint32_t*)&bmpHeader[18];
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	3312      	adds	r3, #18
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t height = *(uint32_t*)&bmpHeader[22];
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	3316      	adds	r3, #22
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t bitsPerPixel = *(uint16_t*)&bmpHeader[28];
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	331c      	adds	r3, #28
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    printf("Image: %lux%lu, %d bits\r\n", width, height, bitsPerPixel);
 800217c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002180:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002182:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002186:	4884      	ldr	r0, [pc, #528]	@ (8002398 <DisplayImageFromSD_Enhanced+0x2b8>)
 8002188:	f00a f80c 	bl	800c1a4 <iprintf>

    if (width > 256 || height > 64) {
 800218c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002194:	d802      	bhi.n	800219c <DisplayImageFromSD_Enhanced+0xbc>
 8002196:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	d906      	bls.n	80021aa <DisplayImageFromSD_Enhanced+0xca>
        printf("Image too large! Max: 256x64\r\n");
 800219c:	487f      	ldr	r0, [pc, #508]	@ (800239c <DisplayImageFromSD_Enhanced+0x2bc>)
 800219e:	f00a f869 	bl	800c274 <puts>
        f_close(&fil);
 80021a2:	4878      	ldr	r0, [pc, #480]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 80021a4:	f008 fe03 	bl	800adae <f_close>
        return;
 80021a8:	e19b      	b.n	80024e2 <DisplayImageFromSD_Enhanced+0x402>
    }

    // 32비트 처리 (24비트도 유사하게 수정)
    if (bitsPerPixel == 32) {
 80021aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 818f 	bne.w	80024d2 <DisplayImageFromSD_Enhanced+0x3f2>
        uint32_t rowSize = width * 4;
 80021b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	677b      	str	r3, [r7, #116]	@ 0x74
        uint8_t *rowBuffer = (uint8_t*)malloc(rowSize);
 80021bc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80021be:	f009 fa1b 	bl	800b5f8 <malloc>
 80021c2:	4603      	mov	r3, r0
 80021c4:	673b      	str	r3, [r7, #112]	@ 0x70

        if (rowBuffer == NULL) {
 80021c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <DisplayImageFromSD_Enhanced+0xfa>
            printf("Memory allocation failed!\r\n");
 80021cc:	4874      	ldr	r0, [pc, #464]	@ (80023a0 <DisplayImageFromSD_Enhanced+0x2c0>)
 80021ce:	f00a f851 	bl	800c274 <puts>
            f_close(&fil);
 80021d2:	486c      	ldr	r0, [pc, #432]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 80021d4:	f008 fdeb 	bl	800adae <f_close>
            return;
 80021d8:	e183      	b.n	80024e2 <DisplayImageFromSD_Enhanced+0x402>
        }

        // 1단계: 히스토그램 분석 (최소/최대 밝기 찾기)
        uint8_t minGray = 255, maxGray = 0;
 80021da:	23ff      	movs	r3, #255	@ 0xff
 80021dc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

        printf("Analyzing image histogram...\r\n");
 80021e6:	486f      	ldr	r0, [pc, #444]	@ (80023a4 <DisplayImageFromSD_Enhanced+0x2c4>)
 80021e8:	f00a f844 	bl	800c274 <puts>
        for (int row = 0; row < height; row++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021f2:	e07a      	b.n	80022ea <DisplayImageFromSD_Enhanced+0x20a>
            int bmpRow = height - 1 - row;
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            uint32_t filePos = dataOffset + bmpRow * rowSize;
 8002200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002202:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800220c:	4413      	add	r3, r2
 800220e:	66bb      	str	r3, [r7, #104]	@ 0x68

            f_lseek(&fil, filePos);
 8002210:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002212:	485c      	ldr	r0, [pc, #368]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002214:	f008 fdf5 	bl	800ae02 <f_lseek>
            fres = f_read(&fil, rowBuffer, rowSize, &br);
 8002218:	4b5d      	ldr	r3, [pc, #372]	@ (8002390 <DisplayImageFromSD_Enhanced+0x2b0>)
 800221a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800221c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800221e:	4859      	ldr	r0, [pc, #356]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002220:	f008 fa54 	bl	800a6cc <f_read>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b57      	ldr	r3, [pc, #348]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 800222a:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) break;
 800222c:	4b56      	ldr	r3, [pc, #344]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d161      	bne.n	80022f8 <DisplayImageFromSD_Enhanced+0x218>

            for (uint32_t col = 0; col < width; col++) {
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800223a:	e04b      	b.n	80022d4 <DisplayImageFromSD_Enhanced+0x1f4>
                uint32_t pixelOffset = col * 4;
 800223c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	667b      	str	r3, [r7, #100]	@ 0x64
                uint8_t b = rowBuffer[pixelOffset];
 8002244:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                uint8_t g = rowBuffer[pixelOffset + 1];
 8002250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002252:	3301      	adds	r3, #1
 8002254:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                uint8_t r = rowBuffer[pixelOffset + 2];
 800225e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002260:	3302      	adds	r3, #2
 8002262:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

                uint8_t gray = (r * 299 + g * 587 + b * 114) / 1000;
 800226c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8002270:	f240 122b 	movw	r2, #299	@ 0x12b
 8002274:	fb03 f202 	mul.w	r2, r3, r2
 8002278:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800227c:	f240 214b 	movw	r1, #587	@ 0x24b
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	441a      	add	r2, r3
 8002286:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800228a:	2172      	movs	r1, #114	@ 0x72
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	4a45      	ldr	r2, [pc, #276]	@ (80023a8 <DisplayImageFromSD_Enhanced+0x2c8>)
 8002294:	fb82 1203 	smull	r1, r2, r2, r3
 8002298:	1192      	asrs	r2, r2, #6
 800229a:	17db      	asrs	r3, r3, #31
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                if (gray < minGray) minGray = gray;
 80022a2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80022a6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d203      	bcs.n	80022b6 <DisplayImageFromSD_Enhanced+0x1d6>
 80022ae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80022b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
                if (gray > maxGray) maxGray = gray;
 80022b6:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80022ba:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80022be:	429a      	cmp	r2, r3
 80022c0:	d903      	bls.n	80022ca <DisplayImageFromSD_Enhanced+0x1ea>
 80022c2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80022c6:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            for (uint32_t col = 0; col < width; col++) {
 80022ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022ce:	3301      	adds	r3, #1
 80022d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3ad      	bcc.n	800223c <DisplayImageFromSD_Enhanced+0x15c>
        for (int row = 0; row < height; row++) {
 80022e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e4:	3301      	adds	r3, #1
 80022e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f63f af7f 	bhi.w	80021f4 <DisplayImageFromSD_Enhanced+0x114>
 80022f6:	e000      	b.n	80022fa <DisplayImageFromSD_Enhanced+0x21a>
            if (fres != FR_OK) break;
 80022f8:	bf00      	nop
            }
        }

        printf("Gray range: %d - %d\r\n", minGray, maxGray);
 80022fa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80022fe:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8002302:	4619      	mov	r1, r3
 8002304:	4829      	ldr	r0, [pc, #164]	@ (80023ac <DisplayImageFromSD_Enhanced+0x2cc>)
 8002306:	f009 ff4d 	bl	800c1a4 <iprintf>

        // 2단계: 히스토그램 스트레칭을 적용하여 실제 출력
        oled_clearBuffer();
 800230a:	f000 fd3d 	bl	8002d88 <oled_clearBuffer>

        uint8_t startX = (256 - width) / 2;
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002312:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        uint8_t startY = (64 - height) / 2;
 800231c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800231e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

        printf("Rendering with enhanced contrast...\r\n");
 8002328:	4821      	ldr	r0, [pc, #132]	@ (80023b0 <DisplayImageFromSD_Enhanced+0x2d0>)
 800232a:	f009 ffa3 	bl	800c274 <puts>
        for (int row = 0; row < height; row++) {
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002334:	e0c2      	b.n	80024bc <DisplayImageFromSD_Enhanced+0x3dc>
            int bmpRow = height - 1 - row;
 8002336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint32_t filePos = dataOffset + bmpRow * rowSize;
 8002342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002344:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800234e:	4413      	add	r3, r2
 8002350:	657b      	str	r3, [r7, #84]	@ 0x54

            f_lseek(&fil, filePos);
 8002352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002356:	f008 fd54 	bl	800ae02 <f_lseek>
            fres = f_read(&fil, rowBuffer, rowSize, &br);
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <DisplayImageFromSD_Enhanced+0x2b0>)
 800235c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800235e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002360:	4808      	ldr	r0, [pc, #32]	@ (8002384 <DisplayImageFromSD_Enhanced+0x2a4>)
 8002362:	f008 f9b3 	bl	800a6cc <f_read>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 800236c:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) break;
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <DisplayImageFromSD_Enhanced+0x2a8>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 80a9 	bne.w	80024ca <DisplayImageFromSD_Enhanced+0x3ea>

            for (uint32_t col = 0; col < width; col++) {
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800237e:	e092      	b.n	80024a6 <DisplayImageFromSD_Enhanced+0x3c6>
 8002380:	20000001 	.word	0x20000001
 8002384:	2000371c 	.word	0x2000371c
 8002388:	20003718 	.word	0x20003718
 800238c:	0800e97c 	.word	0x0800e97c
 8002390:	200035dc 	.word	0x200035dc
 8002394:	0800e9a0 	.word	0x0800e9a0
 8002398:	0800e9bc 	.word	0x0800e9bc
 800239c:	0800e9d8 	.word	0x0800e9d8
 80023a0:	0800e9f8 	.word	0x0800e9f8
 80023a4:	0800ead4 	.word	0x0800ead4
 80023a8:	10624dd3 	.word	0x10624dd3
 80023ac:	0800eaf4 	.word	0x0800eaf4
 80023b0:	0800eb0c 	.word	0x0800eb0c
                uint32_t pixelOffset = col * 4;
 80023b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	653b      	str	r3, [r7, #80]	@ 0x50
                uint8_t b = rowBuffer[pixelOffset];
 80023bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80023be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                uint8_t g = rowBuffer[pixelOffset + 1];
 80023c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ca:	3301      	adds	r3, #1
 80023cc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                uint8_t r = rowBuffer[pixelOffset + 2];
 80023d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d8:	3302      	adds	r3, #2
 80023da:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

                uint8_t gray = (r * 299 + g * 587 + b * 114) / 1000;
 80023e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023e8:	f240 122b 	movw	r2, #299	@ 0x12b
 80023ec:	fb03 f202 	mul.w	r2, r3, r2
 80023f0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80023f4:	f240 214b 	movw	r1, #587	@ 0x24b
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	441a      	add	r2, r3
 80023fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002402:	2172      	movs	r1, #114	@ 0x72
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	4a37      	ldr	r2, [pc, #220]	@ (80024e8 <DisplayImageFromSD_Enhanced+0x408>)
 800240c:	fb82 1203 	smull	r1, r2, r2, r3
 8002410:	1192      	asrs	r2, r2, #6
 8002412:	17db      	asrs	r3, r3, #31
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

                // 히스토그램 스트레칭 적용
                uint8_t enhanced;
                if (maxGray > minGray) {
 800241a:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 800241e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002422:	429a      	cmp	r2, r3
 8002424:	d911      	bls.n	800244a <DisplayImageFromSD_Enhanced+0x36a>
                    enhanced = ((gray - minGray) * 15) / (maxGray - minGray);
 8002426:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800242a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9a      	subs	r2, r3, r2
 8002436:	f897 109e 	ldrb.w	r1, [r7, #158]	@ 0x9e
 800243a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800243e:	1acb      	subs	r3, r1, r3
 8002440:	fb92 f3f3 	sdiv	r3, r2, r3
 8002444:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8002448:	e002      	b.n	8002450 <DisplayImageFromSD_Enhanced+0x370>
                } else {
                    enhanced = 8;  // 단색 이미지인 경우 중간값
 800244a:	2308      	movs	r3, #8
 800244c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                }

                if (enhanced > 15) enhanced = 15;
 8002450:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d902      	bls.n	800245e <DisplayImageFromSD_Enhanced+0x37e>
 8002458:	230f      	movs	r3, #15
 800245a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

                int displayX = startX + col;
 800245e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002466:	4413      	add	r3, r2
 8002468:	64bb      	str	r3, [r7, #72]	@ 0x48
                int displayY = startY + row;
 800246a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800246e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002472:	4413      	add	r3, r2
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44

                if (displayX >= 0 && displayX < 256 && displayY >= 0 && displayY < 64) {
 8002476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0f      	blt.n	800249c <DisplayImageFromSD_Enhanced+0x3bc>
 800247c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247e:	2bff      	cmp	r3, #255	@ 0xff
 8002480:	dc0c      	bgt.n	800249c <DisplayImageFromSD_Enhanced+0x3bc>
 8002482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	db09      	blt.n	800249c <DisplayImageFromSD_Enhanced+0x3bc>
 8002488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800248a:	2b3f      	cmp	r3, #63	@ 0x3f
 800248c:	dc06      	bgt.n	800249c <DisplayImageFromSD_Enhanced+0x3bc>
                    oled_setPixelInBuffer(displayX, displayY, enhanced);
 800248e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002492:	461a      	mov	r2, r3
 8002494:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002496:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002498:	f000 fc0a 	bl	8002cb0 <oled_setPixelInBuffer>
            for (uint32_t col = 0; col < width; col++) {
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80024aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d380      	bcc.n	80023b4 <DisplayImageFromSD_Enhanced+0x2d4>
        for (int row = 0; row < height; row++) {
 80024b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024b6:	3301      	adds	r3, #1
 80024b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80024c2:	429a      	cmp	r2, r3
 80024c4:	f63f af37 	bhi.w	8002336 <DisplayImageFromSD_Enhanced+0x256>
 80024c8:	e000      	b.n	80024cc <DisplayImageFromSD_Enhanced+0x3ec>
            if (fres != FR_OK) break;
 80024ca:	bf00      	nop
                }
            }
        }

        free(rowBuffer);
 80024cc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80024ce:	f009 f89b 	bl	800b608 <free>
    }

    oled_updateDisplay();
 80024d2:	f000 fc45 	bl	8002d60 <oled_updateDisplay>
    printf("Enhanced image displayed!\r\n");
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <DisplayImageFromSD_Enhanced+0x40c>)
 80024d8:	f009 fecc 	bl	800c274 <puts>
    f_close(&fil);
 80024dc:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <DisplayImageFromSD_Enhanced+0x410>)
 80024de:	f008 fc66 	bl	800adae <f_close>
}
 80024e2:	37a0      	adds	r7, #160	@ 0xa0
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	10624dd3 	.word	0x10624dd3
 80024ec:	0800eb34 	.word	0x0800eb34
 80024f0:	2000371c 	.word	0x2000371c

080024f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024fa:	f001 f820 	bl	800353e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fe:	f000 f863 	bl	80025c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002502:	f7ff f9e5 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002506:	f7fe fd3d 	bl	8000f84 <MX_DMA_Init>
  MX_SPI1_Init();
 800250a:	f000 fc95 	bl	8002e38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800250e:	f000 ff41 	bl	8003394 <MX_USART1_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002512:	f005 fc7f 	bl	8007e14 <MX_FATFS_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <main+0x2c>
    Error_Handler();
 800251c:	f000 f8e0 	bl	80026e0 <Error_Handler>
  }
  MX_SPI3_Init();
 8002520:	f000 fcc8 	bl	8002eb4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	OLED_init();
 8002524:	f000 f960 	bl	80027e8 <OLED_init>
	OLED_fill(0);
 8002528:	2000      	movs	r0, #0
 800252a:	f000 fa37 	bl	800299c <OLED_fill>

	static uint8_t rxData;
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800252e:	2201      	movs	r2, #1
 8002530:	491d      	ldr	r1, [pc, #116]	@ (80025a8 <main+0xb4>)
 8002532:	481e      	ldr	r0, [pc, #120]	@ (80025ac <main+0xb8>)
 8002534:	f003 fc32 	bl	8005d9c <HAL_UART_Receive_IT>

	printf("\r\n=== SD Card Control System ===\r\n");
 8002538:	481d      	ldr	r0, [pc, #116]	@ (80025b0 <main+0xbc>)
 800253a:	f009 fe9b 	bl	800c274 <puts>
	printf("Type 'help' for available commands.\r\n");
 800253e:	481d      	ldr	r0, [pc, #116]	@ (80025b4 <main+0xc0>)
 8002540:	f009 fe98 	bl	800c274 <puts>
	printf("Ready> ");
 8002544:	481c      	ldr	r0, [pc, #112]	@ (80025b8 <main+0xc4>)
 8002546:	f009 fe2d 	bl	800c1a4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		uint8_t currentCardState = SD_IsCardDetected();
 800254a:	f7ff fa5f 	bl	8001a0c <SD_IsCardDetected>
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]

		if (currentCardState && !previousCardState) {
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <main+0x7a>
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <main+0xc8>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <main+0x7a>
			// 카드 삽입 감지
			HAL_Delay(500); // 디바운싱
 8002560:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002564:	f001 f85c 	bl	8003620 <HAL_Delay>
			SDMount();
 8002568:	f7ff fa60 	bl	8001a2c <SDMount>
 800256c:	e008      	b.n	8002580 <main+0x8c>
		} else if (!currentCardState && previousCardState) {
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <main+0x8c>
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <main+0xc8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <main+0x8c>
			// 카드 제거 감지
			SDUnmount();
 800257c:	f7ff fa94 	bl	8001aa8 <SDUnmount>
		}

		previousCardState = currentCardState;
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <main+0xc8>)
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	7013      	strb	r3, [r2, #0]

		// 명령어 처리
		if (commandReady) {
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <main+0xcc>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <main+0xac>
			ProcessCommand(rxBuffer);
 800258e:	480d      	ldr	r0, [pc, #52]	@ (80025c4 <main+0xd0>)
 8002590:	f7ff fcb8 	bl	8001f04 <ProcessCommand>
			commandReady = 0;
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <main+0xcc>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
			printf("Ready> ");
 800259a:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <main+0xc4>)
 800259c:	f009 fe02 	bl	800c1a4 <iprintf>
		}

		HAL_Delay(100);
 80025a0:	2064      	movs	r0, #100	@ 0x64
 80025a2:	f001 f83d 	bl	8003620 <HAL_Delay>
	while (1) {
 80025a6:	e7d0      	b.n	800254a <main+0x56>
 80025a8:	2000020d 	.word	0x2000020d
 80025ac:	200048d4 	.word	0x200048d4
 80025b0:	0800eb50 	.word	0x0800eb50
 80025b4:	0800e7a4 	.word	0x0800e7a4
 80025b8:	0800eb74 	.word	0x0800eb74
 80025bc:	2000020a 	.word	0x2000020a
 80025c0:	2000020c 	.word	0x2000020c
 80025c4:	20003644 	.word	0x20003644

080025c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b094      	sub	sp, #80	@ 0x50
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	2238      	movs	r2, #56	@ 0x38
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f009 ff4e 	bl	800c478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f001 fd82 	bl	80040f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025fa:	2302      	movs	r3, #2
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025fe:	2303      	movs	r3, #3
 8002600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002602:	2301      	movs	r3, #1
 8002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002606:	2328      	movs	r3, #40	@ 0x28
 8002608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800260a:	2302      	movs	r3, #2
 800260c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800260e:	2302      	movs	r3, #2
 8002610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002612:	2302      	movs	r3, #2
 8002614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fe1e 	bl	800425c <HAL_RCC_OscConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002626:	f000 f85b 	bl	80026e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262a:	230f      	movs	r3, #15
 800262c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800262e:	2303      	movs	r3, #3
 8002630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2104      	movs	r1, #4
 8002642:	4618      	mov	r0, r3
 8002644:	f002 f91c 	bl	8004880 <HAL_RCC_ClockConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800264e:	f000 f847 	bl	80026e0 <Error_Handler>
  }
}
 8002652:	bf00      	nop
 8002654:	3750      	adds	r7, #80	@ 0x50
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <HAL_UART_RxCpltCallback+0x6c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d128      	bne.n	80026c0 <HAL_UART_RxCpltCallback+0x64>
		static uint8_t rxData;

		if (rxData == '\r' || rxData == '\n')  // Enter 키 감지
 800266e:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_UART_RxCpltCallback+0x70>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d003      	beq.n	800267e <HAL_UART_RxCpltCallback+0x22>
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_UART_RxCpltCallback+0x70>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d10c      	bne.n	8002698 <HAL_UART_RxCpltCallback+0x3c>
				{
			rxBuffer[rxIndex] = '\0';  // 문자열 종료
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <HAL_UART_RxCpltCallback+0x74>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_UART_RxCpltCallback+0x78>)
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]
			commandReady = 1;
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <HAL_UART_RxCpltCallback+0x7c>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
			rxIndex = 0;
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_UART_RxCpltCallback+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e00e      	b.n	80026b6 <HAL_UART_RxCpltCallback+0x5a>
		} else if (rxIndex < sizeof(rxBuffer) - 1) {
 8002698:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <HAL_UART_RxCpltCallback+0x74>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b62      	cmp	r3, #98	@ 0x62
 800269e:	d80a      	bhi.n	80026b6 <HAL_UART_RxCpltCallback+0x5a>
			rxBuffer[rxIndex++] = rxData;
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_UART_RxCpltCallback+0x74>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	b2d1      	uxtb	r1, r2
 80026a8:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_UART_RxCpltCallback+0x74>)
 80026aa:	7011      	strb	r1, [r2, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_UART_RxCpltCallback+0x70>)
 80026b0:	7819      	ldrb	r1, [r3, #0]
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_UART_RxCpltCallback+0x78>)
 80026b4:	5499      	strb	r1, [r3, r2]
		}

		// 다음 문자 수신 대기
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	4904      	ldr	r1, [pc, #16]	@ (80026cc <HAL_UART_RxCpltCallback+0x70>)
 80026ba:	4808      	ldr	r0, [pc, #32]	@ (80026dc <HAL_UART_RxCpltCallback+0x80>)
 80026bc:	f003 fb6e 	bl	8005d9c <HAL_UART_Receive_IT>
	}
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013800 	.word	0x40013800
 80026cc:	2000020e 	.word	0x2000020e
 80026d0:	2000020b 	.word	0x2000020b
 80026d4:	20003644 	.word	0x20003644
 80026d8:	2000020c 	.word	0x2000020c
 80026dc:	200048d4 	.word	0x200048d4

080026e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e4:	b672      	cpsid	i
}
 80026e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <Error_Handler+0x8>

080026ec <OLED_write_cmd>:
static uint8_t d = 0;
extern closeFlag;

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002700:	f001 fce0 	bl	80040c4 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800270a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270e:	f001 fcd9 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 8002712:	1df9      	adds	r1, r7, #7
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	2201      	movs	r2, #1
 800271a:	4807      	ldr	r0, [pc, #28]	@ (8002738 <OLED_write_cmd+0x4c>)
 800271c:	f002 fd67 	bl	80051ee <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8002720:	2201      	movs	r2, #1
 8002722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800272a:	f001 fccb 	bl	80040c4 <HAL_GPIO_WritePin>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000474c 	.word	0x2000474c

0800273c <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800274e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002752:	f001 fcb7 	bl	80040c4 <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800275c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002760:	f001 fcb0 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 8002764:	887a      	ldrh	r2, [r7, #2]
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4806      	ldr	r0, [pc, #24]	@ (8002788 <OLED_write_data+0x4c>)
 800276e:	f002 fd3e 	bl	80051ee <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8002772:	2201      	movs	r2, #1
 8002774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800277c:	f001 fca2 	bl	80040c4 <HAL_GPIO_WritePin>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2000474c 	.word	0x2000474c

0800278c <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	4604      	mov	r4, r0
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4623      	mov	r3, r4
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	4603      	mov	r3, r0
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	460b      	mov	r3, r1
 80027a4:	717b      	strb	r3, [r7, #5]
 80027a6:	4613      	mov	r3, r2
 80027a8:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 80027aa:	2015      	movs	r0, #21
 80027ac:	f7ff ff9e 	bl	80026ec <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	733b      	strb	r3, [r7, #12]
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ffbc 	bl	800273c <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 80027c4:	2075      	movs	r0, #117	@ 0x75
 80027c6:	f7ff ff91 	bl	80026ec <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 80027ca:	797b      	ldrb	r3, [r7, #5]
 80027cc:	723b      	strb	r3, [r7, #8]
 80027ce:	793b      	ldrb	r3, [r7, #4]
 80027d0:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ffaf 	bl	800273c <OLED_write_data>
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
	...

080027e8 <OLED_init>:


/* OLED 디스플레이를 초기화하는 함수 */
/* OLED 디스플레이를 초기화하는 함수 (플리커 방지 버전) */
void OLED_init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
  RST_L();
 80027ee:	2200      	movs	r2, #0
 80027f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027f4:	4867      	ldr	r0, [pc, #412]	@ (8002994 <OLED_init+0x1ac>)
 80027f6:	f001 fc65 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80027fa:	200a      	movs	r0, #10
 80027fc:	f000 ff10 	bl	8003620 <HAL_Delay>
  RST_H();
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002806:	4863      	ldr	r0, [pc, #396]	@ (8002994 <OLED_init+0x1ac>)
 8002808:	f001 fc5c 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800280c:	200a      	movs	r0, #10
 800280e:	f000 ff07 	bl	8003620 <HAL_Delay>

  OLED_write_cmd(OLED_DISPLAYOFF);
 8002812:	20ae      	movs	r0, #174	@ 0xae
 8002814:	f7ff ff6a 	bl	80026ec <OLED_write_cmd>

  // 명령어 락 설정 - 더 안정적인 값
  OLED_write_cmd(OLED_SETCOMMANDLOCK);
 8002818:	20fd      	movs	r0, #253	@ 0xfd
 800281a:	f7ff ff67 	bl	80026ec <OLED_write_cmd>
  d = 0x12;  // 0x80 대신 0x12 사용 (표준값)
 800281e:	4b5e      	ldr	r3, [pc, #376]	@ (8002998 <OLED_init+0x1b0>)
 8002820:	2212      	movs	r2, #18
 8002822:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002824:	2101      	movs	r1, #1
 8002826:	485c      	ldr	r0, [pc, #368]	@ (8002998 <OLED_init+0x1b0>)
 8002828:	f7ff ff88 	bl	800273c <OLED_write_data>

  // 클록 디바이더 - 플리커 방지를 위한 핵심 설정
  OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 800282c:	20b3      	movs	r0, #179	@ 0xb3
 800282e:	f7ff ff5d 	bl	80026ec <OLED_write_cmd>
  d = 0x80;  // 0x91 대신 0x80 사용 (더 느린 클록으로 플리커 감소)
 8002832:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <OLED_init+0x1b0>)
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002838:	2101      	movs	r1, #1
 800283a:	4857      	ldr	r0, [pc, #348]	@ (8002998 <OLED_init+0x1b0>)
 800283c:	f7ff ff7e 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);
 8002840:	20ca      	movs	r0, #202	@ 0xca
 8002842:	f7ff ff53 	bl	80026ec <OLED_write_cmd>
  d = 0x3F;
 8002846:	4b54      	ldr	r3, [pc, #336]	@ (8002998 <OLED_init+0x1b0>)
 8002848:	223f      	movs	r2, #63	@ 0x3f
 800284a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800284c:	2101      	movs	r1, #1
 800284e:	4852      	ldr	r0, [pc, #328]	@ (8002998 <OLED_init+0x1b0>)
 8002850:	f7ff ff74 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET);
 8002854:	20a2      	movs	r0, #162	@ 0xa2
 8002856:	f7ff ff49 	bl	80026ec <OLED_write_cmd>
  d = 0x00;
 800285a:	4b4f      	ldr	r3, [pc, #316]	@ (8002998 <OLED_init+0x1b0>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002860:	2101      	movs	r1, #1
 8002862:	484d      	ldr	r0, [pc, #308]	@ (8002998 <OLED_init+0x1b0>)
 8002864:	f7ff ff6a 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);
 8002868:	20a1      	movs	r0, #161	@ 0xa1
 800286a:	f7ff ff3f 	bl	80026ec <OLED_write_cmd>
  d = 0x00;
 800286e:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <OLED_init+0x1b0>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002874:	2101      	movs	r1, #1
 8002876:	4848      	ldr	r0, [pc, #288]	@ (8002998 <OLED_init+0x1b0>)
 8002878:	f7ff ff60 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_SETREMAP);
 800287c:	20a0      	movs	r0, #160	@ 0xa0
 800287e:	f7ff ff35 	bl	80026ec <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x06, 0x11};
 8002882:	f241 1306 	movw	r3, #4358	@ 0x1106
 8002886:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff54 	bl	800273c <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETGPIO);
 8002894:	20b5      	movs	r0, #181	@ 0xb5
 8002896:	f7ff ff29 	bl	80026ec <OLED_write_cmd>
  d = 0x00;
 800289a:	4b3f      	ldr	r3, [pc, #252]	@ (8002998 <OLED_init+0x1b0>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80028a0:	2101      	movs	r1, #1
 80028a2:	483d      	ldr	r0, [pc, #244]	@ (8002998 <OLED_init+0x1b0>)
 80028a4:	f7ff ff4a 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);
 80028a8:	20ab      	movs	r0, #171	@ 0xab
 80028aa:	f7ff ff1f 	bl	80026ec <OLED_write_cmd>
  d = 0x01;
 80028ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <OLED_init+0x1b0>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80028b4:	2101      	movs	r1, #1
 80028b6:	4838      	ldr	r0, [pc, #224]	@ (8002998 <OLED_init+0x1b0>)
 80028b8:	f7ff ff40 	bl	800273c <OLED_write_data>

  // 디스플레이 인핸스 A - 플리커 방지 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 80028bc:	20b4      	movs	r0, #180	@ 0xb4
 80028be:	f7ff ff15 	bl	80026ec <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};  // 0xB5 대신 0xFD 사용 (더 안정적)
 80028c2:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80028c6:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	2102      	movs	r1, #2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff34 	bl	800273c <OLED_write_data>
  }

  // 대비 설정 - 조금 낮춤
  OLED_write_cmd(OLED_SETCONTRAST);
 80028d4:	20c1      	movs	r0, #193	@ 0xc1
 80028d6:	f7ff ff09 	bl	80026ec <OLED_write_cmd>
  d = 0xFF;  // 0xFF 대신 0xDF 사용 (과도한 밝기로 인한 플리커 방지)
 80028da:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <OLED_init+0x1b0>)
 80028dc:	22ff      	movs	r2, #255	@ 0xff
 80028de:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80028e0:	2101      	movs	r1, #1
 80028e2:	482d      	ldr	r0, [pc, #180]	@ (8002998 <OLED_init+0x1b0>)
 80028e4:	f7ff ff2a 	bl	800273c <OLED_write_data>

  // 마스터 전류 - 조금 낮춤
  OLED_write_cmd(OLED_MASTERCURRENT);
 80028e8:	20c7      	movs	r0, #199	@ 0xc7
 80028ea:	f7ff feff 	bl	80026ec <OLED_write_cmd>
  d = 0x0F;  // 0x0F 대신 0x0C 사용 (전류 감소로 플리커 방지)
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <OLED_init+0x1b0>)
 80028f0:	220f      	movs	r2, #15
 80028f2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80028f4:	2101      	movs	r1, #1
 80028f6:	4828      	ldr	r0, [pc, #160]	@ (8002998 <OLED_init+0x1b0>)
 80028f8:	f7ff ff20 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE);
 80028fc:	20b9      	movs	r0, #185	@ 0xb9
 80028fe:	f7ff fef5 	bl	80026ec <OLED_write_cmd>

  // 위상 길이 - 플리커 방지를 위한 핵심 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);
 8002902:	20b1      	movs	r0, #177	@ 0xb1
 8002904:	f7ff fef2 	bl	80026ec <OLED_write_cmd>
  d = 0xC8;  // 0xE2 대신 0xC8 사용 (더 짧은 위상으로 플리커 감소)
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <OLED_init+0x1b0>)
 800290a:	22c8      	movs	r2, #200	@ 0xc8
 800290c:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800290e:	2101      	movs	r1, #1
 8002910:	4821      	ldr	r0, [pc, #132]	@ (8002998 <OLED_init+0x1b0>)
 8002912:	f7ff ff13 	bl	800273c <OLED_write_data>

  // 디스플레이 인핸스 B - 플리커 방지 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_B);
 8002916:	20d1      	movs	r0, #209	@ 0xd1
 8002918:	f7ff fee8 	bl	80026ec <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x20, 0x00};  // {0x82, 0x20} 대신 더 보수적인 값
 800291c:	2320      	movs	r3, #32
 800291e:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff09 	bl	800273c <OLED_write_data>
  }

  // 프리차지 전압 - 낮춤
  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE);
 800292a:	20bb      	movs	r0, #187	@ 0xbb
 800292c:	f7ff fede 	bl	80026ec <OLED_write_cmd>
  d = 0x17;  // 0x1F 대신 0x17 사용
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <OLED_init+0x1b0>)
 8002932:	2217      	movs	r2, #23
 8002934:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8002936:	2101      	movs	r1, #1
 8002938:	4817      	ldr	r0, [pc, #92]	@ (8002998 <OLED_init+0x1b0>)
 800293a:	f7ff feff 	bl	800273c <OLED_write_data>

  // 세컨드 프리차지 - 길게 설정
  OLED_write_cmd(OLED_SETSECONDPRECHARGE);
 800293e:	20b6      	movs	r0, #182	@ 0xb6
 8002940:	f7ff fed4 	bl	80026ec <OLED_write_cmd>
  d = 0x0F;  // 0x08 대신 0x0F 사용 (더 긴 프리차지)
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <OLED_init+0x1b0>)
 8002946:	220f      	movs	r2, #15
 8002948:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800294a:	2101      	movs	r1, #1
 800294c:	4812      	ldr	r0, [pc, #72]	@ (8002998 <OLED_init+0x1b0>)
 800294e:	f7ff fef5 	bl	800273c <OLED_write_data>

  // VCOMH 설정 - 조정
  OLED_write_cmd(OLED_SETVCOMH);
 8002952:	20be      	movs	r0, #190	@ 0xbe
 8002954:	f7ff feca 	bl	80026ec <OLED_write_cmd>
  d = 0x05;  // 0x07 대신 0x05 사용
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <OLED_init+0x1b0>)
 800295a:	2205      	movs	r2, #5
 800295c:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800295e:	2101      	movs	r1, #1
 8002960:	480d      	ldr	r0, [pc, #52]	@ (8002998 <OLED_init+0x1b0>)
 8002962:	f7ff feeb 	bl	800273c <OLED_write_data>

  OLED_write_cmd(OLED_NORMALDISPLAY);
 8002966:	20a6      	movs	r0, #166	@ 0xa6
 8002968:	f7ff fec0 	bl	80026ec <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);
 800296c:	20a9      	movs	r0, #169	@ 0xa9
 800296e:	f7ff febd 	bl	80026ec <OLED_write_cmd>

  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8002972:	233f      	movs	r3, #63	@ 0x3f
 8002974:	2200      	movs	r2, #0
 8002976:	215b      	movs	r1, #91	@ 0x5b
 8002978:	201c      	movs	r0, #28
 800297a:	f7ff ff07 	bl	800278c <OLED_set_window>

  OLED_write_cmd(OLED_DISPLAYON);
 800297e:	20af      	movs	r0, #175	@ 0xaf
 8002980:	f7ff feb4 	bl	80026ec <OLED_write_cmd>
  HAL_Delay(100);  // 50ms 대신 100ms로 더 긴 안정화 시간
 8002984:	2064      	movs	r0, #100	@ 0x64
 8002986:	f000 fe4b 	bl	8003620 <HAL_Delay>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	48000400 	.word	0x48000400
 8002998:	2000020f 	.word	0x2000020f

0800299c <OLED_fill>:


/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0a4      	sub	sp, #144	@ 0x90
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]

  uint8_t b = (gray << 4) | (gray & 0x0F);
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	b25a      	sxtb	r2, r3
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];
  memset(line, b, sizeof(line));
 80029c0:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	4618      	mov	r0, r3
 80029cc:	f009 fd54 	bl	800c478 <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80029d0:	233f      	movs	r3, #63	@ 0x3f
 80029d2:	2200      	movs	r2, #0
 80029d4:	215b      	movs	r1, #91	@ 0x5b
 80029d6:	201c      	movs	r0, #28
 80029d8:	f7ff fed8 	bl	800278c <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);
 80029dc:	205c      	movs	r0, #92	@ 0x5c
 80029de:	f7ff fe85 	bl	80026ec <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80029e8:	e00a      	b.n	8002a00 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2180      	movs	r1, #128	@ 0x80
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fea3 	bl	800273c <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fa:	3301      	adds	r3, #1
 80029fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a06:	ddf0      	ble.n	80029ea <OLED_fill+0x4e>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3790      	adds	r7, #144	@ 0x90
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]

  return OLED_COL_START + (x >> 1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	105b      	asrs	r3, r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	331c      	adds	r3, #28
 8002a22:	b2db      	uxtb	r3, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0ae      	sub	sp, #184	@ 0xb8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]

  if (ch < 32 || ch > 126)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b1f      	cmp	r3, #31
 8002a5c:	f240 80ea 	bls.w	8002c34 <oled_drawChar+0x1ec>
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a64:	f200 80e6 	bhi.w	8002c34 <oled_drawChar+0x1ec>
	  {
	  	  return;
	  }

  if (gray > 15)
 8002a68:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d902      	bls.n	8002a76 <oled_drawChar+0x2e>
	  {
	  	  gray = 15;
 8002a70:	230f      	movs	r3, #15
 8002a72:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0
	  }


  if (x < 0 || (x + font->width) > OLED_W)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f2c0 80dd 	blt.w	8002c38 <oled_drawChar+0x1f0>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8c:	f300 80d4 	bgt.w	8002c38 <oled_drawChar+0x1f0>
	  {
	  	  return;
	  }

  if (y < 0 || (y + font->height) > OLED_H)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f2c0 80d2 	blt.w	8002c3c <oled_drawChar+0x1f4>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2b40      	cmp	r3, #64	@ 0x40
 8002aa4:	f300 80ca 	bgt.w	8002c3c <oled_drawChar+0x1f4>
	  {
	  	  return;
	  }


  const int stride = font->height;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f1a3 0220 	sub.w	r2, r3, #32
 8002ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	0fda      	lsrs	r2, r3, #31
 8002aca:	4413      	add	r3, r2
 8002acc:	105b      	asrs	r3, r3, #1
 8002ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];

  for (int row = 0; row < font->height; row++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad8:	e0a3      	b.n	8002c22 <oled_drawChar+0x1da>
  {

    uint16_t mask = font->data[start + row];
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	440b      	add	r3, r1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    memset(linebuf, 0x00, bytes_per_row);
 8002af2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f009 fcbb 	bl	800c478 <memset>

    for (int col = 0; col < font->width; col++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b08:	e04f      	b.n	8002baa <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);
 8002b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b0e:	105b      	asrs	r3, r3, #1
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);
 8002b14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      if (mask & (0x8000 >> col))
 8002b2a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8002b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b36:	fa41 f303 	asr.w	r3, r1, r3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02f      	beq.n	8002ba0 <oled_drawChar+0x158>
      {
        if (left_nibble)
 8002b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d015      	beq.n	8002b74 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);
 8002b48:	f107 0214 	add.w	r2, r7, #20
 8002b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b50:	4413      	add	r3, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	f107 0214 	add.w	r2, r7, #20
 8002b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b6c:	4413      	add	r3, r2
 8002b6e:	460a      	mov	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e015      	b.n	8002ba0 <oled_drawChar+0x158>
        else{
        		linebuf[byte_idx] |= (gray & 0x0F);
 8002b74:	f107 0214 	add.w	r2, r7, #20
 8002b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	b2d9      	uxtb	r1, r3
 8002b92:	f107 0214 	add.w	r2, r7, #20
 8002b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b9a:	4413      	add	r3, r2
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8002ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	dba8      	blt.n	8002b0a <oled_drawChar+0xc2>
        	}
      }
    }

    uint8_t col_start = colbyte_from_x(x);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ff2a 	bl	8002a12 <colbyte_from_x>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;
 8002bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8002bce:	4413      	add	r3, r2
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bde:	4413      	add	r3, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff25 	bl	8002a30 <rowaddr_from_y>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);
 8002bec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002bf0:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8002bf4:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8002bf8:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8002bfc:	f7ff fdc6 	bl	800278c <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);
 8002c00:	205c      	movs	r0, #92	@ 0x5c
 8002c02:	f7ff fd73 	bl	80026ec <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);
 8002c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd92 	bl	800273c <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8002c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f6ff af54 	blt.w	8002ada <oled_drawChar+0x92>
 8002c32:	e004      	b.n	8002c3e <oled_drawChar+0x1f6>
	  	  return;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <oled_drawChar+0x1f6>
	  	  return;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <oled_drawChar+0x1f6>
	  	  return;
 8002c3c:	bf00      	nop
  }
}
 8002c3e:	37b8      	adds	r7, #184	@ 0xb8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	613b      	str	r3, [r7, #16]

  while (*str) {
 8002c5a:	e020      	b.n	8002c9e <oled_drawString+0x5a>
    if (*str == '\n')
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b0a      	cmp	r3, #10
 8002c62:	d108      	bne.n	8002c76 <oled_drawString+0x32>
    {
      cy += font->height + 1;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      cx = x;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e010      	b.n	8002c98 <oled_drawString+0x54>
    }

    else if (*str != '\r')
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b0d      	cmp	r3, #13
 8002c7c:	d00c      	beq.n	8002c98 <oled_drawString+0x54>
    {
      oled_drawChar(cx, cy, *str, font, gray);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff fedb 	bl	8002a48 <oled_drawChar>
      cx += 4;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3304      	adds	r3, #4
 8002c96:	617b      	str	r3, [r7, #20]
    }
    str++;  // 다음 문자로 이동
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
  while (*str) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1da      	bne.n	8002c5c <oled_drawString+0x18>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <oled_setPixelInBuffer>:
}
// oled.c에 추가
static uint8_t frameBuffer[OLED_W/2 * OLED_H];  // 전체 화면 버퍼

void oled_setPixelInBuffer(int x, int y, uint8_t gray)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
    if (x < 0 || x >= OLED_W || y < 0 || y >= OLED_H) {
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db45      	blt.n	8002d50 <oled_setPixelInBuffer+0xa0>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2bff      	cmp	r3, #255	@ 0xff
 8002cc8:	dc42      	bgt.n	8002d50 <oled_setPixelInBuffer+0xa0>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db3f      	blt.n	8002d50 <oled_setPixelInBuffer+0xa0>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cd4:	dc3c      	bgt.n	8002d50 <oled_setPixelInBuffer+0xa0>
        return;
    }

    if (gray > 15) {
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d901      	bls.n	8002ce0 <oled_setPixelInBuffer+0x30>
        gray = 15;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	71fb      	strb	r3, [r7, #7]
    }

    int bufferIndex = y * (OLED_W/2) + (x/2);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	01da      	lsls	r2, r3, #7
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	0fd9      	lsrs	r1, r3, #31
 8002ce8:	440b      	add	r3, r1
 8002cea:	105b      	asrs	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

    if (x & 1) {
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <oled_setPixelInBuffer+0x76>
        // 홀수 x: 하위 니블
        frameBuffer[bufferIndex] = (frameBuffer[bufferIndex] & 0xF0) | (gray & 0x0F);
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <oled_setPixelInBuffer+0xac>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	f023 030f 	bic.w	r3, r3, #15
 8002d08:	b25a      	sxtb	r2, r3
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	b2d9      	uxtb	r1, r3
 8002d1a:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <oled_setPixelInBuffer+0xac>)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4413      	add	r3, r2
 8002d20:	460a      	mov	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e015      	b.n	8002d52 <oled_setPixelInBuffer+0xa2>
    } else {
        // 짝수 x: 상위 니블
        frameBuffer[bufferIndex] = (frameBuffer[bufferIndex] & 0x0F) | (gray << 4);
 8002d26:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <oled_setPixelInBuffer+0xac>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b25a      	sxtb	r2, r3
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	b2d9      	uxtb	r1, r3
 8002d44:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <oled_setPixelInBuffer+0xac>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4413      	add	r3, r2
 8002d4a:	460a      	mov	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e000      	b.n	8002d52 <oled_setPixelInBuffer+0xa2>
        return;
 8002d50:	bf00      	nop
    }
}
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	20000210 	.word	0x20000210

08002d60 <oled_updateDisplay>:

void oled_updateDisplay(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
    OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8002d64:	233f      	movs	r3, #63	@ 0x3f
 8002d66:	2200      	movs	r2, #0
 8002d68:	215b      	movs	r1, #91	@ 0x5b
 8002d6a:	201c      	movs	r0, #28
 8002d6c:	f7ff fd0e 	bl	800278c <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);
 8002d70:	205c      	movs	r0, #92	@ 0x5c
 8002d72:	f7ff fcbb 	bl	80026ec <OLED_write_cmd>
    OLED_write_data(frameBuffer, sizeof(frameBuffer));
 8002d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d7a:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <oled_updateDisplay+0x24>)
 8002d7c:	f7ff fcde 	bl	800273c <OLED_write_data>
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000210 	.word	0x20000210

08002d88 <oled_clearBuffer>:

void oled_clearBuffer(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0x00, sizeof(frameBuffer));
 8002d8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d90:	2100      	movs	r1, #0
 8002d92:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <oled_clearBuffer+0x14>)
 8002d94:	f009 fb70 	bl	800c478 <memset>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000210 	.word	0x20000210

08002da0 <OLED_setAntiFlicker>:
/* 플리커 방지를 위한 추가 설정 함수 */
void OLED_setAntiFlicker(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
    // 디스플레이가 켜진 후 추가 플리커 방지 설정
    OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 8002da4:	20b3      	movs	r0, #179	@ 0xb3
 8002da6:	f7ff fca1 	bl	80026ec <OLED_write_cmd>
    d = 0x70;  // 더욱 느린 클록으로 설정
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <OLED_setAntiFlicker+0x38>)
 8002dac:	2270      	movs	r2, #112	@ 0x70
 8002dae:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002db0:	2101      	movs	r1, #1
 8002db2:	4809      	ldr	r0, [pc, #36]	@ (8002dd8 <OLED_setAntiFlicker+0x38>)
 8002db4:	f7ff fcc2 	bl	800273c <OLED_write_data>

    // 대비를 더 낮춤
    OLED_write_cmd(OLED_SETCONTRAST);
 8002db8:	20c1      	movs	r0, #193	@ 0xc1
 8002dba:	f7ff fc97 	bl	80026ec <OLED_write_cmd>
    d = 0xCF;  // 더 낮은 대비
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <OLED_setAntiFlicker+0x38>)
 8002dc0:	22cf      	movs	r2, #207	@ 0xcf
 8002dc2:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4804      	ldr	r0, [pc, #16]	@ (8002dd8 <OLED_setAntiFlicker+0x38>)
 8002dc8:	f7ff fcb8 	bl	800273c <OLED_write_data>

    printf("Anti-flicker mode enabled\r\n");
 8002dcc:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <OLED_setAntiFlicker+0x3c>)
 8002dce:	f009 fa51 	bl	800c274 <puts>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000020f 	.word	0x2000020f
 8002ddc:	0800eb7c 	.word	0x0800eb7c

08002de0 <OLED_setCameraMode>:

/* 촬영 모드 - 플리커 최소화 */
/* 촬영 모드 - 플리커 최소화 (밝기 개선 버전) */
void OLED_setCameraMode(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
    // 촬영을 위한 최적 설정 (밝기 유지하면서 플리커 감소)
    OLED_write_cmd(OLED_SETCLOCKDIVIDER);
 8002de4:	20b3      	movs	r0, #179	@ 0xb3
 8002de6:	f7ff fc81 	bl	80026ec <OLED_write_cmd>
    d = 0x70;  // 느린 클록 (플리커 감소)
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002dec:	2270      	movs	r2, #112	@ 0x70
 8002dee:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002df0:	2101      	movs	r1, #1
 8002df2:	480f      	ldr	r0, [pc, #60]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002df4:	f7ff fca2 	bl	800273c <OLED_write_data>
    OLED_write_cmd(OLED_MASTERCURRENT);
 8002df8:	20c7      	movs	r0, #199	@ 0xc7
 8002dfa:	f7ff fc77 	bl	80026ec <OLED_write_cmd>
    d = 0x1F;  // 0x08에서 0x0D로 증가 (밝기 유지)
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002e00:	221f      	movs	r2, #31
 8002e02:	701a      	strb	r2, [r3, #0]
    OLED_write_data(&d, 1);
 8002e04:	2101      	movs	r1, #1
 8002e06:	480a      	ldr	r0, [pc, #40]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002e08:	f7ff fc98 	bl	800273c <OLED_write_data>

    // 대비도 최대로
       OLED_write_cmd(OLED_SETCONTRAST);
 8002e0c:	20c1      	movs	r0, #193	@ 0xc1
 8002e0e:	f7ff fc6d 	bl	80026ec <OLED_write_cmd>
       d = 0xFF;
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002e14:	22ff      	movs	r2, #255	@ 0xff
 8002e16:	701a      	strb	r2, [r3, #0]
       OLED_write_data(&d, 1);
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4805      	ldr	r0, [pc, #20]	@ (8002e30 <OLED_setCameraMode+0x50>)
 8002e1c:	f7ff fc8e 	bl	800273c <OLED_write_data>

    HAL_Delay(200);
 8002e20:	20c8      	movs	r0, #200	@ 0xc8
 8002e22:	f000 fbfd 	bl	8003620 <HAL_Delay>
    printf("Camera mode enabled - balanced brightness and flicker\r\n");
 8002e26:	4803      	ldr	r0, [pc, #12]	@ (8002e34 <OLED_setCameraMode+0x54>)
 8002e28:	f009 fa24 	bl	800c274 <puts>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	2000020f 	.word	0x2000020f
 8002e34:	0800eb98 	.word	0x0800eb98

08002e38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <MX_SPI1_Init+0x78>)
 8002e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e50:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e52:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e6e:	2218      	movs	r2, #24
 8002e70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e86:	2207      	movs	r2, #7
 8002e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e92:	2208      	movs	r2, #8
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_SPI1_Init+0x74>)
 8002e98:	f002 f8fe 	bl	8005098 <HAL_SPI_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ea2:	f7ff fc1d 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200047b0 	.word	0x200047b0
 8002eb0:	40013000 	.word	0x40013000

08002eb4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002eba:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <MX_SPI3_Init+0x78>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ec0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ece:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ed2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002eea:	2228      	movs	r2, #40	@ 0x28
 8002eec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002f02:	2207      	movs	r2, #7
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002f0e:	2208      	movs	r2, #8
 8002f10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f12:	4805      	ldr	r0, [pc, #20]	@ (8002f28 <MX_SPI3_Init+0x74>)
 8002f14:	f002 f8c0 	bl	8005098 <HAL_SPI_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002f1e:	f7ff fbdf 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000474c 	.word	0x2000474c
 8002f2c:	40003c00 	.word	0x40003c00

08002f30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	@ 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a57      	ldr	r2, [pc, #348]	@ (80030ac <HAL_SPI_MspInit+0x17c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d17b      	bne.n	800304a <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f52:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f56:	4a56      	ldr	r2, [pc, #344]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f5e:	4b54      	ldr	r3, [pc, #336]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a50      	ldr	r2, [pc, #320]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b4e      	ldr	r3, [pc, #312]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 8002f82:	23e0      	movs	r3, #224	@ 0xe0
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f92:	2305      	movs	r3, #5
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa0:	f000 fef6 	bl	8003d90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002fa4:	4b43      	ldr	r3, [pc, #268]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fa6:	4a44      	ldr	r2, [pc, #272]	@ (80030b8 <HAL_SPI_MspInit+0x188>)
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002faa:	4b42      	ldr	r3, [pc, #264]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fac:	220a      	movs	r2, #10
 8002fae:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb0:	4b40      	ldr	r3, [pc, #256]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002fce:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fd4:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002fda:	4836      	ldr	r0, [pc, #216]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fdc:	f000 fc5e 	bl	800389c <HAL_DMA_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002fe6:	f7ff fb7b 	bl	80026e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a31      	ldr	r2, [pc, #196]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002fee:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ff0:	4a30      	ldr	r2, [pc, #192]	@ (80030b4 <HAL_SPI_MspInit+0x184>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002ff6:	4b31      	ldr	r3, [pc, #196]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8002ff8:	4a31      	ldr	r2, [pc, #196]	@ (80030c0 <HAL_SPI_MspInit+0x190>)
 8002ffa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8002ffe:	220b      	movs	r2, #11
 8003000:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003002:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003004:	2210      	movs	r2, #16
 8003006:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003008:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800300e:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003014:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003016:	2200      	movs	r2, #0
 8003018:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800301a:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003020:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003022:	2220      	movs	r2, #32
 8003024:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003026:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800302c:	4823      	ldr	r0, [pc, #140]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 800302e:	f000 fc35 	bl	800389c <HAL_DMA_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003038:	f7ff fb52 	bl	80026e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
 8003042:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <HAL_SPI_MspInit+0x18c>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003048:	e02c      	b.n	80030a4 <HAL_SPI_MspInit+0x174>
  else if(spiHandle->Instance==SPI3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_SPI_MspInit+0x194>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d127      	bne.n	80030a4 <HAL_SPI_MspInit+0x174>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003054:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 800305a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 800306e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003070:	4a0f      	ldr	r2, [pc, #60]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <HAL_SPI_MspInit+0x180>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003084:	2328      	movs	r3, #40	@ 0x28
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003094:	2306      	movs	r3, #6
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	480a      	ldr	r0, [pc, #40]	@ (80030c8 <HAL_SPI_MspInit+0x198>)
 80030a0:	f000 fe76 	bl	8003d90 <HAL_GPIO_Init>
}
 80030a4:	bf00      	nop
 80030a6:	3730      	adds	r7, #48	@ 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40013000 	.word	0x40013000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	20004814 	.word	0x20004814
 80030b8:	40020008 	.word	0x40020008
 80030bc:	20004874 	.word	0x20004874
 80030c0:	4002001c 	.word	0x4002001c
 80030c4:	40003c00 	.word	0x40003c00
 80030c8:	48000400 	.word	0x48000400

080030cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003110 <HAL_MspInit+0x44>)
 80030d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003110 <HAL_MspInit+0x44>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80030de:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <HAL_MspInit+0x44>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_MspInit+0x44>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_MspInit+0x44>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_MspInit+0x44>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003102:	f001 f89b 	bl	800423c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <NMI_Handler+0x4>

0800311c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <HardFault_Handler+0x4>

08003124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <MemManage_Handler+0x4>

0800312c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <UsageFault_Handler+0x4>

0800313c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <SysTick_Handler+0x38>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <SysTick_Handler+0x18>
		Timer1--;
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <SysTick_Handler+0x38>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <SysTick_Handler+0x38>)
 800317e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8003180:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <SysTick_Handler+0x3c>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <SysTick_Handler+0x2c>
		Timer2--;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <SysTick_Handler+0x3c>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <SysTick_Handler+0x3c>)
 8003192:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f000 fa26 	bl	80035e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003198:	f000 fb73 	bl	8003882 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20002598 	.word	0x20002598
 80031a4:	20002596 	.word	0x20002596

080031a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <DMA1_Channel1_IRQHandler+0x10>)
 80031ae:	f000 fcdd 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20004814 	.word	0x20004814

080031bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80031c0:	4802      	ldr	r0, [pc, #8]	@ (80031cc <DMA1_Channel2_IRQHandler+0x10>)
 80031c2:	f000 fcd3 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20004874 	.word	0x20004874

080031d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031d4:	4802      	ldr	r0, [pc, #8]	@ (80031e0 <USART1_IRQHandler+0x10>)
 80031d6:	f002 fe2d 	bl	8005e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200048d4 	.word	0x200048d4

080031e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_kill>:

int _kill(int pid, int sig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031fe:	f009 f9af 	bl	800c560 <__errno>
 8003202:	4603      	mov	r3, r0
 8003204:	2216      	movs	r2, #22
 8003206:	601a      	str	r2, [r3, #0]
  return -1;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_exit>:

void _exit (int status)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ffe7 	bl	80031f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <_exit+0x12>

0800322a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e00a      	b.n	8003252 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800323c:	f3af 8000 	nop.w
 8003240:	4601      	mov	r1, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	60ba      	str	r2, [r7, #8]
 8003248:	b2ca      	uxtb	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	429a      	cmp	r2, r3
 8003258:	dbf0      	blt.n	800323c <_read+0x12>
  }

  return len;
 800325a:	687b      	ldr	r3, [r7, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e009      	b.n	800328a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	60ba      	str	r2, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fbb2 	bl	80019e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	429a      	cmp	r2, r3
 8003290:	dbf1      	blt.n	8003276 <_write+0x12>
  }
  return len;
 8003292:	687b      	ldr	r3, [r7, #4]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_close>:

int _close(int file)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032c4:	605a      	str	r2, [r3, #4]
  return 0;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_isatty>:

int _isatty(int file)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032dc:	2301      	movs	r3, #1
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f009 f914 	bl	800c560 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20008000 	.word	0x20008000
 8003364:	00000400 	.word	0x00000400
 8003368:	20002210 	.word	0x20002210
 800336c:	200069d8 	.word	0x200069d8

08003370 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003398:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 800339a:	4a23      	ldr	r2, [pc, #140]	@ (8003428 <MX_USART1_UART_Init+0x94>)
 800339c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033ba:	220c      	movs	r2, #12
 80033bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033be:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c4:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ca:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033d0:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d6:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033dc:	4811      	ldr	r0, [pc, #68]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033de:	f002 fbff 	bl	8005be0 <HAL_UART_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80033e8:	f7ff f97a 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033ec:	2100      	movs	r1, #0
 80033ee:	480d      	ldr	r0, [pc, #52]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 80033f0:	f004 fc45 	bl	8007c7e <HAL_UARTEx_SetTxFifoThreshold>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80033fa:	f7ff f971 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	4808      	ldr	r0, [pc, #32]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 8003402:	f004 fc7a 	bl	8007cfa <HAL_UARTEx_SetRxFifoThreshold>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800340c:	f7ff f968 	bl	80026e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <MX_USART1_UART_Init+0x90>)
 8003412:	f004 fbfb 	bl	8007c0c <HAL_UARTEx_DisableFifoMode>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800341c:	f7ff f960 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200048d4 	.word	0x200048d4
 8003428:	40013800 	.word	0x40013800

0800342c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b09a      	sub	sp, #104	@ 0x68
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2244      	movs	r2, #68	@ 0x44
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f009 f813 	bl	800c478 <memset>
  if(uartHandle->Instance==USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a22      	ldr	r2, [pc, #136]	@ (80034e0 <HAL_UART_MspInit+0xb4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d13d      	bne.n	80034d8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fc25 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003474:	f7ff f934 	bl	80026e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003478:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 800347a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347c:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 800347e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003482:	6613      	str	r3, [r2, #96]	@ 0x60
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 8003486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003490:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003494:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800349c:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <HAL_UART_MspInit+0xb8>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034a8:	23c0      	movs	r3, #192	@ 0xc0
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034b8:	2307      	movs	r3, #7
 80034ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034c0:	4619      	mov	r1, r3
 80034c2:	4809      	ldr	r0, [pc, #36]	@ (80034e8 <HAL_UART_MspInit+0xbc>)
 80034c4:	f000 fc64 	bl	8003d90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	2025      	movs	r0, #37	@ 0x25
 80034ce:	f000 f9a4 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034d2:	2025      	movs	r0, #37	@ 0x25
 80034d4:	f000 f9bb 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034d8:	bf00      	nop
 80034da:	3768      	adds	r7, #104	@ 0x68
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40021000 	.word	0x40021000
 80034e8:	48000400 	.word	0x48000400

080034ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034ec:	480d      	ldr	r0, [pc, #52]	@ (8003524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f0:	f7ff ff3e 	bl	8003370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034f4:	480c      	ldr	r0, [pc, #48]	@ (8003528 <LoopForever+0x6>)
  ldr r1, =_edata
 80034f6:	490d      	ldr	r1, [pc, #52]	@ (800352c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <LoopForever+0xe>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034fc:	e002      	b.n	8003504 <LoopCopyDataInit>

080034fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003502:	3304      	adds	r3, #4

08003504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003508:	d3f9      	bcc.n	80034fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800350c:	4c0a      	ldr	r4, [pc, #40]	@ (8003538 <LoopForever+0x16>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003510:	e001      	b.n	8003516 <LoopFillZerobss>

08003512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003514:	3204      	adds	r2, #4

08003516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003518:	d3fb      	bcc.n	8003512 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800351a:	f009 f827 	bl	800c56c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800351e:	f7fe ffe9 	bl	80024f4 <main>

08003522 <LoopForever>:

LoopForever:
    b LoopForever
 8003522:	e7fe      	b.n	8003522 <LoopForever>
  ldr   r0, =_estack
 8003524:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800352c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003530:	0800fb94 	.word	0x0800fb94
  ldr r2, =_sbss
 8003534:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003538:	200069d8 	.word	0x200069d8

0800353c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800353c:	e7fe      	b.n	800353c <ADC1_2_IRQHandler>

0800353e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003548:	2003      	movs	r0, #3
 800354a:	f000 f95b 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800354e:	200f      	movs	r0, #15
 8003550:	f000 f80e 	bl	8003570 <HAL_InitTick>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	71fb      	strb	r3, [r7, #7]
 800355e:	e001      	b.n	8003564 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003560:	f7ff fdb4 	bl	80030cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003564:	79fb      	ldrb	r3, [r7, #7]

}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800357c:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <HAL_InitTick+0x68>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003584:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_InitTick+0x6c>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <HAL_InitTick+0x68>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003590:	fbb1 f3f3 	udiv	r3, r1, r3
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f966 	bl	800386a <HAL_SYSTICK_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d809      	bhi.n	80035be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035aa:	2200      	movs	r2, #0
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	f000 f932 	bl	800381a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b6:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <HAL_InitTick+0x70>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e007      	b.n	80035ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e004      	b.n	80035ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e001      	b.n	80035ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	20000004 	.word	0x20000004
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_IncTick+0x1c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_IncTick+0x20>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a03      	ldr	r2, [pc, #12]	@ (8003600 <HAL_IncTick+0x1c>)
 80035f4:	6013      	str	r3, [r2, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20004968 	.word	0x20004968
 8003604:	2000000c 	.word	0x2000000c

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20004968 	.word	0x20004968

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d004      	beq.n	8003644 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <HAL_Delay+0x40>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003644:	bf00      	nop
 8003646:	f7ff ffdf 	bl	8003608 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	429a      	cmp	r2, r3
 8003654:	d8f7      	bhi.n	8003646 <HAL_Delay+0x26>
  {
  }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000000c 	.word	0x2000000c

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	@ (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	@ (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	@ (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	@ (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	@ 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	@ 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037d0:	d301      	bcc.n	80037d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00f      	b.n	80037f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <SysTick_Config+0x40>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037de:	210f      	movs	r1, #15
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f7ff ff8e 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <SysTick_Config+0x40>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <SysTick_Config+0x40>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff29 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff40 	bl	80036ac <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff90 	bl	8003758 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5f 	bl	8003704 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff33 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa4 	bl	80037c0 <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003886:	f000 f802 	bl	800388e <HAL_SYSTICK_Callback>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e08d      	b.n	80039ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_DMA_Init+0x138>)
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d80f      	bhi.n	80038da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4b45      	ldr	r3, [pc, #276]	@ (80039d8 <HAL_DMA_Init+0x13c>)
 80038c2:	4413      	add	r3, r2
 80038c4:	4a45      	ldr	r2, [pc, #276]	@ (80039dc <HAL_DMA_Init+0x140>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a42      	ldr	r2, [pc, #264]	@ (80039e0 <HAL_DMA_Init+0x144>)
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80038d8:	e00e      	b.n	80038f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	4b40      	ldr	r3, [pc, #256]	@ (80039e4 <HAL_DMA_Init+0x148>)
 80038e2:	4413      	add	r3, r2
 80038e4:	4a3d      	ldr	r2, [pc, #244]	@ (80039dc <HAL_DMA_Init+0x140>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	009a      	lsls	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a3c      	ldr	r2, [pc, #240]	@ (80039e8 <HAL_DMA_Init+0x14c>)
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800390e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9be 	bl	8003ccc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003958:	d102      	bne.n	8003960 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003974:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_DMA_Init+0x104>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d80c      	bhi.n	80039a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9de 	bl	8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e008      	b.n	80039b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40020407 	.word	0x40020407
 80039d8:	bffdfff8 	.word	0xbffdfff8
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	40020000 	.word	0x40020000
 80039e4:	bffdfbf8 	.word	0xbffdfbf8
 80039e8:	40020400 	.word	0x40020400

080039ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e037      	b.n	8003a80 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a5c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a74:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a7e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e047      	b.n	8003b62 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 020e 	bic.w	r2, r2, #14
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f003 021f 	and.w	r2, r3, #31
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
    }
  }
  return status;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d026      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x7a>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d021      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc4:	f003 021f 	and.w	r2, r3, #31
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	2104      	movs	r1, #4
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d071      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003be4:	e06c      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2202      	movs	r2, #2
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02e      	beq.n	8003c58 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d029      	beq.n	8003c58 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 020a 	bic.w	r2, r2, #10
 8003c20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f003 021f 	and.w	r2, r3, #31
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	2102      	movs	r1, #2
 8003c38:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d038      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c56:	e033      	b.n	8003cc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2208      	movs	r2, #8
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d025      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 020e 	bic.w	r2, r2, #14
 8003c84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f003 021f 	and.w	r2, r3, #31
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
}
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d802      	bhi.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e001      	b.n	8003cea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ce8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3b08      	subs	r3, #8
 8003cf6:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a0b      	ldr	r2, [pc, #44]	@ (8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40020407 	.word	0x40020407
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020820 	.word	0x40020820
 8003d40:	cccccccd 	.word	0xcccccccd
 8003d44:	40020880 	.word	0x40020880

08003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d6a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	1000823f 	.word	0x1000823f
 8003d8c:	40020940 	.word	0x40020940

08003d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d9e:	e15a      	b.n	8004056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2101      	movs	r1, #1
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	4013      	ands	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 814c 	beq.w	8004050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d005      	beq.n	8003dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d130      	bne.n	8003e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e06:	2201      	movs	r2, #1
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	f003 0201 	and.w	r2, r3, #1
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d017      	beq.n	8003e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	2203      	movs	r2, #3
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d123      	bne.n	8003ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	08da      	lsrs	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3208      	adds	r2, #8
 8003e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	220f      	movs	r2, #15
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	6939      	ldr	r1, [r7, #16]
 8003ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	2203      	movs	r2, #3
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0203 	and.w	r2, r3, #3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80a6 	beq.w	8004050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f04:	4b5b      	ldr	r3, [pc, #364]	@ (8004074 <HAL_GPIO_Init+0x2e4>)
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	4a5a      	ldr	r2, [pc, #360]	@ (8004074 <HAL_GPIO_Init+0x2e4>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f10:	4b58      	ldr	r3, [pc, #352]	@ (8004074 <HAL_GPIO_Init+0x2e4>)
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1c:	4a56      	ldr	r2, [pc, #344]	@ (8004078 <HAL_GPIO_Init+0x2e8>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	3302      	adds	r3, #2
 8003f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f46:	d01f      	beq.n	8003f88 <HAL_GPIO_Init+0x1f8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800407c <HAL_GPIO_Init+0x2ec>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d019      	beq.n	8003f84 <HAL_GPIO_Init+0x1f4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a4b      	ldr	r2, [pc, #300]	@ (8004080 <HAL_GPIO_Init+0x2f0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_GPIO_Init+0x1f0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004084 <HAL_GPIO_Init+0x2f4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00d      	beq.n	8003f7c <HAL_GPIO_Init+0x1ec>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a49      	ldr	r2, [pc, #292]	@ (8004088 <HAL_GPIO_Init+0x2f8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <HAL_GPIO_Init+0x1e8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a48      	ldr	r2, [pc, #288]	@ (800408c <HAL_GPIO_Init+0x2fc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_GPIO_Init+0x1e4>
 8003f70:	2305      	movs	r3, #5
 8003f72:	e00a      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f74:	2306      	movs	r3, #6
 8003f76:	e008      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	e006      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e004      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e002      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_GPIO_Init+0x1fa>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	f002 0203 	and.w	r2, r2, #3
 8003f90:	0092      	lsls	r2, r2, #2
 8003f92:	4093      	lsls	r3, r2
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9a:	4937      	ldr	r1, [pc, #220]	@ (8004078 <HAL_GPIO_Init+0x2e8>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa8:	4b39      	ldr	r3, [pc, #228]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fcc:	4a30      	ldr	r2, [pc, #192]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ff6:	4a26      	ldr	r2, [pc, #152]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ffc:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004020:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <HAL_GPIO_Init+0x300>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404a:	4a11      	ldr	r2, [pc, #68]	@ (8004090 <HAL_GPIO_Init+0x300>)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f ae9d 	bne.w	8003da0 <HAL_GPIO_Init+0x10>
  }
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40021000 	.word	0x40021000
 8004078:	40010000 	.word	0x40010000
 800407c:	48000400 	.word	0x48000400
 8004080:	48000800 	.word	0x48000800
 8004084:	48000c00 	.word	0x48000c00
 8004088:	48001000 	.word	0x48001000
 800408c:	48001400 	.word	0x48001400
 8004090:	40010400 	.word	0x40010400

08004094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e001      	b.n	80040b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d141      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004102:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d131      	bne.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004110:	4b47      	ldr	r3, [pc, #284]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004116:	4a46      	ldr	r2, [pc, #280]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800411c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004120:	4b43      	ldr	r3, [pc, #268]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004128:	4a41      	ldr	r2, [pc, #260]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004130:	4b40      	ldr	r3, [pc, #256]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2232      	movs	r2, #50	@ 0x32
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	4a3f      	ldr	r2, [pc, #252]	@ (8004238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0c9b      	lsrs	r3, r3, #18
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004146:	e002      	b.n	800414e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800414e:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d102      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f2      	bne.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004162:	4b33      	ldr	r3, [pc, #204]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416e:	d158      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e057      	b.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004174:	4b2e      	ldr	r3, [pc, #184]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800417a:	4a2d      	ldr	r2, [pc, #180]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004184:	e04d      	b.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800418c:	d141      	bne.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800418e:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419a:	d131      	bne.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a2:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ac:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2232      	movs	r2, #50	@ 0x32
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0c9b      	lsrs	r3, r3, #18
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d2:	e002      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e6:	d102      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f2      	bne.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ee:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d112      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e011      	b.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004206:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004210:	e007      	b.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004212:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800421a:	4a05      	ldr	r2, [pc, #20]	@ (8004230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40007000 	.word	0x40007000
 8004234:	20000004 	.word	0x20000004
 8004238:	431bde83 	.word	0x431bde83

0800423c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800424a:	6093      	str	r3, [r2, #8]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40007000 	.word	0x40007000

0800425c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e2fe      	b.n	800486c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d075      	beq.n	8004366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b97      	ldr	r3, [pc, #604]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004284:	4b94      	ldr	r3, [pc, #592]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d102      	bne.n	800429a <HAL_RCC_OscConfig+0x3e>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b03      	cmp	r3, #3
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_OscConfig+0x44>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	4b8d      	ldr	r3, [pc, #564]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05b      	beq.n	8004364 <HAL_RCC_OscConfig+0x108>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d157      	bne.n	8004364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e2d9      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x74>
 80042c2:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a84      	ldr	r2, [pc, #528]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xb0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x98>
 80042da:	4b7f      	ldr	r3, [pc, #508]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7e      	ldr	r2, [pc, #504]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b7c      	ldr	r3, [pc, #496]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7b      	ldr	r2, [pc, #492]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xb0>
 80042f4:	4b78      	ldr	r3, [pc, #480]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b75      	ldr	r3, [pc, #468]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a74      	ldr	r2, [pc, #464]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7ff f978 	bl	8003608 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7ff f974 	bl	8003608 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e29e      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432e:	4b6a      	ldr	r3, [pc, #424]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xc0>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7ff f964 	bl	8003608 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7ff f960 	bl	8003608 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	@ 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e28a      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004356:	4b60      	ldr	r3, [pc, #384]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0xe8>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d075      	beq.n	800445e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004372:	4b59      	ldr	r3, [pc, #356]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437c:	4b56      	ldr	r3, [pc, #344]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	d102      	bne.n	8004392 <HAL_RCC_OscConfig+0x136>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d002      	beq.n	8004398 <HAL_RCC_OscConfig+0x13c>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11f      	bne.n	80043d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_OscConfig+0x154>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e25d      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b0:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	4946      	ldr	r1, [pc, #280]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c4:	4b45      	ldr	r3, [pc, #276]	@ (80044dc <HAL_RCC_OscConfig+0x280>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff f8d1 	bl	8003570 <HAL_InitTick>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d043      	beq.n	800445c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e249      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d023      	beq.n	8004428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b3d      	ldr	r3, [pc, #244]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a3c      	ldr	r2, [pc, #240]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7ff f90c 	bl	8003608 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7ff f908 	bl	8003608 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e232      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	492d      	ldr	r1, [pc, #180]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
 8004426:	e01a      	b.n	800445e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004428:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2a      	ldr	r2, [pc, #168]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800442e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7ff f8e8 	bl	8003608 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7ff f8e4 	bl	8003608 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e20e      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444e:	4b22      	ldr	r3, [pc, #136]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1e0>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d041      	beq.n	80044ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01c      	beq.n	80044ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004478:	4a17      	ldr	r2, [pc, #92]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7ff f8c1 	bl	8003608 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448a:	f7ff f8bd 	bl	8003608 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e1e7      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449c:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ef      	beq.n	800448a <HAL_RCC_OscConfig+0x22e>
 80044aa:	e020      	b.n	80044ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b2:	4a09      	ldr	r2, [pc, #36]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7ff f8a4 	bl	8003608 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c2:	e00d      	b.n	80044e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7ff f8a0 	bl	8003608 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d906      	bls.n	80044e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1ca      	b.n	800486c <HAL_RCC_OscConfig+0x610>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ea      	bne.n	80044c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a6 	beq.w	8004648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004500:	4b84      	ldr	r3, [pc, #528]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_OscConfig+0x2b4>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x2b6>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	4b7f      	ldr	r3, [pc, #508]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	4a7e      	ldr	r2, [pc, #504]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	@ 0x58
 8004522:	4b7c      	ldr	r3, [pc, #496]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004532:	4b79      	ldr	r3, [pc, #484]	@ (8004718 <HAL_RCC_OscConfig+0x4bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800453e:	4b76      	ldr	r3, [pc, #472]	@ (8004718 <HAL_RCC_OscConfig+0x4bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a75      	ldr	r2, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x4bc>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7ff f85d 	bl	8003608 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004552:	f7ff f859 	bl	8003608 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e183      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004564:	4b6c      	ldr	r3, [pc, #432]	@ (8004718 <HAL_RCC_OscConfig+0x4bc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d108      	bne.n	800458a <HAL_RCC_OscConfig+0x32e>
 8004578:	4b66      	ldr	r3, [pc, #408]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	4a65      	ldr	r2, [pc, #404]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004588:	e024      	b.n	80045d4 <HAL_RCC_OscConfig+0x378>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d110      	bne.n	80045b4 <HAL_RCC_OscConfig+0x358>
 8004592:	4b60      	ldr	r3, [pc, #384]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004598:	4a5e      	ldr	r2, [pc, #376]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f043 0304 	orr.w	r3, r3, #4
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b2:	e00f      	b.n	80045d4 <HAL_RCC_OscConfig+0x378>
 80045b4:	4b57      	ldr	r3, [pc, #348]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	4a56      	ldr	r2, [pc, #344]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c4:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	4a52      	ldr	r2, [pc, #328]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7ff f814 	bl	8003608 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7ff f810 	bl	8003608 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e138      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	4b46      	ldr	r3, [pc, #280]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ed      	beq.n	80045e4 <HAL_RCC_OscConfig+0x388>
 8004608:	e015      	b.n	8004636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe fffd 	bl	8003608 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fe fff9 	bl	8003608 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e121      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004628:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ed      	bne.n	8004612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b35      	ldr	r3, [pc, #212]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	4a34      	ldr	r2, [pc, #208]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004646:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d03c      	beq.n	80046ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01c      	beq.n	8004696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800465c:	4b2d      	ldr	r3, [pc, #180]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800465e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004662:	4a2c      	ldr	r2, [pc, #176]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe ffcc 	bl	8003608 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004674:	f7fe ffc8 	bl	8003608 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0f2      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004686:	4b23      	ldr	r3, [pc, #140]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ef      	beq.n	8004674 <HAL_RCC_OscConfig+0x418>
 8004694:	e01b      	b.n	80046ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004696:	4b1f      	ldr	r3, [pc, #124]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 8004698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800469c:	4a1d      	ldr	r2, [pc, #116]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fe ffaf 	bl	8003608 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ae:	f7fe ffab 	bl	8003608 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0d5      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c0:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80046c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ef      	bne.n	80046ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80c9 	beq.w	800486a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	f000 8083 	beq.w	80047ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d15e      	bne.n	80047ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a08      	ldr	r2, [pc, #32]	@ (8004714 <HAL_RCC_OscConfig+0x4b8>)
 80046f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fe ff85 	bl	8003608 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	e00c      	b.n	800471c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fe ff81 	bl	8003608 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d905      	bls.n	800471c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0ab      	b.n	800486c <HAL_RCC_OscConfig+0x610>
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471c:	4b55      	ldr	r3, [pc, #340]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ec      	bne.n	8004702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004728:	4b52      	ldr	r3, [pc, #328]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b52      	ldr	r3, [pc, #328]	@ (8004878 <HAL_RCC_OscConfig+0x61c>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6a11      	ldr	r1, [r2, #32]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004738:	3a01      	subs	r2, #1
 800473a:	0112      	lsls	r2, r2, #4
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004742:	0212      	lsls	r2, r2, #8
 8004744:	4311      	orrs	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0552      	lsls	r2, r2, #21
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004756:	0852      	lsrs	r2, r2, #1
 8004758:	3a01      	subs	r2, #1
 800475a:	0652      	lsls	r2, r2, #25
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004762:	06d2      	lsls	r2, r2, #27
 8004764:	430a      	orrs	r2, r1
 8004766:	4943      	ldr	r1, [pc, #268]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 8004768:	4313      	orrs	r3, r2
 800476a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b41      	ldr	r3, [pc, #260]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a40      	ldr	r2, [pc, #256]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004778:	4b3e      	ldr	r3, [pc, #248]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a3d      	ldr	r2, [pc, #244]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 800477e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe ff40 	bl	8003608 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe ff3c 	bl	8003608 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e066      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	4b35      	ldr	r3, [pc, #212]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x530>
 80047aa:	e05e      	b.n	800486a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ac:	4b31      	ldr	r3, [pc, #196]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe ff26 	bl	8003608 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fe ff22 	bl	8003608 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04c      	b.n	800486c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d2:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047de:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4924      	ldr	r1, [pc, #144]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047e4:	4b25      	ldr	r3, [pc, #148]	@ (800487c <HAL_RCC_OscConfig+0x620>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	60cb      	str	r3, [r1, #12]
 80047ea:	e03e      	b.n	800486a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e039      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004874 <HAL_RCC_OscConfig+0x618>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 0203 	and.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	429a      	cmp	r2, r3
 800480a:	d12c      	bne.n	8004866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	3b01      	subs	r3, #1
 8004818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d123      	bne.n	8004866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d11b      	bne.n	8004866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d113      	bne.n	8004866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	3b01      	subs	r3, #1
 800484c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	3b01      	subs	r3, #1
 8004860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	019f800c 	.word	0x019f800c
 800487c:	feeefffc 	.word	0xfeeefffc

08004880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e11e      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b91      	ldr	r3, [pc, #580]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d910      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b8e      	ldr	r3, [pc, #568]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 020f 	bic.w	r2, r3, #15
 80048ae:	498c      	ldr	r1, [pc, #560]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e106      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d073      	beq.n	80049bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d129      	bne.n	8004930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048dc:	4b81      	ldr	r3, [pc, #516]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0f4      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048ec:	f000 f99e 	bl	8004c2c <RCC_GetSysClockFreqFromPLLSource>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae8 <HAL_RCC_ClockConfig+0x268>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d93f      	bls.n	800497a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048fa:	4b7a      	ldr	r3, [pc, #488]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800490e:	2b00      	cmp	r3, #0
 8004910:	d033      	beq.n	800497a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004916:	2b00      	cmp	r3, #0
 8004918:	d12f      	bne.n	800497a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800491a:	4b72      	ldr	r3, [pc, #456]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004922:	4a70      	ldr	r2, [pc, #448]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e024      	b.n	800497a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d107      	bne.n	8004948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004938:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0c6      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004948:	4b66      	ldr	r3, [pc, #408]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0be      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004958:	f000 f8ce 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 800495c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4a61      	ldr	r2, [pc, #388]	@ (8004ae8 <HAL_RCC_ClockConfig+0x268>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d909      	bls.n	800497a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004966:	4b5f      	ldr	r3, [pc, #380]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800496e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800497a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f023 0203 	bic.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4957      	ldr	r1, [pc, #348]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004988:	4313      	orrs	r3, r2
 800498a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498c:	f7fe fe3c 	bl	8003608 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	e00a      	b.n	80049aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004994:	f7fe fe38 	bl	8003608 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e095      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	4b4e      	ldr	r3, [pc, #312]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 020c 	and.w	r2, r3, #12
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d1eb      	bne.n	8004994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d023      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d4:	4b43      	ldr	r3, [pc, #268]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a42      	ldr	r2, [pc, #264]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049ec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049f4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4936      	ldr	r1, [pc, #216]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b80      	cmp	r3, #128	@ 0x80
 8004a14:	d105      	bne.n	8004a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a16:	4b33      	ldr	r3, [pc, #204]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a22:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d21d      	bcs.n	8004a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 020f 	bic.w	r2, r3, #15
 8004a38:	4929      	ldr	r1, [pc, #164]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a40:	f7fe fde2 	bl	8003608 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fe fdde 	bl	8003608 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e03b      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1ed      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4917      	ldr	r1, [pc, #92]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	490f      	ldr	r1, [pc, #60]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aaa:	f000 f825 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	490c      	ldr	r1, [pc, #48]	@ (8004aec <HAL_RCC_ClockConfig+0x26c>)
 8004abc:	5ccb      	ldrb	r3, [r1, r3]
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <HAL_RCC_ClockConfig+0x270>)
 8004ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <HAL_RCC_ClockConfig+0x274>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fd4e 	bl	8003570 <HAL_InitTick>
 8004ad4:	4603      	mov	r3, r0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40022000 	.word	0x40022000
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	04c4b400 	.word	0x04c4b400
 8004aec:	0800f38c 	.word	0x0800f38c
 8004af0:	20000004 	.word	0x20000004
 8004af4:	20000008 	.word	0x20000008

08004af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004afe:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d102      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e047      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b10:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b1c:	4b26      	ldr	r3, [pc, #152]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e03e      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b22:	4b23      	ldr	r3, [pc, #140]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d136      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d10c      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	4a16      	ldr	r2, [pc, #88]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b56:	68d2      	ldr	r2, [r2, #12]
 8004b58:	0a12      	lsrs	r2, r2, #8
 8004b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b66:	4a13      	ldr	r2, [pc, #76]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	0a12      	lsrs	r2, r2, #8
 8004b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	617b      	str	r3, [r7, #20]
      break;
 8004b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0e5b      	lsrs	r3, r3, #25
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e001      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ba0:	693b      	ldr	r3, [r7, #16]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	007a1200 	.word	0x007a1200

08004bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	@ (8004bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000004 	.word	0x20000004

08004bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bd8:	f7ff fff0 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800f39c 	.word	0x0800f39c

08004c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c04:	f7ff ffda 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	0adb      	lsrs	r3, r3, #11
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4904      	ldr	r1, [pc, #16]	@ (8004c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800f39c 	.word	0x0800f39c

08004c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c32:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d10c      	bne.n	8004c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5a:	68d2      	ldr	r2, [r2, #12]
 8004c5c:	0a12      	lsrs	r2, r2, #8
 8004c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]
    break;
 8004c68:	e00c      	b.n	8004c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c6a:	4a12      	ldr	r2, [pc, #72]	@ (8004cb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c74:	68d2      	ldr	r2, [r2, #12]
 8004c76:	0a12      	lsrs	r2, r2, #8
 8004c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]
    break;
 8004c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c84:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	0e5b      	lsrs	r3, r3, #25
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c9e:	687b      	ldr	r3, [r7, #4]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	007a1200 	.word	0x007a1200
 8004cb4:	00f42400 	.word	0x00f42400

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8098 	beq.w	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b43      	ldr	r3, [pc, #268]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	4a3f      	ldr	r2, [pc, #252]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d02:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a39      	ldr	r2, [pc, #228]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0e:	f7fe fc7b 	bl	8003608 <HAL_GetTick>
 8004d12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d14:	e009      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fe fc77 	bl	8003608 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	74fb      	strb	r3, [r7, #19]
        break;
 8004d28:	e005      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2a:	4b30      	ldr	r3, [pc, #192]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ef      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d159      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01e      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d019      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d58:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d74:	4b1c      	ldr	r3, [pc, #112]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fe fc37 	bl	8003608 <HAL_GetTick>
 8004d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fe fc33 	bl	8003608 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d902      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	74fb      	strb	r3, [r7, #19]
            break;
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ec      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	4903      	ldr	r1, [pc, #12]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004de0:	e008      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	74bb      	strb	r3, [r7, #18]
 8004de6:	e005      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df4:	7c7b      	ldrb	r3, [r7, #17]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4ba6      	ldr	r3, [pc, #664]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	4aa5      	ldr	r2, [pc, #660]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e12:	4ba0      	ldr	r3, [pc, #640]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	f023 0203 	bic.w	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	499c      	ldr	r1, [pc, #624]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e34:	4b97      	ldr	r3, [pc, #604]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	f023 020c 	bic.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	4994      	ldr	r1, [pc, #592]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e56:	4b8f      	ldr	r3, [pc, #572]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	498b      	ldr	r1, [pc, #556]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e78:	4b86      	ldr	r3, [pc, #536]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	4983      	ldr	r1, [pc, #524]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	497a      	ldr	r1, [pc, #488]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebc:	4b75      	ldr	r3, [pc, #468]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	4972      	ldr	r1, [pc, #456]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ede:	4b6d      	ldr	r3, [pc, #436]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4969      	ldr	r1, [pc, #420]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f00:	4b64      	ldr	r3, [pc, #400]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4961      	ldr	r1, [pc, #388]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f22:	4b5c      	ldr	r3, [pc, #368]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	4958      	ldr	r1, [pc, #352]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f44:	4b53      	ldr	r3, [pc, #332]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	4950      	ldr	r1, [pc, #320]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f62:	d105      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f64:	4b4b      	ldr	r3, [pc, #300]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a4a      	ldr	r2, [pc, #296]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d015      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f7c:	4b45      	ldr	r3, [pc, #276]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	4942      	ldr	r1, [pc, #264]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fa6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d015      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb4:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc2:	4934      	ldr	r1, [pc, #208]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fd2:	d105      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fec:	4b29      	ldr	r3, [pc, #164]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffa:	4926      	ldr	r1, [pc, #152]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800500a:	d105      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800500c:	4b21      	ldr	r3, [pc, #132]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005016:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d015      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	4918      	ldr	r1, [pc, #96]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005042:	d105      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005044:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a12      	ldr	r2, [pc, #72]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d015      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005062:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506a:	490a      	ldr	r1, [pc, #40]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800507a:	d105      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800507c:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a04      	ldr	r2, [pc, #16]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005088:	7cbb      	ldrb	r3, [r7, #18]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e09d      	b.n	80051e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d108      	bne.n	80050c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ba:	d009      	beq.n	80050d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	61da      	str	r2, [r3, #28]
 80050c2:	e005      	b.n	80050d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fd ff20 	bl	8002f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005110:	d902      	bls.n	8005118 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e002      	b.n	800511e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800511c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005126:	d007      	beq.n	8005138 <HAL_SPI_Init+0xa0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	ea42 0103 	orr.w	r1, r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 0204 	and.w	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b088      	sub	sp, #32
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fe:	f7fe fa03 	bl	8003608 <HAL_GetTick>
 8005202:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d001      	beq.n	8005218 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
 8005216:	e15c      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Transmit+0x36>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e154      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Transmit+0x48>
 8005232:	2302      	movs	r3, #2
 8005234:	e14d      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2203      	movs	r2, #3
 8005242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005288:	d10f      	bne.n	80052aa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005298:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	2b40      	cmp	r3, #64	@ 0x40
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052d0:	d952      	bls.n	8005378 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_SPI_Transmit+0xf2>
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d145      	bne.n	800536c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005304:	e032      	b.n	800536c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d112      	bne.n	800533a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	1c9a      	adds	r2, r3, #2
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005338:	e018      	b.n	800536c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800533a:	f7fe f965 	bl	8003608 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d803      	bhi.n	8005352 <HAL_SPI_Transmit+0x164>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d102      	bne.n	8005358 <HAL_SPI_Transmit+0x16a>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e0b2      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1c7      	bne.n	8005306 <HAL_SPI_Transmit+0x118>
 8005376:	e083      	b.n	8005480 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_SPI_Transmit+0x198>
 8005380:	8b7b      	ldrh	r3, [r7, #26]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d177      	bne.n	8005476 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d912      	bls.n	80053b6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b02      	subs	r3, #2
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053b4:	e05f      	b.n	8005476 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053dc:	e04b      	b.n	8005476 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d12b      	bne.n	8005444 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d912      	bls.n	800541c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005406:	1c9a      	adds	r2, r3, #2
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b02      	subs	r3, #2
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800541a:	e02c      	b.n	8005476 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005442:	e018      	b.n	8005476 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005444:	f7fe f8e0 	bl	8003608 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d803      	bhi.n	800545c <HAL_SPI_Transmit+0x26e>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d102      	bne.n	8005462 <HAL_SPI_Transmit+0x274>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e02d      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ae      	bne.n	80053de <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fb65 	bl	8005b54 <SPI_EndRxTxTransaction>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	@ 0x28
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ec:	f7fe f88c 	bl	8003608 <HAL_GetTick>
 80054f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d00c      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x4e>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005514:	d106      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x4a>
 800551e:	7ffb      	ldrb	r3, [r7, #31]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d001      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
 8005526:	e1f3      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_SPI_TransmitReceive+0x60>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_SPI_TransmitReceive+0x60>
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e1e8      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_SPI_TransmitReceive+0x72>
 8005548:	2302      	movs	r3, #2
 800554a:	e1e1      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b04      	cmp	r3, #4
 800555e:	d003      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2205      	movs	r2, #5
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	887a      	ldrh	r2, [r7, #2]
 800558e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055aa:	d802      	bhi.n	80055b2 <HAL_SPI_TransmitReceive+0xd8>
 80055ac:	8abb      	ldrh	r3, [r7, #20]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d908      	bls.n	80055c4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	e007      	b.n	80055d4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055de:	2b40      	cmp	r3, #64	@ 0x40
 80055e0:	d007      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055fa:	f240 8083 	bls.w	8005704 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_SPI_TransmitReceive+0x132>
 8005606:	8afb      	ldrh	r3, [r7, #22]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d16f      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	881a      	ldrh	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005630:	e05c      	b.n	80056ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x19e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x19e>
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	2b01      	cmp	r3, #1
 800564e:	d113      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b01      	cmp	r3, #1
 8005684:	d11c      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x1e6>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	b292      	uxth	r2, r2
 800569e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056bc:	2301      	movs	r3, #1
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056c0:	f7fd ffa2 	bl	8003608 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d80d      	bhi.n	80056ec <HAL_SPI_TransmitReceive+0x212>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d009      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e111      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d19d      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x158>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d197      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x158>
 8005702:	e0e5      	b.n	80058d0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x23a>
 800570c:	8afb      	ldrh	r3, [r7, #22]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 80d1 	bne.w	80058b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d912      	bls.n	8005744 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b02      	subs	r3, #2
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005742:	e0b8      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576a:	e0a4      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d134      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02f      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b01      	cmp	r3, #1
 8005788:	d12c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d912      	bls.n	80057ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	881a      	ldrh	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b02      	subs	r3, #2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057b8:	e012      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d148      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x3aa>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d042      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d923      	bls.n	8005852 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	b292      	uxth	r2, r2
 8005816:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	1c9a      	adds	r2, r3, #2
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b02      	subs	r3, #2
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d81f      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	e016      	b.n	8005880 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f103 020c 	add.w	r2, r3, #12
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005884:	f7fd fec0 	bl	8003608 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005890:	429a      	cmp	r2, r3
 8005892:	d803      	bhi.n	800589c <HAL_SPI_TransmitReceive+0x3c2>
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d102      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x3c8>
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e02c      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f af55 	bne.w	800576c <HAL_SPI_TransmitReceive+0x292>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af4e 	bne.w	800576c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f93d 	bl	8005b54 <SPI_EndRxTxTransaction>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e00e      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800590e:	2300      	movs	r3, #0
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	@ 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005928:	f7fd fe6e 	bl	8003608 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	4413      	add	r3, r2
 8005936:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005938:	f7fd fe66 	bl	8003608 <HAL_GetTick>
 800593c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800593e:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	015b      	lsls	r3, r3, #5
 8005944:	0d1b      	lsrs	r3, r3, #20
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800594e:	e054      	b.n	80059fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d050      	beq.n	80059fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005958:	f7fd fe56 	bl	8003608 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	429a      	cmp	r2, r3
 8005966:	d902      	bls.n	800596e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d13d      	bne.n	80059ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800597c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005986:	d111      	bne.n	80059ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005990:	d004      	beq.n	800599c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599a:	d107      	bne.n	80059ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b4:	d10f      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e017      	b.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d19b      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000004 	.word	0x20000004

08005a28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a3a:	f7fd fde5 	bl	8003608 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	4413      	add	r3, r2
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005a4a:	f7fd fddd 	bl	8003608 <HAL_GetTick>
 8005a4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a58:	4b3d      	ldr	r3, [pc, #244]	@ (8005b50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00da      	lsls	r2, r3, #3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	0d1b      	lsrs	r3, r3, #20
 8005a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a70:	e060      	b.n	8005b34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a78:	d107      	bne.n	8005a8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d050      	beq.n	8005b34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a92:	f7fd fdb9 	bl	8003608 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d902      	bls.n	8005aa8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d13d      	bne.n	8005b24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ab6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ac0:	d111      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aca:	d004      	beq.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad4:	d107      	bne.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aee:	d10f      	bne.n	8005b10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e010      	b.n	8005b46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d196      	bne.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3728      	adds	r7, #40	@ 0x28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000004 	.word	0x20000004

08005b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ff5b 	bl	8005a28 <SPI_WaitFifoStateUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e027      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fec0 	bl	8005918 <SPI_WaitFlagStateUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e014      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff ff34 	bl	8005a28 <SPI_WaitFifoStateUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e000      	b.n	8005bd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e042      	b.n	8005c78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fd fc11 	bl	800342c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 ff30 	bl	8006a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fc61 	bl	80064f8 <UART_SetConfig>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e01b      	b.n	8005c78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 ffaf 	bl	8006bd4 <UART_CheckIdleState>
 8005c76:	4603      	mov	r3, r0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	@ 0x28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d17b      	bne.n	8005d92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_UART_Transmit+0x26>
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e074      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2221      	movs	r2, #33	@ 0x21
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cba:	f7fd fca5 	bl	8003608 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd8:	d108      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e003      	b.n	8005cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cf4:	e030      	b.n	8005d58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2180      	movs	r1, #128	@ 0x80
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f001 f811 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e03d      	b.n	8005d94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3302      	adds	r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e007      	b.n	8005d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1c8      	bne.n	8005cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2140      	movs	r1, #64	@ 0x40
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 ffda 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e006      	b.n	8005d94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d137      	bne.n	8005e24 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Receive_IT+0x24>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e030      	b.n	8005e26 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_UART_Receive_IT+0x94>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01f      	beq.n	8005e14 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e6      	bne.n	8005de2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fff2 	bl	8006e04 <UART_Start_Receive_IT>
 8005e20:	4603      	mov	r3, r0
 8005e22:	e000      	b.n	8005e26 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	@ 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40008000 	.word	0x40008000

08005e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b0ba      	sub	sp, #232	@ 0xe8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e62:	4013      	ands	r3, r2
 8005e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d009      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8300 	beq.w	800649e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
      }
      return;
 8005ea6:	e2fa      	b.n	800649e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8123 	beq.w	80060f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005eb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80060ec <HAL_UART_IRQHandler+0x2b8>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ebe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80060f0 <HAL_UART_IRQHandler+0x2bc>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8116 	beq.w	80060f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_UART_IRQHandler+0xc8>
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	f043 0201 	orr.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d011      	beq.n	8005f2c <HAL_UART_IRQHandler+0xf8>
 8005f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f22:	f043 0204 	orr.w	r2, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <HAL_UART_IRQHandler+0x128>
 8005f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d017      	beq.n	8005f98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f78:	4b5c      	ldr	r3, [pc, #368]	@ (80060ec <HAL_UART_IRQHandler+0x2b8>)
 8005f7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d012      	beq.n	8005fca <HAL_UART_IRQHandler+0x196>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8266 	beq.w	80064a2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006010:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b40      	cmp	r3, #64	@ 0x40
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006026:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	d054      	beq.n	80060d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f80a 	bl	8007048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b40      	cmp	r3, #64	@ 0x40
 8006040:	d146      	bne.n	80060d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800605c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800606e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800607a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d9      	bne.n	8006042 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800609e:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <HAL_UART_IRQHandler+0x2c0>)
 80060a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fd fcf8 	bl	8003a9e <HAL_DMA_Abort_IT>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d019      	beq.n	80060e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80060c2:	4610      	mov	r0, r2
 80060c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c6:	e00f      	b.n	80060e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f9ff 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	e00b      	b.n	80060e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f9fb 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	e007      	b.n	80060e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f9f7 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80060e6:	e1dc      	b.n	80064a2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	bf00      	nop
    return;
 80060ea:	e1da      	b.n	80064a2 <HAL_UART_IRQHandler+0x66e>
 80060ec:	10000001 	.word	0x10000001
 80060f0:	04000120 	.word	0x04000120
 80060f4:	08007115 	.word	0x08007115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 8170 	bne.w	80063e2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8169 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8162 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2210      	movs	r2, #16
 8006124:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b40      	cmp	r3, #64	@ 0x40
 8006132:	f040 80d8 	bne.w	80062e6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80af 	beq.w	80062ac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006158:	429a      	cmp	r2, r3
 800615a:	f080 80a7 	bcs.w	80062ac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006164:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 8087 	bne.w	800628a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1da      	bne.n	800617c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e1      	bne.n	80061c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006228:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800622c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e3      	bne.n	8006202 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006258:	f023 0310 	bic.w	r3, r3, #16
 800625c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800626a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800626c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e4      	bne.n	8006248 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006284:	4618      	mov	r0, r3
 8006286:	f7fd fbb1 	bl	80039ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800629c:	b29b      	uxth	r3, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f91b 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062aa:	e0fc      	b.n	80064a6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062b6:	429a      	cmp	r2, r3
 80062b8:	f040 80f5 	bne.w	80064a6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 80eb 	bne.w	80064a6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8fe 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
      return;
 80062e4:	e0df      	b.n	80064a6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80d1 	beq.w	80064aa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80cc 	beq.w	80064aa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006334:	647b      	str	r3, [r7, #68]	@ 0x44
 8006336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800633a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e4      	bne.n	8006312 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	623b      	str	r3, [r7, #32]
   return(result);
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006370:	633a      	str	r2, [r7, #48]	@ 0x30
 8006372:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e1      	bne.n	8006348 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	617b      	str	r3, [r7, #20]
   return(result);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e4      	bne.n	8006398 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f880 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e0:	e063      	b.n	80064aa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <HAL_UART_IRQHandler+0x5d8>
 80063ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fbe3 	bl	8007bd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640a:	e051      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	d014      	beq.n	8006442 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006434:	2b00      	cmp	r3, #0
 8006436:	d03a      	beq.n	80064ae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
    }
    return;
 8006440:	e035      	b.n	80064ae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <HAL_UART_IRQHandler+0x62e>
 800644e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fe6c 	bl	8007138 <UART_EndTransmit_IT>
    return;
 8006460:	e026      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_UART_IRQHandler+0x64e>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006472:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fbbc 	bl	8007bf8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006480:	e016      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d010      	beq.n	80064b0 <HAL_UART_IRQHandler+0x67c>
 800648e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0c      	bge.n	80064b0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fba4 	bl	8007be4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800649c:	e008      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
      return;
 800649e:	bf00      	nop
 80064a0:	e006      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80064a2:	bf00      	nop
 80064a4:	e004      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80064ae:	bf00      	nop
  }
}
 80064b0:	37e8      	adds	r7, #232	@ 0xe8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop

080064b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064fc:	b08c      	sub	sp, #48	@ 0x30
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	431a      	orrs	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	431a      	orrs	r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	4313      	orrs	r3, r2
 800651e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4bab      	ldr	r3, [pc, #684]	@ (80067d4 <UART_SetConfig+0x2dc>)
 8006528:	4013      	ands	r3, r2
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006530:	430b      	orrs	r3, r1
 8006532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4aa0      	ldr	r2, [pc, #640]	@ (80067d8 <UART_SetConfig+0x2e0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006560:	4313      	orrs	r3, r2
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800656e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	430b      	orrs	r3, r1
 800657a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	f023 010f 	bic.w	r1, r3, #15
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a91      	ldr	r2, [pc, #580]	@ (80067dc <UART_SetConfig+0x2e4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d125      	bne.n	80065e8 <UART_SetConfig+0xf0>
 800659c:	4b90      	ldr	r3, [pc, #576]	@ (80067e0 <UART_SetConfig+0x2e8>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d81a      	bhi.n	80065e0 <UART_SetConfig+0xe8>
 80065aa:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <UART_SetConfig+0xb8>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c6:	e0d6      	b.n	8006776 <UART_SetConfig+0x27e>
 80065c8:	2302      	movs	r3, #2
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ce:	e0d2      	b.n	8006776 <UART_SetConfig+0x27e>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	e0ce      	b.n	8006776 <UART_SetConfig+0x27e>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065de:	e0ca      	b.n	8006776 <UART_SetConfig+0x27e>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	e0c6      	b.n	8006776 <UART_SetConfig+0x27e>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a7d      	ldr	r2, [pc, #500]	@ (80067e4 <UART_SetConfig+0x2ec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d138      	bne.n	8006664 <UART_SetConfig+0x16c>
 80065f2:	4b7b      	ldr	r3, [pc, #492]	@ (80067e0 <UART_SetConfig+0x2e8>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f003 030c 	and.w	r3, r3, #12
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d82d      	bhi.n	800665c <UART_SetConfig+0x164>
 8006600:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <UART_SetConfig+0x110>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	0800663d 	.word	0x0800663d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800664d 	.word	0x0800664d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	0800665d 	.word	0x0800665d
 8006624:	0800665d 	.word	0x0800665d
 8006628:	08006645 	.word	0x08006645
 800662c:	0800665d 	.word	0x0800665d
 8006630:	0800665d 	.word	0x0800665d
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006655 	.word	0x08006655
 800663c:	2300      	movs	r3, #0
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e098      	b.n	8006776 <UART_SetConfig+0x27e>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e094      	b.n	8006776 <UART_SetConfig+0x27e>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e090      	b.n	8006776 <UART_SetConfig+0x27e>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e08c      	b.n	8006776 <UART_SetConfig+0x27e>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e088      	b.n	8006776 <UART_SetConfig+0x27e>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5f      	ldr	r2, [pc, #380]	@ (80067e8 <UART_SetConfig+0x2f0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d125      	bne.n	80066ba <UART_SetConfig+0x1c2>
 800666e:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <UART_SetConfig+0x2e8>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006678:	2b30      	cmp	r3, #48	@ 0x30
 800667a:	d016      	beq.n	80066aa <UART_SetConfig+0x1b2>
 800667c:	2b30      	cmp	r3, #48	@ 0x30
 800667e:	d818      	bhi.n	80066b2 <UART_SetConfig+0x1ba>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d00a      	beq.n	800669a <UART_SetConfig+0x1a2>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d814      	bhi.n	80066b2 <UART_SetConfig+0x1ba>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <UART_SetConfig+0x19a>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d008      	beq.n	80066a2 <UART_SetConfig+0x1aa>
 8006690:	e00f      	b.n	80066b2 <UART_SetConfig+0x1ba>
 8006692:	2300      	movs	r3, #0
 8006694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006698:	e06d      	b.n	8006776 <UART_SetConfig+0x27e>
 800669a:	2302      	movs	r3, #2
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a0:	e069      	b.n	8006776 <UART_SetConfig+0x27e>
 80066a2:	2304      	movs	r3, #4
 80066a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a8:	e065      	b.n	8006776 <UART_SetConfig+0x27e>
 80066aa:	2308      	movs	r3, #8
 80066ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b0:	e061      	b.n	8006776 <UART_SetConfig+0x27e>
 80066b2:	2310      	movs	r3, #16
 80066b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b8:	e05d      	b.n	8006776 <UART_SetConfig+0x27e>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4b      	ldr	r2, [pc, #300]	@ (80067ec <UART_SetConfig+0x2f4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d125      	bne.n	8006710 <UART_SetConfig+0x218>
 80066c4:	4b46      	ldr	r3, [pc, #280]	@ (80067e0 <UART_SetConfig+0x2e8>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d0:	d016      	beq.n	8006700 <UART_SetConfig+0x208>
 80066d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d4:	d818      	bhi.n	8006708 <UART_SetConfig+0x210>
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d00a      	beq.n	80066f0 <UART_SetConfig+0x1f8>
 80066da:	2b80      	cmp	r3, #128	@ 0x80
 80066dc:	d814      	bhi.n	8006708 <UART_SetConfig+0x210>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <UART_SetConfig+0x1f0>
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d008      	beq.n	80066f8 <UART_SetConfig+0x200>
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x210>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e042      	b.n	8006776 <UART_SetConfig+0x27e>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e03e      	b.n	8006776 <UART_SetConfig+0x27e>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e03a      	b.n	8006776 <UART_SetConfig+0x27e>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e036      	b.n	8006776 <UART_SetConfig+0x27e>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e032      	b.n	8006776 <UART_SetConfig+0x27e>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a30      	ldr	r2, [pc, #192]	@ (80067d8 <UART_SetConfig+0x2e0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d12a      	bne.n	8006770 <UART_SetConfig+0x278>
 800671a:	4b31      	ldr	r3, [pc, #196]	@ (80067e0 <UART_SetConfig+0x2e8>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006728:	d01a      	beq.n	8006760 <UART_SetConfig+0x268>
 800672a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800672e:	d81b      	bhi.n	8006768 <UART_SetConfig+0x270>
 8006730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006734:	d00c      	beq.n	8006750 <UART_SetConfig+0x258>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800673a:	d815      	bhi.n	8006768 <UART_SetConfig+0x270>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x250>
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006744:	d008      	beq.n	8006758 <UART_SetConfig+0x260>
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x270>
 8006748:	2300      	movs	r3, #0
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e012      	b.n	8006776 <UART_SetConfig+0x27e>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e00e      	b.n	8006776 <UART_SetConfig+0x27e>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675e:	e00a      	b.n	8006776 <UART_SetConfig+0x27e>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e006      	b.n	8006776 <UART_SetConfig+0x27e>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e002      	b.n	8006776 <UART_SetConfig+0x27e>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a17      	ldr	r2, [pc, #92]	@ (80067d8 <UART_SetConfig+0x2e0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	f040 80a8 	bne.w	80068d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006782:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006786:	2b08      	cmp	r3, #8
 8006788:	d834      	bhi.n	80067f4 <UART_SetConfig+0x2fc>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0x298>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067f5 	.word	0x080067f5
 8006798:	080067bd 	.word	0x080067bd
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	080067c3 	.word	0x080067c3
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	080067f5 	.word	0x080067f5
 80067ac:	080067f5 	.word	0x080067f5
 80067b0:	080067cb 	.word	0x080067cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe fa0e 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 80067b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067ba:	e021      	b.n	8006800 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067bc:	4b0c      	ldr	r3, [pc, #48]	@ (80067f0 <UART_SetConfig+0x2f8>)
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067c0:	e01e      	b.n	8006800 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fe f999 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 80067c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067c8:	e01a      	b.n	8006800 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067d0:	e016      	b.n	8006800 <UART_SetConfig+0x308>
 80067d2:	bf00      	nop
 80067d4:	cfff69f3 	.word	0xcfff69f3
 80067d8:	40008000 	.word	0x40008000
 80067dc:	40013800 	.word	0x40013800
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40004400 	.word	0x40004400
 80067e8:	40004800 	.word	0x40004800
 80067ec:	40004c00 	.word	0x40004c00
 80067f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 812a 	beq.w	8006a5c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	4a9e      	ldr	r2, [pc, #632]	@ (8006a88 <UART_SetConfig+0x590>)
 800680e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006812:	461a      	mov	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	fbb3 f3f2 	udiv	r3, r3, r2
 800681a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4413      	add	r3, r2
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	429a      	cmp	r2, r3
 800682a:	d305      	bcc.n	8006838 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	429a      	cmp	r2, r3
 8006836:	d903      	bls.n	8006840 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800683e:	e10d      	b.n	8006a5c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	2200      	movs	r2, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	60fa      	str	r2, [r7, #12]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	4a8e      	ldr	r2, [pc, #568]	@ (8006a88 <UART_SetConfig+0x590>)
 800684e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006852:	b29b      	uxth	r3, r3
 8006854:	2200      	movs	r2, #0
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006862:	f7fa f9f9 	bl	8000c58 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	020b      	lsls	r3, r1, #8
 8006878:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800687c:	0202      	lsls	r2, r0, #8
 800687e:	6979      	ldr	r1, [r7, #20]
 8006880:	6849      	ldr	r1, [r1, #4]
 8006882:	0849      	lsrs	r1, r1, #1
 8006884:	2000      	movs	r0, #0
 8006886:	460c      	mov	r4, r1
 8006888:	4605      	mov	r5, r0
 800688a:	eb12 0804 	adds.w	r8, r2, r4
 800688e:	eb43 0905 	adc.w	r9, r3, r5
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	469a      	mov	sl, r3
 800689a:	4693      	mov	fp, r2
 800689c:	4652      	mov	r2, sl
 800689e:	465b      	mov	r3, fp
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f9d8 	bl	8000c58 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4613      	mov	r3, r2
 80068ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b6:	d308      	bcc.n	80068ca <UART_SetConfig+0x3d2>
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068be:	d204      	bcs.n	80068ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a3a      	ldr	r2, [r7, #32]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e0c8      	b.n	8006a5c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068d0:	e0c4      	b.n	8006a5c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068da:	d167      	bne.n	80069ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80068dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d828      	bhi.n	8006936 <UART_SetConfig+0x43e>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0x3f4>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006927 	.word	0x08006927
 8006900:	08006937 	.word	0x08006937
 8006904:	08006937 	.word	0x08006937
 8006908:	08006937 	.word	0x08006937
 800690c:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe f960 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 8006914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006916:	e014      	b.n	8006942 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006918:	f7fe f972 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800691e:	e010      	b.n	8006942 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b5a      	ldr	r3, [pc, #360]	@ (8006a8c <UART_SetConfig+0x594>)
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006924:	e00d      	b.n	8006942 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fe f8e7 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800692c:	e009      	b.n	8006942 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8089 	beq.w	8006a5c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	4a4e      	ldr	r2, [pc, #312]	@ (8006a88 <UART_SetConfig+0x590>)
 8006950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006954:	461a      	mov	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	005a      	lsls	r2, r3, #1
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	441a      	add	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	fbb2 f3f3 	udiv	r3, r2, r3
 800696e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d916      	bls.n	80069a4 <UART_SetConfig+0x4ac>
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697c:	d212      	bcs.n	80069a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f023 030f 	bic.w	r3, r3, #15
 8006986:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	b29a      	uxth	r2, r3
 8006994:	8bfb      	ldrh	r3, [r7, #30]
 8006996:	4313      	orrs	r3, r2
 8006998:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	8bfa      	ldrh	r2, [r7, #30]
 80069a0:	60da      	str	r2, [r3, #12]
 80069a2:	e05b      	b.n	8006a5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069aa:	e057      	b.n	8006a5c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d828      	bhi.n	8006a06 <UART_SetConfig+0x50e>
 80069b4:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <UART_SetConfig+0x4c4>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e9 	.word	0x080069e9
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	08006a07 	.word	0x08006a07
 80069cc:	080069f7 	.word	0x080069f7
 80069d0:	08006a07 	.word	0x08006a07
 80069d4:	08006a07 	.word	0x08006a07
 80069d8:	08006a07 	.word	0x08006a07
 80069dc:	080069ff 	.word	0x080069ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e0:	f7fe f8f8 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 80069e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069e6:	e014      	b.n	8006a12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fe f90a 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 80069ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ee:	e010      	b.n	8006a12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f0:	4b26      	ldr	r3, [pc, #152]	@ (8006a8c <UART_SetConfig+0x594>)
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069f4:	e00d      	b.n	8006a12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f6:	f7fe f87f 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 80069fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069fc:	e009      	b.n	8006a12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a04:	e005      	b.n	8006a12 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a10:	bf00      	nop
    }

    if (pclk != 0U)
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d021      	beq.n	8006a5c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006a88 <UART_SetConfig+0x590>)
 8006a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	441a      	add	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b0f      	cmp	r3, #15
 8006a40:	d909      	bls.n	8006a56 <UART_SetConfig+0x55e>
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a48:	d205      	bcs.n	8006a56 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	e002      	b.n	8006a5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2200      	movs	r2, #0
 8006a76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3730      	adds	r7, #48	@ 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a86:	bf00      	nop
 8006a88:	0800f3a4 	.word	0x0800f3a4
 8006a8c:	00f42400 	.word	0x00f42400

08006a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8e:	d10a      	bne.n	8006ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b098      	sub	sp, #96	@ 0x60
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be4:	f7fc fd10 	bl	8003608 <HAL_GetTick>
 8006be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d12f      	bne.n	8006c58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c00:	2200      	movs	r2, #0
 8006c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f88e 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d022      	beq.n	8006c58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e063      	b.n	8006d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d149      	bne.n	8006cfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f857 	bl	8006d28 <UART_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d03c      	beq.n	8006cfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e6      	bne.n	8006c80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e012      	b.n	8006d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3758      	adds	r7, #88	@ 0x58
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d38:	e04f      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d04b      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fc fc61 	bl	8003608 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e04e      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d037      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b80      	cmp	r3, #128	@ 0x80
 8006d6e:	d034      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d031      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d110      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f95b 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2208      	movs	r2, #8
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e029      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db4:	d111      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f941 	bl	8007048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0a0      	beq.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b0a3      	sub	sp, #140	@ 0x8c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d10e      	bne.n	8006e56 <UART_Start_Receive_IT+0x52>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <UART_Start_Receive_IT+0x48>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e4a:	e02d      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	22ff      	movs	r2, #255	@ 0xff
 8006e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e54:	e028      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10d      	bne.n	8006e7a <UART_Start_Receive_IT+0x76>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <UART_Start_Receive_IT+0x6c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	22ff      	movs	r2, #255	@ 0xff
 8006e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e6e:	e01b      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	227f      	movs	r2, #127	@ 0x7f
 8006e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e78:	e016      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e82:	d10d      	bne.n	8006ea0 <UART_Start_Receive_IT+0x9c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <UART_Start_Receive_IT+0x92>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	227f      	movs	r2, #127	@ 0x7f
 8006e90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e94:	e008      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	223f      	movs	r2, #63	@ 0x3f
 8006e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e9e:	e003      	b.n	8006ea8 <UART_Start_Receive_IT+0xa4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006edc:	673a      	str	r2, [r7, #112]	@ 0x70
 8006ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006ee2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e3      	bne.n	8006eb8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef8:	d14f      	bne.n	8006f9a <UART_Start_Receive_IT+0x196>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d349      	bcc.n	8006f9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	d107      	bne.n	8006f20 <UART_Start_Receive_IT+0x11c>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d103      	bne.n	8006f20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a47      	ldr	r2, [pc, #284]	@ (8007038 <UART_Start_Receive_IT+0x234>)
 8006f1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f1e:	e002      	b.n	8006f26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a46      	ldr	r2, [pc, #280]	@ (800703c <UART_Start_Receive_IT+0x238>)
 8006f24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01a      	beq.n	8006f64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f52:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_Start_Receive_IT+0x160>
 8006f98:	e046      	b.n	8007028 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa2:	d107      	bne.n	8006fb4 <UART_Start_Receive_IT+0x1b0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a24      	ldr	r2, [pc, #144]	@ (8007040 <UART_Start_Receive_IT+0x23c>)
 8006fb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006fb2:	e002      	b.n	8006fba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a23      	ldr	r2, [pc, #140]	@ (8007044 <UART_Start_Receive_IT+0x240>)
 8006fb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d019      	beq.n	8006ff6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006fd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_Start_Receive_IT+0x1be>
 8006ff4:	e018      	b.n	8007028 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	613b      	str	r3, [r7, #16]
   return(result);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f043 0320 	orr.w	r3, r3, #32
 800700a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	69f9      	ldr	r1, [r7, #28]
 800701a:	6a3a      	ldr	r2, [r7, #32]
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	61bb      	str	r3, [r7, #24]
   return(result);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	378c      	adds	r7, #140	@ 0x8c
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	08007865 	.word	0x08007865
 800703c:	08007501 	.word	0x08007501
 8007040:	08007349 	.word	0x08007349
 8007044:	08007191 	.word	0x08007191

08007048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b095      	sub	sp, #84	@ 0x54
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007070:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e6      	bne.n	8007050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	61fb      	str	r3, [r7, #28]
   return(result);
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e3      	bne.n	8007082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d118      	bne.n	80070f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	613b      	str	r3, [r7, #16]
   return(result);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007108:	bf00      	nop
 800710a:	3754      	adds	r7, #84	@ 0x54
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff f9ce 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	60bb      	str	r3, [r7, #8]
   return(result);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007154:	61fb      	str	r3, [r7, #28]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6979      	ldr	r1, [r7, #20]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	613b      	str	r3, [r7, #16]
   return(result);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff f999 	bl	80064b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007186:	bf00      	nop
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b09c      	sub	sp, #112	@ 0x70
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800719e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071a8:	2b22      	cmp	r3, #34	@ 0x22
 80071aa:	f040 80be 	bne.w	800732a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071bc:	b2d9      	uxtb	r1, r3
 80071be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	400a      	ands	r2, r1
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 80a1 	bne.w	800733a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800720c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007216:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007218:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800721c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e6      	bne.n	80071f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800723a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	667b      	str	r3, [r7, #100]	@ 0x64
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800724a:	647a      	str	r2, [r7, #68]	@ 0x44
 800724c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e5      	bne.n	800722a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a33      	ldr	r2, [pc, #204]	@ (8007344 <UART_RxISR_8BIT+0x1b4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d01f      	beq.n	80072bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d018      	beq.n	80072bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	623b      	str	r3, [r7, #32]
   return(result);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800729e:	663b      	str	r3, [r7, #96]	@ 0x60
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d12e      	bne.n	8007322 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0310 	bic.w	r3, r3, #16
 80072de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	69b9      	ldr	r1, [r7, #24]
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	617b      	str	r3, [r7, #20]
   return(result);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b10      	cmp	r3, #16
 8007308:	d103      	bne.n	8007312 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2210      	movs	r2, #16
 8007310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff f8e0 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007320:	e00b      	b.n	800733a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fb f99a 	bl	800265c <HAL_UART_RxCpltCallback>
}
 8007328:	e007      	b.n	800733a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0208 	orr.w	r2, r2, #8
 8007338:	619a      	str	r2, [r3, #24]
}
 800733a:	bf00      	nop
 800733c:	3770      	adds	r7, #112	@ 0x70
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40008000 	.word	0x40008000

08007348 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b09c      	sub	sp, #112	@ 0x70
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007356:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007360:	2b22      	cmp	r3, #34	@ 0x22
 8007362:	f040 80be 	bne.w	80074e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007374:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007376:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800737a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800737e:	4013      	ands	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007384:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 80a1 	bne.w	80074f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80073d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007402:	643a      	str	r2, [r7, #64]	@ 0x40
 8007404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <UART_RxISR_16BIT+0x1b4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01f      	beq.n	8007474 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d018      	beq.n	8007474 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007462:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d12e      	bne.n	80074da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6979      	ldr	r1, [r7, #20]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	613b      	str	r3, [r7, #16]
   return(result);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d103      	bne.n	80074ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2210      	movs	r2, #16
 80074c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff f804 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074d8:	e00b      	b.n	80074f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fb f8be 	bl	800265c <HAL_UART_RxCpltCallback>
}
 80074e0:	e007      	b.n	80074f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0208 	orr.w	r2, r2, #8
 80074f0:	619a      	str	r2, [r3, #24]
}
 80074f2:	bf00      	nop
 80074f4:	3770      	adds	r7, #112	@ 0x70
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40008000 	.word	0x40008000

08007500 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b0ac      	sub	sp, #176	@ 0xb0
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800750e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007536:	2b22      	cmp	r3, #34	@ 0x22
 8007538:	f040 8183 	bne.w	8007842 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007542:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007546:	e126      	b.n	8007796 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007552:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007556:	b2d9      	uxtb	r1, r3
 8007558:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007562:	400a      	ands	r2, r1
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800758e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d053      	beq.n	8007642 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800759a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80075a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2201      	movs	r2, #1
 80075b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d011      	beq.n	80075fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80075d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2202      	movs	r2, #2
 80075e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f0:	f043 0204 	orr.w	r2, r3, #4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d011      	beq.n	800762a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00b      	beq.n	800762a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2204      	movs	r2, #4
 8007618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007620:	f043 0202 	orr.w	r2, r3, #2
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fe ff49 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 80a3 	bne.w	8007796 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800765e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007674:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007678:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e4      	bne.n	8007650 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80076b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80076b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80076bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e1      	bne.n	8007686 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a60      	ldr	r2, [pc, #384]	@ (800785c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d021      	beq.n	8007724 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007710:	657b      	str	r3, [r7, #84]	@ 0x54
 8007712:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007716:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800771e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007728:	2b01      	cmp	r3, #1
 800772a:	d130      	bne.n	800778e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007754:	643b      	str	r3, [r7, #64]	@ 0x40
 8007756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800775a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e4      	bne.n	8007732 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b10      	cmp	r3, #16
 8007774:	d103      	bne.n	800777e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe feaa 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800778c:	e00e      	b.n	80077ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fa ff64 	bl	800265c <HAL_UART_RxCpltCallback>
        break;
 8007794:	e00a      	b.n	80077ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007796:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800779a:	2b00      	cmp	r3, #0
 800779c:	d006      	beq.n	80077ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800779e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f47f aece 	bne.w	8007548 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d049      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x352>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d242      	bcs.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	61fb      	str	r3, [r7, #28]
   return(result);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80077f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e3      	bne.n	80077cc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a16      	ldr	r2, [pc, #88]	@ (8007860 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007808:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f043 0320 	orr.w	r3, r3, #32
 800781e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e4      	bne.n	800780a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007840:	e007      	b.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	619a      	str	r2, [r3, #24]
}
 8007852:	bf00      	nop
 8007854:	37b0      	adds	r7, #176	@ 0xb0
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40008000 	.word	0x40008000
 8007860:	08007191 	.word	0x08007191

08007864 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b0ae      	sub	sp, #184	@ 0xb8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007872:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800789a:	2b22      	cmp	r3, #34	@ 0x22
 800789c:	f040 8187 	bne.w	8007bae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078aa:	e12a      	b.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80078be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80078c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80078c6:	4013      	ands	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d053      	beq.n	80079aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d011      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0xce>
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2201      	movs	r2, #1
 8007920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007928:	f043 0201 	orr.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d011      	beq.n	8007962 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800793e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2202      	movs	r2, #2
 8007950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007958:	f043 0204 	orr.w	r2, r3, #4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800796e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2204      	movs	r2, #4
 8007980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007988:	f043 0202 	orr.w	r2, r3, #2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fe fd95 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 80a5 	bne.w	8007b02 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e2      	bne.n	80079b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e1      	bne.n	80079f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a60      	ldr	r2, [pc, #384]	@ (8007bc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d021      	beq.n	8007a90 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e4      	bne.n	8007a5a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d130      	bne.n	8007afa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aae:	f023 0310 	bic.w	r3, r3, #16
 8007ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e4      	bne.n	8007a9e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d103      	bne.n	8007aea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fe fcf4 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007af8:	e00e      	b.n	8007b18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7fa fdae 	bl	800265c <HAL_UART_RxCpltCallback>
        break;
 8007b00:	e00a      	b.n	8007b18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b02:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d006      	beq.n	8007b18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f aeca 	bne.w	80078ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b1e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d049      	beq.n	8007bbe <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b30:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d242      	bcs.n	8007bbe <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	623b      	str	r3, [r7, #32]
   return(result);
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e3      	bne.n	8007b38 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007b74:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f043 0320 	orr.w	r3, r3, #32
 8007b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	69b9      	ldr	r1, [r7, #24]
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e4      	bne.n	8007b76 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bac:	e007      	b.n	8007bbe <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0208 	orr.w	r2, r2, #8
 8007bbc:	619a      	str	r2, [r3, #24]
}
 8007bbe:	bf00      	nop
 8007bc0:	37b8      	adds	r7, #184	@ 0xb8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40008000 	.word	0x40008000
 8007bcc:	08007349 	.word	0x08007349

08007bd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e027      	b.n	8007c72 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2224      	movs	r2, #36	@ 0x24
 8007c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e02d      	b.n	8007cf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2224      	movs	r2, #36	@ 0x24
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f850 	bl	8007d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e02d      	b.n	8007d6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	@ 0x24
 8007d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f812 	bl	8007d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d108      	bne.n	8007d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d98:	e031      	b.n	8007dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d9a:	2308      	movs	r3, #8
 8007d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d9e:	2308      	movs	r3, #8
 8007da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	0e5b      	lsrs	r3, r3, #25
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	0f5b      	lsrs	r3, r3, #29
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	7b3a      	ldrb	r2, [r7, #12]
 8007dc6:	4911      	ldr	r1, [pc, #68]	@ (8007e0c <UARTEx_SetNbDataToProcess+0x94>)
 8007dc8:	5c8a      	ldrb	r2, [r1, r2]
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dce:	7b3a      	ldrb	r2, [r7, #12]
 8007dd0:	490f      	ldr	r1, [pc, #60]	@ (8007e10 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	7b7a      	ldrb	r2, [r7, #13]
 8007de4:	4909      	ldr	r1, [pc, #36]	@ (8007e0c <UARTEx_SetNbDataToProcess+0x94>)
 8007de6:	5c8a      	ldrb	r2, [r1, r2]
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dec:	7b7a      	ldrb	r2, [r7, #13]
 8007dee:	4908      	ldr	r1, [pc, #32]	@ (8007e10 <UARTEx_SetNbDataToProcess+0x98>)
 8007df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	0800f3bc 	.word	0x0800f3bc
 8007e10:	0800f3c4 	.word	0x0800f3c4

08007e14 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007e18:	4907      	ldr	r1, [pc, #28]	@ (8007e38 <MX_FATFS_Init+0x24>)
 8007e1a:	4808      	ldr	r0, [pc, #32]	@ (8007e3c <MX_FATFS_Init+0x28>)
 8007e1c:	f003 fb16 	bl	800b44c <FATFS_LinkDriver>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	e003      	b.n	8007e34 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <MX_FATFS_Init+0x2c>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007e32:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	2000496c 	.word	0x2000496c
 8007e3c:	20000010 	.word	0x20000010
 8007e40:	20002214 	.word	0x20002214

08007e44 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7f9 fa81 	bl	8001368 <SD_disk_initialize>
 8007e66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f9 fb5f 	bl	8001540 <SD_disk_status>
 8007e82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007e9c:	7bf8      	ldrb	r0, [r7, #15]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	f7f9 fb62 	bl	800156c <SD_disk_read>
 8007ea8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007ec2:	7bf8      	ldrb	r0, [r7, #15]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	f7f9 fbb9 	bl	8001640 <SD_disk_write>
 8007ece:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	603a      	str	r2, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007ee8:	79b9      	ldrb	r1, [r7, #6]
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f9 fc2a 	bl	8001748 <SD_disk_ioctl>
 8007ef4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	4a08      	ldr	r2, [pc, #32]	@ (8007f30 <disk_status+0x30>)
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	4905      	ldr	r1, [pc, #20]	@ (8007f30 <disk_status+0x30>)
 8007f1a:	440a      	add	r2, r1
 8007f1c:	7a12      	ldrb	r2, [r2, #8]
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20002440 	.word	0x20002440

08007f34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	4a0d      	ldr	r2, [pc, #52]	@ (8007f7c <disk_initialize+0x48>)
 8007f46:	5cd3      	ldrb	r3, [r2, r3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d111      	bne.n	8007f70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8007f7c <disk_initialize+0x48>)
 8007f50:	2101      	movs	r1, #1
 8007f52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	4a09      	ldr	r2, [pc, #36]	@ (8007f7c <disk_initialize+0x48>)
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	79fa      	ldrb	r2, [r7, #7]
 8007f62:	4906      	ldr	r1, [pc, #24]	@ (8007f7c <disk_initialize+0x48>)
 8007f64:	440a      	add	r2, r1
 8007f66:	7a12      	ldrb	r2, [r2, #8]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20002440 	.word	0x20002440

08007f80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	@ (8007fbc <disk_read+0x3c>)
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	689c      	ldr	r4, [r3, #8]
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4a07      	ldr	r2, [pc, #28]	@ (8007fbc <disk_read+0x3c>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	7a18      	ldrb	r0, [r3, #8]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	47a0      	blx	r4
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd90      	pop	{r4, r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20002440 	.word	0x20002440

08007fc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ffc <disk_write+0x3c>)
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	68dc      	ldr	r4, [r3, #12]
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4a07      	ldr	r2, [pc, #28]	@ (8007ffc <disk_write+0x3c>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	7a18      	ldrb	r0, [r3, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	47a0      	blx	r4
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd90      	pop	{r4, r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20002440 	.word	0x20002440

08008000 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	603a      	str	r2, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	460b      	mov	r3, r1
 800800e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	4a09      	ldr	r2, [pc, #36]	@ (8008038 <disk_ioctl+0x38>)
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	4906      	ldr	r1, [pc, #24]	@ (8008038 <disk_ioctl+0x38>)
 8008020:	440a      	add	r2, r1
 8008022:	7a10      	ldrb	r0, [r2, #8]
 8008024:	79b9      	ldrb	r1, [r7, #6]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
  return res;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20002440 	.word	0x20002440

0800803c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800804c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b21a      	sxth	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b21b      	sxth	r3, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	b21b      	sxth	r3, r3
 800805e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008060:	89fb      	ldrh	r3, [r7, #14]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3303      	adds	r3, #3
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	3202      	adds	r2, #2
 8008086:	7812      	ldrb	r2, [r2, #0]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	3201      	adds	r2, #1
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
	return rv;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	887a      	ldrh	r2, [r7, #2]
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	887b      	ldrh	r3, [r7, #2]
 80080ce:	0a1b      	lsrs	r3, r3, #8
 80080d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	887a      	ldrh	r2, [r7, #2]
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	701a      	strb	r2, [r3, #0]
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008142:	b480      	push	{r7}
 8008144:	b087      	sub	sp, #28
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00d      	beq.n	8008178 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	1c53      	adds	r3, r2, #1
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	1c59      	adds	r1, r3, #1
 8008166:	6179      	str	r1, [r7, #20]
 8008168:	7812      	ldrb	r2, [r2, #0]
 800816a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3b01      	subs	r3, #1
 8008170:	607b      	str	r3, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f1      	bne.n	800815c <mem_cpy+0x1a>
	}
}
 8008178:	bf00      	nop
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	617a      	str	r2, [r7, #20]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f3      	bne.n	8008194 <mem_set+0x10>
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80081ba:	b480      	push	{r7}
 80081bc:	b089      	sub	sp, #36	@ 0x24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	61fa      	str	r2, [r7, #28]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	61ba      	str	r2, [r7, #24]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	1acb      	subs	r3, r1, r3
 80081e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <mem_cmp+0x40>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0eb      	beq.n	80081d2 <mem_cmp+0x18>

	return r;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3724      	adds	r7, #36	@ 0x24
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008212:	e002      	b.n	800821a <chk_chr+0x12>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3301      	adds	r3, #1
 8008218:	607b      	str	r3, [r7, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <chk_chr+0x26>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	4293      	cmp	r3, r2
 800822c:	d1f2      	bne.n	8008214 <chk_chr+0xc>
	return *str;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	781b      	ldrb	r3, [r3, #0]
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e029      	b.n	80082a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008254:	4a27      	ldr	r2, [pc, #156]	@ (80082f4 <chk_lock+0xb4>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4413      	add	r3, r2
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01d      	beq.n	800829e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008262:	4a24      	ldr	r2, [pc, #144]	@ (80082f4 <chk_lock+0xb4>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	4413      	add	r3, r2
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d116      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008274:	4a1f      	ldr	r2, [pc, #124]	@ (80082f4 <chk_lock+0xb4>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4413      	add	r3, r2
 800827c:	3304      	adds	r3, #4
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008284:	429a      	cmp	r2, r3
 8008286:	d10c      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008288:	4a1a      	ldr	r2, [pc, #104]	@ (80082f4 <chk_lock+0xb4>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	4413      	add	r3, r2
 8008290:	3308      	adds	r3, #8
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008298:	429a      	cmp	r2, r3
 800829a:	d102      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800829c:	e007      	b.n	80082ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d9d2      	bls.n	8008254 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d109      	bne.n	80082c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <chk_lock+0x80>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d101      	bne.n	80082c4 <chk_lock+0x84>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e010      	b.n	80082e6 <chk_lock+0xa6>
 80082c4:	2312      	movs	r3, #18
 80082c6:	e00e      	b.n	80082e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d108      	bne.n	80082e0 <chk_lock+0xa0>
 80082ce:	4a09      	ldr	r2, [pc, #36]	@ (80082f4 <chk_lock+0xb4>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	4413      	add	r3, r2
 80082d6:	330c      	adds	r3, #12
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082de:	d101      	bne.n	80082e4 <chk_lock+0xa4>
 80082e0:	2310      	movs	r3, #16
 80082e2:	e000      	b.n	80082e6 <chk_lock+0xa6>
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20002220 	.word	0x20002220

080082f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	e002      	b.n	800830a <enq_lock+0x12>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d806      	bhi.n	800831e <enq_lock+0x26>
 8008310:	4a09      	ldr	r2, [pc, #36]	@ (8008338 <enq_lock+0x40>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	4413      	add	r3, r2
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f2      	bne.n	8008304 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b02      	cmp	r3, #2
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20002220 	.word	0x20002220

0800833c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e01f      	b.n	800838c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800834c:	4a41      	ldr	r2, [pc, #260]	@ (8008454 <inc_lock+0x118>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	4413      	add	r3, r2
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d113      	bne.n	8008386 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800835e:	4a3d      	ldr	r2, [pc, #244]	@ (8008454 <inc_lock+0x118>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	4413      	add	r3, r2
 8008366:	3304      	adds	r3, #4
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800836e:	429a      	cmp	r2, r3
 8008370:	d109      	bne.n	8008386 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008372:	4a38      	ldr	r2, [pc, #224]	@ (8008454 <inc_lock+0x118>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	4413      	add	r3, r2
 800837a:	3308      	adds	r3, #8
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008382:	429a      	cmp	r2, r3
 8008384:	d006      	beq.n	8008394 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d9dc      	bls.n	800834c <inc_lock+0x10>
 8008392:	e000      	b.n	8008396 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008394:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d132      	bne.n	8008402 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e002      	b.n	80083a8 <inc_lock+0x6c>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d806      	bhi.n	80083bc <inc_lock+0x80>
 80083ae:	4a29      	ldr	r2, [pc, #164]	@ (8008454 <inc_lock+0x118>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	4413      	add	r3, r2
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f2      	bne.n	80083a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d101      	bne.n	80083c6 <inc_lock+0x8a>
 80083c2:	2300      	movs	r3, #0
 80083c4:	e040      	b.n	8008448 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4922      	ldr	r1, [pc, #136]	@ (8008454 <inc_lock+0x118>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	440b      	add	r3, r1
 80083d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	491e      	ldr	r1, [pc, #120]	@ (8008454 <inc_lock+0x118>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	440b      	add	r3, r1
 80083e0:	3304      	adds	r3, #4
 80083e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	491a      	ldr	r1, [pc, #104]	@ (8008454 <inc_lock+0x118>)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	440b      	add	r3, r1
 80083f0:	3308      	adds	r3, #8
 80083f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083f4:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <inc_lock+0x118>)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	4413      	add	r3, r2
 80083fc:	330c      	adds	r3, #12
 80083fe:	2200      	movs	r2, #0
 8008400:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d009      	beq.n	800841c <inc_lock+0xe0>
 8008408:	4a12      	ldr	r2, [pc, #72]	@ (8008454 <inc_lock+0x118>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	4413      	add	r3, r2
 8008410:	330c      	adds	r3, #12
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <inc_lock+0xe0>
 8008418:	2300      	movs	r3, #0
 800841a:	e015      	b.n	8008448 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d108      	bne.n	8008434 <inc_lock+0xf8>
 8008422:	4a0c      	ldr	r2, [pc, #48]	@ (8008454 <inc_lock+0x118>)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	4413      	add	r3, r2
 800842a:	330c      	adds	r3, #12
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	e001      	b.n	8008438 <inc_lock+0xfc>
 8008434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008438:	4906      	ldr	r1, [pc, #24]	@ (8008454 <inc_lock+0x118>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	440b      	add	r3, r1
 8008440:	330c      	adds	r3, #12
 8008442:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3301      	adds	r3, #1
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20002220 	.word	0x20002220

08008458 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b01      	subs	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d825      	bhi.n	80084b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800846c:	4a17      	ldr	r2, [pc, #92]	@ (80084cc <dec_lock+0x74>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	4413      	add	r3, r2
 8008474:	330c      	adds	r3, #12
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800847a:	89fb      	ldrh	r3, [r7, #14]
 800847c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008480:	d101      	bne.n	8008486 <dec_lock+0x2e>
 8008482:	2300      	movs	r3, #0
 8008484:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008486:	89fb      	ldrh	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <dec_lock+0x3a>
 800848c:	89fb      	ldrh	r3, [r7, #14]
 800848e:	3b01      	subs	r3, #1
 8008490:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008492:	4a0e      	ldr	r2, [pc, #56]	@ (80084cc <dec_lock+0x74>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	330c      	adds	r3, #12
 800849c:	89fa      	ldrh	r2, [r7, #14]
 800849e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80084a0:	89fb      	ldrh	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <dec_lock+0x5a>
 80084a6:	4a09      	ldr	r2, [pc, #36]	@ (80084cc <dec_lock+0x74>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	737b      	strb	r3, [r7, #13]
 80084b6:	e001      	b.n	80084bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80084b8:	2302      	movs	r3, #2
 80084ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80084bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20002220 	.word	0x20002220

080084d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e010      	b.n	8008500 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084de:	4a0d      	ldr	r2, [pc, #52]	@ (8008514 <clear_lock+0x44>)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d105      	bne.n	80084fa <clear_lock+0x2a>
 80084ee:	4a09      	ldr	r2, [pc, #36]	@ (8008514 <clear_lock+0x44>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	4413      	add	r3, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d9eb      	bls.n	80084de <clear_lock+0xe>
	}
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20002220 	.word	0x20002220

08008518 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d034      	beq.n	8008596 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008530:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7858      	ldrb	r0, [r3, #1]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800853c:	2301      	movs	r3, #1
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	f7ff fd3e 	bl	8007fc0 <disk_write>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <sync_window+0x38>
			res = FR_DISK_ERR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
 800854e:	e022      	b.n	8008596 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	429a      	cmp	r2, r3
 8008564:	d217      	bcs.n	8008596 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	789b      	ldrb	r3, [r3, #2]
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	e010      	b.n	8008590 <sync_window+0x78>
					wsect += fs->fsize;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4413      	add	r3, r2
 8008576:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7858      	ldrb	r0, [r3, #1]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008582:	2301      	movs	r3, #1
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	f7ff fd1b 	bl	8007fc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3b01      	subs	r3, #1
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d8eb      	bhi.n	800856e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d01b      	beq.n	80085f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff ffad 	bl	8008518 <sync_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d113      	bne.n	80085f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7858      	ldrb	r0, [r3, #1]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80085d2:	2301      	movs	r3, #1
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f7ff fcd3 	bl	8007f80 <disk_read>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
 80085e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff87 	bl	8008518 <sync_window>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d159      	bne.n	80086c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d149      	bne.n	80086b0 <sync_fs+0xb4>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d145      	bne.n	80086b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	899b      	ldrh	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	f7ff fda7 	bl	8008184 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3338      	adds	r3, #56	@ 0x38
 800863a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800863e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fd36 	bl	80080b4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3338      	adds	r3, #56	@ 0x38
 800864c:	4921      	ldr	r1, [pc, #132]	@ (80086d4 <sync_fs+0xd8>)
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fd4b 	bl	80080ea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3338      	adds	r3, #56	@ 0x38
 8008658:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800865c:	491e      	ldr	r1, [pc, #120]	@ (80086d8 <sync_fs+0xdc>)
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fd43 	bl	80080ea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3338      	adds	r3, #56	@ 0x38
 8008668:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7ff fd39 	bl	80080ea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3338      	adds	r3, #56	@ 0x38
 800867c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7ff fd2f 	bl	80080ea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7858      	ldrb	r0, [r3, #1]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086a4:	2301      	movs	r3, #1
 80086a6:	f7ff fc8b 	bl	8007fc0 <disk_write>
			fs->fsi_flag = 0;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff fca1 	bl	8008000 <disk_ioctl>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <sync_fs+0xcc>
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	41615252 	.word	0x41615252
 80086d8:	61417272 	.word	0x61417272

080086dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	3b02      	subs	r3, #2
 80086ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d301      	bcc.n	80086fc <clust2sect+0x20>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e008      	b.n	800870e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	461a      	mov	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	fb03 f202 	mul.w	r2, r3, r2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870c:	4413      	add	r3, r2
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d904      	bls.n	800873a <get_fat+0x20>
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <get_fat+0x26>
		val = 1;	/* Internal error */
 800873a:	2301      	movs	r3, #1
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	e0ba      	b.n	80088b6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b03      	cmp	r3, #3
 800874c:	f000 8082 	beq.w	8008854 <get_fat+0x13a>
 8008750:	2b03      	cmp	r3, #3
 8008752:	f300 80a6 	bgt.w	80088a2 <get_fat+0x188>
 8008756:	2b01      	cmp	r3, #1
 8008758:	d002      	beq.n	8008760 <get_fat+0x46>
 800875a:	2b02      	cmp	r3, #2
 800875c:	d055      	beq.n	800880a <get_fat+0xf0>
 800875e:	e0a0      	b.n	80088a2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	899b      	ldrh	r3, [r3, #12]
 8008776:	4619      	mov	r1, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	fbb3 f3f1 	udiv	r3, r3, r1
 800877e:	4413      	add	r3, r2
 8008780:	4619      	mov	r1, r3
 8008782:	6938      	ldr	r0, [r7, #16]
 8008784:	f7ff ff0c 	bl	80085a0 <move_window>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 808c 	bne.w	80088a8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	60fa      	str	r2, [r7, #12]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	8992      	ldrh	r2, [r2, #12]
 800879a:	fbb3 f1f2 	udiv	r1, r3, r2
 800879e:	fb01 f202 	mul.w	r2, r1, r2
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	899b      	ldrh	r3, [r3, #12]
 80087b6:	4619      	mov	r1, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80087be:	4413      	add	r3, r2
 80087c0:	4619      	mov	r1, r3
 80087c2:	6938      	ldr	r0, [r7, #16]
 80087c4:	f7ff feec 	bl	80085a0 <move_window>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d16e      	bne.n	80088ac <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087da:	fb01 f202 	mul.w	r2, r1, r2
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <get_fat+0xe6>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	091b      	lsrs	r3, r3, #4
 80087fe:	e002      	b.n	8008806 <get_fat+0xec>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008806:	617b      	str	r3, [r7, #20]
			break;
 8008808:	e055      	b.n	80088b6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	899b      	ldrh	r3, [r3, #12]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	b29b      	uxth	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	fbb3 f3f1 	udiv	r3, r3, r1
 800881e:	4413      	add	r3, r2
 8008820:	4619      	mov	r1, r3
 8008822:	6938      	ldr	r0, [r7, #16]
 8008824:	f7ff febc 	bl	80085a0 <move_window>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d140      	bne.n	80088b0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	8992      	ldrh	r2, [r2, #12]
 800883c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008840:	fb00 f202 	mul.w	r2, r0, r2
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	440b      	add	r3, r1
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fbf7 	bl	800803c <ld_word>
 800884e:	4603      	mov	r3, r0
 8008850:	617b      	str	r3, [r7, #20]
			break;
 8008852:	e030      	b.n	80088b6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	899b      	ldrh	r3, [r3, #12]
 800885c:	089b      	lsrs	r3, r3, #2
 800885e:	b29b      	uxth	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	fbb3 f3f1 	udiv	r3, r3, r1
 8008868:	4413      	add	r3, r2
 800886a:	4619      	mov	r1, r3
 800886c:	6938      	ldr	r0, [r7, #16]
 800886e:	f7ff fe97 	bl	80085a0 <move_window>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11d      	bne.n	80088b4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	8992      	ldrh	r2, [r2, #12]
 8008886:	fbb3 f0f2 	udiv	r0, r3, r2
 800888a:	fb00 f202 	mul.w	r2, r0, r2
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	440b      	add	r3, r1
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fbeb 	bl	800806e <ld_dword>
 8008898:	4603      	mov	r3, r0
 800889a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800889e:	617b      	str	r3, [r7, #20]
			break;
 80088a0:	e009      	b.n	80088b6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80088a2:	2301      	movs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	e006      	b.n	80088b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a8:	bf00      	nop
 80088aa:	e004      	b.n	80088b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ac:	bf00      	nop
 80088ae:	e002      	b.n	80088b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088b4:	bf00      	nop
		}
	}

	return val;
 80088b6:	697b      	ldr	r3, [r7, #20]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b089      	sub	sp, #36	@ 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088cc:	2302      	movs	r3, #2
 80088ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	f240 8109 	bls.w	8008aea <put_fat+0x22a>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	f080 8103 	bcs.w	8008aea <put_fat+0x22a>
		switch (fs->fs_type) {
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	f000 80b6 	beq.w	8008a5a <put_fat+0x19a>
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	f300 80fb 	bgt.w	8008aea <put_fat+0x22a>
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d003      	beq.n	8008900 <put_fat+0x40>
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f000 8083 	beq.w	8008a04 <put_fat+0x144>
 80088fe:	e0f4      	b.n	8008aea <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	085b      	lsrs	r3, r3, #1
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	4413      	add	r3, r2
 800890c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	899b      	ldrh	r3, [r3, #12]
 8008916:	4619      	mov	r1, r3
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	fbb3 f3f1 	udiv	r3, r3, r1
 800891e:	4413      	add	r3, r2
 8008920:	4619      	mov	r1, r3
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fe3c 	bl	80085a0 <move_window>
 8008928:	4603      	mov	r3, r0
 800892a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800892c:	7ffb      	ldrb	r3, [r7, #31]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f040 80d4 	bne.w	8008adc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	61ba      	str	r2, [r7, #24]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	8992      	ldrh	r2, [r2, #12]
 8008944:	fbb3 f0f2 	udiv	r0, r3, r2
 8008948:	fb00 f202 	mul.w	r2, r0, r2
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	440b      	add	r3, r1
 8008950:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <put_fat+0xb8>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b25b      	sxtb	r3, r3
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	b25a      	sxtb	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	b25b      	sxtb	r3, r3
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	b25b      	sxtb	r3, r3
 8008970:	4313      	orrs	r3, r2
 8008972:	b25b      	sxtb	r3, r3
 8008974:	b2db      	uxtb	r3, r3
 8008976:	e001      	b.n	800897c <put_fat+0xbc>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	899b      	ldrh	r3, [r3, #12]
 800898e:	4619      	mov	r1, r3
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	fbb3 f3f1 	udiv	r3, r3, r1
 8008996:	4413      	add	r3, r2
 8008998:	4619      	mov	r1, r3
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fe00 	bl	80085a0 <move_window>
 80089a0:	4603      	mov	r3, r0
 80089a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089a4:	7ffb      	ldrb	r3, [r7, #31]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 809a 	bne.w	8008ae0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	899b      	ldrh	r3, [r3, #12]
 80089b6:	461a      	mov	r2, r3
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80089be:	fb00 f202 	mul.w	r2, r0, r2
 80089c2:	1a9b      	subs	r3, r3, r2
 80089c4:	440b      	add	r3, r1
 80089c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <put_fat+0x11a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	e00e      	b.n	80089f8 <put_fat+0x138>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	b25b      	sxtb	r3, r3
 80089e0:	f023 030f 	bic.w	r3, r3, #15
 80089e4:	b25a      	sxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	b25b      	sxtb	r3, r3
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	4313      	orrs	r3, r2
 80089f4:	b25b      	sxtb	r3, r3
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	70da      	strb	r2, [r3, #3]
			break;
 8008a02:	e072      	b.n	8008aea <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	899b      	ldrh	r3, [r3, #12]
 8008a0c:	085b      	lsrs	r3, r3, #1
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4619      	mov	r1, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a18:	4413      	add	r3, r2
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff fdbf 	bl	80085a0 <move_window>
 8008a22:	4603      	mov	r3, r0
 8008a24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a26:	7ffb      	ldrb	r3, [r7, #31]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d15b      	bne.n	8008ae4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	8992      	ldrh	r2, [r2, #12]
 8008a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a3e:	fb00 f202 	mul.w	r2, r0, r2
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	440b      	add	r3, r1
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	b292      	uxth	r2, r2
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fb31 	bl	80080b4 <st_word>
			fs->wflag = 1;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	70da      	strb	r2, [r3, #3]
			break;
 8008a58:	e047      	b.n	8008aea <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	899b      	ldrh	r3, [r3, #12]
 8008a62:	089b      	lsrs	r3, r3, #2
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4619      	mov	r1, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a6e:	4413      	add	r3, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff fd94 	bl	80085a0 <move_window>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a7c:	7ffb      	ldrb	r3, [r7, #31]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d132      	bne.n	8008ae8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	8992      	ldrh	r2, [r2, #12]
 8008a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a9a:	fb00 f202 	mul.w	r2, r0, r2
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff fae3 	bl	800806e <ld_dword>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008aae:	4323      	orrs	r3, r4
 8008ab0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	8992      	ldrh	r2, [r2, #12]
 8008ac0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ac4:	fb00 f202 	mul.w	r2, r0, r2
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	440b      	add	r3, r1
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fb0b 	bl	80080ea <st_dword>
			fs->wflag = 1;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	70da      	strb	r2, [r3, #3]
			break;
 8008ada:	e006      	b.n	8008aea <put_fat+0x22a>
			if (res != FR_OK) break;
 8008adc:	bf00      	nop
 8008ade:	e004      	b.n	8008aea <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ae0:	bf00      	nop
 8008ae2:	e002      	b.n	8008aea <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ae4:	bf00      	nop
 8008ae6:	e000      	b.n	8008aea <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ae8:	bf00      	nop
		}
	}
	return res;
 8008aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3724      	adds	r7, #36	@ 0x24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}

08008af4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d904      	bls.n	8008b1a <remove_chain+0x26>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d301      	bcc.n	8008b1e <remove_chain+0x2a>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e04b      	b.n	8008bb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	69b8      	ldr	r0, [r7, #24]
 8008b2c:	f7ff fec8 	bl	80088c0 <put_fat>
 8008b30:	4603      	mov	r3, r0
 8008b32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <remove_chain+0x4a>
 8008b3a:	7ffb      	ldrb	r3, [r7, #31]
 8008b3c:	e03b      	b.n	8008bb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff fdea 	bl	800871a <get_fat>
 8008b46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d031      	beq.n	8008bb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <remove_chain+0x64>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e02e      	b.n	8008bb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d101      	bne.n	8008b64 <remove_chain+0x70>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e028      	b.n	8008bb6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b64:	2200      	movs	r2, #0
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	69b8      	ldr	r0, [r7, #24]
 8008b6a:	f7ff fea9 	bl	80088c0 <put_fat>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <remove_chain+0x88>
 8008b78:	7ffb      	ldrb	r3, [r7, #31]
 8008b7a:	e01c      	b.n	8008bb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	3b02      	subs	r3, #2
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d20b      	bcs.n	8008ba2 <remove_chain+0xae>
			fs->free_clst++;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	f043 0301 	orr.w	r3, r3, #1
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d3c6      	bcc.n	8008b3e <remove_chain+0x4a>
 8008bb0:	e000      	b.n	8008bb4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008bb2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b088      	sub	sp, #32
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10d      	bne.n	8008bf0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d004      	beq.n	8008bea <create_chain+0x2c>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d31b      	bcc.n	8008c22 <create_chain+0x64>
 8008bea:	2301      	movs	r3, #1
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	e018      	b.n	8008c22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fd91 	bl	800871a <get_fat>
 8008bf8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d801      	bhi.n	8008c04 <create_chain+0x46>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e070      	b.n	8008ce6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d101      	bne.n	8008c10 <create_chain+0x52>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	e06a      	b.n	8008ce6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d201      	bcs.n	8008c1e <create_chain+0x60>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	e063      	b.n	8008ce6 <create_chain+0x128>
		scl = clst;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d307      	bcc.n	8008c46 <create_chain+0x88>
				ncl = 2;
 8008c36:	2302      	movs	r3, #2
 8008c38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d901      	bls.n	8008c46 <create_chain+0x88>
 8008c42:	2300      	movs	r3, #0
 8008c44:	e04f      	b.n	8008ce6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c46:	69f9      	ldr	r1, [r7, #28]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fd66 	bl	800871a <get_fat>
 8008c4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00e      	beq.n	8008c74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d003      	beq.n	8008c64 <create_chain+0xa6>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d101      	bne.n	8008c68 <create_chain+0xaa>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	e03e      	b.n	8008ce6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d1da      	bne.n	8008c26 <create_chain+0x68>
 8008c70:	2300      	movs	r3, #0
 8008c72:	e038      	b.n	8008ce6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	69f9      	ldr	r1, [r7, #28]
 8008c7c:	6938      	ldr	r0, [r7, #16]
 8008c7e:	f7ff fe1f 	bl	80088c0 <put_fat>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d109      	bne.n	8008ca0 <create_chain+0xe2>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6938      	ldr	r0, [r7, #16]
 8008c98:	f7ff fe12 	bl	80088c0 <put_fat>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d116      	bne.n	8008cd4 <create_chain+0x116>
		fs->last_clst = ncl;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	3b02      	subs	r3, #2
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d804      	bhi.n	8008cc4 <create_chain+0x106>
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	1e5a      	subs	r2, r3, #1
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	791b      	ldrb	r3, [r3, #4]
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	711a      	strb	r2, [r3, #4]
 8008cd2:	e007      	b.n	8008ce4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d102      	bne.n	8008ce0 <create_chain+0x122>
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295
 8008cde:	e000      	b.n	8008ce2 <create_chain+0x124>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ce4:	69fb      	ldr	r3, [r7, #28]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b087      	sub	sp, #28
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	3304      	adds	r3, #4
 8008d04:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	899b      	ldrh	r3, [r3, #12]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	8952      	ldrh	r2, [r2, #10]
 8008d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	613a      	str	r2, [r7, #16]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <clmt_clust+0x42>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e010      	b.n	8008d52 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d307      	bcc.n	8008d48 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	3304      	adds	r3, #4
 8008d44:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d46:	e7e9      	b.n	8008d1c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008d48:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	4413      	add	r3, r2
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d74:	d204      	bcs.n	8008d80 <dir_sdi+0x22>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d80:	2302      	movs	r3, #2
 8008d82:	e071      	b.n	8008e68 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <dir_sdi+0x46>
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d902      	bls.n	8008da4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10c      	bne.n	8008dc4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	8912      	ldrh	r2, [r2, #8]
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d301      	bcc.n	8008dba <dir_sdi+0x5c>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e056      	b.n	8008e68 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	61da      	str	r2, [r3, #28]
 8008dc2:	e02d      	b.n	8008e20 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	895b      	ldrh	r3, [r3, #10]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	899b      	ldrh	r3, [r3, #12]
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dd4:	e019      	b.n	8008e0a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6979      	ldr	r1, [r7, #20]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fc9d 	bl	800871a <get_fat>
 8008de0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d101      	bne.n	8008dee <dir_sdi+0x90>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e03c      	b.n	8008e68 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d904      	bls.n	8008dfe <dir_sdi+0xa0>
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d301      	bcc.n	8008e02 <dir_sdi+0xa4>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e032      	b.n	8008e68 <dir_sdi+0x10a>
			ofs -= csz;
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d2e1      	bcs.n	8008dd6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008e12:	6979      	ldr	r1, [r7, #20]
 8008e14:	6938      	ldr	r0, [r7, #16]
 8008e16:	f7ff fc61 	bl	80086dc <clust2sect>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <dir_sdi+0xd4>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e01a      	b.n	8008e68 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69da      	ldr	r2, [r3, #28]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	899b      	ldrh	r3, [r3, #12]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e42:	441a      	add	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	899b      	ldrh	r3, [r3, #12]
 8008e52:	461a      	mov	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e5a:	fb00 f202 	mul.w	r2, r0, r2
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	18ca      	adds	r2, r1, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	3320      	adds	r3, #32
 8008e86:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <dir_next+0x28>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e96:	d301      	bcc.n	8008e9c <dir_next+0x2c>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	e0bb      	b.n	8009014 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea8:	fb01 f202 	mul.w	r2, r1, r2
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 809d 	bne.w	8008fee <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	8912      	ldrh	r2, [r2, #8]
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	f0c0 808d 	bcc.w	8008fee <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	61da      	str	r2, [r3, #28]
 8008eda:	2304      	movs	r3, #4
 8008edc:	e09a      	b.n	8009014 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	899b      	ldrh	r3, [r3, #12]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	8952      	ldrh	r2, [r2, #10]
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d17b      	bne.n	8008fee <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7ff fc0b 	bl	800871a <get_fat>
 8008f04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d801      	bhi.n	8008f10 <dir_next+0xa0>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e081      	b.n	8009014 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d101      	bne.n	8008f1c <dir_next+0xac>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e07b      	b.n	8009014 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d359      	bcc.n	8008fda <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	61da      	str	r2, [r3, #28]
 8008f32:	2304      	movs	r3, #4
 8008f34:	e06e      	b.n	8009014 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7ff fe3d 	bl	8008bbe <create_chain>
 8008f44:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <dir_next+0xe0>
 8008f4c:	2307      	movs	r3, #7
 8008f4e:	e061      	b.n	8009014 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d101      	bne.n	8008f5a <dir_next+0xea>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e05c      	b.n	8009014 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d101      	bne.n	8008f66 <dir_next+0xf6>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e056      	b.n	8009014 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7ff fad6 	bl	8008518 <sync_window>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <dir_next+0x106>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e04e      	b.n	8009014 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	899b      	ldrh	r3, [r3, #12]
 8008f80:	461a      	mov	r2, r3
 8008f82:	2100      	movs	r1, #0
 8008f84:	f7ff f8fe 	bl	8008184 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fba4 	bl	80086dc <clust2sect>
 8008f94:	4602      	mov	r2, r0
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f9a:	e012      	b.n	8008fc2 <dir_next+0x152>
						fs->wflag = 1;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff fab8 	bl	8008518 <sync_window>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <dir_next+0x142>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e030      	b.n	8009014 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	895b      	ldrh	r3, [r3, #10]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d3e6      	bcc.n	8008f9c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad2      	subs	r2, r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fe0:	6979      	ldr	r1, [r7, #20]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7ff fb7a 	bl	80086dc <clust2sect>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	899b      	ldrh	r3, [r3, #12]
 8008ffe:	461a      	mov	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	fbb3 f0f2 	udiv	r0, r3, r2
 8009006:	fb00 f202 	mul.w	r2, r0, r2
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	18ca      	adds	r2, r1, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fe95 	bl	8008d5e <dir_sdi>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d12b      	bne.n	8009096 <dir_alloc+0x7a>
		n = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	4619      	mov	r1, r3
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff faa9 	bl	80085a0 <move_window>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11d      	bne.n	8009094 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2be5      	cmp	r3, #229	@ 0xe5
 8009060:	d004      	beq.n	800906c <dir_alloc+0x50>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	3301      	adds	r3, #1
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d102      	bne.n	8009080 <dir_alloc+0x64>
 800907a:	e00c      	b.n	8009096 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009080:	2101      	movs	r1, #1
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fef4 	bl	8008e70 <dir_next>
 8009088:	4603      	mov	r3, r0
 800908a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0d7      	beq.n	8009042 <dir_alloc+0x26>
 8009092:	e000      	b.n	8009096 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009094:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d101      	bne.n	80090a0 <dir_alloc+0x84>
 800909c:	2307      	movs	r3, #7
 800909e:	75fb      	strb	r3, [r7, #23]
	return res;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	331a      	adds	r3, #26
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe ffbf 	bl	800803c <ld_word>
 80090be:	4603      	mov	r3, r0
 80090c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d109      	bne.n	80090de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe ffb4 	bl	800803c <ld_word>
 80090d4:	4603      	mov	r3, r0
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	331a      	adds	r3, #26
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	b292      	uxth	r2, r2
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ffd8 	bl	80080b4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d109      	bne.n	8009120 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f103 0214 	add.w	r2, r3, #20
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	b29b      	uxth	r3, r3
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe ffca 	bl	80080b4 <st_word>
	}
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	331a      	adds	r3, #26
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe ff80 	bl	800803c <ld_word>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <cmp_lfn+0x1e>
 8009142:	2300      	movs	r3, #0
 8009144:	e059      	b.n	80091fa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800914e:	1e5a      	subs	r2, r3, #1
 8009150:	4613      	mov	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800915c:	2301      	movs	r3, #1
 800915e:	81fb      	strh	r3, [r7, #14]
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	e033      	b.n	80091ce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009166:	4a27      	ldr	r2, [pc, #156]	@ (8009204 <cmp_lfn+0xdc>)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	4413      	add	r3, r2
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe ff61 	bl	800803c <ld_word>
 800917a:	4603      	mov	r3, r0
 800917c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800917e:	89fb      	ldrh	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01a      	beq.n	80091ba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2bfe      	cmp	r3, #254	@ 0xfe
 8009188:	d812      	bhi.n	80091b0 <cmp_lfn+0x88>
 800918a:	89bb      	ldrh	r3, [r7, #12]
 800918c:	4618      	mov	r0, r3
 800918e:	f002 f9a9 	bl	800b4e4 <ff_wtoupper>
 8009192:	4603      	mov	r3, r0
 8009194:	461c      	mov	r4, r3
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	617a      	str	r2, [r7, #20]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f002 f99d 	bl	800b4e4 <ff_wtoupper>
 80091aa:	4603      	mov	r3, r0
 80091ac:	429c      	cmp	r4, r3
 80091ae:	d001      	beq.n	80091b4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80091b0:	2300      	movs	r3, #0
 80091b2:	e022      	b.n	80091fa <cmp_lfn+0xd2>
			}
			wc = uc;
 80091b4:	89bb      	ldrh	r3, [r7, #12]
 80091b6:	81fb      	strh	r3, [r7, #14]
 80091b8:	e006      	b.n	80091c8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091ba:	89bb      	ldrh	r3, [r7, #12]
 80091bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d001      	beq.n	80091c8 <cmp_lfn+0xa0>
 80091c4:	2300      	movs	r3, #0
 80091c6:	e018      	b.n	80091fa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3301      	adds	r3, #1
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b0c      	cmp	r3, #12
 80091d2:	d9c8      	bls.n	8009166 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <cmp_lfn+0xd0>
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d008      	beq.n	80091f8 <cmp_lfn+0xd0>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <cmp_lfn+0xd0>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e000      	b.n	80091fa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80091f8:	2301      	movs	r3, #1
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd90      	pop	{r4, r7, pc}
 8009202:	bf00      	nop
 8009204:	0800f44c 	.word	0x0800f44c

08009208 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4611      	mov	r1, r2
 8009214:	461a      	mov	r2, r3
 8009216:	460b      	mov	r3, r1
 8009218:	71fb      	strb	r3, [r7, #7]
 800921a:	4613      	mov	r3, r2
 800921c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	330d      	adds	r3, #13
 8009222:	79ba      	ldrb	r2, [r7, #6]
 8009224:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	330b      	adds	r3, #11
 800922a:	220f      	movs	r2, #15
 800922c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	330c      	adds	r3, #12
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	331a      	adds	r3, #26
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe ff39 	bl	80080b4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	4613      	mov	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	82fb      	strh	r3, [r7, #22]
 8009256:	2300      	movs	r3, #0
 8009258:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800925a:	8afb      	ldrh	r3, [r7, #22]
 800925c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009260:	4293      	cmp	r3, r2
 8009262:	d007      	beq.n	8009274 <put_lfn+0x6c>
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	61fa      	str	r2, [r7, #28]
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009274:	4a17      	ldr	r2, [pc, #92]	@ (80092d4 <put_lfn+0xcc>)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	4413      	add	r3, r2
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	8afa      	ldrh	r2, [r7, #22]
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe ff14 	bl	80080b4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800928c:	8afb      	ldrh	r3, [r7, #22]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d102      	bne.n	8009298 <put_lfn+0x90>
 8009292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009296:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	3301      	adds	r3, #1
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b0c      	cmp	r3, #12
 80092a2:	d9da      	bls.n	800925a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80092a4:	8afb      	ldrh	r3, [r7, #22]
 80092a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d006      	beq.n	80092bc <put_lfn+0xb4>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d103      	bne.n	80092c4 <put_lfn+0xbc>
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	79fa      	ldrb	r2, [r7, #7]
 80092c8:	701a      	strb	r2, [r3, #0]
}
 80092ca:	bf00      	nop
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0800f44c 	.word	0x0800f44c

080092d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	@ 0x30
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80092e6:	220b      	movs	r2, #11
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7fe ff29 	bl	8008142 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b05      	cmp	r3, #5
 80092f4:	d92b      	bls.n	800934e <gen_numname+0x76>
		sr = seq;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80092fa:	e022      	b.n	8009342 <gen_numname+0x6a>
			wc = *lfn++;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1c9a      	adds	r2, r3, #2
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8009306:	2300      	movs	r3, #0
 8009308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800930a:	e017      	b.n	800933c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	005a      	lsls	r2, r3, #1
 8009310:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	4413      	add	r3, r2
 8009318:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800931a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d005      	beq.n	8009336 <gen_numname+0x5e>
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8009330:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8009334:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	3301      	adds	r3, #1
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d9e4      	bls.n	800930c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1d8      	bne.n	80092fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800934e:	2307      	movs	r3, #7
 8009350:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	b2db      	uxtb	r3, r3
 800935c:	3330      	adds	r3, #48	@ 0x30
 800935e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8009362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009366:	2b39      	cmp	r3, #57	@ 0x39
 8009368:	d904      	bls.n	8009374 <gen_numname+0x9c>
 800936a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800936e:	3307      	adds	r3, #7
 8009370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	1e5a      	subs	r2, r3, #1
 8009378:	62ba      	str	r2, [r7, #40]	@ 0x28
 800937a:	3330      	adds	r3, #48	@ 0x30
 800937c:	443b      	add	r3, r7
 800937e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009382:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	091b      	lsrs	r3, r3, #4
 800938a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1df      	bne.n	8009352 <gen_numname+0x7a>
	ns[i] = '~';
 8009392:	f107 0214 	add.w	r2, r7, #20
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	4413      	add	r3, r2
 800939a:	227e      	movs	r2, #126	@ 0x7e
 800939c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800939e:	2300      	movs	r3, #0
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a2:	e002      	b.n	80093aa <gen_numname+0xd2>
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	3301      	adds	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d205      	bcs.n	80093be <gen_numname+0xe6>
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	4413      	add	r3, r2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d1f2      	bne.n	80093a4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	2b07      	cmp	r3, #7
 80093c2:	d807      	bhi.n	80093d4 <gen_numname+0xfc>
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80093ca:	3330      	adds	r3, #48	@ 0x30
 80093cc:	443b      	add	r3, r7
 80093ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80093d2:	e000      	b.n	80093d6 <gen_numname+0xfe>
 80093d4:	2120      	movs	r1, #32
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	627a      	str	r2, [r7, #36]	@ 0x24
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	460a      	mov	r2, r1
 80093e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	2b07      	cmp	r3, #7
 80093e8:	d9e9      	bls.n	80093be <gen_numname+0xe6>
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	3730      	adds	r7, #48	@ 0x30
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009400:	230b      	movs	r3, #11
 8009402:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	b2da      	uxtb	r2, r3
 8009408:	0852      	lsrs	r2, r2, #1
 800940a:	01db      	lsls	r3, r3, #7
 800940c:	4313      	orrs	r3, r2
 800940e:	b2da      	uxtb	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	1c59      	adds	r1, r3, #1
 8009414:	6079      	str	r1, [r7, #4]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	4413      	add	r3, r2
 800941a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	3b01      	subs	r3, #1
 8009420:	60bb      	str	r3, [r7, #8]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1ed      	bne.n	8009404 <sum_sfn+0x10>
	return sum;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff fc89 	bl	8008d5e <dir_sdi>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <dir_find+0x24>
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	e0a9      	b.n	80095ae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800945a:	23ff      	movs	r3, #255	@ 0xff
 800945c:	753b      	strb	r3, [r7, #20]
 800945e:	7d3b      	ldrb	r3, [r7, #20]
 8009460:	757b      	strb	r3, [r7, #21]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4619      	mov	r1, r3
 8009470:	6938      	ldr	r0, [r7, #16]
 8009472:	f7ff f895 	bl	80085a0 <move_window>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f040 8090 	bne.w	80095a2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <dir_find+0x60>
 8009490:	2304      	movs	r3, #4
 8009492:	75fb      	strb	r3, [r7, #23]
 8009494:	e08a      	b.n	80095ac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	330b      	adds	r3, #11
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094a2:	73fb      	strb	r3, [r7, #15]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7bfa      	ldrb	r2, [r7, #15]
 80094a8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80094aa:	7dbb      	ldrb	r3, [r7, #22]
 80094ac:	2be5      	cmp	r3, #229	@ 0xe5
 80094ae:	d007      	beq.n	80094c0 <dir_find+0x8a>
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	f003 0308 	and.w	r3, r3, #8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <dir_find+0x98>
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	2b0f      	cmp	r3, #15
 80094be:	d006      	beq.n	80094ce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094c0:	23ff      	movs	r3, #255	@ 0xff
 80094c2:	757b      	strb	r3, [r7, #21]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80094cc:	e05e      	b.n	800958c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d136      	bne.n	8009542 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80094da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d154      	bne.n	800958c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80094e2:	7dbb      	ldrb	r3, [r7, #22]
 80094e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	7b5b      	ldrb	r3, [r3, #13]
 80094f2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80094f4:	7dbb      	ldrb	r3, [r7, #22]
 80094f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094fa:	75bb      	strb	r3, [r7, #22]
 80094fc:	7dbb      	ldrb	r3, [r7, #22]
 80094fe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009508:	7dba      	ldrb	r2, [r7, #22]
 800950a:	7d7b      	ldrb	r3, [r7, #21]
 800950c:	429a      	cmp	r2, r3
 800950e:	d115      	bne.n	800953c <dir_find+0x106>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	330d      	adds	r3, #13
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	7d3a      	ldrb	r2, [r7, #20]
 800951a:	429a      	cmp	r2, r3
 800951c:	d10e      	bne.n	800953c <dir_find+0x106>
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	f7ff fdfd 	bl	8009128 <cmp_lfn>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <dir_find+0x106>
 8009534:	7d7b      	ldrb	r3, [r7, #21]
 8009536:	3b01      	subs	r3, #1
 8009538:	b2db      	uxtb	r3, r3
 800953a:	e000      	b.n	800953e <dir_find+0x108>
 800953c:	23ff      	movs	r3, #255	@ 0xff
 800953e:	757b      	strb	r3, [r7, #21]
 8009540:	e024      	b.n	800958c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009542:	7d7b      	ldrb	r3, [r7, #21]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d109      	bne.n	800955c <dir_find+0x126>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff ff51 	bl	80093f4 <sum_sfn>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	7d3b      	ldrb	r3, [r7, #20]
 8009558:	4293      	cmp	r3, r2
 800955a:	d024      	beq.n	80095a6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <dir_find+0x14a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a18      	ldr	r0, [r3, #32]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3324      	adds	r3, #36	@ 0x24
 8009572:	220b      	movs	r2, #11
 8009574:	4619      	mov	r1, r3
 8009576:	f7fe fe20 	bl	80081ba <mem_cmp>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d014      	beq.n	80095aa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009580:	23ff      	movs	r3, #255	@ 0xff
 8009582:	757b      	strb	r3, [r7, #21]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800958c:	2100      	movs	r1, #0
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fc6e 	bl	8008e70 <dir_next>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f43f af65 	beq.w	800946a <dir_find+0x34>
 80095a0:	e004      	b.n	80095ac <dir_find+0x176>
		if (res != FR_OK) break;
 80095a2:	bf00      	nop
 80095a4:	e002      	b.n	80095ac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80095a6:	bf00      	nop
 80095a8:	e000      	b.n	80095ac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80095aa:	bf00      	nop

	return res;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08c      	sub	sp, #48	@ 0x30
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80095cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <dir_register+0x20>
 80095d4:	2306      	movs	r3, #6
 80095d6:	e0e0      	b.n	800979a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80095d8:	2300      	movs	r3, #0
 80095da:	627b      	str	r3, [r7, #36]	@ 0x24
 80095dc:	e002      	b.n	80095e4 <dir_register+0x2c>
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	3301      	adds	r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f4      	bne.n	80095de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	220c      	movs	r2, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fd9e 	bl	8008142 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d032      	beq.n	8009676 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2240      	movs	r2, #64	@ 0x40
 8009614:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009618:	2301      	movs	r3, #1
 800961a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800961c:	e016      	b.n	800964c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	f107 010c 	add.w	r1, r7, #12
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	f7ff fe53 	bl	80092d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff feff 	bl	8009436 <dir_find>
 8009638:	4603      	mov	r3, r0
 800963a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800963e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	3301      	adds	r3, #1
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	2b63      	cmp	r3, #99	@ 0x63
 8009650:	d9e5      	bls.n	800961e <dir_register+0x66>
 8009652:	e000      	b.n	8009656 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009654:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009658:	2b64      	cmp	r3, #100	@ 0x64
 800965a:	d101      	bne.n	8009660 <dir_register+0xa8>
 800965c:	2307      	movs	r3, #7
 800965e:	e09c      	b.n	800979a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009664:	2b04      	cmp	r3, #4
 8009666:	d002      	beq.n	800966e <dir_register+0xb6>
 8009668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800966c:	e095      	b.n	800979a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800966e:	7dfa      	ldrb	r2, [r7, #23]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <dir_register+0xd8>
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	330c      	adds	r3, #12
 8009684:	4a47      	ldr	r2, [pc, #284]	@ (80097a4 <dir_register+0x1ec>)
 8009686:	fba2 2303 	umull	r2, r3, r2, r3
 800968a:	089b      	lsrs	r3, r3, #2
 800968c:	3301      	adds	r3, #1
 800968e:	e000      	b.n	8009692 <dir_register+0xda>
 8009690:	2301      	movs	r3, #1
 8009692:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009694:	6a39      	ldr	r1, [r7, #32]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fcc0 	bl	800901c <dir_alloc>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80096a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d148      	bne.n	800973c <dir_register+0x184>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	623b      	str	r3, [r7, #32]
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d042      	beq.n	800973c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695a      	ldr	r2, [r3, #20]
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	015b      	lsls	r3, r3, #5
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff fb4b 	bl	8008d5e <dir_sdi>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80096ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d132      	bne.n	800973c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	@ 0x24
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fe8a 	bl	80093f4 <sum_sfn>
 80096e0:	4603      	mov	r3, r0
 80096e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	4619      	mov	r1, r3
 80096ea:	69f8      	ldr	r0, [r7, #28]
 80096ec:	f7fe ff58 	bl	80085a0 <move_window>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80096f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d11d      	bne.n	800973a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	6918      	ldr	r0, [r3, #16]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a19      	ldr	r1, [r3, #32]
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	b2da      	uxtb	r2, r3
 800970a:	7efb      	ldrb	r3, [r7, #27]
 800970c:	f7ff fd7c 	bl	8009208 <put_lfn>
				fs->wflag = 1;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2201      	movs	r2, #1
 8009714:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fba9 	bl	8008e70 <dir_next>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009728:	2b00      	cmp	r3, #0
 800972a:	d107      	bne.n	800973c <dir_register+0x184>
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	3b01      	subs	r3, #1
 8009730:	623b      	str	r3, [r7, #32]
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1d5      	bne.n	80096e4 <dir_register+0x12c>
 8009738:	e000      	b.n	800973c <dir_register+0x184>
				if (res != FR_OK) break;
 800973a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800973c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009740:	2b00      	cmp	r3, #0
 8009742:	d128      	bne.n	8009796 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	4619      	mov	r1, r3
 800974a:	69f8      	ldr	r0, [r7, #28]
 800974c:	f7fe ff28 	bl	80085a0 <move_window>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11b      	bne.n	8009796 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	2220      	movs	r2, #32
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fd0c 	bl	8008184 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a18      	ldr	r0, [r3, #32]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3324      	adds	r3, #36	@ 0x24
 8009774:	220b      	movs	r2, #11
 8009776:	4619      	mov	r1, r3
 8009778:	f7fe fce3 	bl	8008142 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	330c      	adds	r3, #12
 8009788:	f002 0218 	and.w	r2, r2, #24
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2201      	movs	r2, #1
 8009794:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800979a:	4618      	mov	r0, r3
 800979c:	3730      	adds	r7, #48	@ 0x30
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	4ec4ec4f 	.word	0x4ec4ec4f

080097a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	@ 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	61ba      	str	r2, [r7, #24]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4413      	add	r3, r2
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80097d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097d8:	2b1f      	cmp	r3, #31
 80097da:	d940      	bls.n	800985e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80097dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097de:	2b2f      	cmp	r3, #47	@ 0x2f
 80097e0:	d006      	beq.n	80097f0 <create_name+0x48>
 80097e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80097e6:	d110      	bne.n	800980a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80097e8:	e002      	b.n	80097f0 <create_name+0x48>
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	3301      	adds	r3, #1
 80097ee:	61bb      	str	r3, [r7, #24]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	4413      	add	r3, r2
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80097fa:	d0f6      	beq.n	80097ea <create_name+0x42>
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	4413      	add	r3, r2
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b5c      	cmp	r3, #92	@ 0x5c
 8009806:	d0f0      	beq.n	80097ea <create_name+0x42>
			break;
 8009808:	e02a      	b.n	8009860 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2bfe      	cmp	r3, #254	@ 0xfe
 800980e:	d901      	bls.n	8009814 <create_name+0x6c>
 8009810:	2306      	movs	r3, #6
 8009812:	e17d      	b.n	8009b10 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009816:	b2db      	uxtb	r3, r3
 8009818:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800981a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800981c:	2101      	movs	r1, #1
 800981e:	4618      	mov	r0, r3
 8009820:	f001 fe24 	bl	800b46c <ff_convert>
 8009824:	4603      	mov	r3, r0
 8009826:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <create_name+0x8a>
 800982e:	2306      	movs	r3, #6
 8009830:	e16e      	b.n	8009b10 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009834:	2b7f      	cmp	r3, #127	@ 0x7f
 8009836:	d809      	bhi.n	800984c <create_name+0xa4>
 8009838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800983a:	4619      	mov	r1, r3
 800983c:	488d      	ldr	r0, [pc, #564]	@ (8009a74 <create_name+0x2cc>)
 800983e:	f7fe fce3 	bl	8008208 <chk_chr>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <create_name+0xa4>
 8009848:	2306      	movs	r3, #6
 800984a:	e161      	b.n	8009b10 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	617a      	str	r2, [r7, #20]
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800985a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800985c:	e7b4      	b.n	80097c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800985e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	441a      	add	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800986a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800986c:	2b1f      	cmp	r3, #31
 800986e:	d801      	bhi.n	8009874 <create_name+0xcc>
 8009870:	2304      	movs	r3, #4
 8009872:	e000      	b.n	8009876 <create_name+0xce>
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800987a:	e011      	b.n	80098a0 <create_name+0xf8>
		w = lfn[di - 1];
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009882:	3b01      	subs	r3, #1
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800988e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009890:	2b20      	cmp	r3, #32
 8009892:	d002      	beq.n	800989a <create_name+0xf2>
 8009894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009896:	2b2e      	cmp	r3, #46	@ 0x2e
 8009898:	d106      	bne.n	80098a8 <create_name+0x100>
		di--;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	3b01      	subs	r3, #1
 800989e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1ea      	bne.n	800987c <create_name+0xd4>
 80098a6:	e000      	b.n	80098aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80098a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <create_name+0x118>
 80098bc:	2306      	movs	r3, #6
 80098be:	e127      	b.n	8009b10 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3324      	adds	r3, #36	@ 0x24
 80098c4:	220b      	movs	r2, #11
 80098c6:	2120      	movs	r1, #32
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fc5b 	bl	8008184 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80098ce:	2300      	movs	r3, #0
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e002      	b.n	80098da <create_name+0x132>
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	3301      	adds	r3, #1
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4413      	add	r3, r2
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d0f5      	beq.n	80098d4 <create_name+0x12c>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098f4:	d0ee      	beq.n	80098d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <create_name+0x168>
 80098fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009900:	f043 0303 	orr.w	r3, r3, #3
 8009904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009908:	e002      	b.n	8009910 <create_name+0x168>
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	3b01      	subs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d009      	beq.n	800992a <create_name+0x182>
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	3b01      	subs	r3, #1
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	2b2e      	cmp	r3, #46	@ 0x2e
 8009928:	d1ef      	bne.n	800990a <create_name+0x162>

	i = b = 0; ni = 8;
 800992a:	2300      	movs	r3, #0
 800992c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009930:	2300      	movs	r3, #0
 8009932:	623b      	str	r3, [r7, #32]
 8009934:	2308      	movs	r3, #8
 8009936:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	61ba      	str	r2, [r7, #24]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8090 	beq.w	8009a70 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009952:	2b20      	cmp	r3, #32
 8009954:	d006      	beq.n	8009964 <create_name+0x1bc>
 8009956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009958:	2b2e      	cmp	r3, #46	@ 0x2e
 800995a:	d10a      	bne.n	8009972 <create_name+0x1ca>
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	429a      	cmp	r2, r3
 8009962:	d006      	beq.n	8009972 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009968:	f043 0303 	orr.w	r3, r3, #3
 800996c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009970:	e07d      	b.n	8009a6e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009972:	6a3a      	ldr	r2, [r7, #32]
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	429a      	cmp	r2, r3
 8009978:	d203      	bcs.n	8009982 <create_name+0x1da>
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	429a      	cmp	r2, r3
 8009980:	d123      	bne.n	80099ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b0b      	cmp	r3, #11
 8009986:	d106      	bne.n	8009996 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800998c:	f043 0303 	orr.w	r3, r3, #3
 8009990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009994:	e075      	b.n	8009a82 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	429a      	cmp	r2, r3
 800999c:	d005      	beq.n	80099aa <create_name+0x202>
 800999e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099a2:	f043 0303 	orr.w	r3, r3, #3
 80099a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d866      	bhi.n	8009a80 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	2308      	movs	r3, #8
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	230b      	movs	r3, #11
 80099bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80099be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80099c8:	e051      	b.n	8009a6e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80099ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80099ce:	d914      	bls.n	80099fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80099d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fd49 	bl	800b46c <ff_convert>
 80099da:	4603      	mov	r3, r0
 80099dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80099de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d004      	beq.n	80099ee <create_name+0x246>
 80099e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099e6:	3b80      	subs	r3, #128	@ 0x80
 80099e8:	4a23      	ldr	r2, [pc, #140]	@ (8009a78 <create_name+0x2d0>)
 80099ea:	5cd3      	ldrb	r3, [r2, r3]
 80099ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80099ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099f2:	f043 0302 	orr.w	r3, r3, #2
 80099f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80099fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <create_name+0x268>
 8009a00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a02:	4619      	mov	r1, r3
 8009a04:	481d      	ldr	r0, [pc, #116]	@ (8009a7c <create_name+0x2d4>)
 8009a06:	f7fe fbff 	bl	8008208 <chk_chr>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009a10:	235f      	movs	r3, #95	@ 0x5f
 8009a12:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a18:	f043 0303 	orr.w	r3, r3, #3
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a20:	e01b      	b.n	8009a5a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a24:	2b40      	cmp	r3, #64	@ 0x40
 8009a26:	d909      	bls.n	8009a3c <create_name+0x294>
 8009a28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8009a2c:	d806      	bhi.n	8009a3c <create_name+0x294>
					b |= 2;
 8009a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a32:	f043 0302 	orr.w	r3, r3, #2
 8009a36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009a3a:	e00e      	b.n	8009a5a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009a3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a3e:	2b60      	cmp	r3, #96	@ 0x60
 8009a40:	d90b      	bls.n	8009a5a <create_name+0x2b2>
 8009a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a44:	2b7a      	cmp	r3, #122	@ 0x7a
 8009a46:	d808      	bhi.n	8009a5a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009a48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a4c:	f043 0301 	orr.w	r3, r3, #1
 8009a50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a56:	3b20      	subs	r3, #32
 8009a58:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	623a      	str	r2, [r7, #32]
 8009a60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009a62:	b2d1      	uxtb	r1, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	4413      	add	r3, r2
 8009a68:	460a      	mov	r2, r1
 8009a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009a6e:	e763      	b.n	8009938 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009a70:	bf00      	nop
 8009a72:	e006      	b.n	8009a82 <create_name+0x2da>
 8009a74:	0800ebd0 	.word	0x0800ebd0
 8009a78:	0800f3cc 	.word	0x0800f3cc
 8009a7c:	0800ebdc 	.word	0x0800ebdc
			if (si > di) break;			/* No extension */
 8009a80:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a88:	2be5      	cmp	r3, #229	@ 0xe5
 8009a8a:	d103      	bne.n	8009a94 <create_name+0x2ec>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2205      	movs	r2, #5
 8009a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	2b08      	cmp	r3, #8
 8009a98:	d104      	bne.n	8009aa4 <create_name+0x2fc>
 8009a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009aa8:	f003 030c 	and.w	r3, r3, #12
 8009aac:	2b0c      	cmp	r3, #12
 8009aae:	d005      	beq.n	8009abc <create_name+0x314>
 8009ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d105      	bne.n	8009ac8 <create_name+0x320>
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac0:	f043 0302 	orr.w	r3, r3, #2
 8009ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d117      	bne.n	8009b04 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d105      	bne.n	8009aec <create_name+0x344>
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae4:	f043 0310 	orr.w	r3, r3, #16
 8009ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009aec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009af0:	f003 030c 	and.w	r3, r3, #12
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d105      	bne.n	8009b04 <create_name+0x35c>
 8009af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009afc:	f043 0308 	orr.w	r3, r3, #8
 8009b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009b0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009b0e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3728      	adds	r7, #40	@ 0x28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009b2c:	e002      	b.n	8009b34 <follow_path+0x1c>
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	3301      	adds	r3, #1
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b3a:	d0f8      	beq.n	8009b2e <follow_path+0x16>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b42:	d0f4      	beq.n	8009b2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2200      	movs	r2, #0
 8009b48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b1f      	cmp	r3, #31
 8009b50:	d80a      	bhi.n	8009b68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2280      	movs	r2, #128	@ 0x80
 8009b56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff f8fe 	bl	8008d5e <dir_sdi>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	e048      	b.n	8009bfa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b68:	463b      	mov	r3, r7
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff fe1b 	bl	80097a8 <create_name>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d139      	bne.n	8009bf0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fc5a 	bl	8009436 <dir_find>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009b8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d12c      	bne.n	8009bf4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d127      	bne.n	8009bf4 <follow_path+0xdc>
 8009ba4:	2305      	movs	r3, #5
 8009ba6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ba8:	e024      	b.n	8009bf4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d121      	bne.n	8009bf8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	799b      	ldrb	r3, [r3, #6]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009bc0:	2305      	movs	r3, #5
 8009bc2:	75fb      	strb	r3, [r7, #23]
 8009bc4:	e019      	b.n	8009bfa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	8992      	ldrh	r2, [r2, #12]
 8009bd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bd8:	fb00 f202 	mul.w	r2, r0, r2
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	440b      	add	r3, r1
 8009be0:	4619      	mov	r1, r3
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fa61 	bl	80090aa <ld_clust>
 8009be8:	4602      	mov	r2, r0
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009bee:	e7bb      	b.n	8009b68 <follow_path+0x50>
			if (res != FR_OK) break;
 8009bf0:	bf00      	nop
 8009bf2:	e002      	b.n	8009bfa <follow_path+0xe2>
				break;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009bf8:	bf00      	nop
			}
		}
	}

	return res;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d031      	beq.n	8009c7e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e002      	b.n	8009c28 <get_ldnumber+0x24>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	3301      	adds	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b1f      	cmp	r3, #31
 8009c2e:	d903      	bls.n	8009c38 <get_ldnumber+0x34>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c36:	d1f4      	bne.n	8009c22 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c3e:	d11c      	bne.n	8009c7a <get_ldnumber+0x76>
			tp = *path;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	60fa      	str	r2, [r7, #12]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	3b30      	subs	r3, #48	@ 0x30
 8009c50:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b09      	cmp	r3, #9
 8009c56:	d80e      	bhi.n	8009c76 <get_ldnumber+0x72>
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d10a      	bne.n	8009c76 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d107      	bne.n	8009c76 <get_ldnumber+0x72>
					vol = (int)i;
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	e002      	b.n	8009c80 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c7e:	693b      	ldr	r3, [r7, #16]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	371c      	adds	r7, #28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	70da      	strb	r2, [r3, #3]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fe fc7a 	bl	80085a0 <move_window>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <check_fs+0x2a>
 8009cb2:	2304      	movs	r3, #4
 8009cb4:	e038      	b.n	8009d28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3338      	adds	r3, #56	@ 0x38
 8009cba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe f9bc 	bl	800803c <ld_word>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d001      	beq.n	8009cd4 <check_fs+0x48>
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e029      	b.n	8009d28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009cda:	2be9      	cmp	r3, #233	@ 0xe9
 8009cdc:	d009      	beq.n	8009cf2 <check_fs+0x66>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009ce4:	2beb      	cmp	r3, #235	@ 0xeb
 8009ce6:	d11e      	bne.n	8009d26 <check_fs+0x9a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009cee:	2b90      	cmp	r3, #144	@ 0x90
 8009cf0:	d119      	bne.n	8009d26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3338      	adds	r3, #56	@ 0x38
 8009cf6:	3336      	adds	r3, #54	@ 0x36
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe f9b8 	bl	800806e <ld_dword>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009d04:	4a0a      	ldr	r2, [pc, #40]	@ (8009d30 <check_fs+0xa4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d101      	bne.n	8009d0e <check_fs+0x82>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e00c      	b.n	8009d28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3338      	adds	r3, #56	@ 0x38
 8009d12:	3352      	adds	r3, #82	@ 0x52
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe f9aa 	bl	800806e <ld_dword>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4a05      	ldr	r2, [pc, #20]	@ (8009d34 <check_fs+0xa8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d101      	bne.n	8009d26 <check_fs+0x9a>
 8009d22:	2300      	movs	r3, #0
 8009d24:	e000      	b.n	8009d28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009d26:	2302      	movs	r3, #2
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	00544146 	.word	0x00544146
 8009d34:	33544146 	.word	0x33544146

08009d38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b096      	sub	sp, #88	@ 0x58
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff ff59 	bl	8009c04 <get_ldnumber>
 8009d52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da01      	bge.n	8009d5e <find_volume+0x26>
 8009d5a:	230b      	movs	r3, #11
 8009d5c:	e265      	b.n	800a22a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d5e:	4a9f      	ldr	r2, [pc, #636]	@ (8009fdc <find_volume+0x2a4>)
 8009d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <find_volume+0x3a>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	e25b      	b.n	800a22a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	f023 0301 	bic.w	r3, r3, #1
 8009d7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01a      	beq.n	8009dbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe f8b7 	bl	8007f00 <disk_status>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10c      	bne.n	8009dbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <find_volume+0x82>
 8009daa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009dae:	f003 0304 	and.w	r3, r3, #4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009db6:	230a      	movs	r3, #10
 8009db8:	e237      	b.n	800a22a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e235      	b.n	800a22a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe f8af 	bl	8007f34 <disk_initialize>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009de8:	2303      	movs	r3, #3
 8009dea:	e21e      	b.n	800a22a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d007      	beq.n	8009e02 <find_volume+0xca>
 8009df2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009dfe:	230a      	movs	r3, #10
 8009e00:	e213      	b.n	800a22a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	7858      	ldrb	r0, [r3, #1]
 8009e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e08:	330c      	adds	r3, #12
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	f7fe f8f7 	bl	8008000 <disk_ioctl>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <find_volume+0xe4>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e206      	b.n	800a22a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1e:	899b      	ldrh	r3, [r3, #12]
 8009e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e24:	d80d      	bhi.n	8009e42 <find_volume+0x10a>
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	899b      	ldrh	r3, [r3, #12]
 8009e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e2e:	d308      	bcc.n	8009e42 <find_volume+0x10a>
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	899b      	ldrh	r3, [r3, #12]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <find_volume+0x10e>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e1f1      	b.n	800a22a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009e4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e4e:	f7ff ff1d 	bl	8009c8c <check_fs>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d149      	bne.n	8009ef4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e60:	2300      	movs	r3, #0
 8009e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e64:	e01e      	b.n	8009ea4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e68:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009e74:	4413      	add	r3, r2
 8009e76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d006      	beq.n	8009e90 <find_volume+0x158>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	3308      	adds	r3, #8
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe f8f1 	bl	800806e <ld_dword>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	e000      	b.n	8009e92 <find_volume+0x15a>
 8009e90:	2200      	movs	r2, #0
 8009e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	3358      	adds	r3, #88	@ 0x58
 8009e98:	443b      	add	r3, r7
 8009e9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d9dd      	bls.n	8009e66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009eaa:	2300      	movs	r3, #0
 8009eac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <find_volume+0x182>
 8009eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	3358      	adds	r3, #88	@ 0x58
 8009ec0:	443b      	add	r3, r7
 8009ec2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ec6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <find_volume+0x1a2>
 8009ece:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ed0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ed2:	f7ff fedb 	bl	8009c8c <check_fs>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	e000      	b.n	8009edc <find_volume+0x1a4>
 8009eda:	2303      	movs	r3, #3
 8009edc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d905      	bls.n	8009ef4 <find_volume+0x1bc>
 8009ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eea:	3301      	adds	r3, #1
 8009eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d9e2      	bls.n	8009eba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d101      	bne.n	8009f00 <find_volume+0x1c8>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e194      	b.n	800a22a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d901      	bls.n	8009f0c <find_volume+0x1d4>
 8009f08:	230d      	movs	r3, #13
 8009f0a:	e18e      	b.n	800a22a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	3338      	adds	r3, #56	@ 0x38
 8009f10:	330b      	adds	r3, #11
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe f892 	bl	800803c <ld_word>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1e:	899b      	ldrh	r3, [r3, #12]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d001      	beq.n	8009f28 <find_volume+0x1f0>
 8009f24:	230d      	movs	r3, #13
 8009f26:	e180      	b.n	800a22a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	3338      	adds	r3, #56	@ 0x38
 8009f2c:	3316      	adds	r3, #22
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe f884 	bl	800803c <ld_word>
 8009f34:	4603      	mov	r3, r0
 8009f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d106      	bne.n	8009f4c <find_volume+0x214>
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f40:	3338      	adds	r3, #56	@ 0x38
 8009f42:	3324      	adds	r3, #36	@ 0x24
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe f892 	bl	800806e <ld_dword>
 8009f4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f54:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	789b      	ldrb	r3, [r3, #2]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d005      	beq.n	8009f70 <find_volume+0x238>
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	789b      	ldrb	r3, [r3, #2]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d001      	beq.n	8009f70 <find_volume+0x238>
 8009f6c:	230d      	movs	r3, #13
 8009f6e:	e15c      	b.n	800a22a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	789b      	ldrb	r3, [r3, #2]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f78:	fb02 f303 	mul.w	r3, r2, r3
 8009f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f84:	461a      	mov	r2, r3
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	895b      	ldrh	r3, [r3, #10]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d008      	beq.n	8009fa4 <find_volume+0x26c>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	895b      	ldrh	r3, [r3, #10]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9a:	895b      	ldrh	r3, [r3, #10]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <find_volume+0x270>
 8009fa4:	230d      	movs	r3, #13
 8009fa6:	e140      	b.n	800a22a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009faa:	3338      	adds	r3, #56	@ 0x38
 8009fac:	3311      	adds	r3, #17
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe f844 	bl	800803c <ld_word>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	891b      	ldrh	r3, [r3, #8]
 8009fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fc2:	8992      	ldrh	r2, [r2, #12]
 8009fc4:	0952      	lsrs	r2, r2, #5
 8009fc6:	b292      	uxth	r2, r2
 8009fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fcc:	fb01 f202 	mul.w	r2, r1, r2
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <find_volume+0x2a8>
 8009fd8:	230d      	movs	r3, #13
 8009fda:	e126      	b.n	800a22a <find_volume+0x4f2>
 8009fdc:	20002218 	.word	0x20002218

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	3338      	adds	r3, #56	@ 0x38
 8009fe4:	3313      	adds	r3, #19
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe f828 	bl	800803c <ld_word>
 8009fec:	4603      	mov	r3, r0
 8009fee:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <find_volume+0x2cc>
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff8:	3338      	adds	r3, #56	@ 0x38
 8009ffa:	3320      	adds	r3, #32
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe f836 	bl	800806e <ld_dword>
 800a002:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	3338      	adds	r3, #56	@ 0x38
 800a008:	330e      	adds	r3, #14
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe f816 	bl	800803c <ld_word>
 800a010:	4603      	mov	r3, r0
 800a012:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a014:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <find_volume+0x2e6>
 800a01a:	230d      	movs	r3, #13
 800a01c:	e105      	b.n	800a22a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a01e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a022:	4413      	add	r3, r2
 800a024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a026:	8911      	ldrh	r1, [r2, #8]
 800a028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a02a:	8992      	ldrh	r2, [r2, #12]
 800a02c:	0952      	lsrs	r2, r2, #5
 800a02e:	b292      	uxth	r2, r2
 800a030:	fbb1 f2f2 	udiv	r2, r1, r2
 800a034:	b292      	uxth	r2, r2
 800a036:	4413      	add	r3, r2
 800a038:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03e:	429a      	cmp	r2, r3
 800a040:	d201      	bcs.n	800a046 <find_volume+0x30e>
 800a042:	230d      	movs	r3, #13
 800a044:	e0f1      	b.n	800a22a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a04e:	8952      	ldrh	r2, [r2, #10]
 800a050:	fbb3 f3f2 	udiv	r3, r3, r2
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <find_volume+0x328>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e0e4      	b.n	800a22a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a060:	2303      	movs	r3, #3
 800a062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d802      	bhi.n	800a076 <find_volume+0x33e>
 800a070:	2302      	movs	r3, #2
 800a072:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d802      	bhi.n	800a086 <find_volume+0x34e>
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	1c9a      	adds	r2, r3, #2
 800a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a090:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a092:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a094:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a098:	441a      	add	r2, r3
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a09e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	441a      	add	r2, r3
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d11e      	bne.n	800a0ee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b2:	3338      	adds	r3, #56	@ 0x38
 800a0b4:	332a      	adds	r3, #42	@ 0x2a
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fd ffc0 	bl	800803c <ld_word>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <find_volume+0x38e>
 800a0c2:	230d      	movs	r3, #13
 800a0c4:	e0b1      	b.n	800a22a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c8:	891b      	ldrh	r3, [r3, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <find_volume+0x39a>
 800a0ce:	230d      	movs	r3, #13
 800a0d0:	e0ab      	b.n	800a22a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	3338      	adds	r3, #56	@ 0x38
 800a0d6:	332c      	adds	r3, #44	@ 0x2c
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fd ffc8 	bl	800806e <ld_dword>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0ec:	e01f      	b.n	800a12e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f0:	891b      	ldrh	r3, [r3, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <find_volume+0x3c2>
 800a0f6:	230d      	movs	r3, #13
 800a0f8:	e097      	b.n	800a22a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a100:	441a      	add	r2, r3
 800a102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a104:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a106:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d103      	bne.n	800a116 <find_volume+0x3de>
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	e00a      	b.n	800a12c <find_volume+0x3f4>
 800a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	4613      	mov	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	4413      	add	r3, r2
 800a120:	085a      	lsrs	r2, r3, #1
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a12c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	6a1a      	ldr	r2, [r3, #32]
 800a132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a134:	899b      	ldrh	r3, [r3, #12]
 800a136:	4619      	mov	r1, r3
 800a138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a13a:	440b      	add	r3, r1
 800a13c:	3b01      	subs	r3, #1
 800a13e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a140:	8989      	ldrh	r1, [r1, #12]
 800a142:	fbb3 f3f1 	udiv	r3, r3, r1
 800a146:	429a      	cmp	r2, r3
 800a148:	d201      	bcs.n	800a14e <find_volume+0x416>
 800a14a:	230d      	movs	r3, #13
 800a14c:	e06d      	b.n	800a22a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a150:	f04f 32ff 	mov.w	r2, #4294967295
 800a154:	619a      	str	r2, [r3, #24]
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	699a      	ldr	r2, [r3, #24]
 800a15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a160:	2280      	movs	r2, #128	@ 0x80
 800a162:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d149      	bne.n	800a200 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	3338      	adds	r3, #56	@ 0x38
 800a170:	3330      	adds	r3, #48	@ 0x30
 800a172:	4618      	mov	r0, r3
 800a174:	f7fd ff62 	bl	800803c <ld_word>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d140      	bne.n	800a200 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a17e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a180:	3301      	adds	r3, #1
 800a182:	4619      	mov	r1, r3
 800a184:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a186:	f7fe fa0b 	bl	80085a0 <move_window>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d137      	bne.n	800a200 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a192:	2200      	movs	r2, #0
 800a194:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	3338      	adds	r3, #56	@ 0x38
 800a19a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fd ff4c 	bl	800803c <ld_word>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d127      	bne.n	800a200 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b2:	3338      	adds	r3, #56	@ 0x38
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fd ff5a 	bl	800806e <ld_dword>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a234 <find_volume+0x4fc>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d11e      	bne.n	800a200 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	3338      	adds	r3, #56	@ 0x38
 800a1c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fd ff4f 	bl	800806e <ld_dword>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4a19      	ldr	r2, [pc, #100]	@ (800a238 <find_volume+0x500>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d113      	bne.n	800a200 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1da:	3338      	adds	r3, #56	@ 0x38
 800a1dc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fd ff44 	bl	800806e <ld_dword>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	3338      	adds	r3, #56	@ 0x38
 800a1f0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fd ff3a 	bl	800806e <ld_dword>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a206:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a208:	4b0c      	ldr	r3, [pc, #48]	@ (800a23c <find_volume+0x504>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	4b0a      	ldr	r3, [pc, #40]	@ (800a23c <find_volume+0x504>)
 800a212:	801a      	strh	r2, [r3, #0]
 800a214:	4b09      	ldr	r3, [pc, #36]	@ (800a23c <find_volume+0x504>)
 800a216:	881a      	ldrh	r2, [r3, #0]
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21e:	4a08      	ldr	r2, [pc, #32]	@ (800a240 <find_volume+0x508>)
 800a220:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a222:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a224:	f7fe f954 	bl	80084d0 <clear_lock>
#endif
	return FR_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3758      	adds	r7, #88	@ 0x58
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	41615252 	.word	0x41615252
 800a238:	61417272 	.word	0x61417272
 800a23c:	2000221c 	.word	0x2000221c
 800a240:	20002240 	.word	0x20002240

0800a244 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a24e:	2309      	movs	r3, #9
 800a250:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01c      	beq.n	800a292 <validate+0x4e>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d018      	beq.n	800a292 <validate+0x4e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d013      	beq.n	800a292 <validate+0x4e>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	889a      	ldrh	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	88db      	ldrh	r3, [r3, #6]
 800a274:	429a      	cmp	r2, r3
 800a276:	d10c      	bne.n	800a292 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd fe3e 	bl	8007f00 <disk_status>
 800a284:	4603      	mov	r3, r0
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <validate+0x4e>
			res = FR_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <validate+0x5a>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	e000      	b.n	800a2a0 <validate+0x5c>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	6013      	str	r3, [r2, #0]
	return res;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff fc9c 	bl	8009c04 <get_ldnumber>
 800a2cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da01      	bge.n	800a2d8 <f_mount+0x28>
 800a2d4:	230b      	movs	r3, #11
 800a2d6:	e02b      	b.n	800a330 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a2d8:	4a17      	ldr	r2, [pc, #92]	@ (800a338 <f_mount+0x88>)
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a2e8:	69b8      	ldr	r0, [r7, #24]
 800a2ea:	f7fe f8f1 	bl	80084d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	490d      	ldr	r1, [pc, #52]	@ (800a338 <f_mount+0x88>)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <f_mount+0x66>
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d001      	beq.n	800a31a <f_mount+0x6a>
 800a316:	2300      	movs	r3, #0
 800a318:	e00a      	b.n	800a330 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a31a:	f107 010c 	add.w	r1, r7, #12
 800a31e:	f107 0308 	add.w	r3, r7, #8
 800a322:	2200      	movs	r2, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fd07 	bl	8009d38 <find_volume>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20002218 	.word	0x20002218

0800a33c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b09a      	sub	sp, #104	@ 0x68
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <f_open+0x18>
 800a350:	2309      	movs	r3, #9
 800a352:	e1b7      	b.n	800a6c4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a35a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a35c:	79fa      	ldrb	r2, [r7, #7]
 800a35e:	f107 0114 	add.w	r1, r7, #20
 800a362:	f107 0308 	add.w	r3, r7, #8
 800a366:	4618      	mov	r0, r3
 800a368:	f7ff fce6 	bl	8009d38 <find_volume>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a372:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 819b 	bne.w	800a6b2 <f_open+0x376>
		dj.obj.fs = fs;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	f107 0318 	add.w	r3, r7, #24
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fbc5 	bl	8009b18 <follow_path>
 800a38e:	4603      	mov	r3, r0
 800a390:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a394:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d118      	bne.n	800a3ce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a39c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	da03      	bge.n	800a3ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800a3a6:	2306      	movs	r3, #6
 800a3a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a3ac:	e00f      	b.n	800a3ce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	bf8c      	ite	hi
 800a3b4:	2301      	movhi	r3, #1
 800a3b6:	2300      	movls	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f107 0318 	add.w	r3, r7, #24
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fd ff3c 	bl	8008240 <chk_lock>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	f003 031c 	and.w	r3, r3, #28
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d07f      	beq.n	800a4d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a3d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d017      	beq.n	800a410 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a3e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d10e      	bne.n	800a406 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a3e8:	f7fd ff86 	bl	80082f8 <enq_lock>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <f_open+0xc4>
 800a3f2:	f107 0318 	add.w	r3, r7, #24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff f8de 	bl	80095b8 <dir_register>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	e000      	b.n	800a402 <f_open+0xc6>
 800a400:	2312      	movs	r3, #18
 800a402:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	f043 0308 	orr.w	r3, r3, #8
 800a40c:	71fb      	strb	r3, [r7, #7]
 800a40e:	e010      	b.n	800a432 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a410:	7fbb      	ldrb	r3, [r7, #30]
 800a412:	f003 0311 	and.w	r3, r3, #17
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <f_open+0xe6>
					res = FR_DENIED;
 800a41a:	2307      	movs	r3, #7
 800a41c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a420:	e007      	b.n	800a432 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <f_open+0xf6>
 800a42c:	2308      	movs	r3, #8
 800a42e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a432:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a436:	2b00      	cmp	r3, #0
 800a438:	d168      	bne.n	800a50c <f_open+0x1d0>
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b00      	cmp	r3, #0
 800a442:	d063      	beq.n	800a50c <f_open+0x1d0>
				dw = GET_FATTIME();
 800a444:	f7fd fcfe 	bl	8007e44 <get_fattime>
 800a448:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	330e      	adds	r3, #14
 800a44e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a450:	4618      	mov	r0, r3
 800a452:	f7fd fe4a 	bl	80080ea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	3316      	adds	r3, #22
 800a45a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fd fe44 	bl	80080ea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a464:	330b      	adds	r3, #11
 800a466:	2220      	movs	r2, #32
 800a468:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a46e:	4611      	mov	r1, r2
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe fe1a 	bl	80090aa <ld_clust>
 800a476:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a47c:	2200      	movs	r2, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fe32 	bl	80090e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a486:	331c      	adds	r3, #28
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd fe2d 	bl	80080ea <st_dword>
					fs->wflag = 1;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2201      	movs	r2, #1
 800a494:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d037      	beq.n	800a50c <f_open+0x1d0>
						dw = fs->winsect;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a4a2:	f107 0318 	add.w	r3, r7, #24
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fb22 	bl	8008af4 <remove_chain>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a4b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d126      	bne.n	800a50c <f_open+0x1d0>
							res = move_window(fs, dw);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe f86c 	bl	80085a0 <move_window>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4d2:	3a01      	subs	r2, #1
 800a4d4:	615a      	str	r2, [r3, #20]
 800a4d6:	e019      	b.n	800a50c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a4d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d115      	bne.n	800a50c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a4e0:	7fbb      	ldrb	r3, [r7, #30]
 800a4e2:	f003 0310 	and.w	r3, r3, #16
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a4f0:	e00c      	b.n	800a50c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d007      	beq.n	800a50c <f_open+0x1d0>
 800a4fc:	7fbb      	ldrb	r3, [r7, #30]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <f_open+0x1d0>
						res = FR_DENIED;
 800a506:	2307      	movs	r3, #7
 800a508:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a50c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a510:	2b00      	cmp	r3, #0
 800a512:	d126      	bne.n	800a562 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a524:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a52e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	2b01      	cmp	r3, #1
 800a538:	bf8c      	ite	hi
 800a53a:	2301      	movhi	r3, #1
 800a53c:	2300      	movls	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	461a      	mov	r2, r3
 800a542:	f107 0318 	add.w	r3, r7, #24
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fd fef7 	bl	800833c <inc_lock>
 800a54e:	4602      	mov	r2, r0
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <f_open+0x226>
 800a55c:	2302      	movs	r3, #2
 800a55e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a562:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 80a3 	bne.w	800a6b2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fd99 	bl	80090aa <ld_clust>
 800a578:	4602      	mov	r2, r0
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	331c      	adds	r3, #28
 800a582:	4618      	mov	r0, r3
 800a584:	f7fd fd73 	bl	800806e <ld_dword>
 800a588:	4602      	mov	r2, r0
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	88da      	ldrh	r2, [r3, #6]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	79fa      	ldrb	r2, [r7, #7]
 800a5a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3330      	adds	r3, #48	@ 0x30
 800a5be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fd fddd 	bl	8008184 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d06e      	beq.n	800a6b2 <f_open+0x376>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d06a      	beq.n	800a6b2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	895b      	ldrh	r3, [r3, #10]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	899b      	ldrh	r3, [r3, #12]
 800a5ee:	fb02 f303 	mul.w	r3, r2, r3
 800a5f2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a600:	e016      	b.n	800a630 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe f887 	bl	800871a <get_fat>
 800a60c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a60e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a610:	2b01      	cmp	r3, #1
 800a612:	d802      	bhi.n	800a61a <f_open+0x2de>
 800a614:	2302      	movs	r3, #2
 800a616:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a61a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d102      	bne.n	800a628 <f_open+0x2ec>
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a628:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a630:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <f_open+0x304>
 800a638:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a63a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d8e0      	bhi.n	800a602 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a644:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a646:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d131      	bne.n	800a6b2 <f_open+0x376>
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	899b      	ldrh	r3, [r3, #12]
 800a652:	461a      	mov	r2, r3
 800a654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a656:	fbb3 f1f2 	udiv	r1, r3, r2
 800a65a:	fb01 f202 	mul.w	r2, r1, r2
 800a65e:	1a9b      	subs	r3, r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d026      	beq.n	800a6b2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe f837 	bl	80086dc <clust2sect>
 800a66e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <f_open+0x342>
						res = FR_INT_ERR;
 800a676:	2302      	movs	r3, #2
 800a678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a67c:	e019      	b.n	800a6b2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	899b      	ldrh	r3, [r3, #12]
 800a682:	461a      	mov	r2, r3
 800a684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a686:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	7858      	ldrb	r0, [r3, #1]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f7fd fc6d 	bl	8007f80 <disk_read>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <f_open+0x376>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a6b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <f_open+0x384>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3768      	adds	r7, #104	@ 0x68
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	@ 0x38
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f107 0214 	add.w	r2, r7, #20
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fda9 	bl	800a244 <validate>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a6f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d107      	bne.n	800a710 <f_read+0x44>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7d5b      	ldrb	r3, [r3, #21]
 800a704:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a708:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <f_read+0x4a>
 800a710:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a714:	e135      	b.n	800a982 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <f_read+0x5a>
 800a722:	2307      	movs	r3, #7
 800a724:	e12d      	b.n	800a982 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	429a      	cmp	r2, r3
 800a738:	f240 811e 	bls.w	800a978 <f_read+0x2ac>
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a740:	e11a      	b.n	800a978 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	8992      	ldrh	r2, [r2, #12]
 800a74a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a74e:	fb01 f202 	mul.w	r2, r1, r2
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 80d5 	bne.w	800a904 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	8992      	ldrh	r2, [r2, #12]
 800a762:	fbb3 f3f2 	udiv	r3, r3, r2
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	8952      	ldrh	r2, [r2, #10]
 800a76a:	3a01      	subs	r2, #1
 800a76c:	4013      	ands	r3, r2
 800a76e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d12f      	bne.n	800a7d6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	633b      	str	r3, [r7, #48]	@ 0x30
 800a784:	e013      	b.n	800a7ae <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	4619      	mov	r1, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7fe faaa 	bl	8008cee <clmt_clust>
 800a79a:	6338      	str	r0, [r7, #48]	@ 0x30
 800a79c:	e007      	b.n	800a7ae <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fd ffb7 	bl	800871a <get_fat>
 800a7ac:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d804      	bhi.n	800a7be <f_read+0xf2>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	755a      	strb	r2, [r3, #21]
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	e0e1      	b.n	800a982 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d104      	bne.n	800a7d0 <f_read+0x104>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	755a      	strb	r2, [r3, #21]
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e0d8      	b.n	800a982 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	f7fd ff7c 	bl	80086dc <clust2sect>
 800a7e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <f_read+0x12a>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	755a      	strb	r2, [r3, #21]
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e0c5      	b.n	800a982 <f_read+0x2b6>
			sect += csect;
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	899b      	ldrh	r3, [r3, #12]
 800a802:	461a      	mov	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	fbb3 f3f2 	udiv	r3, r3, r2
 800a80a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d041      	beq.n	800a896 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	4413      	add	r3, r2
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	8952      	ldrh	r2, [r2, #10]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d905      	bls.n	800a82c <f_read+0x160>
					cc = fs->csize - csect;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	895b      	ldrh	r3, [r3, #10]
 800a824:	461a      	mov	r2, r3
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	7858      	ldrb	r0, [r3, #1]
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a836:	f7fd fba3 	bl	8007f80 <disk_read>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <f_read+0x17e>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	755a      	strb	r2, [r3, #21]
 800a846:	2301      	movs	r3, #1
 800a848:	e09b      	b.n	800a982 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	7d1b      	ldrb	r3, [r3, #20]
 800a84e:	b25b      	sxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	da18      	bge.n	800a886 <f_read+0x1ba>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a1a      	ldr	r2, [r3, #32]
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a85e:	429a      	cmp	r2, r3
 800a860:	d911      	bls.n	800a886 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1a      	ldr	r2, [r3, #32]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	8992      	ldrh	r2, [r2, #12]
 800a86e:	fb02 f303 	mul.w	r3, r2, r3
 800a872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a874:	18d0      	adds	r0, r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	899b      	ldrh	r3, [r3, #12]
 800a880:	461a      	mov	r2, r3
 800a882:	f7fd fc5e 	bl	8008142 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	899b      	ldrh	r3, [r3, #12]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
 800a892:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a894:	e05c      	b.n	800a950 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d02e      	beq.n	800a8fe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	7d1b      	ldrb	r3, [r3, #20]
 800a8a4:	b25b      	sxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da18      	bge.n	800a8dc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	7858      	ldrb	r0, [r3, #1]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1a      	ldr	r2, [r3, #32]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f7fd fb81 	bl	8007fc0 <disk_write>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <f_read+0x202>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	755a      	strb	r2, [r3, #21]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e059      	b.n	800a982 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	7d1b      	ldrb	r3, [r3, #20]
 800a8d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	7858      	ldrb	r0, [r3, #1]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	f7fd fb49 	bl	8007f80 <disk_read>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d004      	beq.n	800a8fe <f_read+0x232>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	755a      	strb	r2, [r3, #21]
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e041      	b.n	800a982 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	899b      	ldrh	r3, [r3, #12]
 800a908:	4618      	mov	r0, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	8992      	ldrh	r2, [r2, #12]
 800a912:	fbb3 f1f2 	udiv	r1, r3, r2
 800a916:	fb01 f202 	mul.w	r2, r1, r2
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	1ac3      	subs	r3, r0, r3
 800a91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d901      	bls.n	800a92c <f_read+0x260>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	8992      	ldrh	r2, [r2, #12]
 800a93a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a93e:	fb00 f202 	mul.w	r2, r0, r2
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	440b      	add	r3, r1
 800a946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a948:	4619      	mov	r1, r3
 800a94a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a94c:	f7fd fbf9 	bl	8008142 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a954:	4413      	add	r3, r2
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	699a      	ldr	r2, [r3, #24]
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	441a      	add	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	619a      	str	r2, [r3, #24]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96a:	441a      	add	r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f47f aee1 	bne.w	800a742 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3738      	adds	r7, #56	@ 0x38
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b08c      	sub	sp, #48	@ 0x30
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f107 0210 	add.w	r2, r7, #16
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fc4a 	bl	800a244 <validate>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d107      	bne.n	800a9ce <f_write+0x44>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	7d5b      	ldrb	r3, [r3, #21]
 800a9c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a9c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <f_write+0x4a>
 800a9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9d2:	e16a      	b.n	800acaa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	7d1b      	ldrb	r3, [r3, #20]
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <f_write+0x5a>
 800a9e0:	2307      	movs	r3, #7
 800a9e2:	e162      	b.n	800acaa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	699a      	ldr	r2, [r3, #24]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	441a      	add	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	f080 814c 	bcs.w	800ac8e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	43db      	mvns	r3, r3
 800a9fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a9fe:	e146      	b.n	800ac8e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	8992      	ldrh	r2, [r2, #12]
 800aa08:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa0c:	fb01 f202 	mul.w	r2, r1, r2
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 80f1 	bne.w	800abfa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	8992      	ldrh	r2, [r2, #12]
 800aa20:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	8952      	ldrh	r2, [r2, #10]
 800aa28:	3a01      	subs	r2, #1
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d143      	bne.n	800aabc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10c      	bne.n	800aa56 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11a      	bne.n	800aa7e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe f8b6 	bl	8008bbe <create_chain>
 800aa52:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa54:	e013      	b.n	800aa7e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d007      	beq.n	800aa6e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	4619      	mov	r1, r3
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7fe f942 	bl	8008cee <clmt_clust>
 800aa6a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa6c:	e007      	b.n	800aa7e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fe f8a1 	bl	8008bbe <create_chain>
 800aa7c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8109 	beq.w	800ac98 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d104      	bne.n	800aa96 <f_write+0x10c>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	755a      	strb	r2, [r3, #21]
 800aa92:	2302      	movs	r3, #2
 800aa94:	e109      	b.n	800acaa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d104      	bne.n	800aaa8 <f_write+0x11e>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	755a      	strb	r2, [r3, #21]
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e100      	b.n	800acaa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <f_write+0x132>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	7d1b      	ldrb	r3, [r3, #20]
 800aac0:	b25b      	sxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	da18      	bge.n	800aaf8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	7858      	ldrb	r0, [r3, #1]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a1a      	ldr	r2, [r3, #32]
 800aad4:	2301      	movs	r3, #1
 800aad6:	f7fd fa73 	bl	8007fc0 <disk_write>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <f_write+0x160>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	755a      	strb	r2, [r3, #21]
 800aae6:	2301      	movs	r3, #1
 800aae8:	e0df      	b.n	800acaa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7d1b      	ldrb	r3, [r3, #20]
 800aaee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	4619      	mov	r1, r3
 800ab00:	4610      	mov	r0, r2
 800ab02:	f7fd fdeb 	bl	80086dc <clust2sect>
 800ab06:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <f_write+0x18e>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2202      	movs	r2, #2
 800ab12:	755a      	strb	r2, [r3, #21]
 800ab14:	2302      	movs	r3, #2
 800ab16:	e0c8      	b.n	800acaa <f_write+0x320>
			sect += csect;
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	899b      	ldrh	r3, [r3, #12]
 800ab24:	461a      	mov	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d043      	beq.n	800abbc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	4413      	add	r3, r2
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	8952      	ldrh	r2, [r2, #10]
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d905      	bls.n	800ab4e <f_write+0x1c4>
					cc = fs->csize - csect;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	895b      	ldrh	r3, [r3, #10]
 800ab46:	461a      	mov	r2, r3
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	7858      	ldrb	r0, [r3, #1]
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	69f9      	ldr	r1, [r7, #28]
 800ab58:	f7fd fa32 	bl	8007fc0 <disk_write>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d004      	beq.n	800ab6c <f_write+0x1e2>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	755a      	strb	r2, [r3, #21]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e09e      	b.n	800acaa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1a      	ldr	r2, [r3, #32]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	6a3a      	ldr	r2, [r7, #32]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d918      	bls.n	800abac <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6a1a      	ldr	r2, [r3, #32]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	8992      	ldrh	r2, [r2, #12]
 800ab8c:	fb02 f303 	mul.w	r3, r2, r3
 800ab90:	69fa      	ldr	r2, [r7, #28]
 800ab92:	18d1      	adds	r1, r2, r3
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	899b      	ldrh	r3, [r3, #12]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f7fd fad2 	bl	8008142 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	7d1b      	ldrb	r3, [r3, #20]
 800aba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	899b      	ldrh	r3, [r3, #12]
 800abb0:	461a      	mov	r2, r3
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	fb02 f303 	mul.w	r3, r2, r3
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800abba:	e04b      	b.n	800ac54 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d016      	beq.n	800abf4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abce:	429a      	cmp	r2, r3
 800abd0:	d210      	bcs.n	800abf4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	7858      	ldrb	r0, [r3, #1]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abdc:	2301      	movs	r3, #1
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	f7fd f9ce 	bl	8007f80 <disk_read>
 800abe4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d004      	beq.n	800abf4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	755a      	strb	r2, [r3, #21]
 800abf0:	2301      	movs	r3, #1
 800abf2:	e05a      	b.n	800acaa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	899b      	ldrh	r3, [r3, #12]
 800abfe:	4618      	mov	r0, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	8992      	ldrh	r2, [r2, #12]
 800ac08:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac0c:	fb01 f202 	mul.w	r2, r1, r2
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	1ac3      	subs	r3, r0, r3
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ac16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d901      	bls.n	800ac22 <f_write+0x298>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	8992      	ldrh	r2, [r2, #12]
 800ac30:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac34:	fb00 f202 	mul.w	r2, r0, r2
 800ac38:	1a9b      	subs	r3, r3, r2
 800ac3a:	440b      	add	r3, r1
 800ac3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac3e:	69f9      	ldr	r1, [r7, #28]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd fa7e 	bl	8008142 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	7d1b      	ldrb	r3, [r3, #20]
 800ac4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	4413      	add	r3, r2
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	699a      	ldr	r2, [r3, #24]
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	441a      	add	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	619a      	str	r2, [r3, #24]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	bf38      	it	cc
 800ac74:	461a      	movcc	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	60da      	str	r2, [r3, #12]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	441a      	add	r2, r3
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f47f aeb5 	bne.w	800aa00 <f_write+0x76>
 800ac96:	e000      	b.n	800ac9a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac98:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	7d1b      	ldrb	r3, [r3, #20]
 800ac9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3730      	adds	r7, #48	@ 0x30
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f107 0208 	add.w	r2, r7, #8
 800acc0:	4611      	mov	r1, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff fabe 	bl	800a244 <validate>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800accc:	7dfb      	ldrb	r3, [r7, #23]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d168      	bne.n	800ada4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7d1b      	ldrb	r3, [r3, #20]
 800acd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d062      	beq.n	800ada4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	7d1b      	ldrb	r3, [r3, #20]
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	da15      	bge.n	800ad14 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	7858      	ldrb	r0, [r3, #1]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1a      	ldr	r2, [r3, #32]
 800acf6:	2301      	movs	r3, #1
 800acf8:	f7fd f962 	bl	8007fc0 <disk_write>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <f_sync+0x54>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e04f      	b.n	800ada6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7d1b      	ldrb	r3, [r3, #20]
 800ad0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad14:	f7fd f896 	bl	8007e44 <get_fattime>
 800ad18:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fd fc3c 	bl	80085a0 <move_window>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d138      	bne.n	800ada4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	330b      	adds	r3, #11
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	330b      	adds	r3, #11
 800ad42:	f042 0220 	orr.w	r2, r2, #32
 800ad46:	b2d2      	uxtb	r2, r2
 800ad48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	461a      	mov	r2, r3
 800ad54:	68f9      	ldr	r1, [r7, #12]
 800ad56:	f7fe f9c7 	bl	80090e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f103 021c 	add.w	r2, r3, #28
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	4619      	mov	r1, r3
 800ad66:	4610      	mov	r0, r2
 800ad68:	f7fd f9bf 	bl	80080ea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3316      	adds	r3, #22
 800ad70:	6939      	ldr	r1, [r7, #16]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fd f9b9 	bl	80080ea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3312      	adds	r3, #18
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd f998 	bl	80080b4 <st_word>
					fs->wflag = 1;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2201      	movs	r2, #1
 800ad88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fd fc35 	bl	80085fc <sync_fs>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7d1b      	ldrb	r3, [r3, #20]
 800ad9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff ff7b 	bl	800acb2 <f_sync>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d118      	bne.n	800adf8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f107 0208 	add.w	r2, r7, #8
 800adcc:	4611      	mov	r1, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff fa38 	bl	800a244 <validate>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10c      	bne.n	800adf8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fd fb38 	bl	8008458 <dec_lock>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b090      	sub	sp, #64	@ 0x40
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f107 0208 	add.w	r2, r7, #8
 800ae12:	4611      	mov	r1, r2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff fa15 	bl	800a244 <validate>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ae20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d103      	bne.n	800ae30 <f_lseek+0x2e>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7d5b      	ldrb	r3, [r3, #21]
 800ae2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ae30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <f_lseek+0x3c>
 800ae38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae3c:	e201      	b.n	800b242 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80d9 	beq.w	800affa <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d15a      	bne.n	800af06 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae54:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	1d1a      	adds	r2, r3, #4
 800ae5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	2302      	movs	r3, #2
 800ae62:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d03a      	beq.n	800aee6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	613b      	str	r3, [r7, #16]
 800ae74:	2300      	movs	r3, #0
 800ae76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7a:	3302      	adds	r3, #2
 800ae7c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	3301      	adds	r3, #1
 800ae86:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fd fc44 	bl	800871a <get_fat>
 800ae92:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ae94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d804      	bhi.n	800aea4 <f_lseek+0xa2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	755a      	strb	r2, [r3, #21]
 800aea0:	2302      	movs	r3, #2
 800aea2:	e1ce      	b.n	800b242 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d104      	bne.n	800aeb6 <f_lseek+0xb4>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	755a      	strb	r2, [r3, #21]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e1c5      	b.n	800b242 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d0de      	beq.n	800ae7e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d809      	bhi.n	800aedc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	1d1a      	adds	r2, r3, #4
 800aecc:	627a      	str	r2, [r7, #36]	@ 0x24
 800aece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	1d1a      	adds	r2, r3, #4
 800aed6:	627a      	str	r2, [r7, #36]	@ 0x24
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d3c4      	bcc.n	800ae70 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800aeee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d803      	bhi.n	800aefe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	e19f      	b.n	800b23e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aefe:	2311      	movs	r3, #17
 800af00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800af04:	e19b      	b.n	800b23e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d902      	bls.n	800af16 <f_lseek+0x114>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 818d 	beq.w	800b23e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	3b01      	subs	r3, #1
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7fd fedf 	bl	8008cee <clmt_clust>
 800af30:	4602      	mov	r2, r0
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f7fd fbcc 	bl	80086dc <clust2sect>
 800af44:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d104      	bne.n	800af56 <f_lseek+0x154>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2202      	movs	r2, #2
 800af50:	755a      	strb	r2, [r3, #21]
 800af52:	2302      	movs	r3, #2
 800af54:	e175      	b.n	800b242 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	3b01      	subs	r3, #1
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	8992      	ldrh	r2, [r2, #12]
 800af5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	8952      	ldrh	r2, [r2, #10]
 800af66:	3a01      	subs	r2, #1
 800af68:	4013      	ands	r3, r2
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	4413      	add	r3, r2
 800af6e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	8992      	ldrh	r2, [r2, #12]
 800af78:	fbb3 f1f2 	udiv	r1, r3, r2
 800af7c:	fb01 f202 	mul.w	r2, r1, r2
 800af80:	1a9b      	subs	r3, r3, r2
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 815b 	beq.w	800b23e <f_lseek+0x43c>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	69ba      	ldr	r2, [r7, #24]
 800af8e:	429a      	cmp	r2, r3
 800af90:	f000 8155 	beq.w	800b23e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	7d1b      	ldrb	r3, [r3, #20]
 800af98:	b25b      	sxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da18      	bge.n	800afd0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	7858      	ldrb	r0, [r3, #1]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1a      	ldr	r2, [r3, #32]
 800afac:	2301      	movs	r3, #1
 800afae:	f7fd f807 	bl	8007fc0 <disk_write>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <f_lseek+0x1c0>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	755a      	strb	r2, [r3, #21]
 800afbe:	2301      	movs	r3, #1
 800afc0:	e13f      	b.n	800b242 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	7d1b      	ldrb	r3, [r3, #20]
 800afc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	7858      	ldrb	r0, [r3, #1]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afda:	2301      	movs	r3, #1
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	f7fc ffcf 	bl	8007f80 <disk_read>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <f_lseek+0x1f0>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	755a      	strb	r2, [r3, #21]
 800afee:	2301      	movs	r3, #1
 800aff0:	e127      	b.n	800b242 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	621a      	str	r2, [r3, #32]
 800aff8:	e121      	b.n	800b23e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d908      	bls.n	800b016 <f_lseek+0x214>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	7d1b      	ldrb	r3, [r3, #20]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b024:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 80b5 	beq.w	800b198 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	895b      	ldrh	r3, [r3, #10]
 800b032:	461a      	mov	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	899b      	ldrh	r3, [r3, #12]
 800b038:	fb02 f303 	mul.w	r3, r2, r3
 800b03c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01b      	beq.n	800b07c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	1e5a      	subs	r2, r3, #1
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	1e59      	subs	r1, r3, #1
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b058:	429a      	cmp	r2, r3
 800b05a:	d30f      	bcc.n	800b07c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	1e5a      	subs	r2, r3, #1
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	425b      	negs	r3, r3
 800b064:	401a      	ands	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b07a:	e022      	b.n	800b0c2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	2b00      	cmp	r3, #0
 800b086:	d119      	bne.n	800b0bc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd fd96 	bl	8008bbe <create_chain>
 800b092:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	2b01      	cmp	r3, #1
 800b098:	d104      	bne.n	800b0a4 <f_lseek+0x2a2>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2202      	movs	r2, #2
 800b09e:	755a      	strb	r2, [r3, #21]
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e0ce      	b.n	800b242 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	d104      	bne.n	800b0b6 <f_lseek+0x2b4>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	755a      	strb	r2, [r3, #21]
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e0c5      	b.n	800b242 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d067      	beq.n	800b198 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b0c8:	e03a      	b.n	800b140 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	603b      	str	r3, [r7, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	699a      	ldr	r2, [r3, #24]
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	441a      	add	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	7d1b      	ldrb	r3, [r3, #20]
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fd fd65 	bl	8008bbe <create_chain>
 800b0f4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d108      	bne.n	800b10e <f_lseek+0x30c>
							ofs = 0; break;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	e022      	b.n	800b148 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b106:	4618      	mov	r0, r3
 800b108:	f7fd fb07 	bl	800871a <get_fat>
 800b10c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b114:	d104      	bne.n	800b120 <f_lseek+0x31e>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	755a      	strb	r2, [r3, #21]
 800b11c:	2301      	movs	r3, #1
 800b11e:	e090      	b.n	800b242 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b122:	2b01      	cmp	r3, #1
 800b124:	d904      	bls.n	800b130 <f_lseek+0x32e>
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d304      	bcc.n	800b13a <f_lseek+0x338>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	755a      	strb	r2, [r3, #21]
 800b136:	2302      	movs	r3, #2
 800b138:	e083      	b.n	800b242 <f_lseek+0x440>
					fp->clust = clst;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b13e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	429a      	cmp	r2, r3
 800b146:	d8c0      	bhi.n	800b0ca <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	699a      	ldr	r2, [r3, #24]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	441a      	add	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	899b      	ldrh	r3, [r3, #12]
 800b158:	461a      	mov	r2, r3
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b160:	fb01 f202 	mul.w	r2, r1, r2
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	2b00      	cmp	r3, #0
 800b168:	d016      	beq.n	800b198 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fd fab4 	bl	80086dc <clust2sect>
 800b174:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d104      	bne.n	800b186 <f_lseek+0x384>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	755a      	strb	r2, [r3, #21]
 800b182:	2302      	movs	r3, #2
 800b184:	e05d      	b.n	800b242 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	899b      	ldrh	r3, [r3, #12]
 800b18a:	461a      	mov	r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b194:	4413      	add	r3, r2
 800b196:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	699a      	ldr	r2, [r3, #24]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d90a      	bls.n	800b1ba <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699a      	ldr	r2, [r3, #24]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7d1b      	ldrb	r3, [r3, #20]
 800b1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	8992      	ldrh	r2, [r2, #12]
 800b1c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1c6:	fb01 f202 	mul.w	r2, r1, r2
 800b1ca:	1a9b      	subs	r3, r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d036      	beq.n	800b23e <f_lseek+0x43c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d031      	beq.n	800b23e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7d1b      	ldrb	r3, [r3, #20]
 800b1de:	b25b      	sxtb	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	da18      	bge.n	800b216 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	7858      	ldrb	r0, [r3, #1]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1a      	ldr	r2, [r3, #32]
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f7fc fee4 	bl	8007fc0 <disk_write>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <f_lseek+0x406>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	755a      	strb	r2, [r3, #21]
 800b204:	2301      	movs	r3, #1
 800b206:	e01c      	b.n	800b242 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7d1b      	ldrb	r3, [r3, #20]
 800b20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b210:	b2da      	uxtb	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	7858      	ldrb	r0, [r3, #1]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b220:	2301      	movs	r3, #1
 800b222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b224:	f7fc feac 	bl	8007f80 <disk_read>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <f_lseek+0x436>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	755a      	strb	r2, [r3, #21]
 800b234:	2301      	movs	r3, #1
 800b236:	e004      	b.n	800b242 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b23c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b23e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b242:	4618      	mov	r0, r3
 800b244:	3740      	adds	r7, #64	@ 0x40
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b092      	sub	sp, #72	@ 0x48
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b256:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b25a:	f107 030c 	add.w	r3, r7, #12
 800b25e:	2200      	movs	r2, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe fd69 	bl	8009d38 <find_volume>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b26c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b270:	2b00      	cmp	r3, #0
 800b272:	f040 8099 	bne.w	800b3a8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	3b02      	subs	r3, #2
 800b286:	429a      	cmp	r2, r3
 800b288:	d804      	bhi.n	800b294 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	699a      	ldr	r2, [r3, #24]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e089      	b.n	800b3a8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d128      	bne.n	800b2f2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b2a8:	f107 0314 	add.w	r3, r7, #20
 800b2ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd fa33 	bl	800871a <get_fat>
 800b2b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2bc:	d103      	bne.n	800b2c6 <f_getfree+0x7c>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b2c4:	e063      	b.n	800b38e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d103      	bne.n	800b2d4 <f_getfree+0x8a>
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b2d2:	e05c      	b.n	800b38e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d102      	bne.n	800b2e0 <f_getfree+0x96>
 800b2da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2dc:	3301      	adds	r3, #1
 800b2de:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d3db      	bcc.n	800b2a8 <f_getfree+0x5e>
 800b2f0:	e04d      	b.n	800b38e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	637b      	str	r3, [r7, #52]	@ 0x34
 800b302:	2300      	movs	r3, #0
 800b304:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d113      	bne.n	800b334 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b30c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	1c5a      	adds	r2, r3, #1
 800b312:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b314:	4619      	mov	r1, r3
 800b316:	f7fd f943 	bl	80085a0 <move_window>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b320:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b324:	2b00      	cmp	r3, #0
 800b326:	d131      	bne.n	800b38c <f_getfree+0x142>
							p = fs->win;
 800b328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32a:	3338      	adds	r3, #56	@ 0x38
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	899b      	ldrh	r3, [r3, #12]
 800b332:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d10f      	bne.n	800b35c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b33c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b33e:	f7fc fe7d 	bl	800803c <ld_word>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <f_getfree+0x104>
 800b348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b34a:	3301      	adds	r3, #1
 800b34c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	3302      	adds	r3, #2
 800b352:	633b      	str	r3, [r7, #48]	@ 0x30
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b356:	3b02      	subs	r3, #2
 800b358:	637b      	str	r3, [r7, #52]	@ 0x34
 800b35a:	e010      	b.n	800b37e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b35c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b35e:	f7fc fe86 	bl	800806e <ld_dword>
 800b362:	4603      	mov	r3, r0
 800b364:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <f_getfree+0x128>
 800b36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b36e:	3301      	adds	r3, #1
 800b370:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	3304      	adds	r3, #4
 800b376:	633b      	str	r3, [r7, #48]	@ 0x30
 800b378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37a:	3b04      	subs	r3, #4
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b380:	3b01      	subs	r3, #1
 800b382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1bd      	bne.n	800b306 <f_getfree+0xbc>
 800b38a:	e000      	b.n	800b38e <f_getfree+0x144>
							if (res != FR_OK) break;
 800b38c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b392:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b398:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	791a      	ldrb	r2, [r3, #4]
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	f042 0201 	orr.w	r2, r2, #1
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b3a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3748      	adds	r7, #72	@ 0x48
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3cc:	7a5b      	ldrb	r3, [r3, #9]
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d131      	bne.n	800b438 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3d6:	7a5b      	ldrb	r3, [r3, #9]
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3de:	2100      	movs	r1, #0
 800b3e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3e2:	4b19      	ldr	r3, [pc, #100]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3e4:	7a5b      	ldrb	r3, [r3, #9]
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	4a17      	ldr	r2, [pc, #92]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4413      	add	r3, r2
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3f2:	4b15      	ldr	r3, [pc, #84]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3f4:	7a5b      	ldrb	r3, [r3, #9]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4b13      	ldr	r3, [pc, #76]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b3fc:	4413      	add	r3, r2
 800b3fe:	79fa      	ldrb	r2, [r7, #7]
 800b400:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b402:	4b11      	ldr	r3, [pc, #68]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b404:	7a5b      	ldrb	r3, [r3, #9]
 800b406:	b2db      	uxtb	r3, r3
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	b2d1      	uxtb	r1, r2
 800b40c:	4a0e      	ldr	r2, [pc, #56]	@ (800b448 <FATFS_LinkDriverEx+0x94>)
 800b40e:	7251      	strb	r1, [r2, #9]
 800b410:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b412:	7dbb      	ldrb	r3, [r7, #22]
 800b414:	3330      	adds	r3, #48	@ 0x30
 800b416:	b2da      	uxtb	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3301      	adds	r3, #1
 800b420:	223a      	movs	r2, #58	@ 0x3a
 800b422:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3302      	adds	r3, #2
 800b428:	222f      	movs	r2, #47	@ 0x2f
 800b42a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3303      	adds	r3, #3
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	20002440 	.word	0x20002440

0800b44c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b456:	2200      	movs	r2, #0
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff ffaa 	bl	800b3b4 <FATFS_LinkDriverEx>
 800b460:	4603      	mov	r3, r0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	6039      	str	r1, [r7, #0]
 800b476:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b478:	88fb      	ldrh	r3, [r7, #6]
 800b47a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b47c:	d802      	bhi.n	800b484 <ff_convert+0x18>
		c = chr;
 800b47e:	88fb      	ldrh	r3, [r7, #6]
 800b480:	81fb      	strh	r3, [r7, #14]
 800b482:	e025      	b.n	800b4d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00b      	beq.n	800b4a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b48a:	88fb      	ldrh	r3, [r7, #6]
 800b48c:	2bff      	cmp	r3, #255	@ 0xff
 800b48e:	d805      	bhi.n	800b49c <ff_convert+0x30>
 800b490:	88fb      	ldrh	r3, [r7, #6]
 800b492:	3b80      	subs	r3, #128	@ 0x80
 800b494:	4a12      	ldr	r2, [pc, #72]	@ (800b4e0 <ff_convert+0x74>)
 800b496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b49a:	e000      	b.n	800b49e <ff_convert+0x32>
 800b49c:	2300      	movs	r3, #0
 800b49e:	81fb      	strh	r3, [r7, #14]
 800b4a0:	e016      	b.n	800b4d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	81fb      	strh	r3, [r7, #14]
 800b4a6:	e009      	b.n	800b4bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b4a8:	89fb      	ldrh	r3, [r7, #14]
 800b4aa:	4a0d      	ldr	r2, [pc, #52]	@ (800b4e0 <ff_convert+0x74>)
 800b4ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b0:	88fa      	ldrh	r2, [r7, #6]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d006      	beq.n	800b4c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b4b6:	89fb      	ldrh	r3, [r7, #14]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	81fb      	strh	r3, [r7, #14]
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4c0:	d9f2      	bls.n	800b4a8 <ff_convert+0x3c>
 800b4c2:	e000      	b.n	800b4c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b4c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b4c6:	89fb      	ldrh	r3, [r7, #14]
 800b4c8:	3380      	adds	r3, #128	@ 0x80
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b4d0:	89fb      	ldrh	r3, [r7, #14]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	0800f45c 	.word	0x0800f45c

0800b4e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b4ee:	88fb      	ldrh	r3, [r7, #6]
 800b4f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4f4:	d201      	bcs.n	800b4fa <ff_wtoupper+0x16>
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f0 <ff_wtoupper+0x10c>)
 800b4f8:	e000      	b.n	800b4fc <ff_wtoupper+0x18>
 800b4fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f4 <ff_wtoupper+0x110>)
 800b4fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	1c9a      	adds	r2, r3, #2
 800b502:	617a      	str	r2, [r7, #20]
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b508:	8a7b      	ldrh	r3, [r7, #18]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d068      	beq.n	800b5e0 <ff_wtoupper+0xfc>
 800b50e:	88fa      	ldrh	r2, [r7, #6]
 800b510:	8a7b      	ldrh	r3, [r7, #18]
 800b512:	429a      	cmp	r2, r3
 800b514:	d364      	bcc.n	800b5e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	1c9a      	adds	r2, r3, #2
 800b51a:	617a      	str	r2, [r7, #20]
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	823b      	strh	r3, [r7, #16]
 800b520:	8a3b      	ldrh	r3, [r7, #16]
 800b522:	0a1b      	lsrs	r3, r3, #8
 800b524:	81fb      	strh	r3, [r7, #14]
 800b526:	8a3b      	ldrh	r3, [r7, #16]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b52c:	88fa      	ldrh	r2, [r7, #6]
 800b52e:	8a79      	ldrh	r1, [r7, #18]
 800b530:	8a3b      	ldrh	r3, [r7, #16]
 800b532:	440b      	add	r3, r1
 800b534:	429a      	cmp	r2, r3
 800b536:	da49      	bge.n	800b5cc <ff_wtoupper+0xe8>
			switch (cmd) {
 800b538:	89fb      	ldrh	r3, [r7, #14]
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d84f      	bhi.n	800b5de <ff_wtoupper+0xfa>
 800b53e:	a201      	add	r2, pc, #4	@ (adr r2, 800b544 <ff_wtoupper+0x60>)
 800b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b57b 	.word	0x0800b57b
 800b54c:	0800b591 	.word	0x0800b591
 800b550:	0800b599 	.word	0x0800b599
 800b554:	0800b5a1 	.word	0x0800b5a1
 800b558:	0800b5a9 	.word	0x0800b5a9
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b5b9 	.word	0x0800b5b9
 800b564:	0800b5c1 	.word	0x0800b5c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b568:	88fa      	ldrh	r2, [r7, #6]
 800b56a:	8a7b      	ldrh	r3, [r7, #18]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	4413      	add	r3, r2
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	80fb      	strh	r3, [r7, #6]
 800b578:	e027      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b57a:	88fa      	ldrh	r2, [r7, #6]
 800b57c:	8a7b      	ldrh	r3, [r7, #18]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29b      	uxth	r3, r3
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	b29b      	uxth	r3, r3
 800b588:	88fa      	ldrh	r2, [r7, #6]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	80fb      	strh	r3, [r7, #6]
 800b58e:	e01c      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	3b10      	subs	r3, #16
 800b594:	80fb      	strh	r3, [r7, #6]
 800b596:	e018      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	3b20      	subs	r3, #32
 800b59c:	80fb      	strh	r3, [r7, #6]
 800b59e:	e014      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	3b30      	subs	r3, #48	@ 0x30
 800b5a4:	80fb      	strh	r3, [r7, #6]
 800b5a6:	e010      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	3b1a      	subs	r3, #26
 800b5ac:	80fb      	strh	r3, [r7, #6]
 800b5ae:	e00c      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	80fb      	strh	r3, [r7, #6]
 800b5b6:	e008      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b5b8:	88fb      	ldrh	r3, [r7, #6]
 800b5ba:	3b50      	subs	r3, #80	@ 0x50
 800b5bc:	80fb      	strh	r3, [r7, #6]
 800b5be:	e004      	b.n	800b5ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b5c6:	80fb      	strh	r3, [r7, #6]
 800b5c8:	bf00      	nop
			}
			break;
 800b5ca:	e008      	b.n	800b5de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b5cc:	89fb      	ldrh	r3, [r7, #14]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d195      	bne.n	800b4fe <ff_wtoupper+0x1a>
 800b5d2:	8a3b      	ldrh	r3, [r7, #16]
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	4413      	add	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b5dc:	e78f      	b.n	800b4fe <ff_wtoupper+0x1a>
			break;
 800b5de:	bf00      	nop
	}

	return chr;
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	371c      	adds	r7, #28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	0800f55c 	.word	0x0800f55c
 800b5f4:	0800f750 	.word	0x0800f750

0800b5f8 <malloc>:
 800b5f8:	4b02      	ldr	r3, [pc, #8]	@ (800b604 <malloc+0xc>)
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	f000 b82d 	b.w	800b65c <_malloc_r>
 800b602:	bf00      	nop
 800b604:	20000030 	.word	0x20000030

0800b608 <free>:
 800b608:	4b02      	ldr	r3, [pc, #8]	@ (800b614 <free+0xc>)
 800b60a:	4601      	mov	r1, r0
 800b60c:	6818      	ldr	r0, [r3, #0]
 800b60e:	f001 be2f 	b.w	800d270 <_free_r>
 800b612:	bf00      	nop
 800b614:	20000030 	.word	0x20000030

0800b618 <sbrk_aligned>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	4e0f      	ldr	r6, [pc, #60]	@ (800b658 <sbrk_aligned+0x40>)
 800b61c:	460c      	mov	r4, r1
 800b61e:	6831      	ldr	r1, [r6, #0]
 800b620:	4605      	mov	r5, r0
 800b622:	b911      	cbnz	r1, 800b62a <sbrk_aligned+0x12>
 800b624:	f000 ff7a 	bl	800c51c <_sbrk_r>
 800b628:	6030      	str	r0, [r6, #0]
 800b62a:	4621      	mov	r1, r4
 800b62c:	4628      	mov	r0, r5
 800b62e:	f000 ff75 	bl	800c51c <_sbrk_r>
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	d103      	bne.n	800b63e <sbrk_aligned+0x26>
 800b636:	f04f 34ff 	mov.w	r4, #4294967295
 800b63a:	4620      	mov	r0, r4
 800b63c:	bd70      	pop	{r4, r5, r6, pc}
 800b63e:	1cc4      	adds	r4, r0, #3
 800b640:	f024 0403 	bic.w	r4, r4, #3
 800b644:	42a0      	cmp	r0, r4
 800b646:	d0f8      	beq.n	800b63a <sbrk_aligned+0x22>
 800b648:	1a21      	subs	r1, r4, r0
 800b64a:	4628      	mov	r0, r5
 800b64c:	f000 ff66 	bl	800c51c <_sbrk_r>
 800b650:	3001      	adds	r0, #1
 800b652:	d1f2      	bne.n	800b63a <sbrk_aligned+0x22>
 800b654:	e7ef      	b.n	800b636 <sbrk_aligned+0x1e>
 800b656:	bf00      	nop
 800b658:	2000244c 	.word	0x2000244c

0800b65c <_malloc_r>:
 800b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b660:	1ccd      	adds	r5, r1, #3
 800b662:	f025 0503 	bic.w	r5, r5, #3
 800b666:	3508      	adds	r5, #8
 800b668:	2d0c      	cmp	r5, #12
 800b66a:	bf38      	it	cc
 800b66c:	250c      	movcc	r5, #12
 800b66e:	2d00      	cmp	r5, #0
 800b670:	4606      	mov	r6, r0
 800b672:	db01      	blt.n	800b678 <_malloc_r+0x1c>
 800b674:	42a9      	cmp	r1, r5
 800b676:	d904      	bls.n	800b682 <_malloc_r+0x26>
 800b678:	230c      	movs	r3, #12
 800b67a:	6033      	str	r3, [r6, #0]
 800b67c:	2000      	movs	r0, #0
 800b67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b758 <_malloc_r+0xfc>
 800b686:	f000 f869 	bl	800b75c <__malloc_lock>
 800b68a:	f8d8 3000 	ldr.w	r3, [r8]
 800b68e:	461c      	mov	r4, r3
 800b690:	bb44      	cbnz	r4, 800b6e4 <_malloc_r+0x88>
 800b692:	4629      	mov	r1, r5
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff ffbf 	bl	800b618 <sbrk_aligned>
 800b69a:	1c43      	adds	r3, r0, #1
 800b69c:	4604      	mov	r4, r0
 800b69e:	d158      	bne.n	800b752 <_malloc_r+0xf6>
 800b6a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b6a4:	4627      	mov	r7, r4
 800b6a6:	2f00      	cmp	r7, #0
 800b6a8:	d143      	bne.n	800b732 <_malloc_r+0xd6>
 800b6aa:	2c00      	cmp	r4, #0
 800b6ac:	d04b      	beq.n	800b746 <_malloc_r+0xea>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	eb04 0903 	add.w	r9, r4, r3
 800b6b8:	f000 ff30 	bl	800c51c <_sbrk_r>
 800b6bc:	4581      	cmp	r9, r0
 800b6be:	d142      	bne.n	800b746 <_malloc_r+0xea>
 800b6c0:	6821      	ldr	r1, [r4, #0]
 800b6c2:	1a6d      	subs	r5, r5, r1
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f7ff ffa6 	bl	800b618 <sbrk_aligned>
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d03a      	beq.n	800b746 <_malloc_r+0xea>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	442b      	add	r3, r5
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	bb62      	cbnz	r2, 800b738 <_malloc_r+0xdc>
 800b6de:	f8c8 7000 	str.w	r7, [r8]
 800b6e2:	e00f      	b.n	800b704 <_malloc_r+0xa8>
 800b6e4:	6822      	ldr	r2, [r4, #0]
 800b6e6:	1b52      	subs	r2, r2, r5
 800b6e8:	d420      	bmi.n	800b72c <_malloc_r+0xd0>
 800b6ea:	2a0b      	cmp	r2, #11
 800b6ec:	d917      	bls.n	800b71e <_malloc_r+0xc2>
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	6025      	str	r5, [r4, #0]
 800b6f4:	bf18      	it	ne
 800b6f6:	6059      	strne	r1, [r3, #4]
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	bf08      	it	eq
 800b6fc:	f8c8 1000 	streq.w	r1, [r8]
 800b700:	5162      	str	r2, [r4, r5]
 800b702:	604b      	str	r3, [r1, #4]
 800b704:	4630      	mov	r0, r6
 800b706:	f000 f82f 	bl	800b768 <__malloc_unlock>
 800b70a:	f104 000b 	add.w	r0, r4, #11
 800b70e:	1d23      	adds	r3, r4, #4
 800b710:	f020 0007 	bic.w	r0, r0, #7
 800b714:	1ac2      	subs	r2, r0, r3
 800b716:	bf1c      	itt	ne
 800b718:	1a1b      	subne	r3, r3, r0
 800b71a:	50a3      	strne	r3, [r4, r2]
 800b71c:	e7af      	b.n	800b67e <_malloc_r+0x22>
 800b71e:	6862      	ldr	r2, [r4, #4]
 800b720:	42a3      	cmp	r3, r4
 800b722:	bf0c      	ite	eq
 800b724:	f8c8 2000 	streq.w	r2, [r8]
 800b728:	605a      	strne	r2, [r3, #4]
 800b72a:	e7eb      	b.n	800b704 <_malloc_r+0xa8>
 800b72c:	4623      	mov	r3, r4
 800b72e:	6864      	ldr	r4, [r4, #4]
 800b730:	e7ae      	b.n	800b690 <_malloc_r+0x34>
 800b732:	463c      	mov	r4, r7
 800b734:	687f      	ldr	r7, [r7, #4]
 800b736:	e7b6      	b.n	800b6a6 <_malloc_r+0x4a>
 800b738:	461a      	mov	r2, r3
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	d1fb      	bne.n	800b738 <_malloc_r+0xdc>
 800b740:	2300      	movs	r3, #0
 800b742:	6053      	str	r3, [r2, #4]
 800b744:	e7de      	b.n	800b704 <_malloc_r+0xa8>
 800b746:	230c      	movs	r3, #12
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	4630      	mov	r0, r6
 800b74c:	f000 f80c 	bl	800b768 <__malloc_unlock>
 800b750:	e794      	b.n	800b67c <_malloc_r+0x20>
 800b752:	6005      	str	r5, [r0, #0]
 800b754:	e7d6      	b.n	800b704 <_malloc_r+0xa8>
 800b756:	bf00      	nop
 800b758:	20002450 	.word	0x20002450

0800b75c <__malloc_lock>:
 800b75c:	4801      	ldr	r0, [pc, #4]	@ (800b764 <__malloc_lock+0x8>)
 800b75e:	f000 bf2a 	b.w	800c5b6 <__retarget_lock_acquire_recursive>
 800b762:	bf00      	nop
 800b764:	20002594 	.word	0x20002594

0800b768 <__malloc_unlock>:
 800b768:	4801      	ldr	r0, [pc, #4]	@ (800b770 <__malloc_unlock+0x8>)
 800b76a:	f000 bf25 	b.w	800c5b8 <__retarget_lock_release_recursive>
 800b76e:	bf00      	nop
 800b770:	20002594 	.word	0x20002594

0800b774 <__cvt>:
 800b774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	ec57 6b10 	vmov	r6, r7, d0
 800b77c:	2f00      	cmp	r7, #0
 800b77e:	460c      	mov	r4, r1
 800b780:	4619      	mov	r1, r3
 800b782:	463b      	mov	r3, r7
 800b784:	bfbb      	ittet	lt
 800b786:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b78a:	461f      	movlt	r7, r3
 800b78c:	2300      	movge	r3, #0
 800b78e:	232d      	movlt	r3, #45	@ 0x2d
 800b790:	700b      	strb	r3, [r1, #0]
 800b792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b794:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b798:	4691      	mov	r9, r2
 800b79a:	f023 0820 	bic.w	r8, r3, #32
 800b79e:	bfbc      	itt	lt
 800b7a0:	4632      	movlt	r2, r6
 800b7a2:	4616      	movlt	r6, r2
 800b7a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7a8:	d005      	beq.n	800b7b6 <__cvt+0x42>
 800b7aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b7ae:	d100      	bne.n	800b7b2 <__cvt+0x3e>
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	e000      	b.n	800b7b8 <__cvt+0x44>
 800b7b6:	2103      	movs	r1, #3
 800b7b8:	ab03      	add	r3, sp, #12
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	ab02      	add	r3, sp, #8
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	ec47 6b10 	vmov	d0, r6, r7
 800b7c4:	4653      	mov	r3, sl
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	f000 ff82 	bl	800c6d0 <_dtoa_r>
 800b7cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	d119      	bne.n	800b808 <__cvt+0x94>
 800b7d4:	f019 0f01 	tst.w	r9, #1
 800b7d8:	d00e      	beq.n	800b7f8 <__cvt+0x84>
 800b7da:	eb00 0904 	add.w	r9, r0, r4
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f5 f9a7 	bl	8000b38 <__aeabi_dcmpeq>
 800b7ea:	b108      	cbz	r0, 800b7f0 <__cvt+0x7c>
 800b7ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7f0:	2230      	movs	r2, #48	@ 0x30
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	454b      	cmp	r3, r9
 800b7f6:	d31e      	bcc.n	800b836 <__cvt+0xc2>
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7fc:	1b5b      	subs	r3, r3, r5
 800b7fe:	4628      	mov	r0, r5
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	b004      	add	sp, #16
 800b804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b80c:	eb00 0904 	add.w	r9, r0, r4
 800b810:	d1e5      	bne.n	800b7de <__cvt+0x6a>
 800b812:	7803      	ldrb	r3, [r0, #0]
 800b814:	2b30      	cmp	r3, #48	@ 0x30
 800b816:	d10a      	bne.n	800b82e <__cvt+0xba>
 800b818:	2200      	movs	r2, #0
 800b81a:	2300      	movs	r3, #0
 800b81c:	4630      	mov	r0, r6
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f5 f98a 	bl	8000b38 <__aeabi_dcmpeq>
 800b824:	b918      	cbnz	r0, 800b82e <__cvt+0xba>
 800b826:	f1c4 0401 	rsb	r4, r4, #1
 800b82a:	f8ca 4000 	str.w	r4, [sl]
 800b82e:	f8da 3000 	ldr.w	r3, [sl]
 800b832:	4499      	add	r9, r3
 800b834:	e7d3      	b.n	800b7de <__cvt+0x6a>
 800b836:	1c59      	adds	r1, r3, #1
 800b838:	9103      	str	r1, [sp, #12]
 800b83a:	701a      	strb	r2, [r3, #0]
 800b83c:	e7d9      	b.n	800b7f2 <__cvt+0x7e>

0800b83e <__exponent>:
 800b83e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b840:	2900      	cmp	r1, #0
 800b842:	bfba      	itte	lt
 800b844:	4249      	neglt	r1, r1
 800b846:	232d      	movlt	r3, #45	@ 0x2d
 800b848:	232b      	movge	r3, #43	@ 0x2b
 800b84a:	2909      	cmp	r1, #9
 800b84c:	7002      	strb	r2, [r0, #0]
 800b84e:	7043      	strb	r3, [r0, #1]
 800b850:	dd29      	ble.n	800b8a6 <__exponent+0x68>
 800b852:	f10d 0307 	add.w	r3, sp, #7
 800b856:	461d      	mov	r5, r3
 800b858:	270a      	movs	r7, #10
 800b85a:	461a      	mov	r2, r3
 800b85c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b860:	fb07 1416 	mls	r4, r7, r6, r1
 800b864:	3430      	adds	r4, #48	@ 0x30
 800b866:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b86a:	460c      	mov	r4, r1
 800b86c:	2c63      	cmp	r4, #99	@ 0x63
 800b86e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b872:	4631      	mov	r1, r6
 800b874:	dcf1      	bgt.n	800b85a <__exponent+0x1c>
 800b876:	3130      	adds	r1, #48	@ 0x30
 800b878:	1e94      	subs	r4, r2, #2
 800b87a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b87e:	1c41      	adds	r1, r0, #1
 800b880:	4623      	mov	r3, r4
 800b882:	42ab      	cmp	r3, r5
 800b884:	d30a      	bcc.n	800b89c <__exponent+0x5e>
 800b886:	f10d 0309 	add.w	r3, sp, #9
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	42ac      	cmp	r4, r5
 800b88e:	bf88      	it	hi
 800b890:	2300      	movhi	r3, #0
 800b892:	3302      	adds	r3, #2
 800b894:	4403      	add	r3, r0
 800b896:	1a18      	subs	r0, r3, r0
 800b898:	b003      	add	sp, #12
 800b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b8a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8a4:	e7ed      	b.n	800b882 <__exponent+0x44>
 800b8a6:	2330      	movs	r3, #48	@ 0x30
 800b8a8:	3130      	adds	r1, #48	@ 0x30
 800b8aa:	7083      	strb	r3, [r0, #2]
 800b8ac:	70c1      	strb	r1, [r0, #3]
 800b8ae:	1d03      	adds	r3, r0, #4
 800b8b0:	e7f1      	b.n	800b896 <__exponent+0x58>
	...

0800b8b4 <_printf_float>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	b08d      	sub	sp, #52	@ 0x34
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b8c0:	4616      	mov	r6, r2
 800b8c2:	461f      	mov	r7, r3
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	f000 fdf1 	bl	800c4ac <_localeconv_r>
 800b8ca:	6803      	ldr	r3, [r0, #0]
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7f4 fd06 	bl	80002e0 <strlen>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8dc:	9005      	str	r0, [sp, #20]
 800b8de:	3307      	adds	r3, #7
 800b8e0:	f023 0307 	bic.w	r3, r3, #7
 800b8e4:	f103 0208 	add.w	r2, r3, #8
 800b8e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b8ec:	f8d4 b000 	ldr.w	fp, [r4]
 800b8f0:	f8c8 2000 	str.w	r2, [r8]
 800b8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b8fc:	9307      	str	r3, [sp, #28]
 800b8fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800b902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b90a:	4b9c      	ldr	r3, [pc, #624]	@ (800bb7c <_printf_float+0x2c8>)
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	f7f5 f944 	bl	8000b9c <__aeabi_dcmpun>
 800b914:	bb70      	cbnz	r0, 800b974 <_printf_float+0xc0>
 800b916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91a:	4b98      	ldr	r3, [pc, #608]	@ (800bb7c <_printf_float+0x2c8>)
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295
 800b920:	f7f5 f91e 	bl	8000b60 <__aeabi_dcmple>
 800b924:	bb30      	cbnz	r0, 800b974 <_printf_float+0xc0>
 800b926:	2200      	movs	r2, #0
 800b928:	2300      	movs	r3, #0
 800b92a:	4640      	mov	r0, r8
 800b92c:	4649      	mov	r1, r9
 800b92e:	f7f5 f90d 	bl	8000b4c <__aeabi_dcmplt>
 800b932:	b110      	cbz	r0, 800b93a <_printf_float+0x86>
 800b934:	232d      	movs	r3, #45	@ 0x2d
 800b936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b93a:	4a91      	ldr	r2, [pc, #580]	@ (800bb80 <_printf_float+0x2cc>)
 800b93c:	4b91      	ldr	r3, [pc, #580]	@ (800bb84 <_printf_float+0x2d0>)
 800b93e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b942:	bf8c      	ite	hi
 800b944:	4690      	movhi	r8, r2
 800b946:	4698      	movls	r8, r3
 800b948:	2303      	movs	r3, #3
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	f02b 0304 	bic.w	r3, fp, #4
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	f04f 0900 	mov.w	r9, #0
 800b956:	9700      	str	r7, [sp, #0]
 800b958:	4633      	mov	r3, r6
 800b95a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b95c:	4621      	mov	r1, r4
 800b95e:	4628      	mov	r0, r5
 800b960:	f000 f9d2 	bl	800bd08 <_printf_common>
 800b964:	3001      	adds	r0, #1
 800b966:	f040 808d 	bne.w	800ba84 <_printf_float+0x1d0>
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	b00d      	add	sp, #52	@ 0x34
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	4642      	mov	r2, r8
 800b976:	464b      	mov	r3, r9
 800b978:	4640      	mov	r0, r8
 800b97a:	4649      	mov	r1, r9
 800b97c:	f7f5 f90e 	bl	8000b9c <__aeabi_dcmpun>
 800b980:	b140      	cbz	r0, 800b994 <_printf_float+0xe0>
 800b982:	464b      	mov	r3, r9
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfbc      	itt	lt
 800b988:	232d      	movlt	r3, #45	@ 0x2d
 800b98a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b98e:	4a7e      	ldr	r2, [pc, #504]	@ (800bb88 <_printf_float+0x2d4>)
 800b990:	4b7e      	ldr	r3, [pc, #504]	@ (800bb8c <_printf_float+0x2d8>)
 800b992:	e7d4      	b.n	800b93e <_printf_float+0x8a>
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b99a:	9206      	str	r2, [sp, #24]
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	d13b      	bne.n	800ba18 <_printf_float+0x164>
 800b9a0:	2306      	movs	r3, #6
 800b9a2:	6063      	str	r3, [r4, #4]
 800b9a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	6022      	str	r2, [r4, #0]
 800b9ac:	9303      	str	r3, [sp, #12]
 800b9ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b9b4:	ab09      	add	r3, sp, #36	@ 0x24
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	6861      	ldr	r1, [r4, #4]
 800b9ba:	ec49 8b10 	vmov	d0, r8, r9
 800b9be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f7ff fed6 	bl	800b774 <__cvt>
 800b9c8:	9b06      	ldr	r3, [sp, #24]
 800b9ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9cc:	2b47      	cmp	r3, #71	@ 0x47
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	d129      	bne.n	800ba26 <_printf_float+0x172>
 800b9d2:	1cc8      	adds	r0, r1, #3
 800b9d4:	db02      	blt.n	800b9dc <_printf_float+0x128>
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	dd41      	ble.n	800ba60 <_printf_float+0x1ac>
 800b9dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b9e0:	fa5f fa8a 	uxtb.w	sl, sl
 800b9e4:	3901      	subs	r1, #1
 800b9e6:	4652      	mov	r2, sl
 800b9e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b9ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9ee:	f7ff ff26 	bl	800b83e <__exponent>
 800b9f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9f4:	1813      	adds	r3, r2, r0
 800b9f6:	2a01      	cmp	r2, #1
 800b9f8:	4681      	mov	r9, r0
 800b9fa:	6123      	str	r3, [r4, #16]
 800b9fc:	dc02      	bgt.n	800ba04 <_printf_float+0x150>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	07d2      	lsls	r2, r2, #31
 800ba02:	d501      	bpl.n	800ba08 <_printf_float+0x154>
 800ba04:	3301      	adds	r3, #1
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0a2      	beq.n	800b956 <_printf_float+0xa2>
 800ba10:	232d      	movs	r3, #45	@ 0x2d
 800ba12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba16:	e79e      	b.n	800b956 <_printf_float+0xa2>
 800ba18:	9a06      	ldr	r2, [sp, #24]
 800ba1a:	2a47      	cmp	r2, #71	@ 0x47
 800ba1c:	d1c2      	bne.n	800b9a4 <_printf_float+0xf0>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1c0      	bne.n	800b9a4 <_printf_float+0xf0>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e7bd      	b.n	800b9a2 <_printf_float+0xee>
 800ba26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba2a:	d9db      	bls.n	800b9e4 <_printf_float+0x130>
 800ba2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba30:	d118      	bne.n	800ba64 <_printf_float+0x1b0>
 800ba32:	2900      	cmp	r1, #0
 800ba34:	6863      	ldr	r3, [r4, #4]
 800ba36:	dd0b      	ble.n	800ba50 <_printf_float+0x19c>
 800ba38:	6121      	str	r1, [r4, #16]
 800ba3a:	b913      	cbnz	r3, 800ba42 <_printf_float+0x18e>
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	07d0      	lsls	r0, r2, #31
 800ba40:	d502      	bpl.n	800ba48 <_printf_float+0x194>
 800ba42:	3301      	adds	r3, #1
 800ba44:	440b      	add	r3, r1
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba4a:	f04f 0900 	mov.w	r9, #0
 800ba4e:	e7db      	b.n	800ba08 <_printf_float+0x154>
 800ba50:	b913      	cbnz	r3, 800ba58 <_printf_float+0x1a4>
 800ba52:	6822      	ldr	r2, [r4, #0]
 800ba54:	07d2      	lsls	r2, r2, #31
 800ba56:	d501      	bpl.n	800ba5c <_printf_float+0x1a8>
 800ba58:	3302      	adds	r3, #2
 800ba5a:	e7f4      	b.n	800ba46 <_printf_float+0x192>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e7f2      	b.n	800ba46 <_printf_float+0x192>
 800ba60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ba64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba66:	4299      	cmp	r1, r3
 800ba68:	db05      	blt.n	800ba76 <_printf_float+0x1c2>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	6121      	str	r1, [r4, #16]
 800ba6e:	07d8      	lsls	r0, r3, #31
 800ba70:	d5ea      	bpl.n	800ba48 <_printf_float+0x194>
 800ba72:	1c4b      	adds	r3, r1, #1
 800ba74:	e7e7      	b.n	800ba46 <_printf_float+0x192>
 800ba76:	2900      	cmp	r1, #0
 800ba78:	bfd4      	ite	le
 800ba7a:	f1c1 0202 	rsble	r2, r1, #2
 800ba7e:	2201      	movgt	r2, #1
 800ba80:	4413      	add	r3, r2
 800ba82:	e7e0      	b.n	800ba46 <_printf_float+0x192>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	055a      	lsls	r2, r3, #21
 800ba88:	d407      	bmi.n	800ba9a <_printf_float+0x1e6>
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4628      	mov	r0, r5
 800ba92:	47b8      	blx	r7
 800ba94:	3001      	adds	r0, #1
 800ba96:	d12b      	bne.n	800baf0 <_printf_float+0x23c>
 800ba98:	e767      	b.n	800b96a <_printf_float+0xb6>
 800ba9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba9e:	f240 80dd 	bls.w	800bc5c <_printf_float+0x3a8>
 800baa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800baa6:	2200      	movs	r2, #0
 800baa8:	2300      	movs	r3, #0
 800baaa:	f7f5 f845 	bl	8000b38 <__aeabi_dcmpeq>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d033      	beq.n	800bb1a <_printf_float+0x266>
 800bab2:	4a37      	ldr	r2, [pc, #220]	@ (800bb90 <_printf_float+0x2dc>)
 800bab4:	2301      	movs	r3, #1
 800bab6:	4631      	mov	r1, r6
 800bab8:	4628      	mov	r0, r5
 800baba:	47b8      	blx	r7
 800babc:	3001      	adds	r0, #1
 800babe:	f43f af54 	beq.w	800b96a <_printf_float+0xb6>
 800bac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bac6:	4543      	cmp	r3, r8
 800bac8:	db02      	blt.n	800bad0 <_printf_float+0x21c>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	07d8      	lsls	r0, r3, #31
 800bace:	d50f      	bpl.n	800baf0 <_printf_float+0x23c>
 800bad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bad4:	4631      	mov	r1, r6
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b8      	blx	r7
 800bada:	3001      	adds	r0, #1
 800badc:	f43f af45 	beq.w	800b96a <_printf_float+0xb6>
 800bae0:	f04f 0900 	mov.w	r9, #0
 800bae4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bae8:	f104 0a1a 	add.w	sl, r4, #26
 800baec:	45c8      	cmp	r8, r9
 800baee:	dc09      	bgt.n	800bb04 <_printf_float+0x250>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	079b      	lsls	r3, r3, #30
 800baf4:	f100 8103 	bmi.w	800bcfe <_printf_float+0x44a>
 800baf8:	68e0      	ldr	r0, [r4, #12]
 800bafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bafc:	4298      	cmp	r0, r3
 800bafe:	bfb8      	it	lt
 800bb00:	4618      	movlt	r0, r3
 800bb02:	e734      	b.n	800b96e <_printf_float+0xba>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4652      	mov	r2, sl
 800bb08:	4631      	mov	r1, r6
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	47b8      	blx	r7
 800bb0e:	3001      	adds	r0, #1
 800bb10:	f43f af2b 	beq.w	800b96a <_printf_float+0xb6>
 800bb14:	f109 0901 	add.w	r9, r9, #1
 800bb18:	e7e8      	b.n	800baec <_printf_float+0x238>
 800bb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc39      	bgt.n	800bb94 <_printf_float+0x2e0>
 800bb20:	4a1b      	ldr	r2, [pc, #108]	@ (800bb90 <_printf_float+0x2dc>)
 800bb22:	2301      	movs	r3, #1
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	f43f af1d 	beq.w	800b96a <_printf_float+0xb6>
 800bb30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb34:	ea59 0303 	orrs.w	r3, r9, r3
 800bb38:	d102      	bne.n	800bb40 <_printf_float+0x28c>
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	07d9      	lsls	r1, r3, #31
 800bb3e:	d5d7      	bpl.n	800baf0 <_printf_float+0x23c>
 800bb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb44:	4631      	mov	r1, r6
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f af0d 	beq.w	800b96a <_printf_float+0xb6>
 800bb50:	f04f 0a00 	mov.w	sl, #0
 800bb54:	f104 0b1a 	add.w	fp, r4, #26
 800bb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5a:	425b      	negs	r3, r3
 800bb5c:	4553      	cmp	r3, sl
 800bb5e:	dc01      	bgt.n	800bb64 <_printf_float+0x2b0>
 800bb60:	464b      	mov	r3, r9
 800bb62:	e793      	b.n	800ba8c <_printf_float+0x1d8>
 800bb64:	2301      	movs	r3, #1
 800bb66:	465a      	mov	r2, fp
 800bb68:	4631      	mov	r1, r6
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	47b8      	blx	r7
 800bb6e:	3001      	adds	r0, #1
 800bb70:	f43f aefb 	beq.w	800b96a <_printf_float+0xb6>
 800bb74:	f10a 0a01 	add.w	sl, sl, #1
 800bb78:	e7ee      	b.n	800bb58 <_printf_float+0x2a4>
 800bb7a:	bf00      	nop
 800bb7c:	7fefffff 	.word	0x7fefffff
 800bb80:	0800f810 	.word	0x0800f810
 800bb84:	0800f80c 	.word	0x0800f80c
 800bb88:	0800f818 	.word	0x0800f818
 800bb8c:	0800f814 	.word	0x0800f814
 800bb90:	0800f81c 	.word	0x0800f81c
 800bb94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb9a:	4553      	cmp	r3, sl
 800bb9c:	bfa8      	it	ge
 800bb9e:	4653      	movge	r3, sl
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	4699      	mov	r9, r3
 800bba4:	dc36      	bgt.n	800bc14 <_printf_float+0x360>
 800bba6:	f04f 0b00 	mov.w	fp, #0
 800bbaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbae:	f104 021a 	add.w	r2, r4, #26
 800bbb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbb4:	9306      	str	r3, [sp, #24]
 800bbb6:	eba3 0309 	sub.w	r3, r3, r9
 800bbba:	455b      	cmp	r3, fp
 800bbbc:	dc31      	bgt.n	800bc22 <_printf_float+0x36e>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	459a      	cmp	sl, r3
 800bbc2:	dc3a      	bgt.n	800bc3a <_printf_float+0x386>
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	07da      	lsls	r2, r3, #31
 800bbc8:	d437      	bmi.n	800bc3a <_printf_float+0x386>
 800bbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbcc:	ebaa 0903 	sub.w	r9, sl, r3
 800bbd0:	9b06      	ldr	r3, [sp, #24]
 800bbd2:	ebaa 0303 	sub.w	r3, sl, r3
 800bbd6:	4599      	cmp	r9, r3
 800bbd8:	bfa8      	it	ge
 800bbda:	4699      	movge	r9, r3
 800bbdc:	f1b9 0f00 	cmp.w	r9, #0
 800bbe0:	dc33      	bgt.n	800bc4a <_printf_float+0x396>
 800bbe2:	f04f 0800 	mov.w	r8, #0
 800bbe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbea:	f104 0b1a 	add.w	fp, r4, #26
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	ebaa 0303 	sub.w	r3, sl, r3
 800bbf4:	eba3 0309 	sub.w	r3, r3, r9
 800bbf8:	4543      	cmp	r3, r8
 800bbfa:	f77f af79 	ble.w	800baf0 <_printf_float+0x23c>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	465a      	mov	r2, fp
 800bc02:	4631      	mov	r1, r6
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b8      	blx	r7
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f43f aeae 	beq.w	800b96a <_printf_float+0xb6>
 800bc0e:	f108 0801 	add.w	r8, r8, #1
 800bc12:	e7ec      	b.n	800bbee <_printf_float+0x33a>
 800bc14:	4642      	mov	r2, r8
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d1c2      	bne.n	800bba6 <_printf_float+0x2f2>
 800bc20:	e6a3      	b.n	800b96a <_printf_float+0xb6>
 800bc22:	2301      	movs	r3, #1
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	9206      	str	r2, [sp, #24]
 800bc2a:	47b8      	blx	r7
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	f43f ae9c 	beq.w	800b96a <_printf_float+0xb6>
 800bc32:	9a06      	ldr	r2, [sp, #24]
 800bc34:	f10b 0b01 	add.w	fp, fp, #1
 800bc38:	e7bb      	b.n	800bbb2 <_printf_float+0x2fe>
 800bc3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1c0      	bne.n	800bbca <_printf_float+0x316>
 800bc48:	e68f      	b.n	800b96a <_printf_float+0xb6>
 800bc4a:	9a06      	ldr	r2, [sp, #24]
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	4442      	add	r2, r8
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	d1c3      	bne.n	800bbe2 <_printf_float+0x32e>
 800bc5a:	e686      	b.n	800b96a <_printf_float+0xb6>
 800bc5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc60:	f1ba 0f01 	cmp.w	sl, #1
 800bc64:	dc01      	bgt.n	800bc6a <_printf_float+0x3b6>
 800bc66:	07db      	lsls	r3, r3, #31
 800bc68:	d536      	bpl.n	800bcd8 <_printf_float+0x424>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	f43f ae78 	beq.w	800b96a <_printf_float+0xb6>
 800bc7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	f43f ae70 	beq.w	800b96a <_printf_float+0xb6>
 800bc8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2300      	movs	r3, #0
 800bc92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc96:	f7f4 ff4f 	bl	8000b38 <__aeabi_dcmpeq>
 800bc9a:	b9c0      	cbnz	r0, 800bcce <_printf_float+0x41a>
 800bc9c:	4653      	mov	r3, sl
 800bc9e:	f108 0201 	add.w	r2, r8, #1
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	d10c      	bne.n	800bcc6 <_printf_float+0x412>
 800bcac:	e65d      	b.n	800b96a <_printf_float+0xb6>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	465a      	mov	r2, fp
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f43f ae56 	beq.w	800b96a <_printf_float+0xb6>
 800bcbe:	f108 0801 	add.w	r8, r8, #1
 800bcc2:	45d0      	cmp	r8, sl
 800bcc4:	dbf3      	blt.n	800bcae <_printf_float+0x3fa>
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bccc:	e6df      	b.n	800ba8e <_printf_float+0x1da>
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	f104 0b1a 	add.w	fp, r4, #26
 800bcd6:	e7f4      	b.n	800bcc2 <_printf_float+0x40e>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4642      	mov	r2, r8
 800bcdc:	e7e1      	b.n	800bca2 <_printf_float+0x3ee>
 800bcde:	2301      	movs	r3, #1
 800bce0:	464a      	mov	r2, r9
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b8      	blx	r7
 800bce8:	3001      	adds	r0, #1
 800bcea:	f43f ae3e 	beq.w	800b96a <_printf_float+0xb6>
 800bcee:	f108 0801 	add.w	r8, r8, #1
 800bcf2:	68e3      	ldr	r3, [r4, #12]
 800bcf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcf6:	1a5b      	subs	r3, r3, r1
 800bcf8:	4543      	cmp	r3, r8
 800bcfa:	dcf0      	bgt.n	800bcde <_printf_float+0x42a>
 800bcfc:	e6fc      	b.n	800baf8 <_printf_float+0x244>
 800bcfe:	f04f 0800 	mov.w	r8, #0
 800bd02:	f104 0919 	add.w	r9, r4, #25
 800bd06:	e7f4      	b.n	800bcf2 <_printf_float+0x43e>

0800bd08 <_printf_common>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	4698      	mov	r8, r3
 800bd10:	688a      	ldr	r2, [r1, #8]
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	bfb8      	it	lt
 800bd1c:	4613      	movlt	r3, r2
 800bd1e:	6033      	str	r3, [r6, #0]
 800bd20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd24:	4607      	mov	r7, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	b10a      	cbz	r2, 800bd2e <_printf_common+0x26>
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	0699      	lsls	r1, r3, #26
 800bd32:	bf42      	ittt	mi
 800bd34:	6833      	ldrmi	r3, [r6, #0]
 800bd36:	3302      	addmi	r3, #2
 800bd38:	6033      	strmi	r3, [r6, #0]
 800bd3a:	6825      	ldr	r5, [r4, #0]
 800bd3c:	f015 0506 	ands.w	r5, r5, #6
 800bd40:	d106      	bne.n	800bd50 <_printf_common+0x48>
 800bd42:	f104 0a19 	add.w	sl, r4, #25
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	6832      	ldr	r2, [r6, #0]
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc26      	bgt.n	800bd9e <_printf_common+0x96>
 800bd50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd54:	6822      	ldr	r2, [r4, #0]
 800bd56:	3b00      	subs	r3, #0
 800bd58:	bf18      	it	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	0692      	lsls	r2, r2, #26
 800bd5e:	d42b      	bmi.n	800bdb8 <_printf_common+0xb0>
 800bd60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd64:	4641      	mov	r1, r8
 800bd66:	4638      	mov	r0, r7
 800bd68:	47c8      	blx	r9
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d01e      	beq.n	800bdac <_printf_common+0xa4>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	6922      	ldr	r2, [r4, #16]
 800bd72:	f003 0306 	and.w	r3, r3, #6
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	bf02      	ittt	eq
 800bd7a:	68e5      	ldreq	r5, [r4, #12]
 800bd7c:	6833      	ldreq	r3, [r6, #0]
 800bd7e:	1aed      	subeq	r5, r5, r3
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	bf0c      	ite	eq
 800bd84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd88:	2500      	movne	r5, #0
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	bfc4      	itt	gt
 800bd8e:	1a9b      	subgt	r3, r3, r2
 800bd90:	18ed      	addgt	r5, r5, r3
 800bd92:	2600      	movs	r6, #0
 800bd94:	341a      	adds	r4, #26
 800bd96:	42b5      	cmp	r5, r6
 800bd98:	d11a      	bne.n	800bdd0 <_printf_common+0xc8>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e008      	b.n	800bdb0 <_printf_common+0xa8>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4652      	mov	r2, sl
 800bda2:	4641      	mov	r1, r8
 800bda4:	4638      	mov	r0, r7
 800bda6:	47c8      	blx	r9
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d103      	bne.n	800bdb4 <_printf_common+0xac>
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	e7c6      	b.n	800bd46 <_printf_common+0x3e>
 800bdb8:	18e1      	adds	r1, r4, r3
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	2030      	movs	r0, #48	@ 0x30
 800bdbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdc2:	4422      	add	r2, r4
 800bdc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdcc:	3302      	adds	r3, #2
 800bdce:	e7c7      	b.n	800bd60 <_printf_common+0x58>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4641      	mov	r1, r8
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	47c8      	blx	r9
 800bdda:	3001      	adds	r0, #1
 800bddc:	d0e6      	beq.n	800bdac <_printf_common+0xa4>
 800bdde:	3601      	adds	r6, #1
 800bde0:	e7d9      	b.n	800bd96 <_printf_common+0x8e>
	...

0800bde4 <_printf_i>:
 800bde4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	7e0f      	ldrb	r7, [r1, #24]
 800bdea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bdec:	2f78      	cmp	r7, #120	@ 0x78
 800bdee:	4691      	mov	r9, r2
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	469a      	mov	sl, r3
 800bdf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdfa:	d807      	bhi.n	800be0c <_printf_i+0x28>
 800bdfc:	2f62      	cmp	r7, #98	@ 0x62
 800bdfe:	d80a      	bhi.n	800be16 <_printf_i+0x32>
 800be00:	2f00      	cmp	r7, #0
 800be02:	f000 80d1 	beq.w	800bfa8 <_printf_i+0x1c4>
 800be06:	2f58      	cmp	r7, #88	@ 0x58
 800be08:	f000 80b8 	beq.w	800bf7c <_printf_i+0x198>
 800be0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be14:	e03a      	b.n	800be8c <_printf_i+0xa8>
 800be16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be1a:	2b15      	cmp	r3, #21
 800be1c:	d8f6      	bhi.n	800be0c <_printf_i+0x28>
 800be1e:	a101      	add	r1, pc, #4	@ (adr r1, 800be24 <_printf_i+0x40>)
 800be20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be91 	.word	0x0800be91
 800be2c:	0800be0d 	.word	0x0800be0d
 800be30:	0800be0d 	.word	0x0800be0d
 800be34:	0800be0d 	.word	0x0800be0d
 800be38:	0800be0d 	.word	0x0800be0d
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800be0d 	.word	0x0800be0d
 800be44:	0800be0d 	.word	0x0800be0d
 800be48:	0800be0d 	.word	0x0800be0d
 800be4c:	0800be0d 	.word	0x0800be0d
 800be50:	0800bf8f 	.word	0x0800bf8f
 800be54:	0800bebb 	.word	0x0800bebb
 800be58:	0800bf49 	.word	0x0800bf49
 800be5c:	0800be0d 	.word	0x0800be0d
 800be60:	0800be0d 	.word	0x0800be0d
 800be64:	0800bfb1 	.word	0x0800bfb1
 800be68:	0800be0d 	.word	0x0800be0d
 800be6c:	0800bebb 	.word	0x0800bebb
 800be70:	0800be0d 	.word	0x0800be0d
 800be74:	0800be0d 	.word	0x0800be0d
 800be78:	0800bf51 	.word	0x0800bf51
 800be7c:	6833      	ldr	r3, [r6, #0]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6032      	str	r2, [r6, #0]
 800be84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be8c:	2301      	movs	r3, #1
 800be8e:	e09c      	b.n	800bfca <_printf_i+0x1e6>
 800be90:	6833      	ldr	r3, [r6, #0]
 800be92:	6820      	ldr	r0, [r4, #0]
 800be94:	1d19      	adds	r1, r3, #4
 800be96:	6031      	str	r1, [r6, #0]
 800be98:	0606      	lsls	r6, r0, #24
 800be9a:	d501      	bpl.n	800bea0 <_printf_i+0xbc>
 800be9c:	681d      	ldr	r5, [r3, #0]
 800be9e:	e003      	b.n	800bea8 <_printf_i+0xc4>
 800bea0:	0645      	lsls	r5, r0, #25
 800bea2:	d5fb      	bpl.n	800be9c <_printf_i+0xb8>
 800bea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	da03      	bge.n	800beb4 <_printf_i+0xd0>
 800beac:	232d      	movs	r3, #45	@ 0x2d
 800beae:	426d      	negs	r5, r5
 800beb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beb4:	4858      	ldr	r0, [pc, #352]	@ (800c018 <_printf_i+0x234>)
 800beb6:	230a      	movs	r3, #10
 800beb8:	e011      	b.n	800bede <_printf_i+0xfa>
 800beba:	6821      	ldr	r1, [r4, #0]
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	0608      	lsls	r0, r1, #24
 800bec0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bec4:	d402      	bmi.n	800becc <_printf_i+0xe8>
 800bec6:	0649      	lsls	r1, r1, #25
 800bec8:	bf48      	it	mi
 800beca:	b2ad      	uxthmi	r5, r5
 800becc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bece:	4852      	ldr	r0, [pc, #328]	@ (800c018 <_printf_i+0x234>)
 800bed0:	6033      	str	r3, [r6, #0]
 800bed2:	bf14      	ite	ne
 800bed4:	230a      	movne	r3, #10
 800bed6:	2308      	moveq	r3, #8
 800bed8:	2100      	movs	r1, #0
 800beda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bede:	6866      	ldr	r6, [r4, #4]
 800bee0:	60a6      	str	r6, [r4, #8]
 800bee2:	2e00      	cmp	r6, #0
 800bee4:	db05      	blt.n	800bef2 <_printf_i+0x10e>
 800bee6:	6821      	ldr	r1, [r4, #0]
 800bee8:	432e      	orrs	r6, r5
 800beea:	f021 0104 	bic.w	r1, r1, #4
 800beee:	6021      	str	r1, [r4, #0]
 800bef0:	d04b      	beq.n	800bf8a <_printf_i+0x1a6>
 800bef2:	4616      	mov	r6, r2
 800bef4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bef8:	fb03 5711 	mls	r7, r3, r1, r5
 800befc:	5dc7      	ldrb	r7, [r0, r7]
 800befe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf02:	462f      	mov	r7, r5
 800bf04:	42bb      	cmp	r3, r7
 800bf06:	460d      	mov	r5, r1
 800bf08:	d9f4      	bls.n	800bef4 <_printf_i+0x110>
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d10b      	bne.n	800bf26 <_printf_i+0x142>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	07df      	lsls	r7, r3, #31
 800bf12:	d508      	bpl.n	800bf26 <_printf_i+0x142>
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	6861      	ldr	r1, [r4, #4]
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	bfde      	ittt	le
 800bf1c:	2330      	movle	r3, #48	@ 0x30
 800bf1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf22:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf26:	1b92      	subs	r2, r2, r6
 800bf28:	6122      	str	r2, [r4, #16]
 800bf2a:	f8cd a000 	str.w	sl, [sp]
 800bf2e:	464b      	mov	r3, r9
 800bf30:	aa03      	add	r2, sp, #12
 800bf32:	4621      	mov	r1, r4
 800bf34:	4640      	mov	r0, r8
 800bf36:	f7ff fee7 	bl	800bd08 <_printf_common>
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	d14a      	bne.n	800bfd4 <_printf_i+0x1f0>
 800bf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf42:	b004      	add	sp, #16
 800bf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	f043 0320 	orr.w	r3, r3, #32
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	4832      	ldr	r0, [pc, #200]	@ (800c01c <_printf_i+0x238>)
 800bf52:	2778      	movs	r7, #120	@ 0x78
 800bf54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	6831      	ldr	r1, [r6, #0]
 800bf5c:	061f      	lsls	r7, r3, #24
 800bf5e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf62:	d402      	bmi.n	800bf6a <_printf_i+0x186>
 800bf64:	065f      	lsls	r7, r3, #25
 800bf66:	bf48      	it	mi
 800bf68:	b2ad      	uxthmi	r5, r5
 800bf6a:	6031      	str	r1, [r6, #0]
 800bf6c:	07d9      	lsls	r1, r3, #31
 800bf6e:	bf44      	itt	mi
 800bf70:	f043 0320 	orrmi.w	r3, r3, #32
 800bf74:	6023      	strmi	r3, [r4, #0]
 800bf76:	b11d      	cbz	r5, 800bf80 <_printf_i+0x19c>
 800bf78:	2310      	movs	r3, #16
 800bf7a:	e7ad      	b.n	800bed8 <_printf_i+0xf4>
 800bf7c:	4826      	ldr	r0, [pc, #152]	@ (800c018 <_printf_i+0x234>)
 800bf7e:	e7e9      	b.n	800bf54 <_printf_i+0x170>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	f023 0320 	bic.w	r3, r3, #32
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	e7f6      	b.n	800bf78 <_printf_i+0x194>
 800bf8a:	4616      	mov	r6, r2
 800bf8c:	e7bd      	b.n	800bf0a <_printf_i+0x126>
 800bf8e:	6833      	ldr	r3, [r6, #0]
 800bf90:	6825      	ldr	r5, [r4, #0]
 800bf92:	6961      	ldr	r1, [r4, #20]
 800bf94:	1d18      	adds	r0, r3, #4
 800bf96:	6030      	str	r0, [r6, #0]
 800bf98:	062e      	lsls	r6, r5, #24
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	d501      	bpl.n	800bfa2 <_printf_i+0x1be>
 800bf9e:	6019      	str	r1, [r3, #0]
 800bfa0:	e002      	b.n	800bfa8 <_printf_i+0x1c4>
 800bfa2:	0668      	lsls	r0, r5, #25
 800bfa4:	d5fb      	bpl.n	800bf9e <_printf_i+0x1ba>
 800bfa6:	8019      	strh	r1, [r3, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	4616      	mov	r6, r2
 800bfae:	e7bc      	b.n	800bf2a <_printf_i+0x146>
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	6032      	str	r2, [r6, #0]
 800bfb6:	681e      	ldr	r6, [r3, #0]
 800bfb8:	6862      	ldr	r2, [r4, #4]
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7f4 f93f 	bl	8000240 <memchr>
 800bfc2:	b108      	cbz	r0, 800bfc8 <_printf_i+0x1e4>
 800bfc4:	1b80      	subs	r0, r0, r6
 800bfc6:	6060      	str	r0, [r4, #4]
 800bfc8:	6863      	ldr	r3, [r4, #4]
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfd2:	e7aa      	b.n	800bf2a <_printf_i+0x146>
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	4632      	mov	r2, r6
 800bfd8:	4649      	mov	r1, r9
 800bfda:	4640      	mov	r0, r8
 800bfdc:	47d0      	blx	sl
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d0ad      	beq.n	800bf3e <_printf_i+0x15a>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	079b      	lsls	r3, r3, #30
 800bfe6:	d413      	bmi.n	800c010 <_printf_i+0x22c>
 800bfe8:	68e0      	ldr	r0, [r4, #12]
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	4298      	cmp	r0, r3
 800bfee:	bfb8      	it	lt
 800bff0:	4618      	movlt	r0, r3
 800bff2:	e7a6      	b.n	800bf42 <_printf_i+0x15e>
 800bff4:	2301      	movs	r3, #1
 800bff6:	4632      	mov	r2, r6
 800bff8:	4649      	mov	r1, r9
 800bffa:	4640      	mov	r0, r8
 800bffc:	47d0      	blx	sl
 800bffe:	3001      	adds	r0, #1
 800c000:	d09d      	beq.n	800bf3e <_printf_i+0x15a>
 800c002:	3501      	adds	r5, #1
 800c004:	68e3      	ldr	r3, [r4, #12]
 800c006:	9903      	ldr	r1, [sp, #12]
 800c008:	1a5b      	subs	r3, r3, r1
 800c00a:	42ab      	cmp	r3, r5
 800c00c:	dcf2      	bgt.n	800bff4 <_printf_i+0x210>
 800c00e:	e7eb      	b.n	800bfe8 <_printf_i+0x204>
 800c010:	2500      	movs	r5, #0
 800c012:	f104 0619 	add.w	r6, r4, #25
 800c016:	e7f5      	b.n	800c004 <_printf_i+0x220>
 800c018:	0800f81e 	.word	0x0800f81e
 800c01c:	0800f82f 	.word	0x0800f82f

0800c020 <std>:
 800c020:	2300      	movs	r3, #0
 800c022:	b510      	push	{r4, lr}
 800c024:	4604      	mov	r4, r0
 800c026:	e9c0 3300 	strd	r3, r3, [r0]
 800c02a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c02e:	6083      	str	r3, [r0, #8]
 800c030:	8181      	strh	r1, [r0, #12]
 800c032:	6643      	str	r3, [r0, #100]	@ 0x64
 800c034:	81c2      	strh	r2, [r0, #14]
 800c036:	6183      	str	r3, [r0, #24]
 800c038:	4619      	mov	r1, r3
 800c03a:	2208      	movs	r2, #8
 800c03c:	305c      	adds	r0, #92	@ 0x5c
 800c03e:	f000 fa1b 	bl	800c478 <memset>
 800c042:	4b0d      	ldr	r3, [pc, #52]	@ (800c078 <std+0x58>)
 800c044:	6263      	str	r3, [r4, #36]	@ 0x24
 800c046:	4b0d      	ldr	r3, [pc, #52]	@ (800c07c <std+0x5c>)
 800c048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c04a:	4b0d      	ldr	r3, [pc, #52]	@ (800c080 <std+0x60>)
 800c04c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c04e:	4b0d      	ldr	r3, [pc, #52]	@ (800c084 <std+0x64>)
 800c050:	6323      	str	r3, [r4, #48]	@ 0x30
 800c052:	4b0d      	ldr	r3, [pc, #52]	@ (800c088 <std+0x68>)
 800c054:	6224      	str	r4, [r4, #32]
 800c056:	429c      	cmp	r4, r3
 800c058:	d006      	beq.n	800c068 <std+0x48>
 800c05a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c05e:	4294      	cmp	r4, r2
 800c060:	d002      	beq.n	800c068 <std+0x48>
 800c062:	33d0      	adds	r3, #208	@ 0xd0
 800c064:	429c      	cmp	r4, r3
 800c066:	d105      	bne.n	800c074 <std+0x54>
 800c068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c070:	f000 baa0 	b.w	800c5b4 <__retarget_lock_init_recursive>
 800c074:	bd10      	pop	{r4, pc}
 800c076:	bf00      	nop
 800c078:	0800c2c9 	.word	0x0800c2c9
 800c07c:	0800c2eb 	.word	0x0800c2eb
 800c080:	0800c323 	.word	0x0800c323
 800c084:	0800c347 	.word	0x0800c347
 800c088:	20002454 	.word	0x20002454

0800c08c <stdio_exit_handler>:
 800c08c:	4a02      	ldr	r2, [pc, #8]	@ (800c098 <stdio_exit_handler+0xc>)
 800c08e:	4903      	ldr	r1, [pc, #12]	@ (800c09c <stdio_exit_handler+0x10>)
 800c090:	4803      	ldr	r0, [pc, #12]	@ (800c0a0 <stdio_exit_handler+0x14>)
 800c092:	f000 b869 	b.w	800c168 <_fwalk_sglue>
 800c096:	bf00      	nop
 800c098:	20000024 	.word	0x20000024
 800c09c:	0800e035 	.word	0x0800e035
 800c0a0:	20000034 	.word	0x20000034

0800c0a4 <cleanup_stdio>:
 800c0a4:	6841      	ldr	r1, [r0, #4]
 800c0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <cleanup_stdio+0x34>)
 800c0a8:	4299      	cmp	r1, r3
 800c0aa:	b510      	push	{r4, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	d001      	beq.n	800c0b4 <cleanup_stdio+0x10>
 800c0b0:	f001 ffc0 	bl	800e034 <_fflush_r>
 800c0b4:	68a1      	ldr	r1, [r4, #8]
 800c0b6:	4b09      	ldr	r3, [pc, #36]	@ (800c0dc <cleanup_stdio+0x38>)
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d002      	beq.n	800c0c2 <cleanup_stdio+0x1e>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f001 ffb9 	bl	800e034 <_fflush_r>
 800c0c2:	68e1      	ldr	r1, [r4, #12]
 800c0c4:	4b06      	ldr	r3, [pc, #24]	@ (800c0e0 <cleanup_stdio+0x3c>)
 800c0c6:	4299      	cmp	r1, r3
 800c0c8:	d004      	beq.n	800c0d4 <cleanup_stdio+0x30>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d0:	f001 bfb0 	b.w	800e034 <_fflush_r>
 800c0d4:	bd10      	pop	{r4, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20002454 	.word	0x20002454
 800c0dc:	200024bc 	.word	0x200024bc
 800c0e0:	20002524 	.word	0x20002524

0800c0e4 <global_stdio_init.part.0>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c114 <global_stdio_init.part.0+0x30>)
 800c0e8:	4c0b      	ldr	r4, [pc, #44]	@ (800c118 <global_stdio_init.part.0+0x34>)
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c11c <global_stdio_init.part.0+0x38>)
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2104      	movs	r1, #4
 800c0f4:	f7ff ff94 	bl	800c020 <std>
 800c0f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	2109      	movs	r1, #9
 800c100:	f7ff ff8e 	bl	800c020 <std>
 800c104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c108:	2202      	movs	r2, #2
 800c10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c10e:	2112      	movs	r1, #18
 800c110:	f7ff bf86 	b.w	800c020 <std>
 800c114:	2000258c 	.word	0x2000258c
 800c118:	20002454 	.word	0x20002454
 800c11c:	0800c08d 	.word	0x0800c08d

0800c120 <__sfp_lock_acquire>:
 800c120:	4801      	ldr	r0, [pc, #4]	@ (800c128 <__sfp_lock_acquire+0x8>)
 800c122:	f000 ba48 	b.w	800c5b6 <__retarget_lock_acquire_recursive>
 800c126:	bf00      	nop
 800c128:	20002595 	.word	0x20002595

0800c12c <__sfp_lock_release>:
 800c12c:	4801      	ldr	r0, [pc, #4]	@ (800c134 <__sfp_lock_release+0x8>)
 800c12e:	f000 ba43 	b.w	800c5b8 <__retarget_lock_release_recursive>
 800c132:	bf00      	nop
 800c134:	20002595 	.word	0x20002595

0800c138 <__sinit>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	4604      	mov	r4, r0
 800c13c:	f7ff fff0 	bl	800c120 <__sfp_lock_acquire>
 800c140:	6a23      	ldr	r3, [r4, #32]
 800c142:	b11b      	cbz	r3, 800c14c <__sinit+0x14>
 800c144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c148:	f7ff bff0 	b.w	800c12c <__sfp_lock_release>
 800c14c:	4b04      	ldr	r3, [pc, #16]	@ (800c160 <__sinit+0x28>)
 800c14e:	6223      	str	r3, [r4, #32]
 800c150:	4b04      	ldr	r3, [pc, #16]	@ (800c164 <__sinit+0x2c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1f5      	bne.n	800c144 <__sinit+0xc>
 800c158:	f7ff ffc4 	bl	800c0e4 <global_stdio_init.part.0>
 800c15c:	e7f2      	b.n	800c144 <__sinit+0xc>
 800c15e:	bf00      	nop
 800c160:	0800c0a5 	.word	0x0800c0a5
 800c164:	2000258c 	.word	0x2000258c

0800c168 <_fwalk_sglue>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	4607      	mov	r7, r0
 800c16e:	4688      	mov	r8, r1
 800c170:	4614      	mov	r4, r2
 800c172:	2600      	movs	r6, #0
 800c174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c178:	f1b9 0901 	subs.w	r9, r9, #1
 800c17c:	d505      	bpl.n	800c18a <_fwalk_sglue+0x22>
 800c17e:	6824      	ldr	r4, [r4, #0]
 800c180:	2c00      	cmp	r4, #0
 800c182:	d1f7      	bne.n	800c174 <_fwalk_sglue+0xc>
 800c184:	4630      	mov	r0, r6
 800c186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18a:	89ab      	ldrh	r3, [r5, #12]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d907      	bls.n	800c1a0 <_fwalk_sglue+0x38>
 800c190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c194:	3301      	adds	r3, #1
 800c196:	d003      	beq.n	800c1a0 <_fwalk_sglue+0x38>
 800c198:	4629      	mov	r1, r5
 800c19a:	4638      	mov	r0, r7
 800c19c:	47c0      	blx	r8
 800c19e:	4306      	orrs	r6, r0
 800c1a0:	3568      	adds	r5, #104	@ 0x68
 800c1a2:	e7e9      	b.n	800c178 <_fwalk_sglue+0x10>

0800c1a4 <iprintf>:
 800c1a4:	b40f      	push	{r0, r1, r2, r3}
 800c1a6:	b507      	push	{r0, r1, r2, lr}
 800c1a8:	4906      	ldr	r1, [pc, #24]	@ (800c1c4 <iprintf+0x20>)
 800c1aa:	ab04      	add	r3, sp, #16
 800c1ac:	6808      	ldr	r0, [r1, #0]
 800c1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b2:	6881      	ldr	r1, [r0, #8]
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	f001 fda1 	bl	800dcfc <_vfiprintf_r>
 800c1ba:	b003      	add	sp, #12
 800c1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c0:	b004      	add	sp, #16
 800c1c2:	4770      	bx	lr
 800c1c4:	20000030 	.word	0x20000030

0800c1c8 <_puts_r>:
 800c1c8:	6a03      	ldr	r3, [r0, #32]
 800c1ca:	b570      	push	{r4, r5, r6, lr}
 800c1cc:	6884      	ldr	r4, [r0, #8]
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	460e      	mov	r6, r1
 800c1d2:	b90b      	cbnz	r3, 800c1d8 <_puts_r+0x10>
 800c1d4:	f7ff ffb0 	bl	800c138 <__sinit>
 800c1d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1da:	07db      	lsls	r3, r3, #31
 800c1dc:	d405      	bmi.n	800c1ea <_puts_r+0x22>
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	0598      	lsls	r0, r3, #22
 800c1e2:	d402      	bmi.n	800c1ea <_puts_r+0x22>
 800c1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1e6:	f000 f9e6 	bl	800c5b6 <__retarget_lock_acquire_recursive>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	0719      	lsls	r1, r3, #28
 800c1ee:	d502      	bpl.n	800c1f6 <_puts_r+0x2e>
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d135      	bne.n	800c262 <_puts_r+0x9a>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f000 f8e7 	bl	800c3cc <__swsetup_r>
 800c1fe:	b380      	cbz	r0, 800c262 <_puts_r+0x9a>
 800c200:	f04f 35ff 	mov.w	r5, #4294967295
 800c204:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c206:	07da      	lsls	r2, r3, #31
 800c208:	d405      	bmi.n	800c216 <_puts_r+0x4e>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	059b      	lsls	r3, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_puts_r+0x4e>
 800c210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c212:	f000 f9d1 	bl	800c5b8 <__retarget_lock_release_recursive>
 800c216:	4628      	mov	r0, r5
 800c218:	bd70      	pop	{r4, r5, r6, pc}
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da04      	bge.n	800c228 <_puts_r+0x60>
 800c21e:	69a2      	ldr	r2, [r4, #24]
 800c220:	429a      	cmp	r2, r3
 800c222:	dc17      	bgt.n	800c254 <_puts_r+0x8c>
 800c224:	290a      	cmp	r1, #10
 800c226:	d015      	beq.n	800c254 <_puts_r+0x8c>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	6022      	str	r2, [r4, #0]
 800c22e:	7019      	strb	r1, [r3, #0]
 800c230:	68a3      	ldr	r3, [r4, #8]
 800c232:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c236:	3b01      	subs	r3, #1
 800c238:	60a3      	str	r3, [r4, #8]
 800c23a:	2900      	cmp	r1, #0
 800c23c:	d1ed      	bne.n	800c21a <_puts_r+0x52>
 800c23e:	2b00      	cmp	r3, #0
 800c240:	da11      	bge.n	800c266 <_puts_r+0x9e>
 800c242:	4622      	mov	r2, r4
 800c244:	210a      	movs	r1, #10
 800c246:	4628      	mov	r0, r5
 800c248:	f000 f881 	bl	800c34e <__swbuf_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	d0d7      	beq.n	800c200 <_puts_r+0x38>
 800c250:	250a      	movs	r5, #10
 800c252:	e7d7      	b.n	800c204 <_puts_r+0x3c>
 800c254:	4622      	mov	r2, r4
 800c256:	4628      	mov	r0, r5
 800c258:	f000 f879 	bl	800c34e <__swbuf_r>
 800c25c:	3001      	adds	r0, #1
 800c25e:	d1e7      	bne.n	800c230 <_puts_r+0x68>
 800c260:	e7ce      	b.n	800c200 <_puts_r+0x38>
 800c262:	3e01      	subs	r6, #1
 800c264:	e7e4      	b.n	800c230 <_puts_r+0x68>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	6022      	str	r2, [r4, #0]
 800c26c:	220a      	movs	r2, #10
 800c26e:	701a      	strb	r2, [r3, #0]
 800c270:	e7ee      	b.n	800c250 <_puts_r+0x88>
	...

0800c274 <puts>:
 800c274:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <puts+0xc>)
 800c276:	4601      	mov	r1, r0
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f7ff bfa5 	b.w	800c1c8 <_puts_r>
 800c27e:	bf00      	nop
 800c280:	20000030 	.word	0x20000030

0800c284 <siprintf>:
 800c284:	b40e      	push	{r1, r2, r3}
 800c286:	b510      	push	{r4, lr}
 800c288:	b09d      	sub	sp, #116	@ 0x74
 800c28a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c28c:	9002      	str	r0, [sp, #8]
 800c28e:	9006      	str	r0, [sp, #24]
 800c290:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c294:	480a      	ldr	r0, [pc, #40]	@ (800c2c0 <siprintf+0x3c>)
 800c296:	9107      	str	r1, [sp, #28]
 800c298:	9104      	str	r1, [sp, #16]
 800c29a:	490a      	ldr	r1, [pc, #40]	@ (800c2c4 <siprintf+0x40>)
 800c29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a0:	9105      	str	r1, [sp, #20]
 800c2a2:	2400      	movs	r4, #0
 800c2a4:	a902      	add	r1, sp, #8
 800c2a6:	6800      	ldr	r0, [r0, #0]
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c2ac:	f001 fc00 	bl	800dab0 <_svfiprintf_r>
 800c2b0:	9b02      	ldr	r3, [sp, #8]
 800c2b2:	701c      	strb	r4, [r3, #0]
 800c2b4:	b01d      	add	sp, #116	@ 0x74
 800c2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ba:	b003      	add	sp, #12
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20000030 	.word	0x20000030
 800c2c4:	ffff0208 	.word	0xffff0208

0800c2c8 <__sread>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d0:	f000 f912 	bl	800c4f8 <_read_r>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	bfab      	itete	ge
 800c2d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2da:	89a3      	ldrhlt	r3, [r4, #12]
 800c2dc:	181b      	addge	r3, r3, r0
 800c2de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2e2:	bfac      	ite	ge
 800c2e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2e6:	81a3      	strhlt	r3, [r4, #12]
 800c2e8:	bd10      	pop	{r4, pc}

0800c2ea <__swrite>:
 800c2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ee:	461f      	mov	r7, r3
 800c2f0:	898b      	ldrh	r3, [r1, #12]
 800c2f2:	05db      	lsls	r3, r3, #23
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	4616      	mov	r6, r2
 800c2fa:	d505      	bpl.n	800c308 <__swrite+0x1e>
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	2302      	movs	r3, #2
 800c302:	2200      	movs	r2, #0
 800c304:	f000 f8e6 	bl	800c4d4 <_lseek_r>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c30e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c312:	81a3      	strh	r3, [r4, #12]
 800c314:	4632      	mov	r2, r6
 800c316:	463b      	mov	r3, r7
 800c318:	4628      	mov	r0, r5
 800c31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	f000 b90d 	b.w	800c53c <_write_r>

0800c322 <__sseek>:
 800c322:	b510      	push	{r4, lr}
 800c324:	460c      	mov	r4, r1
 800c326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32a:	f000 f8d3 	bl	800c4d4 <_lseek_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	bf15      	itete	ne
 800c334:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c33a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c33e:	81a3      	strheq	r3, [r4, #12]
 800c340:	bf18      	it	ne
 800c342:	81a3      	strhne	r3, [r4, #12]
 800c344:	bd10      	pop	{r4, pc}

0800c346 <__sclose>:
 800c346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34a:	f000 b8b3 	b.w	800c4b4 <_close_r>

0800c34e <__swbuf_r>:
 800c34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c350:	460e      	mov	r6, r1
 800c352:	4614      	mov	r4, r2
 800c354:	4605      	mov	r5, r0
 800c356:	b118      	cbz	r0, 800c360 <__swbuf_r+0x12>
 800c358:	6a03      	ldr	r3, [r0, #32]
 800c35a:	b90b      	cbnz	r3, 800c360 <__swbuf_r+0x12>
 800c35c:	f7ff feec 	bl	800c138 <__sinit>
 800c360:	69a3      	ldr	r3, [r4, #24]
 800c362:	60a3      	str	r3, [r4, #8]
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	071a      	lsls	r2, r3, #28
 800c368:	d501      	bpl.n	800c36e <__swbuf_r+0x20>
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	b943      	cbnz	r3, 800c380 <__swbuf_r+0x32>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 f82b 	bl	800c3cc <__swsetup_r>
 800c376:	b118      	cbz	r0, 800c380 <__swbuf_r+0x32>
 800c378:	f04f 37ff 	mov.w	r7, #4294967295
 800c37c:	4638      	mov	r0, r7
 800c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	6922      	ldr	r2, [r4, #16]
 800c384:	1a98      	subs	r0, r3, r2
 800c386:	6963      	ldr	r3, [r4, #20]
 800c388:	b2f6      	uxtb	r6, r6
 800c38a:	4283      	cmp	r3, r0
 800c38c:	4637      	mov	r7, r6
 800c38e:	dc05      	bgt.n	800c39c <__swbuf_r+0x4e>
 800c390:	4621      	mov	r1, r4
 800c392:	4628      	mov	r0, r5
 800c394:	f001 fe4e 	bl	800e034 <_fflush_r>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d1ed      	bne.n	800c378 <__swbuf_r+0x2a>
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	60a3      	str	r3, [r4, #8]
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	701e      	strb	r6, [r3, #0]
 800c3aa:	6962      	ldr	r2, [r4, #20]
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d004      	beq.n	800c3bc <__swbuf_r+0x6e>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	07db      	lsls	r3, r3, #31
 800c3b6:	d5e1      	bpl.n	800c37c <__swbuf_r+0x2e>
 800c3b8:	2e0a      	cmp	r6, #10
 800c3ba:	d1df      	bne.n	800c37c <__swbuf_r+0x2e>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f001 fe38 	bl	800e034 <_fflush_r>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d0d9      	beq.n	800c37c <__swbuf_r+0x2e>
 800c3c8:	e7d6      	b.n	800c378 <__swbuf_r+0x2a>
	...

0800c3cc <__swsetup_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4b29      	ldr	r3, [pc, #164]	@ (800c474 <__swsetup_r+0xa8>)
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	b118      	cbz	r0, 800c3e0 <__swsetup_r+0x14>
 800c3d8:	6a03      	ldr	r3, [r0, #32]
 800c3da:	b90b      	cbnz	r3, 800c3e0 <__swsetup_r+0x14>
 800c3dc:	f7ff feac 	bl	800c138 <__sinit>
 800c3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e4:	0719      	lsls	r1, r3, #28
 800c3e6:	d422      	bmi.n	800c42e <__swsetup_r+0x62>
 800c3e8:	06da      	lsls	r2, r3, #27
 800c3ea:	d407      	bmi.n	800c3fc <__swsetup_r+0x30>
 800c3ec:	2209      	movs	r2, #9
 800c3ee:	602a      	str	r2, [r5, #0]
 800c3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fa:	e033      	b.n	800c464 <__swsetup_r+0x98>
 800c3fc:	0758      	lsls	r0, r3, #29
 800c3fe:	d512      	bpl.n	800c426 <__swsetup_r+0x5a>
 800c400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c402:	b141      	cbz	r1, 800c416 <__swsetup_r+0x4a>
 800c404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c408:	4299      	cmp	r1, r3
 800c40a:	d002      	beq.n	800c412 <__swsetup_r+0x46>
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 ff2f 	bl	800d270 <_free_r>
 800c412:	2300      	movs	r3, #0
 800c414:	6363      	str	r3, [r4, #52]	@ 0x34
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c41c:	81a3      	strh	r3, [r4, #12]
 800c41e:	2300      	movs	r3, #0
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f043 0308 	orr.w	r3, r3, #8
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	b94b      	cbnz	r3, 800c446 <__swsetup_r+0x7a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c43c:	d003      	beq.n	800c446 <__swsetup_r+0x7a>
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f001 fe45 	bl	800e0d0 <__smakebuf_r>
 800c446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44a:	f013 0201 	ands.w	r2, r3, #1
 800c44e:	d00a      	beq.n	800c466 <__swsetup_r+0x9a>
 800c450:	2200      	movs	r2, #0
 800c452:	60a2      	str	r2, [r4, #8]
 800c454:	6962      	ldr	r2, [r4, #20]
 800c456:	4252      	negs	r2, r2
 800c458:	61a2      	str	r2, [r4, #24]
 800c45a:	6922      	ldr	r2, [r4, #16]
 800c45c:	b942      	cbnz	r2, 800c470 <__swsetup_r+0xa4>
 800c45e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c462:	d1c5      	bne.n	800c3f0 <__swsetup_r+0x24>
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	0799      	lsls	r1, r3, #30
 800c468:	bf58      	it	pl
 800c46a:	6962      	ldrpl	r2, [r4, #20]
 800c46c:	60a2      	str	r2, [r4, #8]
 800c46e:	e7f4      	b.n	800c45a <__swsetup_r+0x8e>
 800c470:	2000      	movs	r0, #0
 800c472:	e7f7      	b.n	800c464 <__swsetup_r+0x98>
 800c474:	20000030 	.word	0x20000030

0800c478 <memset>:
 800c478:	4402      	add	r2, r0
 800c47a:	4603      	mov	r3, r0
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d100      	bne.n	800c482 <memset+0xa>
 800c480:	4770      	bx	lr
 800c482:	f803 1b01 	strb.w	r1, [r3], #1
 800c486:	e7f9      	b.n	800c47c <memset+0x4>

0800c488 <strncmp>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	b16a      	cbz	r2, 800c4a8 <strncmp+0x20>
 800c48c:	3901      	subs	r1, #1
 800c48e:	1884      	adds	r4, r0, r2
 800c490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c498:	429a      	cmp	r2, r3
 800c49a:	d103      	bne.n	800c4a4 <strncmp+0x1c>
 800c49c:	42a0      	cmp	r0, r4
 800c49e:	d001      	beq.n	800c4a4 <strncmp+0x1c>
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	d1f5      	bne.n	800c490 <strncmp+0x8>
 800c4a4:	1ad0      	subs	r0, r2, r3
 800c4a6:	bd10      	pop	{r4, pc}
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	e7fc      	b.n	800c4a6 <strncmp+0x1e>

0800c4ac <_localeconv_r>:
 800c4ac:	4800      	ldr	r0, [pc, #0]	@ (800c4b0 <_localeconv_r+0x4>)
 800c4ae:	4770      	bx	lr
 800c4b0:	20000170 	.word	0x20000170

0800c4b4 <_close_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	@ (800c4d0 <_close_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f6 feec 	bl	800329c <_close>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_close_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_close_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20002590 	.word	0x20002590

0800c4d4 <_lseek_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	@ (800c4f4 <_lseek_r+0x20>)
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4608      	mov	r0, r1
 800c4dc:	4611      	mov	r1, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	602a      	str	r2, [r5, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f7f6 ff01 	bl	80032ea <_lseek>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_lseek_r+0x1e>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_lseek_r+0x1e>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	20002590 	.word	0x20002590

0800c4f8 <_read_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	@ (800c518 <_read_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f6 fe8f 	bl	800322a <_read>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_read_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_read_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20002590 	.word	0x20002590

0800c51c <_sbrk_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d06      	ldr	r5, [pc, #24]	@ (800c538 <_sbrk_r+0x1c>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f6 feec 	bl	8003304 <_sbrk>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_sbrk_r+0x1a>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_sbrk_r+0x1a>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	20002590 	.word	0x20002590

0800c53c <_write_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	4d07      	ldr	r5, [pc, #28]	@ (800c55c <_write_r+0x20>)
 800c540:	4604      	mov	r4, r0
 800c542:	4608      	mov	r0, r1
 800c544:	4611      	mov	r1, r2
 800c546:	2200      	movs	r2, #0
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f7f6 fe8a 	bl	8003264 <_write>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_write_r+0x1e>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_write_r+0x1e>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	20002590 	.word	0x20002590

0800c560 <__errno>:
 800c560:	4b01      	ldr	r3, [pc, #4]	@ (800c568 <__errno+0x8>)
 800c562:	6818      	ldr	r0, [r3, #0]
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	20000030 	.word	0x20000030

0800c56c <__libc_init_array>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4d0d      	ldr	r5, [pc, #52]	@ (800c5a4 <__libc_init_array+0x38>)
 800c570:	4c0d      	ldr	r4, [pc, #52]	@ (800c5a8 <__libc_init_array+0x3c>)
 800c572:	1b64      	subs	r4, r4, r5
 800c574:	10a4      	asrs	r4, r4, #2
 800c576:	2600      	movs	r6, #0
 800c578:	42a6      	cmp	r6, r4
 800c57a:	d109      	bne.n	800c590 <__libc_init_array+0x24>
 800c57c:	4d0b      	ldr	r5, [pc, #44]	@ (800c5ac <__libc_init_array+0x40>)
 800c57e:	4c0c      	ldr	r4, [pc, #48]	@ (800c5b0 <__libc_init_array+0x44>)
 800c580:	f001 ff12 	bl	800e3a8 <_init>
 800c584:	1b64      	subs	r4, r4, r5
 800c586:	10a4      	asrs	r4, r4, #2
 800c588:	2600      	movs	r6, #0
 800c58a:	42a6      	cmp	r6, r4
 800c58c:	d105      	bne.n	800c59a <__libc_init_array+0x2e>
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	f855 3b04 	ldr.w	r3, [r5], #4
 800c594:	4798      	blx	r3
 800c596:	3601      	adds	r6, #1
 800c598:	e7ee      	b.n	800c578 <__libc_init_array+0xc>
 800c59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59e:	4798      	blx	r3
 800c5a0:	3601      	adds	r6, #1
 800c5a2:	e7f2      	b.n	800c58a <__libc_init_array+0x1e>
 800c5a4:	0800fb8c 	.word	0x0800fb8c
 800c5a8:	0800fb8c 	.word	0x0800fb8c
 800c5ac:	0800fb8c 	.word	0x0800fb8c
 800c5b0:	0800fb90 	.word	0x0800fb90

0800c5b4 <__retarget_lock_init_recursive>:
 800c5b4:	4770      	bx	lr

0800c5b6 <__retarget_lock_acquire_recursive>:
 800c5b6:	4770      	bx	lr

0800c5b8 <__retarget_lock_release_recursive>:
 800c5b8:	4770      	bx	lr

0800c5ba <quorem>:
 800c5ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5be:	6903      	ldr	r3, [r0, #16]
 800c5c0:	690c      	ldr	r4, [r1, #16]
 800c5c2:	42a3      	cmp	r3, r4
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	db7e      	blt.n	800c6c6 <quorem+0x10c>
 800c5c8:	3c01      	subs	r4, #1
 800c5ca:	f101 0814 	add.w	r8, r1, #20
 800c5ce:	00a3      	lsls	r3, r4, #2
 800c5d0:	f100 0514 	add.w	r5, r0, #20
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5f0:	d32e      	bcc.n	800c650 <quorem+0x96>
 800c5f2:	f04f 0a00 	mov.w	sl, #0
 800c5f6:	46c4      	mov	ip, r8
 800c5f8:	46ae      	mov	lr, r5
 800c5fa:	46d3      	mov	fp, sl
 800c5fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c600:	b298      	uxth	r0, r3
 800c602:	fb06 a000 	mla	r0, r6, r0, sl
 800c606:	0c02      	lsrs	r2, r0, #16
 800c608:	0c1b      	lsrs	r3, r3, #16
 800c60a:	fb06 2303 	mla	r3, r6, r3, r2
 800c60e:	f8de 2000 	ldr.w	r2, [lr]
 800c612:	b280      	uxth	r0, r0
 800c614:	b292      	uxth	r2, r2
 800c616:	1a12      	subs	r2, r2, r0
 800c618:	445a      	add	r2, fp
 800c61a:	f8de 0000 	ldr.w	r0, [lr]
 800c61e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c622:	b29b      	uxth	r3, r3
 800c624:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c628:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c62c:	b292      	uxth	r2, r2
 800c62e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c632:	45e1      	cmp	r9, ip
 800c634:	f84e 2b04 	str.w	r2, [lr], #4
 800c638:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c63c:	d2de      	bcs.n	800c5fc <quorem+0x42>
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	58eb      	ldr	r3, [r5, r3]
 800c642:	b92b      	cbnz	r3, 800c650 <quorem+0x96>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	3b04      	subs	r3, #4
 800c648:	429d      	cmp	r5, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	d32f      	bcc.n	800c6ae <quorem+0xf4>
 800c64e:	613c      	str	r4, [r7, #16]
 800c650:	4638      	mov	r0, r7
 800c652:	f001 f8c9 	bl	800d7e8 <__mcmp>
 800c656:	2800      	cmp	r0, #0
 800c658:	db25      	blt.n	800c6a6 <quorem+0xec>
 800c65a:	4629      	mov	r1, r5
 800c65c:	2000      	movs	r0, #0
 800c65e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c662:	f8d1 c000 	ldr.w	ip, [r1]
 800c666:	fa1f fe82 	uxth.w	lr, r2
 800c66a:	fa1f f38c 	uxth.w	r3, ip
 800c66e:	eba3 030e 	sub.w	r3, r3, lr
 800c672:	4403      	add	r3, r0
 800c674:	0c12      	lsrs	r2, r2, #16
 800c676:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c67a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c67e:	b29b      	uxth	r3, r3
 800c680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c684:	45c1      	cmp	r9, r8
 800c686:	f841 3b04 	str.w	r3, [r1], #4
 800c68a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c68e:	d2e6      	bcs.n	800c65e <quorem+0xa4>
 800c690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c694:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c698:	b922      	cbnz	r2, 800c6a4 <quorem+0xea>
 800c69a:	3b04      	subs	r3, #4
 800c69c:	429d      	cmp	r5, r3
 800c69e:	461a      	mov	r2, r3
 800c6a0:	d30b      	bcc.n	800c6ba <quorem+0x100>
 800c6a2:	613c      	str	r4, [r7, #16]
 800c6a4:	3601      	adds	r6, #1
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	b003      	add	sp, #12
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	6812      	ldr	r2, [r2, #0]
 800c6b0:	3b04      	subs	r3, #4
 800c6b2:	2a00      	cmp	r2, #0
 800c6b4:	d1cb      	bne.n	800c64e <quorem+0x94>
 800c6b6:	3c01      	subs	r4, #1
 800c6b8:	e7c6      	b.n	800c648 <quorem+0x8e>
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	3b04      	subs	r3, #4
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	d1ef      	bne.n	800c6a2 <quorem+0xe8>
 800c6c2:	3c01      	subs	r4, #1
 800c6c4:	e7ea      	b.n	800c69c <quorem+0xe2>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e7ee      	b.n	800c6a8 <quorem+0xee>
 800c6ca:	0000      	movs	r0, r0
 800c6cc:	0000      	movs	r0, r0
	...

0800c6d0 <_dtoa_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	69c7      	ldr	r7, [r0, #28]
 800c6d6:	b097      	sub	sp, #92	@ 0x5c
 800c6d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c6dc:	ec55 4b10 	vmov	r4, r5, d0
 800c6e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c6e2:	9107      	str	r1, [sp, #28]
 800c6e4:	4681      	mov	r9, r0
 800c6e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c6ea:	b97f      	cbnz	r7, 800c70c <_dtoa_r+0x3c>
 800c6ec:	2010      	movs	r0, #16
 800c6ee:	f7fe ff83 	bl	800b5f8 <malloc>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c6f8:	b920      	cbnz	r0, 800c704 <_dtoa_r+0x34>
 800c6fa:	4ba9      	ldr	r3, [pc, #676]	@ (800c9a0 <_dtoa_r+0x2d0>)
 800c6fc:	21ef      	movs	r1, #239	@ 0xef
 800c6fe:	48a9      	ldr	r0, [pc, #676]	@ (800c9a4 <_dtoa_r+0x2d4>)
 800c700:	f001 fd6c 	bl	800e1dc <__assert_func>
 800c704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c708:	6007      	str	r7, [r0, #0]
 800c70a:	60c7      	str	r7, [r0, #12]
 800c70c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c710:	6819      	ldr	r1, [r3, #0]
 800c712:	b159      	cbz	r1, 800c72c <_dtoa_r+0x5c>
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	604a      	str	r2, [r1, #4]
 800c718:	2301      	movs	r3, #1
 800c71a:	4093      	lsls	r3, r2
 800c71c:	608b      	str	r3, [r1, #8]
 800c71e:	4648      	mov	r0, r9
 800c720:	f000 fe30 	bl	800d384 <_Bfree>
 800c724:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]
 800c72c:	1e2b      	subs	r3, r5, #0
 800c72e:	bfb9      	ittee	lt
 800c730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c734:	9305      	strlt	r3, [sp, #20]
 800c736:	2300      	movge	r3, #0
 800c738:	6033      	strge	r3, [r6, #0]
 800c73a:	9f05      	ldr	r7, [sp, #20]
 800c73c:	4b9a      	ldr	r3, [pc, #616]	@ (800c9a8 <_dtoa_r+0x2d8>)
 800c73e:	bfbc      	itt	lt
 800c740:	2201      	movlt	r2, #1
 800c742:	6032      	strlt	r2, [r6, #0]
 800c744:	43bb      	bics	r3, r7
 800c746:	d112      	bne.n	800c76e <_dtoa_r+0x9e>
 800c748:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c74a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c754:	4323      	orrs	r3, r4
 800c756:	f000 855a 	beq.w	800d20e <_dtoa_r+0xb3e>
 800c75a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c75c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c9bc <_dtoa_r+0x2ec>
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 855c 	beq.w	800d21e <_dtoa_r+0xb4e>
 800c766:	f10a 0303 	add.w	r3, sl, #3
 800c76a:	f000 bd56 	b.w	800d21a <_dtoa_r+0xb4a>
 800c76e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c772:	2200      	movs	r2, #0
 800c774:	ec51 0b17 	vmov	r0, r1, d7
 800c778:	2300      	movs	r3, #0
 800c77a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c77e:	f7f4 f9db 	bl	8000b38 <__aeabi_dcmpeq>
 800c782:	4680      	mov	r8, r0
 800c784:	b158      	cbz	r0, 800c79e <_dtoa_r+0xce>
 800c786:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c788:	2301      	movs	r3, #1
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c78e:	b113      	cbz	r3, 800c796 <_dtoa_r+0xc6>
 800c790:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c792:	4b86      	ldr	r3, [pc, #536]	@ (800c9ac <_dtoa_r+0x2dc>)
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c9c0 <_dtoa_r+0x2f0>
 800c79a:	f000 bd40 	b.w	800d21e <_dtoa_r+0xb4e>
 800c79e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c7a2:	aa14      	add	r2, sp, #80	@ 0x50
 800c7a4:	a915      	add	r1, sp, #84	@ 0x54
 800c7a6:	4648      	mov	r0, r9
 800c7a8:	f001 f8ce 	bl	800d948 <__d2b>
 800c7ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c7b0:	9002      	str	r0, [sp, #8]
 800c7b2:	2e00      	cmp	r6, #0
 800c7b4:	d078      	beq.n	800c8a8 <_dtoa_r+0x1d8>
 800c7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c7bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4b76      	ldr	r3, [pc, #472]	@ (800c9b0 <_dtoa_r+0x2e0>)
 800c7d6:	f7f3 fd8f 	bl	80002f8 <__aeabi_dsub>
 800c7da:	a36b      	add	r3, pc, #428	@ (adr r3, 800c988 <_dtoa_r+0x2b8>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 ff42 	bl	8000668 <__aeabi_dmul>
 800c7e4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c990 <_dtoa_r+0x2c0>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fd87 	bl	80002fc <__adddf3>
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	f7f3 fece 	bl	8000594 <__aeabi_i2d>
 800c7f8:	a367      	add	r3, pc, #412	@ (adr r3, 800c998 <_dtoa_r+0x2c8>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 ff33 	bl	8000668 <__aeabi_dmul>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	f7f3 fd77 	bl	80002fc <__adddf3>
 800c80e:	4604      	mov	r4, r0
 800c810:	460d      	mov	r5, r1
 800c812:	f7f4 f9d9 	bl	8000bc8 <__aeabi_d2iz>
 800c816:	2200      	movs	r2, #0
 800c818:	4607      	mov	r7, r0
 800c81a:	2300      	movs	r3, #0
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f4 f994 	bl	8000b4c <__aeabi_dcmplt>
 800c824:	b140      	cbz	r0, 800c838 <_dtoa_r+0x168>
 800c826:	4638      	mov	r0, r7
 800c828:	f7f3 feb4 	bl	8000594 <__aeabi_i2d>
 800c82c:	4622      	mov	r2, r4
 800c82e:	462b      	mov	r3, r5
 800c830:	f7f4 f982 	bl	8000b38 <__aeabi_dcmpeq>
 800c834:	b900      	cbnz	r0, 800c838 <_dtoa_r+0x168>
 800c836:	3f01      	subs	r7, #1
 800c838:	2f16      	cmp	r7, #22
 800c83a:	d852      	bhi.n	800c8e2 <_dtoa_r+0x212>
 800c83c:	4b5d      	ldr	r3, [pc, #372]	@ (800c9b4 <_dtoa_r+0x2e4>)
 800c83e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c84a:	f7f4 f97f 	bl	8000b4c <__aeabi_dcmplt>
 800c84e:	2800      	cmp	r0, #0
 800c850:	d049      	beq.n	800c8e6 <_dtoa_r+0x216>
 800c852:	3f01      	subs	r7, #1
 800c854:	2300      	movs	r3, #0
 800c856:	9310      	str	r3, [sp, #64]	@ 0x40
 800c858:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c85a:	1b9b      	subs	r3, r3, r6
 800c85c:	1e5a      	subs	r2, r3, #1
 800c85e:	bf45      	ittet	mi
 800c860:	f1c3 0301 	rsbmi	r3, r3, #1
 800c864:	9300      	strmi	r3, [sp, #0]
 800c866:	2300      	movpl	r3, #0
 800c868:	2300      	movmi	r3, #0
 800c86a:	9206      	str	r2, [sp, #24]
 800c86c:	bf54      	ite	pl
 800c86e:	9300      	strpl	r3, [sp, #0]
 800c870:	9306      	strmi	r3, [sp, #24]
 800c872:	2f00      	cmp	r7, #0
 800c874:	db39      	blt.n	800c8ea <_dtoa_r+0x21a>
 800c876:	9b06      	ldr	r3, [sp, #24]
 800c878:	970d      	str	r7, [sp, #52]	@ 0x34
 800c87a:	443b      	add	r3, r7
 800c87c:	9306      	str	r3, [sp, #24]
 800c87e:	2300      	movs	r3, #0
 800c880:	9308      	str	r3, [sp, #32]
 800c882:	9b07      	ldr	r3, [sp, #28]
 800c884:	2b09      	cmp	r3, #9
 800c886:	d863      	bhi.n	800c950 <_dtoa_r+0x280>
 800c888:	2b05      	cmp	r3, #5
 800c88a:	bfc4      	itt	gt
 800c88c:	3b04      	subgt	r3, #4
 800c88e:	9307      	strgt	r3, [sp, #28]
 800c890:	9b07      	ldr	r3, [sp, #28]
 800c892:	f1a3 0302 	sub.w	r3, r3, #2
 800c896:	bfcc      	ite	gt
 800c898:	2400      	movgt	r4, #0
 800c89a:	2401      	movle	r4, #1
 800c89c:	2b03      	cmp	r3, #3
 800c89e:	d863      	bhi.n	800c968 <_dtoa_r+0x298>
 800c8a0:	e8df f003 	tbb	[pc, r3]
 800c8a4:	2b375452 	.word	0x2b375452
 800c8a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c8ac:	441e      	add	r6, r3
 800c8ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c8b2:	2b20      	cmp	r3, #32
 800c8b4:	bfc1      	itttt	gt
 800c8b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c8ba:	409f      	lslgt	r7, r3
 800c8bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c8c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8c4:	bfd6      	itet	le
 800c8c6:	f1c3 0320 	rsble	r3, r3, #32
 800c8ca:	ea47 0003 	orrgt.w	r0, r7, r3
 800c8ce:	fa04 f003 	lslle.w	r0, r4, r3
 800c8d2:	f7f3 fe4f 	bl	8000574 <__aeabi_ui2d>
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8dc:	3e01      	subs	r6, #1
 800c8de:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8e0:	e776      	b.n	800c7d0 <_dtoa_r+0x100>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e7b7      	b.n	800c856 <_dtoa_r+0x186>
 800c8e6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c8e8:	e7b6      	b.n	800c858 <_dtoa_r+0x188>
 800c8ea:	9b00      	ldr	r3, [sp, #0]
 800c8ec:	1bdb      	subs	r3, r3, r7
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	427b      	negs	r3, r7
 800c8f2:	9308      	str	r3, [sp, #32]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c8f8:	e7c3      	b.n	800c882 <_dtoa_r+0x1b2>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c900:	eb07 0b03 	add.w	fp, r7, r3
 800c904:	f10b 0301 	add.w	r3, fp, #1
 800c908:	2b01      	cmp	r3, #1
 800c90a:	9303      	str	r3, [sp, #12]
 800c90c:	bfb8      	it	lt
 800c90e:	2301      	movlt	r3, #1
 800c910:	e006      	b.n	800c920 <_dtoa_r+0x250>
 800c912:	2301      	movs	r3, #1
 800c914:	9309      	str	r3, [sp, #36]	@ 0x24
 800c916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c918:	2b00      	cmp	r3, #0
 800c91a:	dd28      	ble.n	800c96e <_dtoa_r+0x29e>
 800c91c:	469b      	mov	fp, r3
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c924:	2100      	movs	r1, #0
 800c926:	2204      	movs	r2, #4
 800c928:	f102 0514 	add.w	r5, r2, #20
 800c92c:	429d      	cmp	r5, r3
 800c92e:	d926      	bls.n	800c97e <_dtoa_r+0x2ae>
 800c930:	6041      	str	r1, [r0, #4]
 800c932:	4648      	mov	r0, r9
 800c934:	f000 fce6 	bl	800d304 <_Balloc>
 800c938:	4682      	mov	sl, r0
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d142      	bne.n	800c9c4 <_dtoa_r+0x2f4>
 800c93e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b8 <_dtoa_r+0x2e8>)
 800c940:	4602      	mov	r2, r0
 800c942:	f240 11af 	movw	r1, #431	@ 0x1af
 800c946:	e6da      	b.n	800c6fe <_dtoa_r+0x2e>
 800c948:	2300      	movs	r3, #0
 800c94a:	e7e3      	b.n	800c914 <_dtoa_r+0x244>
 800c94c:	2300      	movs	r3, #0
 800c94e:	e7d5      	b.n	800c8fc <_dtoa_r+0x22c>
 800c950:	2401      	movs	r4, #1
 800c952:	2300      	movs	r3, #0
 800c954:	9307      	str	r3, [sp, #28]
 800c956:	9409      	str	r4, [sp, #36]	@ 0x24
 800c958:	f04f 3bff 	mov.w	fp, #4294967295
 800c95c:	2200      	movs	r2, #0
 800c95e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c962:	2312      	movs	r3, #18
 800c964:	920c      	str	r2, [sp, #48]	@ 0x30
 800c966:	e7db      	b.n	800c920 <_dtoa_r+0x250>
 800c968:	2301      	movs	r3, #1
 800c96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96c:	e7f4      	b.n	800c958 <_dtoa_r+0x288>
 800c96e:	f04f 0b01 	mov.w	fp, #1
 800c972:	f8cd b00c 	str.w	fp, [sp, #12]
 800c976:	465b      	mov	r3, fp
 800c978:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c97c:	e7d0      	b.n	800c920 <_dtoa_r+0x250>
 800c97e:	3101      	adds	r1, #1
 800c980:	0052      	lsls	r2, r2, #1
 800c982:	e7d1      	b.n	800c928 <_dtoa_r+0x258>
 800c984:	f3af 8000 	nop.w
 800c988:	636f4361 	.word	0x636f4361
 800c98c:	3fd287a7 	.word	0x3fd287a7
 800c990:	8b60c8b3 	.word	0x8b60c8b3
 800c994:	3fc68a28 	.word	0x3fc68a28
 800c998:	509f79fb 	.word	0x509f79fb
 800c99c:	3fd34413 	.word	0x3fd34413
 800c9a0:	0800f84d 	.word	0x0800f84d
 800c9a4:	0800f864 	.word	0x0800f864
 800c9a8:	7ff00000 	.word	0x7ff00000
 800c9ac:	0800f81d 	.word	0x0800f81d
 800c9b0:	3ff80000 	.word	0x3ff80000
 800c9b4:	0800f9b8 	.word	0x0800f9b8
 800c9b8:	0800f8bc 	.word	0x0800f8bc
 800c9bc:	0800f849 	.word	0x0800f849
 800c9c0:	0800f81c 	.word	0x0800f81c
 800c9c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c9c8:	6018      	str	r0, [r3, #0]
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	2b0e      	cmp	r3, #14
 800c9ce:	f200 80a1 	bhi.w	800cb14 <_dtoa_r+0x444>
 800c9d2:	2c00      	cmp	r4, #0
 800c9d4:	f000 809e 	beq.w	800cb14 <_dtoa_r+0x444>
 800c9d8:	2f00      	cmp	r7, #0
 800c9da:	dd33      	ble.n	800ca44 <_dtoa_r+0x374>
 800c9dc:	4b9c      	ldr	r3, [pc, #624]	@ (800cc50 <_dtoa_r+0x580>)
 800c9de:	f007 020f 	and.w	r2, r7, #15
 800c9e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9e6:	ed93 7b00 	vldr	d7, [r3]
 800c9ea:	05f8      	lsls	r0, r7, #23
 800c9ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c9f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9f4:	d516      	bpl.n	800ca24 <_dtoa_r+0x354>
 800c9f6:	4b97      	ldr	r3, [pc, #604]	@ (800cc54 <_dtoa_r+0x584>)
 800c9f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca00:	f7f3 ff5c 	bl	80008bc <__aeabi_ddiv>
 800ca04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca08:	f004 040f 	and.w	r4, r4, #15
 800ca0c:	2603      	movs	r6, #3
 800ca0e:	4d91      	ldr	r5, [pc, #580]	@ (800cc54 <_dtoa_r+0x584>)
 800ca10:	b954      	cbnz	r4, 800ca28 <_dtoa_r+0x358>
 800ca12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca1a:	f7f3 ff4f 	bl	80008bc <__aeabi_ddiv>
 800ca1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca22:	e028      	b.n	800ca76 <_dtoa_r+0x3a6>
 800ca24:	2602      	movs	r6, #2
 800ca26:	e7f2      	b.n	800ca0e <_dtoa_r+0x33e>
 800ca28:	07e1      	lsls	r1, r4, #31
 800ca2a:	d508      	bpl.n	800ca3e <_dtoa_r+0x36e>
 800ca2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca34:	f7f3 fe18 	bl	8000668 <__aeabi_dmul>
 800ca38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca3c:	3601      	adds	r6, #1
 800ca3e:	1064      	asrs	r4, r4, #1
 800ca40:	3508      	adds	r5, #8
 800ca42:	e7e5      	b.n	800ca10 <_dtoa_r+0x340>
 800ca44:	f000 80af 	beq.w	800cba6 <_dtoa_r+0x4d6>
 800ca48:	427c      	negs	r4, r7
 800ca4a:	4b81      	ldr	r3, [pc, #516]	@ (800cc50 <_dtoa_r+0x580>)
 800ca4c:	4d81      	ldr	r5, [pc, #516]	@ (800cc54 <_dtoa_r+0x584>)
 800ca4e:	f004 020f 	and.w	r2, r4, #15
 800ca52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca5e:	f7f3 fe03 	bl	8000668 <__aeabi_dmul>
 800ca62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca66:	1124      	asrs	r4, r4, #4
 800ca68:	2300      	movs	r3, #0
 800ca6a:	2602      	movs	r6, #2
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	f040 808f 	bne.w	800cb90 <_dtoa_r+0x4c0>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1d3      	bne.n	800ca1e <_dtoa_r+0x34e>
 800ca76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 8094 	beq.w	800cbaa <_dtoa_r+0x4da>
 800ca82:	4b75      	ldr	r3, [pc, #468]	@ (800cc58 <_dtoa_r+0x588>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f4 f85f 	bl	8000b4c <__aeabi_dcmplt>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f000 808b 	beq.w	800cbaa <_dtoa_r+0x4da>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 8087 	beq.w	800cbaa <_dtoa_r+0x4da>
 800ca9c:	f1bb 0f00 	cmp.w	fp, #0
 800caa0:	dd34      	ble.n	800cb0c <_dtoa_r+0x43c>
 800caa2:	4620      	mov	r0, r4
 800caa4:	4b6d      	ldr	r3, [pc, #436]	@ (800cc5c <_dtoa_r+0x58c>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7f3 fddd 	bl	8000668 <__aeabi_dmul>
 800caae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cab2:	f107 38ff 	add.w	r8, r7, #4294967295
 800cab6:	3601      	adds	r6, #1
 800cab8:	465c      	mov	r4, fp
 800caba:	4630      	mov	r0, r6
 800cabc:	f7f3 fd6a 	bl	8000594 <__aeabi_i2d>
 800cac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac4:	f7f3 fdd0 	bl	8000668 <__aeabi_dmul>
 800cac8:	4b65      	ldr	r3, [pc, #404]	@ (800cc60 <_dtoa_r+0x590>)
 800caca:	2200      	movs	r2, #0
 800cacc:	f7f3 fc16 	bl	80002fc <__adddf3>
 800cad0:	4605      	mov	r5, r0
 800cad2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	d16a      	bne.n	800cbb0 <_dtoa_r+0x4e0>
 800cada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cade:	4b61      	ldr	r3, [pc, #388]	@ (800cc64 <_dtoa_r+0x594>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	f7f3 fc09 	bl	80002f8 <__aeabi_dsub>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800caee:	462a      	mov	r2, r5
 800caf0:	4633      	mov	r3, r6
 800caf2:	f7f4 f849 	bl	8000b88 <__aeabi_dcmpgt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f040 8298 	bne.w	800d02c <_dtoa_r+0x95c>
 800cafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb00:	462a      	mov	r2, r5
 800cb02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb06:	f7f4 f821 	bl	8000b4c <__aeabi_dcmplt>
 800cb0a:	bb38      	cbnz	r0, 800cb5c <_dtoa_r+0x48c>
 800cb0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cb10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f2c0 8157 	blt.w	800cdca <_dtoa_r+0x6fa>
 800cb1c:	2f0e      	cmp	r7, #14
 800cb1e:	f300 8154 	bgt.w	800cdca <_dtoa_r+0x6fa>
 800cb22:	4b4b      	ldr	r3, [pc, #300]	@ (800cc50 <_dtoa_r+0x580>)
 800cb24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb28:	ed93 7b00 	vldr	d7, [r3]
 800cb2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	ed8d 7b00 	vstr	d7, [sp]
 800cb34:	f280 80e5 	bge.w	800cd02 <_dtoa_r+0x632>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f300 80e1 	bgt.w	800cd02 <_dtoa_r+0x632>
 800cb40:	d10c      	bne.n	800cb5c <_dtoa_r+0x48c>
 800cb42:	4b48      	ldr	r3, [pc, #288]	@ (800cc64 <_dtoa_r+0x594>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	ec51 0b17 	vmov	r0, r1, d7
 800cb4a:	f7f3 fd8d 	bl	8000668 <__aeabi_dmul>
 800cb4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb52:	f7f4 f80f 	bl	8000b74 <__aeabi_dcmpge>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f000 8266 	beq.w	800d028 <_dtoa_r+0x958>
 800cb5c:	2400      	movs	r4, #0
 800cb5e:	4625      	mov	r5, r4
 800cb60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb62:	4656      	mov	r6, sl
 800cb64:	ea6f 0803 	mvn.w	r8, r3
 800cb68:	2700      	movs	r7, #0
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	4648      	mov	r0, r9
 800cb6e:	f000 fc09 	bl	800d384 <_Bfree>
 800cb72:	2d00      	cmp	r5, #0
 800cb74:	f000 80bd 	beq.w	800ccf2 <_dtoa_r+0x622>
 800cb78:	b12f      	cbz	r7, 800cb86 <_dtoa_r+0x4b6>
 800cb7a:	42af      	cmp	r7, r5
 800cb7c:	d003      	beq.n	800cb86 <_dtoa_r+0x4b6>
 800cb7e:	4639      	mov	r1, r7
 800cb80:	4648      	mov	r0, r9
 800cb82:	f000 fbff 	bl	800d384 <_Bfree>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4648      	mov	r0, r9
 800cb8a:	f000 fbfb 	bl	800d384 <_Bfree>
 800cb8e:	e0b0      	b.n	800ccf2 <_dtoa_r+0x622>
 800cb90:	07e2      	lsls	r2, r4, #31
 800cb92:	d505      	bpl.n	800cba0 <_dtoa_r+0x4d0>
 800cb94:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb98:	f7f3 fd66 	bl	8000668 <__aeabi_dmul>
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	2301      	movs	r3, #1
 800cba0:	1064      	asrs	r4, r4, #1
 800cba2:	3508      	adds	r5, #8
 800cba4:	e762      	b.n	800ca6c <_dtoa_r+0x39c>
 800cba6:	2602      	movs	r6, #2
 800cba8:	e765      	b.n	800ca76 <_dtoa_r+0x3a6>
 800cbaa:	9c03      	ldr	r4, [sp, #12]
 800cbac:	46b8      	mov	r8, r7
 800cbae:	e784      	b.n	800caba <_dtoa_r+0x3ea>
 800cbb0:	4b27      	ldr	r3, [pc, #156]	@ (800cc50 <_dtoa_r+0x580>)
 800cbb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbbc:	4454      	add	r4, sl
 800cbbe:	2900      	cmp	r1, #0
 800cbc0:	d054      	beq.n	800cc6c <_dtoa_r+0x59c>
 800cbc2:	4929      	ldr	r1, [pc, #164]	@ (800cc68 <_dtoa_r+0x598>)
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	f7f3 fe79 	bl	80008bc <__aeabi_ddiv>
 800cbca:	4633      	mov	r3, r6
 800cbcc:	462a      	mov	r2, r5
 800cbce:	f7f3 fb93 	bl	80002f8 <__aeabi_dsub>
 800cbd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cbd6:	4656      	mov	r6, sl
 800cbd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbdc:	f7f3 fff4 	bl	8000bc8 <__aeabi_d2iz>
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	f7f3 fcd7 	bl	8000594 <__aeabi_i2d>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbee:	f7f3 fb83 	bl	80002f8 <__aeabi_dsub>
 800cbf2:	3530      	adds	r5, #48	@ 0x30
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbfc:	f806 5b01 	strb.w	r5, [r6], #1
 800cc00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc04:	f7f3 ffa2 	bl	8000b4c <__aeabi_dcmplt>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d172      	bne.n	800ccf2 <_dtoa_r+0x622>
 800cc0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc10:	4911      	ldr	r1, [pc, #68]	@ (800cc58 <_dtoa_r+0x588>)
 800cc12:	2000      	movs	r0, #0
 800cc14:	f7f3 fb70 	bl	80002f8 <__aeabi_dsub>
 800cc18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc1c:	f7f3 ff96 	bl	8000b4c <__aeabi_dcmplt>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	f040 80b4 	bne.w	800cd8e <_dtoa_r+0x6be>
 800cc26:	42a6      	cmp	r6, r4
 800cc28:	f43f af70 	beq.w	800cb0c <_dtoa_r+0x43c>
 800cc2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc30:	4b0a      	ldr	r3, [pc, #40]	@ (800cc5c <_dtoa_r+0x58c>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	f7f3 fd18 	bl	8000668 <__aeabi_dmul>
 800cc38:	4b08      	ldr	r3, [pc, #32]	@ (800cc5c <_dtoa_r+0x58c>)
 800cc3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc3e:	2200      	movs	r2, #0
 800cc40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc44:	f7f3 fd10 	bl	8000668 <__aeabi_dmul>
 800cc48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc4c:	e7c4      	b.n	800cbd8 <_dtoa_r+0x508>
 800cc4e:	bf00      	nop
 800cc50:	0800f9b8 	.word	0x0800f9b8
 800cc54:	0800f990 	.word	0x0800f990
 800cc58:	3ff00000 	.word	0x3ff00000
 800cc5c:	40240000 	.word	0x40240000
 800cc60:	401c0000 	.word	0x401c0000
 800cc64:	40140000 	.word	0x40140000
 800cc68:	3fe00000 	.word	0x3fe00000
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7f3 fcfa 	bl	8000668 <__aeabi_dmul>
 800cc74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc78:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc7a:	4656      	mov	r6, sl
 800cc7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc80:	f7f3 ffa2 	bl	8000bc8 <__aeabi_d2iz>
 800cc84:	4605      	mov	r5, r0
 800cc86:	f7f3 fc85 	bl	8000594 <__aeabi_i2d>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc92:	f7f3 fb31 	bl	80002f8 <__aeabi_dsub>
 800cc96:	3530      	adds	r5, #48	@ 0x30
 800cc98:	f806 5b01 	strb.w	r5, [r6], #1
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	42a6      	cmp	r6, r4
 800cca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cca6:	f04f 0200 	mov.w	r2, #0
 800ccaa:	d124      	bne.n	800ccf6 <_dtoa_r+0x626>
 800ccac:	4baf      	ldr	r3, [pc, #700]	@ (800cf6c <_dtoa_r+0x89c>)
 800ccae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ccb2:	f7f3 fb23 	bl	80002fc <__adddf3>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccbe:	f7f3 ff63 	bl	8000b88 <__aeabi_dcmpgt>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d163      	bne.n	800cd8e <_dtoa_r+0x6be>
 800ccc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ccca:	49a8      	ldr	r1, [pc, #672]	@ (800cf6c <_dtoa_r+0x89c>)
 800cccc:	2000      	movs	r0, #0
 800ccce:	f7f3 fb13 	bl	80002f8 <__aeabi_dsub>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccda:	f7f3 ff37 	bl	8000b4c <__aeabi_dcmplt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f43f af14 	beq.w	800cb0c <_dtoa_r+0x43c>
 800cce4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cce6:	1e73      	subs	r3, r6, #1
 800cce8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccee:	2b30      	cmp	r3, #48	@ 0x30
 800ccf0:	d0f8      	beq.n	800cce4 <_dtoa_r+0x614>
 800ccf2:	4647      	mov	r7, r8
 800ccf4:	e03b      	b.n	800cd6e <_dtoa_r+0x69e>
 800ccf6:	4b9e      	ldr	r3, [pc, #632]	@ (800cf70 <_dtoa_r+0x8a0>)
 800ccf8:	f7f3 fcb6 	bl	8000668 <__aeabi_dmul>
 800ccfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd00:	e7bc      	b.n	800cc7c <_dtoa_r+0x5ac>
 800cd02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cd06:	4656      	mov	r6, sl
 800cd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	f7f3 fdd4 	bl	80008bc <__aeabi_ddiv>
 800cd14:	f7f3 ff58 	bl	8000bc8 <__aeabi_d2iz>
 800cd18:	4680      	mov	r8, r0
 800cd1a:	f7f3 fc3b 	bl	8000594 <__aeabi_i2d>
 800cd1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd22:	f7f3 fca1 	bl	8000668 <__aeabi_dmul>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd32:	f7f3 fae1 	bl	80002f8 <__aeabi_dsub>
 800cd36:	f806 4b01 	strb.w	r4, [r6], #1
 800cd3a:	9d03      	ldr	r5, [sp, #12]
 800cd3c:	eba6 040a 	sub.w	r4, r6, sl
 800cd40:	42a5      	cmp	r5, r4
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	d133      	bne.n	800cdb0 <_dtoa_r+0x6e0>
 800cd48:	f7f3 fad8 	bl	80002fc <__adddf3>
 800cd4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd50:	4604      	mov	r4, r0
 800cd52:	460d      	mov	r5, r1
 800cd54:	f7f3 ff18 	bl	8000b88 <__aeabi_dcmpgt>
 800cd58:	b9c0      	cbnz	r0, 800cd8c <_dtoa_r+0x6bc>
 800cd5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	4629      	mov	r1, r5
 800cd62:	f7f3 fee9 	bl	8000b38 <__aeabi_dcmpeq>
 800cd66:	b110      	cbz	r0, 800cd6e <_dtoa_r+0x69e>
 800cd68:	f018 0f01 	tst.w	r8, #1
 800cd6c:	d10e      	bne.n	800cd8c <_dtoa_r+0x6bc>
 800cd6e:	9902      	ldr	r1, [sp, #8]
 800cd70:	4648      	mov	r0, r9
 800cd72:	f000 fb07 	bl	800d384 <_Bfree>
 800cd76:	2300      	movs	r3, #0
 800cd78:	7033      	strb	r3, [r6, #0]
 800cd7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd7c:	3701      	adds	r7, #1
 800cd7e:	601f      	str	r7, [r3, #0]
 800cd80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 824b 	beq.w	800d21e <_dtoa_r+0xb4e>
 800cd88:	601e      	str	r6, [r3, #0]
 800cd8a:	e248      	b.n	800d21e <_dtoa_r+0xb4e>
 800cd8c:	46b8      	mov	r8, r7
 800cd8e:	4633      	mov	r3, r6
 800cd90:	461e      	mov	r6, r3
 800cd92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd96:	2a39      	cmp	r2, #57	@ 0x39
 800cd98:	d106      	bne.n	800cda8 <_dtoa_r+0x6d8>
 800cd9a:	459a      	cmp	sl, r3
 800cd9c:	d1f8      	bne.n	800cd90 <_dtoa_r+0x6c0>
 800cd9e:	2230      	movs	r2, #48	@ 0x30
 800cda0:	f108 0801 	add.w	r8, r8, #1
 800cda4:	f88a 2000 	strb.w	r2, [sl]
 800cda8:	781a      	ldrb	r2, [r3, #0]
 800cdaa:	3201      	adds	r2, #1
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	e7a0      	b.n	800ccf2 <_dtoa_r+0x622>
 800cdb0:	4b6f      	ldr	r3, [pc, #444]	@ (800cf70 <_dtoa_r+0x8a0>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f7f3 fc58 	bl	8000668 <__aeabi_dmul>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2300      	movs	r3, #0
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	460d      	mov	r5, r1
 800cdc0:	f7f3 feba 	bl	8000b38 <__aeabi_dcmpeq>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d09f      	beq.n	800cd08 <_dtoa_r+0x638>
 800cdc8:	e7d1      	b.n	800cd6e <_dtoa_r+0x69e>
 800cdca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	f000 80ea 	beq.w	800cfa6 <_dtoa_r+0x8d6>
 800cdd2:	9a07      	ldr	r2, [sp, #28]
 800cdd4:	2a01      	cmp	r2, #1
 800cdd6:	f300 80cd 	bgt.w	800cf74 <_dtoa_r+0x8a4>
 800cdda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	f000 80c1 	beq.w	800cf64 <_dtoa_r+0x894>
 800cde2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cde6:	9c08      	ldr	r4, [sp, #32]
 800cde8:	9e00      	ldr	r6, [sp, #0]
 800cdea:	9a00      	ldr	r2, [sp, #0]
 800cdec:	441a      	add	r2, r3
 800cdee:	9200      	str	r2, [sp, #0]
 800cdf0:	9a06      	ldr	r2, [sp, #24]
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	441a      	add	r2, r3
 800cdf6:	4648      	mov	r0, r9
 800cdf8:	9206      	str	r2, [sp, #24]
 800cdfa:	f000 fb77 	bl	800d4ec <__i2b>
 800cdfe:	4605      	mov	r5, r0
 800ce00:	b166      	cbz	r6, 800ce1c <_dtoa_r+0x74c>
 800ce02:	9b06      	ldr	r3, [sp, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	dd09      	ble.n	800ce1c <_dtoa_r+0x74c>
 800ce08:	42b3      	cmp	r3, r6
 800ce0a:	9a00      	ldr	r2, [sp, #0]
 800ce0c:	bfa8      	it	ge
 800ce0e:	4633      	movge	r3, r6
 800ce10:	1ad2      	subs	r2, r2, r3
 800ce12:	9200      	str	r2, [sp, #0]
 800ce14:	9a06      	ldr	r2, [sp, #24]
 800ce16:	1af6      	subs	r6, r6, r3
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	9306      	str	r3, [sp, #24]
 800ce1c:	9b08      	ldr	r3, [sp, #32]
 800ce1e:	b30b      	cbz	r3, 800ce64 <_dtoa_r+0x794>
 800ce20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 80c6 	beq.w	800cfb4 <_dtoa_r+0x8e4>
 800ce28:	2c00      	cmp	r4, #0
 800ce2a:	f000 80c0 	beq.w	800cfae <_dtoa_r+0x8de>
 800ce2e:	4629      	mov	r1, r5
 800ce30:	4622      	mov	r2, r4
 800ce32:	4648      	mov	r0, r9
 800ce34:	f000 fc12 	bl	800d65c <__pow5mult>
 800ce38:	9a02      	ldr	r2, [sp, #8]
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	4648      	mov	r0, r9
 800ce40:	f000 fb6a 	bl	800d518 <__multiply>
 800ce44:	9902      	ldr	r1, [sp, #8]
 800ce46:	4680      	mov	r8, r0
 800ce48:	4648      	mov	r0, r9
 800ce4a:	f000 fa9b 	bl	800d384 <_Bfree>
 800ce4e:	9b08      	ldr	r3, [sp, #32]
 800ce50:	1b1b      	subs	r3, r3, r4
 800ce52:	9308      	str	r3, [sp, #32]
 800ce54:	f000 80b1 	beq.w	800cfba <_dtoa_r+0x8ea>
 800ce58:	9a08      	ldr	r2, [sp, #32]
 800ce5a:	4641      	mov	r1, r8
 800ce5c:	4648      	mov	r0, r9
 800ce5e:	f000 fbfd 	bl	800d65c <__pow5mult>
 800ce62:	9002      	str	r0, [sp, #8]
 800ce64:	2101      	movs	r1, #1
 800ce66:	4648      	mov	r0, r9
 800ce68:	f000 fb40 	bl	800d4ec <__i2b>
 800ce6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce6e:	4604      	mov	r4, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 81d8 	beq.w	800d226 <_dtoa_r+0xb56>
 800ce76:	461a      	mov	r2, r3
 800ce78:	4601      	mov	r1, r0
 800ce7a:	4648      	mov	r0, r9
 800ce7c:	f000 fbee 	bl	800d65c <__pow5mult>
 800ce80:	9b07      	ldr	r3, [sp, #28]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	4604      	mov	r4, r0
 800ce86:	f300 809f 	bgt.w	800cfc8 <_dtoa_r+0x8f8>
 800ce8a:	9b04      	ldr	r3, [sp, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f040 8097 	bne.w	800cfc0 <_dtoa_r+0x8f0>
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f040 8093 	bne.w	800cfc4 <_dtoa_r+0x8f4>
 800ce9e:	9b05      	ldr	r3, [sp, #20]
 800cea0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cea4:	0d1b      	lsrs	r3, r3, #20
 800cea6:	051b      	lsls	r3, r3, #20
 800cea8:	b133      	cbz	r3, 800ceb8 <_dtoa_r+0x7e8>
 800ceaa:	9b00      	ldr	r3, [sp, #0]
 800ceac:	3301      	adds	r3, #1
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	9b06      	ldr	r3, [sp, #24]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	9306      	str	r3, [sp, #24]
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	9308      	str	r3, [sp, #32]
 800ceba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 81b8 	beq.w	800d232 <_dtoa_r+0xb62>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cec8:	6918      	ldr	r0, [r3, #16]
 800ceca:	f000 fac3 	bl	800d454 <__hi0bits>
 800cece:	f1c0 0020 	rsb	r0, r0, #32
 800ced2:	9b06      	ldr	r3, [sp, #24]
 800ced4:	4418      	add	r0, r3
 800ced6:	f010 001f 	ands.w	r0, r0, #31
 800ceda:	f000 8082 	beq.w	800cfe2 <_dtoa_r+0x912>
 800cede:	f1c0 0320 	rsb	r3, r0, #32
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	dd73      	ble.n	800cfce <_dtoa_r+0x8fe>
 800cee6:	9b00      	ldr	r3, [sp, #0]
 800cee8:	f1c0 001c 	rsb	r0, r0, #28
 800ceec:	4403      	add	r3, r0
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	9b06      	ldr	r3, [sp, #24]
 800cef2:	4403      	add	r3, r0
 800cef4:	4406      	add	r6, r0
 800cef6:	9306      	str	r3, [sp, #24]
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dd05      	ble.n	800cf0a <_dtoa_r+0x83a>
 800cefe:	9902      	ldr	r1, [sp, #8]
 800cf00:	461a      	mov	r2, r3
 800cf02:	4648      	mov	r0, r9
 800cf04:	f000 fc04 	bl	800d710 <__lshift>
 800cf08:	9002      	str	r0, [sp, #8]
 800cf0a:	9b06      	ldr	r3, [sp, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd05      	ble.n	800cf1c <_dtoa_r+0x84c>
 800cf10:	4621      	mov	r1, r4
 800cf12:	461a      	mov	r2, r3
 800cf14:	4648      	mov	r0, r9
 800cf16:	f000 fbfb 	bl	800d710 <__lshift>
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d061      	beq.n	800cfe6 <_dtoa_r+0x916>
 800cf22:	9802      	ldr	r0, [sp, #8]
 800cf24:	4621      	mov	r1, r4
 800cf26:	f000 fc5f 	bl	800d7e8 <__mcmp>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	da5b      	bge.n	800cfe6 <_dtoa_r+0x916>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9902      	ldr	r1, [sp, #8]
 800cf32:	220a      	movs	r2, #10
 800cf34:	4648      	mov	r0, r9
 800cf36:	f000 fa47 	bl	800d3c8 <__multadd>
 800cf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3c:	9002      	str	r0, [sp, #8]
 800cf3e:	f107 38ff 	add.w	r8, r7, #4294967295
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8177 	beq.w	800d236 <_dtoa_r+0xb66>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	220a      	movs	r2, #10
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f000 fa3a 	bl	800d3c8 <__multadd>
 800cf54:	f1bb 0f00 	cmp.w	fp, #0
 800cf58:	4605      	mov	r5, r0
 800cf5a:	dc6f      	bgt.n	800d03c <_dtoa_r+0x96c>
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	dc49      	bgt.n	800cff6 <_dtoa_r+0x926>
 800cf62:	e06b      	b.n	800d03c <_dtoa_r+0x96c>
 800cf64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf6a:	e73c      	b.n	800cde6 <_dtoa_r+0x716>
 800cf6c:	3fe00000 	.word	0x3fe00000
 800cf70:	40240000 	.word	0x40240000
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	1e5c      	subs	r4, r3, #1
 800cf78:	9b08      	ldr	r3, [sp, #32]
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	db09      	blt.n	800cf92 <_dtoa_r+0x8c2>
 800cf7e:	1b1c      	subs	r4, r3, r4
 800cf80:	9b03      	ldr	r3, [sp, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f6bf af30 	bge.w	800cde8 <_dtoa_r+0x718>
 800cf88:	9b00      	ldr	r3, [sp, #0]
 800cf8a:	9a03      	ldr	r2, [sp, #12]
 800cf8c:	1a9e      	subs	r6, r3, r2
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e72b      	b.n	800cdea <_dtoa_r+0x71a>
 800cf92:	9b08      	ldr	r3, [sp, #32]
 800cf94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf96:	9408      	str	r4, [sp, #32]
 800cf98:	1ae3      	subs	r3, r4, r3
 800cf9a:	441a      	add	r2, r3
 800cf9c:	9e00      	ldr	r6, [sp, #0]
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	920d      	str	r2, [sp, #52]	@ 0x34
 800cfa2:	2400      	movs	r4, #0
 800cfa4:	e721      	b.n	800cdea <_dtoa_r+0x71a>
 800cfa6:	9c08      	ldr	r4, [sp, #32]
 800cfa8:	9e00      	ldr	r6, [sp, #0]
 800cfaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cfac:	e728      	b.n	800ce00 <_dtoa_r+0x730>
 800cfae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cfb2:	e751      	b.n	800ce58 <_dtoa_r+0x788>
 800cfb4:	9a08      	ldr	r2, [sp, #32]
 800cfb6:	9902      	ldr	r1, [sp, #8]
 800cfb8:	e750      	b.n	800ce5c <_dtoa_r+0x78c>
 800cfba:	f8cd 8008 	str.w	r8, [sp, #8]
 800cfbe:	e751      	b.n	800ce64 <_dtoa_r+0x794>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	e779      	b.n	800ceb8 <_dtoa_r+0x7e8>
 800cfc4:	9b04      	ldr	r3, [sp, #16]
 800cfc6:	e777      	b.n	800ceb8 <_dtoa_r+0x7e8>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	9308      	str	r3, [sp, #32]
 800cfcc:	e779      	b.n	800cec2 <_dtoa_r+0x7f2>
 800cfce:	d093      	beq.n	800cef8 <_dtoa_r+0x828>
 800cfd0:	9a00      	ldr	r2, [sp, #0]
 800cfd2:	331c      	adds	r3, #28
 800cfd4:	441a      	add	r2, r3
 800cfd6:	9200      	str	r2, [sp, #0]
 800cfd8:	9a06      	ldr	r2, [sp, #24]
 800cfda:	441a      	add	r2, r3
 800cfdc:	441e      	add	r6, r3
 800cfde:	9206      	str	r2, [sp, #24]
 800cfe0:	e78a      	b.n	800cef8 <_dtoa_r+0x828>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	e7f4      	b.n	800cfd0 <_dtoa_r+0x900>
 800cfe6:	9b03      	ldr	r3, [sp, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	46b8      	mov	r8, r7
 800cfec:	dc20      	bgt.n	800d030 <_dtoa_r+0x960>
 800cfee:	469b      	mov	fp, r3
 800cff0:	9b07      	ldr	r3, [sp, #28]
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	dd1e      	ble.n	800d034 <_dtoa_r+0x964>
 800cff6:	f1bb 0f00 	cmp.w	fp, #0
 800cffa:	f47f adb1 	bne.w	800cb60 <_dtoa_r+0x490>
 800cffe:	4621      	mov	r1, r4
 800d000:	465b      	mov	r3, fp
 800d002:	2205      	movs	r2, #5
 800d004:	4648      	mov	r0, r9
 800d006:	f000 f9df 	bl	800d3c8 <__multadd>
 800d00a:	4601      	mov	r1, r0
 800d00c:	4604      	mov	r4, r0
 800d00e:	9802      	ldr	r0, [sp, #8]
 800d010:	f000 fbea 	bl	800d7e8 <__mcmp>
 800d014:	2800      	cmp	r0, #0
 800d016:	f77f ada3 	ble.w	800cb60 <_dtoa_r+0x490>
 800d01a:	4656      	mov	r6, sl
 800d01c:	2331      	movs	r3, #49	@ 0x31
 800d01e:	f806 3b01 	strb.w	r3, [r6], #1
 800d022:	f108 0801 	add.w	r8, r8, #1
 800d026:	e59f      	b.n	800cb68 <_dtoa_r+0x498>
 800d028:	9c03      	ldr	r4, [sp, #12]
 800d02a:	46b8      	mov	r8, r7
 800d02c:	4625      	mov	r5, r4
 800d02e:	e7f4      	b.n	800d01a <_dtoa_r+0x94a>
 800d030:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	f000 8101 	beq.w	800d23e <_dtoa_r+0xb6e>
 800d03c:	2e00      	cmp	r6, #0
 800d03e:	dd05      	ble.n	800d04c <_dtoa_r+0x97c>
 800d040:	4629      	mov	r1, r5
 800d042:	4632      	mov	r2, r6
 800d044:	4648      	mov	r0, r9
 800d046:	f000 fb63 	bl	800d710 <__lshift>
 800d04a:	4605      	mov	r5, r0
 800d04c:	9b08      	ldr	r3, [sp, #32]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d05c      	beq.n	800d10c <_dtoa_r+0xa3c>
 800d052:	6869      	ldr	r1, [r5, #4]
 800d054:	4648      	mov	r0, r9
 800d056:	f000 f955 	bl	800d304 <_Balloc>
 800d05a:	4606      	mov	r6, r0
 800d05c:	b928      	cbnz	r0, 800d06a <_dtoa_r+0x99a>
 800d05e:	4b82      	ldr	r3, [pc, #520]	@ (800d268 <_dtoa_r+0xb98>)
 800d060:	4602      	mov	r2, r0
 800d062:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d066:	f7ff bb4a 	b.w	800c6fe <_dtoa_r+0x2e>
 800d06a:	692a      	ldr	r2, [r5, #16]
 800d06c:	3202      	adds	r2, #2
 800d06e:	0092      	lsls	r2, r2, #2
 800d070:	f105 010c 	add.w	r1, r5, #12
 800d074:	300c      	adds	r0, #12
 800d076:	f001 f8a3 	bl	800e1c0 <memcpy>
 800d07a:	2201      	movs	r2, #1
 800d07c:	4631      	mov	r1, r6
 800d07e:	4648      	mov	r0, r9
 800d080:	f000 fb46 	bl	800d710 <__lshift>
 800d084:	f10a 0301 	add.w	r3, sl, #1
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	eb0a 030b 	add.w	r3, sl, fp
 800d08e:	9308      	str	r3, [sp, #32]
 800d090:	9b04      	ldr	r3, [sp, #16]
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	462f      	mov	r7, r5
 800d098:	9306      	str	r3, [sp, #24]
 800d09a:	4605      	mov	r5, r0
 800d09c:	9b00      	ldr	r3, [sp, #0]
 800d09e:	9802      	ldr	r0, [sp, #8]
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d0a6:	f7ff fa88 	bl	800c5ba <quorem>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	3330      	adds	r3, #48	@ 0x30
 800d0ae:	9003      	str	r0, [sp, #12]
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	9802      	ldr	r0, [sp, #8]
 800d0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0b6:	f000 fb97 	bl	800d7e8 <__mcmp>
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	9004      	str	r0, [sp, #16]
 800d0be:	4621      	mov	r1, r4
 800d0c0:	4648      	mov	r0, r9
 800d0c2:	f000 fbad 	bl	800d820 <__mdiff>
 800d0c6:	68c2      	ldr	r2, [r0, #12]
 800d0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	bb02      	cbnz	r2, 800d110 <_dtoa_r+0xa40>
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	9802      	ldr	r0, [sp, #8]
 800d0d2:	f000 fb89 	bl	800d7e8 <__mcmp>
 800d0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d8:	4602      	mov	r2, r0
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4648      	mov	r0, r9
 800d0de:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0e2:	f000 f94f 	bl	800d384 <_Bfree>
 800d0e6:	9b07      	ldr	r3, [sp, #28]
 800d0e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0ea:	9e00      	ldr	r6, [sp, #0]
 800d0ec:	ea42 0103 	orr.w	r1, r2, r3
 800d0f0:	9b06      	ldr	r3, [sp, #24]
 800d0f2:	4319      	orrs	r1, r3
 800d0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0f6:	d10d      	bne.n	800d114 <_dtoa_r+0xa44>
 800d0f8:	2b39      	cmp	r3, #57	@ 0x39
 800d0fa:	d027      	beq.n	800d14c <_dtoa_r+0xa7c>
 800d0fc:	9a04      	ldr	r2, [sp, #16]
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	dd01      	ble.n	800d106 <_dtoa_r+0xa36>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	3331      	adds	r3, #49	@ 0x31
 800d106:	f88b 3000 	strb.w	r3, [fp]
 800d10a:	e52e      	b.n	800cb6a <_dtoa_r+0x49a>
 800d10c:	4628      	mov	r0, r5
 800d10e:	e7b9      	b.n	800d084 <_dtoa_r+0x9b4>
 800d110:	2201      	movs	r2, #1
 800d112:	e7e2      	b.n	800d0da <_dtoa_r+0xa0a>
 800d114:	9904      	ldr	r1, [sp, #16]
 800d116:	2900      	cmp	r1, #0
 800d118:	db04      	blt.n	800d124 <_dtoa_r+0xa54>
 800d11a:	9807      	ldr	r0, [sp, #28]
 800d11c:	4301      	orrs	r1, r0
 800d11e:	9806      	ldr	r0, [sp, #24]
 800d120:	4301      	orrs	r1, r0
 800d122:	d120      	bne.n	800d166 <_dtoa_r+0xa96>
 800d124:	2a00      	cmp	r2, #0
 800d126:	ddee      	ble.n	800d106 <_dtoa_r+0xa36>
 800d128:	9902      	ldr	r1, [sp, #8]
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	2201      	movs	r2, #1
 800d12e:	4648      	mov	r0, r9
 800d130:	f000 faee 	bl	800d710 <__lshift>
 800d134:	4621      	mov	r1, r4
 800d136:	9002      	str	r0, [sp, #8]
 800d138:	f000 fb56 	bl	800d7e8 <__mcmp>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	9b00      	ldr	r3, [sp, #0]
 800d140:	dc02      	bgt.n	800d148 <_dtoa_r+0xa78>
 800d142:	d1e0      	bne.n	800d106 <_dtoa_r+0xa36>
 800d144:	07da      	lsls	r2, r3, #31
 800d146:	d5de      	bpl.n	800d106 <_dtoa_r+0xa36>
 800d148:	2b39      	cmp	r3, #57	@ 0x39
 800d14a:	d1da      	bne.n	800d102 <_dtoa_r+0xa32>
 800d14c:	2339      	movs	r3, #57	@ 0x39
 800d14e:	f88b 3000 	strb.w	r3, [fp]
 800d152:	4633      	mov	r3, r6
 800d154:	461e      	mov	r6, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d15c:	2a39      	cmp	r2, #57	@ 0x39
 800d15e:	d04e      	beq.n	800d1fe <_dtoa_r+0xb2e>
 800d160:	3201      	adds	r2, #1
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	e501      	b.n	800cb6a <_dtoa_r+0x49a>
 800d166:	2a00      	cmp	r2, #0
 800d168:	dd03      	ble.n	800d172 <_dtoa_r+0xaa2>
 800d16a:	2b39      	cmp	r3, #57	@ 0x39
 800d16c:	d0ee      	beq.n	800d14c <_dtoa_r+0xa7c>
 800d16e:	3301      	adds	r3, #1
 800d170:	e7c9      	b.n	800d106 <_dtoa_r+0xa36>
 800d172:	9a00      	ldr	r2, [sp, #0]
 800d174:	9908      	ldr	r1, [sp, #32]
 800d176:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d17a:	428a      	cmp	r2, r1
 800d17c:	d028      	beq.n	800d1d0 <_dtoa_r+0xb00>
 800d17e:	9902      	ldr	r1, [sp, #8]
 800d180:	2300      	movs	r3, #0
 800d182:	220a      	movs	r2, #10
 800d184:	4648      	mov	r0, r9
 800d186:	f000 f91f 	bl	800d3c8 <__multadd>
 800d18a:	42af      	cmp	r7, r5
 800d18c:	9002      	str	r0, [sp, #8]
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	f04f 020a 	mov.w	r2, #10
 800d196:	4639      	mov	r1, r7
 800d198:	4648      	mov	r0, r9
 800d19a:	d107      	bne.n	800d1ac <_dtoa_r+0xadc>
 800d19c:	f000 f914 	bl	800d3c8 <__multadd>
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	e777      	b.n	800d09c <_dtoa_r+0x9cc>
 800d1ac:	f000 f90c 	bl	800d3c8 <__multadd>
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4607      	mov	r7, r0
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	220a      	movs	r2, #10
 800d1b8:	4648      	mov	r0, r9
 800d1ba:	f000 f905 	bl	800d3c8 <__multadd>
 800d1be:	4605      	mov	r5, r0
 800d1c0:	e7f0      	b.n	800d1a4 <_dtoa_r+0xad4>
 800d1c2:	f1bb 0f00 	cmp.w	fp, #0
 800d1c6:	bfcc      	ite	gt
 800d1c8:	465e      	movgt	r6, fp
 800d1ca:	2601      	movle	r6, #1
 800d1cc:	4456      	add	r6, sl
 800d1ce:	2700      	movs	r7, #0
 800d1d0:	9902      	ldr	r1, [sp, #8]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	4648      	mov	r0, r9
 800d1d8:	f000 fa9a 	bl	800d710 <__lshift>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	9002      	str	r0, [sp, #8]
 800d1e0:	f000 fb02 	bl	800d7e8 <__mcmp>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	dcb4      	bgt.n	800d152 <_dtoa_r+0xa82>
 800d1e8:	d102      	bne.n	800d1f0 <_dtoa_r+0xb20>
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	07db      	lsls	r3, r3, #31
 800d1ee:	d4b0      	bmi.n	800d152 <_dtoa_r+0xa82>
 800d1f0:	4633      	mov	r3, r6
 800d1f2:	461e      	mov	r6, r3
 800d1f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f8:	2a30      	cmp	r2, #48	@ 0x30
 800d1fa:	d0fa      	beq.n	800d1f2 <_dtoa_r+0xb22>
 800d1fc:	e4b5      	b.n	800cb6a <_dtoa_r+0x49a>
 800d1fe:	459a      	cmp	sl, r3
 800d200:	d1a8      	bne.n	800d154 <_dtoa_r+0xa84>
 800d202:	2331      	movs	r3, #49	@ 0x31
 800d204:	f108 0801 	add.w	r8, r8, #1
 800d208:	f88a 3000 	strb.w	r3, [sl]
 800d20c:	e4ad      	b.n	800cb6a <_dtoa_r+0x49a>
 800d20e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d210:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d26c <_dtoa_r+0xb9c>
 800d214:	b11b      	cbz	r3, 800d21e <_dtoa_r+0xb4e>
 800d216:	f10a 0308 	add.w	r3, sl, #8
 800d21a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	4650      	mov	r0, sl
 800d220:	b017      	add	sp, #92	@ 0x5c
 800d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d226:	9b07      	ldr	r3, [sp, #28]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	f77f ae2e 	ble.w	800ce8a <_dtoa_r+0x7ba>
 800d22e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d230:	9308      	str	r3, [sp, #32]
 800d232:	2001      	movs	r0, #1
 800d234:	e64d      	b.n	800ced2 <_dtoa_r+0x802>
 800d236:	f1bb 0f00 	cmp.w	fp, #0
 800d23a:	f77f aed9 	ble.w	800cff0 <_dtoa_r+0x920>
 800d23e:	4656      	mov	r6, sl
 800d240:	9802      	ldr	r0, [sp, #8]
 800d242:	4621      	mov	r1, r4
 800d244:	f7ff f9b9 	bl	800c5ba <quorem>
 800d248:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d24c:	f806 3b01 	strb.w	r3, [r6], #1
 800d250:	eba6 020a 	sub.w	r2, r6, sl
 800d254:	4593      	cmp	fp, r2
 800d256:	ddb4      	ble.n	800d1c2 <_dtoa_r+0xaf2>
 800d258:	9902      	ldr	r1, [sp, #8]
 800d25a:	2300      	movs	r3, #0
 800d25c:	220a      	movs	r2, #10
 800d25e:	4648      	mov	r0, r9
 800d260:	f000 f8b2 	bl	800d3c8 <__multadd>
 800d264:	9002      	str	r0, [sp, #8]
 800d266:	e7eb      	b.n	800d240 <_dtoa_r+0xb70>
 800d268:	0800f8bc 	.word	0x0800f8bc
 800d26c:	0800f840 	.word	0x0800f840

0800d270 <_free_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4605      	mov	r5, r0
 800d274:	2900      	cmp	r1, #0
 800d276:	d041      	beq.n	800d2fc <_free_r+0x8c>
 800d278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d27c:	1f0c      	subs	r4, r1, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bfb8      	it	lt
 800d282:	18e4      	addlt	r4, r4, r3
 800d284:	f7fe fa6a 	bl	800b75c <__malloc_lock>
 800d288:	4a1d      	ldr	r2, [pc, #116]	@ (800d300 <_free_r+0x90>)
 800d28a:	6813      	ldr	r3, [r2, #0]
 800d28c:	b933      	cbnz	r3, 800d29c <_free_r+0x2c>
 800d28e:	6063      	str	r3, [r4, #4]
 800d290:	6014      	str	r4, [r2, #0]
 800d292:	4628      	mov	r0, r5
 800d294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d298:	f7fe ba66 	b.w	800b768 <__malloc_unlock>
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	d908      	bls.n	800d2b2 <_free_r+0x42>
 800d2a0:	6820      	ldr	r0, [r4, #0]
 800d2a2:	1821      	adds	r1, r4, r0
 800d2a4:	428b      	cmp	r3, r1
 800d2a6:	bf01      	itttt	eq
 800d2a8:	6819      	ldreq	r1, [r3, #0]
 800d2aa:	685b      	ldreq	r3, [r3, #4]
 800d2ac:	1809      	addeq	r1, r1, r0
 800d2ae:	6021      	streq	r1, [r4, #0]
 800d2b0:	e7ed      	b.n	800d28e <_free_r+0x1e>
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b10b      	cbz	r3, 800d2bc <_free_r+0x4c>
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d9fa      	bls.n	800d2b2 <_free_r+0x42>
 800d2bc:	6811      	ldr	r1, [r2, #0]
 800d2be:	1850      	adds	r0, r2, r1
 800d2c0:	42a0      	cmp	r0, r4
 800d2c2:	d10b      	bne.n	800d2dc <_free_r+0x6c>
 800d2c4:	6820      	ldr	r0, [r4, #0]
 800d2c6:	4401      	add	r1, r0
 800d2c8:	1850      	adds	r0, r2, r1
 800d2ca:	4283      	cmp	r3, r0
 800d2cc:	6011      	str	r1, [r2, #0]
 800d2ce:	d1e0      	bne.n	800d292 <_free_r+0x22>
 800d2d0:	6818      	ldr	r0, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	6053      	str	r3, [r2, #4]
 800d2d6:	4408      	add	r0, r1
 800d2d8:	6010      	str	r0, [r2, #0]
 800d2da:	e7da      	b.n	800d292 <_free_r+0x22>
 800d2dc:	d902      	bls.n	800d2e4 <_free_r+0x74>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	e7d6      	b.n	800d292 <_free_r+0x22>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	1821      	adds	r1, r4, r0
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	bf04      	itt	eq
 800d2ec:	6819      	ldreq	r1, [r3, #0]
 800d2ee:	685b      	ldreq	r3, [r3, #4]
 800d2f0:	6063      	str	r3, [r4, #4]
 800d2f2:	bf04      	itt	eq
 800d2f4:	1809      	addeq	r1, r1, r0
 800d2f6:	6021      	streq	r1, [r4, #0]
 800d2f8:	6054      	str	r4, [r2, #4]
 800d2fa:	e7ca      	b.n	800d292 <_free_r+0x22>
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	bf00      	nop
 800d300:	20002450 	.word	0x20002450

0800d304 <_Balloc>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	69c6      	ldr	r6, [r0, #28]
 800d308:	4604      	mov	r4, r0
 800d30a:	460d      	mov	r5, r1
 800d30c:	b976      	cbnz	r6, 800d32c <_Balloc+0x28>
 800d30e:	2010      	movs	r0, #16
 800d310:	f7fe f972 	bl	800b5f8 <malloc>
 800d314:	4602      	mov	r2, r0
 800d316:	61e0      	str	r0, [r4, #28]
 800d318:	b920      	cbnz	r0, 800d324 <_Balloc+0x20>
 800d31a:	4b18      	ldr	r3, [pc, #96]	@ (800d37c <_Balloc+0x78>)
 800d31c:	4818      	ldr	r0, [pc, #96]	@ (800d380 <_Balloc+0x7c>)
 800d31e:	216b      	movs	r1, #107	@ 0x6b
 800d320:	f000 ff5c 	bl	800e1dc <__assert_func>
 800d324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d328:	6006      	str	r6, [r0, #0]
 800d32a:	60c6      	str	r6, [r0, #12]
 800d32c:	69e6      	ldr	r6, [r4, #28]
 800d32e:	68f3      	ldr	r3, [r6, #12]
 800d330:	b183      	cbz	r3, 800d354 <_Balloc+0x50>
 800d332:	69e3      	ldr	r3, [r4, #28]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d33a:	b9b8      	cbnz	r0, 800d36c <_Balloc+0x68>
 800d33c:	2101      	movs	r1, #1
 800d33e:	fa01 f605 	lsl.w	r6, r1, r5
 800d342:	1d72      	adds	r2, r6, #5
 800d344:	0092      	lsls	r2, r2, #2
 800d346:	4620      	mov	r0, r4
 800d348:	f000 ff66 	bl	800e218 <_calloc_r>
 800d34c:	b160      	cbz	r0, 800d368 <_Balloc+0x64>
 800d34e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d352:	e00e      	b.n	800d372 <_Balloc+0x6e>
 800d354:	2221      	movs	r2, #33	@ 0x21
 800d356:	2104      	movs	r1, #4
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 ff5d 	bl	800e218 <_calloc_r>
 800d35e:	69e3      	ldr	r3, [r4, #28]
 800d360:	60f0      	str	r0, [r6, #12]
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e4      	bne.n	800d332 <_Balloc+0x2e>
 800d368:	2000      	movs	r0, #0
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	6802      	ldr	r2, [r0, #0]
 800d36e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d372:	2300      	movs	r3, #0
 800d374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d378:	e7f7      	b.n	800d36a <_Balloc+0x66>
 800d37a:	bf00      	nop
 800d37c:	0800f84d 	.word	0x0800f84d
 800d380:	0800f8cd 	.word	0x0800f8cd

0800d384 <_Bfree>:
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	69c6      	ldr	r6, [r0, #28]
 800d388:	4605      	mov	r5, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	b976      	cbnz	r6, 800d3ac <_Bfree+0x28>
 800d38e:	2010      	movs	r0, #16
 800d390:	f7fe f932 	bl	800b5f8 <malloc>
 800d394:	4602      	mov	r2, r0
 800d396:	61e8      	str	r0, [r5, #28]
 800d398:	b920      	cbnz	r0, 800d3a4 <_Bfree+0x20>
 800d39a:	4b09      	ldr	r3, [pc, #36]	@ (800d3c0 <_Bfree+0x3c>)
 800d39c:	4809      	ldr	r0, [pc, #36]	@ (800d3c4 <_Bfree+0x40>)
 800d39e:	218f      	movs	r1, #143	@ 0x8f
 800d3a0:	f000 ff1c 	bl	800e1dc <__assert_func>
 800d3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a8:	6006      	str	r6, [r0, #0]
 800d3aa:	60c6      	str	r6, [r0, #12]
 800d3ac:	b13c      	cbz	r4, 800d3be <_Bfree+0x3a>
 800d3ae:	69eb      	ldr	r3, [r5, #28]
 800d3b0:	6862      	ldr	r2, [r4, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3b8:	6021      	str	r1, [r4, #0]
 800d3ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3be:	bd70      	pop	{r4, r5, r6, pc}
 800d3c0:	0800f84d 	.word	0x0800f84d
 800d3c4:	0800f8cd 	.word	0x0800f8cd

0800d3c8 <__multadd>:
 800d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3cc:	690d      	ldr	r5, [r1, #16]
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	f101 0c14 	add.w	ip, r1, #20
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f8dc 3000 	ldr.w	r3, [ip]
 800d3de:	b299      	uxth	r1, r3
 800d3e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d3e4:	0c1e      	lsrs	r6, r3, #16
 800d3e6:	0c0b      	lsrs	r3, r1, #16
 800d3e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d3ec:	b289      	uxth	r1, r1
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3f4:	4285      	cmp	r5, r0
 800d3f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d3fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3fe:	dcec      	bgt.n	800d3da <__multadd+0x12>
 800d400:	b30e      	cbz	r6, 800d446 <__multadd+0x7e>
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	42ab      	cmp	r3, r5
 800d406:	dc19      	bgt.n	800d43c <__multadd+0x74>
 800d408:	6861      	ldr	r1, [r4, #4]
 800d40a:	4638      	mov	r0, r7
 800d40c:	3101      	adds	r1, #1
 800d40e:	f7ff ff79 	bl	800d304 <_Balloc>
 800d412:	4680      	mov	r8, r0
 800d414:	b928      	cbnz	r0, 800d422 <__multadd+0x5a>
 800d416:	4602      	mov	r2, r0
 800d418:	4b0c      	ldr	r3, [pc, #48]	@ (800d44c <__multadd+0x84>)
 800d41a:	480d      	ldr	r0, [pc, #52]	@ (800d450 <__multadd+0x88>)
 800d41c:	21ba      	movs	r1, #186	@ 0xba
 800d41e:	f000 fedd 	bl	800e1dc <__assert_func>
 800d422:	6922      	ldr	r2, [r4, #16]
 800d424:	3202      	adds	r2, #2
 800d426:	f104 010c 	add.w	r1, r4, #12
 800d42a:	0092      	lsls	r2, r2, #2
 800d42c:	300c      	adds	r0, #12
 800d42e:	f000 fec7 	bl	800e1c0 <memcpy>
 800d432:	4621      	mov	r1, r4
 800d434:	4638      	mov	r0, r7
 800d436:	f7ff ffa5 	bl	800d384 <_Bfree>
 800d43a:	4644      	mov	r4, r8
 800d43c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d440:	3501      	adds	r5, #1
 800d442:	615e      	str	r6, [r3, #20]
 800d444:	6125      	str	r5, [r4, #16]
 800d446:	4620      	mov	r0, r4
 800d448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d44c:	0800f8bc 	.word	0x0800f8bc
 800d450:	0800f8cd 	.word	0x0800f8cd

0800d454 <__hi0bits>:
 800d454:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d458:	4603      	mov	r3, r0
 800d45a:	bf36      	itet	cc
 800d45c:	0403      	lslcc	r3, r0, #16
 800d45e:	2000      	movcs	r0, #0
 800d460:	2010      	movcc	r0, #16
 800d462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d466:	bf3c      	itt	cc
 800d468:	021b      	lslcc	r3, r3, #8
 800d46a:	3008      	addcc	r0, #8
 800d46c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d470:	bf3c      	itt	cc
 800d472:	011b      	lslcc	r3, r3, #4
 800d474:	3004      	addcc	r0, #4
 800d476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d47a:	bf3c      	itt	cc
 800d47c:	009b      	lslcc	r3, r3, #2
 800d47e:	3002      	addcc	r0, #2
 800d480:	2b00      	cmp	r3, #0
 800d482:	db05      	blt.n	800d490 <__hi0bits+0x3c>
 800d484:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d488:	f100 0001 	add.w	r0, r0, #1
 800d48c:	bf08      	it	eq
 800d48e:	2020      	moveq	r0, #32
 800d490:	4770      	bx	lr

0800d492 <__lo0bits>:
 800d492:	6803      	ldr	r3, [r0, #0]
 800d494:	4602      	mov	r2, r0
 800d496:	f013 0007 	ands.w	r0, r3, #7
 800d49a:	d00b      	beq.n	800d4b4 <__lo0bits+0x22>
 800d49c:	07d9      	lsls	r1, r3, #31
 800d49e:	d421      	bmi.n	800d4e4 <__lo0bits+0x52>
 800d4a0:	0798      	lsls	r0, r3, #30
 800d4a2:	bf49      	itett	mi
 800d4a4:	085b      	lsrmi	r3, r3, #1
 800d4a6:	089b      	lsrpl	r3, r3, #2
 800d4a8:	2001      	movmi	r0, #1
 800d4aa:	6013      	strmi	r3, [r2, #0]
 800d4ac:	bf5c      	itt	pl
 800d4ae:	6013      	strpl	r3, [r2, #0]
 800d4b0:	2002      	movpl	r0, #2
 800d4b2:	4770      	bx	lr
 800d4b4:	b299      	uxth	r1, r3
 800d4b6:	b909      	cbnz	r1, 800d4bc <__lo0bits+0x2a>
 800d4b8:	0c1b      	lsrs	r3, r3, #16
 800d4ba:	2010      	movs	r0, #16
 800d4bc:	b2d9      	uxtb	r1, r3
 800d4be:	b909      	cbnz	r1, 800d4c4 <__lo0bits+0x32>
 800d4c0:	3008      	adds	r0, #8
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	0719      	lsls	r1, r3, #28
 800d4c6:	bf04      	itt	eq
 800d4c8:	091b      	lsreq	r3, r3, #4
 800d4ca:	3004      	addeq	r0, #4
 800d4cc:	0799      	lsls	r1, r3, #30
 800d4ce:	bf04      	itt	eq
 800d4d0:	089b      	lsreq	r3, r3, #2
 800d4d2:	3002      	addeq	r0, #2
 800d4d4:	07d9      	lsls	r1, r3, #31
 800d4d6:	d403      	bmi.n	800d4e0 <__lo0bits+0x4e>
 800d4d8:	085b      	lsrs	r3, r3, #1
 800d4da:	f100 0001 	add.w	r0, r0, #1
 800d4de:	d003      	beq.n	800d4e8 <__lo0bits+0x56>
 800d4e0:	6013      	str	r3, [r2, #0]
 800d4e2:	4770      	bx	lr
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	4770      	bx	lr
 800d4e8:	2020      	movs	r0, #32
 800d4ea:	4770      	bx	lr

0800d4ec <__i2b>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	f7ff ff07 	bl	800d304 <_Balloc>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	b928      	cbnz	r0, 800d506 <__i2b+0x1a>
 800d4fa:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <__i2b+0x24>)
 800d4fc:	4805      	ldr	r0, [pc, #20]	@ (800d514 <__i2b+0x28>)
 800d4fe:	f240 1145 	movw	r1, #325	@ 0x145
 800d502:	f000 fe6b 	bl	800e1dc <__assert_func>
 800d506:	2301      	movs	r3, #1
 800d508:	6144      	str	r4, [r0, #20]
 800d50a:	6103      	str	r3, [r0, #16]
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	bf00      	nop
 800d510:	0800f8bc 	.word	0x0800f8bc
 800d514:	0800f8cd 	.word	0x0800f8cd

0800d518 <__multiply>:
 800d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	4617      	mov	r7, r2
 800d51e:	690a      	ldr	r2, [r1, #16]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	429a      	cmp	r2, r3
 800d524:	bfa8      	it	ge
 800d526:	463b      	movge	r3, r7
 800d528:	4689      	mov	r9, r1
 800d52a:	bfa4      	itt	ge
 800d52c:	460f      	movge	r7, r1
 800d52e:	4699      	movge	r9, r3
 800d530:	693d      	ldr	r5, [r7, #16]
 800d532:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	eb05 060a 	add.w	r6, r5, sl
 800d53e:	42b3      	cmp	r3, r6
 800d540:	b085      	sub	sp, #20
 800d542:	bfb8      	it	lt
 800d544:	3101      	addlt	r1, #1
 800d546:	f7ff fedd 	bl	800d304 <_Balloc>
 800d54a:	b930      	cbnz	r0, 800d55a <__multiply+0x42>
 800d54c:	4602      	mov	r2, r0
 800d54e:	4b41      	ldr	r3, [pc, #260]	@ (800d654 <__multiply+0x13c>)
 800d550:	4841      	ldr	r0, [pc, #260]	@ (800d658 <__multiply+0x140>)
 800d552:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d556:	f000 fe41 	bl	800e1dc <__assert_func>
 800d55a:	f100 0414 	add.w	r4, r0, #20
 800d55e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d562:	4623      	mov	r3, r4
 800d564:	2200      	movs	r2, #0
 800d566:	4573      	cmp	r3, lr
 800d568:	d320      	bcc.n	800d5ac <__multiply+0x94>
 800d56a:	f107 0814 	add.w	r8, r7, #20
 800d56e:	f109 0114 	add.w	r1, r9, #20
 800d572:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d576:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d57a:	9302      	str	r3, [sp, #8]
 800d57c:	1beb      	subs	r3, r5, r7
 800d57e:	3b15      	subs	r3, #21
 800d580:	f023 0303 	bic.w	r3, r3, #3
 800d584:	3304      	adds	r3, #4
 800d586:	3715      	adds	r7, #21
 800d588:	42bd      	cmp	r5, r7
 800d58a:	bf38      	it	cc
 800d58c:	2304      	movcc	r3, #4
 800d58e:	9301      	str	r3, [sp, #4]
 800d590:	9b02      	ldr	r3, [sp, #8]
 800d592:	9103      	str	r1, [sp, #12]
 800d594:	428b      	cmp	r3, r1
 800d596:	d80c      	bhi.n	800d5b2 <__multiply+0x9a>
 800d598:	2e00      	cmp	r6, #0
 800d59a:	dd03      	ble.n	800d5a4 <__multiply+0x8c>
 800d59c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d055      	beq.n	800d650 <__multiply+0x138>
 800d5a4:	6106      	str	r6, [r0, #16]
 800d5a6:	b005      	add	sp, #20
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	f843 2b04 	str.w	r2, [r3], #4
 800d5b0:	e7d9      	b.n	800d566 <__multiply+0x4e>
 800d5b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5b6:	f1ba 0f00 	cmp.w	sl, #0
 800d5ba:	d01f      	beq.n	800d5fc <__multiply+0xe4>
 800d5bc:	46c4      	mov	ip, r8
 800d5be:	46a1      	mov	r9, r4
 800d5c0:	2700      	movs	r7, #0
 800d5c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5c6:	f8d9 3000 	ldr.w	r3, [r9]
 800d5ca:	fa1f fb82 	uxth.w	fp, r2
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5d4:	443b      	add	r3, r7
 800d5d6:	f8d9 7000 	ldr.w	r7, [r9]
 800d5da:	0c12      	lsrs	r2, r2, #16
 800d5dc:	0c3f      	lsrs	r7, r7, #16
 800d5de:	fb0a 7202 	mla	r2, sl, r2, r7
 800d5e2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ec:	4565      	cmp	r5, ip
 800d5ee:	f849 3b04 	str.w	r3, [r9], #4
 800d5f2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d5f6:	d8e4      	bhi.n	800d5c2 <__multiply+0xaa>
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	50e7      	str	r7, [r4, r3]
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d602:	3104      	adds	r1, #4
 800d604:	f1b9 0f00 	cmp.w	r9, #0
 800d608:	d020      	beq.n	800d64c <__multiply+0x134>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	4647      	mov	r7, r8
 800d60e:	46a4      	mov	ip, r4
 800d610:	f04f 0a00 	mov.w	sl, #0
 800d614:	f8b7 b000 	ldrh.w	fp, [r7]
 800d618:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d61c:	fb09 220b 	mla	r2, r9, fp, r2
 800d620:	4452      	add	r2, sl
 800d622:	b29b      	uxth	r3, r3
 800d624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d628:	f84c 3b04 	str.w	r3, [ip], #4
 800d62c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d634:	f8bc 3000 	ldrh.w	r3, [ip]
 800d638:	fb09 330a 	mla	r3, r9, sl, r3
 800d63c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d640:	42bd      	cmp	r5, r7
 800d642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d646:	d8e5      	bhi.n	800d614 <__multiply+0xfc>
 800d648:	9a01      	ldr	r2, [sp, #4]
 800d64a:	50a3      	str	r3, [r4, r2]
 800d64c:	3404      	adds	r4, #4
 800d64e:	e79f      	b.n	800d590 <__multiply+0x78>
 800d650:	3e01      	subs	r6, #1
 800d652:	e7a1      	b.n	800d598 <__multiply+0x80>
 800d654:	0800f8bc 	.word	0x0800f8bc
 800d658:	0800f8cd 	.word	0x0800f8cd

0800d65c <__pow5mult>:
 800d65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d660:	4615      	mov	r5, r2
 800d662:	f012 0203 	ands.w	r2, r2, #3
 800d666:	4607      	mov	r7, r0
 800d668:	460e      	mov	r6, r1
 800d66a:	d007      	beq.n	800d67c <__pow5mult+0x20>
 800d66c:	4c25      	ldr	r4, [pc, #148]	@ (800d704 <__pow5mult+0xa8>)
 800d66e:	3a01      	subs	r2, #1
 800d670:	2300      	movs	r3, #0
 800d672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d676:	f7ff fea7 	bl	800d3c8 <__multadd>
 800d67a:	4606      	mov	r6, r0
 800d67c:	10ad      	asrs	r5, r5, #2
 800d67e:	d03d      	beq.n	800d6fc <__pow5mult+0xa0>
 800d680:	69fc      	ldr	r4, [r7, #28]
 800d682:	b97c      	cbnz	r4, 800d6a4 <__pow5mult+0x48>
 800d684:	2010      	movs	r0, #16
 800d686:	f7fd ffb7 	bl	800b5f8 <malloc>
 800d68a:	4602      	mov	r2, r0
 800d68c:	61f8      	str	r0, [r7, #28]
 800d68e:	b928      	cbnz	r0, 800d69c <__pow5mult+0x40>
 800d690:	4b1d      	ldr	r3, [pc, #116]	@ (800d708 <__pow5mult+0xac>)
 800d692:	481e      	ldr	r0, [pc, #120]	@ (800d70c <__pow5mult+0xb0>)
 800d694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d698:	f000 fda0 	bl	800e1dc <__assert_func>
 800d69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6a0:	6004      	str	r4, [r0, #0]
 800d6a2:	60c4      	str	r4, [r0, #12]
 800d6a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6ac:	b94c      	cbnz	r4, 800d6c2 <__pow5mult+0x66>
 800d6ae:	f240 2171 	movw	r1, #625	@ 0x271
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	f7ff ff1a 	bl	800d4ec <__i2b>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6be:	4604      	mov	r4, r0
 800d6c0:	6003      	str	r3, [r0, #0]
 800d6c2:	f04f 0900 	mov.w	r9, #0
 800d6c6:	07eb      	lsls	r3, r5, #31
 800d6c8:	d50a      	bpl.n	800d6e0 <__pow5mult+0x84>
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7ff ff22 	bl	800d518 <__multiply>
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7ff fe53 	bl	800d384 <_Bfree>
 800d6de:	4646      	mov	r6, r8
 800d6e0:	106d      	asrs	r5, r5, #1
 800d6e2:	d00b      	beq.n	800d6fc <__pow5mult+0xa0>
 800d6e4:	6820      	ldr	r0, [r4, #0]
 800d6e6:	b938      	cbnz	r0, 800d6f8 <__pow5mult+0x9c>
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4638      	mov	r0, r7
 800d6ee:	f7ff ff13 	bl	800d518 <__multiply>
 800d6f2:	6020      	str	r0, [r4, #0]
 800d6f4:	f8c0 9000 	str.w	r9, [r0]
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	e7e4      	b.n	800d6c6 <__pow5mult+0x6a>
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d702:	bf00      	nop
 800d704:	0800f980 	.word	0x0800f980
 800d708:	0800f84d 	.word	0x0800f84d
 800d70c:	0800f8cd 	.word	0x0800f8cd

0800d710 <__lshift>:
 800d710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d714:	460c      	mov	r4, r1
 800d716:	6849      	ldr	r1, [r1, #4]
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d71e:	68a3      	ldr	r3, [r4, #8]
 800d720:	4607      	mov	r7, r0
 800d722:	4691      	mov	r9, r2
 800d724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d728:	f108 0601 	add.w	r6, r8, #1
 800d72c:	42b3      	cmp	r3, r6
 800d72e:	db0b      	blt.n	800d748 <__lshift+0x38>
 800d730:	4638      	mov	r0, r7
 800d732:	f7ff fde7 	bl	800d304 <_Balloc>
 800d736:	4605      	mov	r5, r0
 800d738:	b948      	cbnz	r0, 800d74e <__lshift+0x3e>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b28      	ldr	r3, [pc, #160]	@ (800d7e0 <__lshift+0xd0>)
 800d73e:	4829      	ldr	r0, [pc, #164]	@ (800d7e4 <__lshift+0xd4>)
 800d740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d744:	f000 fd4a 	bl	800e1dc <__assert_func>
 800d748:	3101      	adds	r1, #1
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	e7ee      	b.n	800d72c <__lshift+0x1c>
 800d74e:	2300      	movs	r3, #0
 800d750:	f100 0114 	add.w	r1, r0, #20
 800d754:	f100 0210 	add.w	r2, r0, #16
 800d758:	4618      	mov	r0, r3
 800d75a:	4553      	cmp	r3, sl
 800d75c:	db33      	blt.n	800d7c6 <__lshift+0xb6>
 800d75e:	6920      	ldr	r0, [r4, #16]
 800d760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d764:	f104 0314 	add.w	r3, r4, #20
 800d768:	f019 091f 	ands.w	r9, r9, #31
 800d76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d774:	d02b      	beq.n	800d7ce <__lshift+0xbe>
 800d776:	f1c9 0e20 	rsb	lr, r9, #32
 800d77a:	468a      	mov	sl, r1
 800d77c:	2200      	movs	r2, #0
 800d77e:	6818      	ldr	r0, [r3, #0]
 800d780:	fa00 f009 	lsl.w	r0, r0, r9
 800d784:	4310      	orrs	r0, r2
 800d786:	f84a 0b04 	str.w	r0, [sl], #4
 800d78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d78e:	459c      	cmp	ip, r3
 800d790:	fa22 f20e 	lsr.w	r2, r2, lr
 800d794:	d8f3      	bhi.n	800d77e <__lshift+0x6e>
 800d796:	ebac 0304 	sub.w	r3, ip, r4
 800d79a:	3b15      	subs	r3, #21
 800d79c:	f023 0303 	bic.w	r3, r3, #3
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	f104 0015 	add.w	r0, r4, #21
 800d7a6:	4560      	cmp	r0, ip
 800d7a8:	bf88      	it	hi
 800d7aa:	2304      	movhi	r3, #4
 800d7ac:	50ca      	str	r2, [r1, r3]
 800d7ae:	b10a      	cbz	r2, 800d7b4 <__lshift+0xa4>
 800d7b0:	f108 0602 	add.w	r6, r8, #2
 800d7b4:	3e01      	subs	r6, #1
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	612e      	str	r6, [r5, #16]
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	f7ff fde2 	bl	800d384 <_Bfree>
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	e7c5      	b.n	800d75a <__lshift+0x4a>
 800d7ce:	3904      	subs	r1, #4
 800d7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7d8:	459c      	cmp	ip, r3
 800d7da:	d8f9      	bhi.n	800d7d0 <__lshift+0xc0>
 800d7dc:	e7ea      	b.n	800d7b4 <__lshift+0xa4>
 800d7de:	bf00      	nop
 800d7e0:	0800f8bc 	.word	0x0800f8bc
 800d7e4:	0800f8cd 	.word	0x0800f8cd

0800d7e8 <__mcmp>:
 800d7e8:	690a      	ldr	r2, [r1, #16]
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6900      	ldr	r0, [r0, #16]
 800d7ee:	1a80      	subs	r0, r0, r2
 800d7f0:	b530      	push	{r4, r5, lr}
 800d7f2:	d10e      	bne.n	800d812 <__mcmp+0x2a>
 800d7f4:	3314      	adds	r3, #20
 800d7f6:	3114      	adds	r1, #20
 800d7f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d808:	4295      	cmp	r5, r2
 800d80a:	d003      	beq.n	800d814 <__mcmp+0x2c>
 800d80c:	d205      	bcs.n	800d81a <__mcmp+0x32>
 800d80e:	f04f 30ff 	mov.w	r0, #4294967295
 800d812:	bd30      	pop	{r4, r5, pc}
 800d814:	42a3      	cmp	r3, r4
 800d816:	d3f3      	bcc.n	800d800 <__mcmp+0x18>
 800d818:	e7fb      	b.n	800d812 <__mcmp+0x2a>
 800d81a:	2001      	movs	r0, #1
 800d81c:	e7f9      	b.n	800d812 <__mcmp+0x2a>
	...

0800d820 <__mdiff>:
 800d820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4689      	mov	r9, r1
 800d826:	4606      	mov	r6, r0
 800d828:	4611      	mov	r1, r2
 800d82a:	4648      	mov	r0, r9
 800d82c:	4614      	mov	r4, r2
 800d82e:	f7ff ffdb 	bl	800d7e8 <__mcmp>
 800d832:	1e05      	subs	r5, r0, #0
 800d834:	d112      	bne.n	800d85c <__mdiff+0x3c>
 800d836:	4629      	mov	r1, r5
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff fd63 	bl	800d304 <_Balloc>
 800d83e:	4602      	mov	r2, r0
 800d840:	b928      	cbnz	r0, 800d84e <__mdiff+0x2e>
 800d842:	4b3f      	ldr	r3, [pc, #252]	@ (800d940 <__mdiff+0x120>)
 800d844:	f240 2137 	movw	r1, #567	@ 0x237
 800d848:	483e      	ldr	r0, [pc, #248]	@ (800d944 <__mdiff+0x124>)
 800d84a:	f000 fcc7 	bl	800e1dc <__assert_func>
 800d84e:	2301      	movs	r3, #1
 800d850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d854:	4610      	mov	r0, r2
 800d856:	b003      	add	sp, #12
 800d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85c:	bfbc      	itt	lt
 800d85e:	464b      	movlt	r3, r9
 800d860:	46a1      	movlt	r9, r4
 800d862:	4630      	mov	r0, r6
 800d864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d868:	bfba      	itte	lt
 800d86a:	461c      	movlt	r4, r3
 800d86c:	2501      	movlt	r5, #1
 800d86e:	2500      	movge	r5, #0
 800d870:	f7ff fd48 	bl	800d304 <_Balloc>
 800d874:	4602      	mov	r2, r0
 800d876:	b918      	cbnz	r0, 800d880 <__mdiff+0x60>
 800d878:	4b31      	ldr	r3, [pc, #196]	@ (800d940 <__mdiff+0x120>)
 800d87a:	f240 2145 	movw	r1, #581	@ 0x245
 800d87e:	e7e3      	b.n	800d848 <__mdiff+0x28>
 800d880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d884:	6926      	ldr	r6, [r4, #16]
 800d886:	60c5      	str	r5, [r0, #12]
 800d888:	f109 0310 	add.w	r3, r9, #16
 800d88c:	f109 0514 	add.w	r5, r9, #20
 800d890:	f104 0e14 	add.w	lr, r4, #20
 800d894:	f100 0b14 	add.w	fp, r0, #20
 800d898:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d89c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	46d9      	mov	r9, fp
 800d8a4:	f04f 0c00 	mov.w	ip, #0
 800d8a8:	9b01      	ldr	r3, [sp, #4]
 800d8aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8b2:	9301      	str	r3, [sp, #4]
 800d8b4:	fa1f f38a 	uxth.w	r3, sl
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	b283      	uxth	r3, r0
 800d8bc:	1acb      	subs	r3, r1, r3
 800d8be:	0c00      	lsrs	r0, r0, #16
 800d8c0:	4463      	add	r3, ip
 800d8c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8d0:	4576      	cmp	r6, lr
 800d8d2:	f849 3b04 	str.w	r3, [r9], #4
 800d8d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8da:	d8e5      	bhi.n	800d8a8 <__mdiff+0x88>
 800d8dc:	1b33      	subs	r3, r6, r4
 800d8de:	3b15      	subs	r3, #21
 800d8e0:	f023 0303 	bic.w	r3, r3, #3
 800d8e4:	3415      	adds	r4, #21
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	42a6      	cmp	r6, r4
 800d8ea:	bf38      	it	cc
 800d8ec:	2304      	movcc	r3, #4
 800d8ee:	441d      	add	r5, r3
 800d8f0:	445b      	add	r3, fp
 800d8f2:	461e      	mov	r6, r3
 800d8f4:	462c      	mov	r4, r5
 800d8f6:	4544      	cmp	r4, r8
 800d8f8:	d30e      	bcc.n	800d918 <__mdiff+0xf8>
 800d8fa:	f108 0103 	add.w	r1, r8, #3
 800d8fe:	1b49      	subs	r1, r1, r5
 800d900:	f021 0103 	bic.w	r1, r1, #3
 800d904:	3d03      	subs	r5, #3
 800d906:	45a8      	cmp	r8, r5
 800d908:	bf38      	it	cc
 800d90a:	2100      	movcc	r1, #0
 800d90c:	440b      	add	r3, r1
 800d90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d912:	b191      	cbz	r1, 800d93a <__mdiff+0x11a>
 800d914:	6117      	str	r7, [r2, #16]
 800d916:	e79d      	b.n	800d854 <__mdiff+0x34>
 800d918:	f854 1b04 	ldr.w	r1, [r4], #4
 800d91c:	46e6      	mov	lr, ip
 800d91e:	0c08      	lsrs	r0, r1, #16
 800d920:	fa1c fc81 	uxtah	ip, ip, r1
 800d924:	4471      	add	r1, lr
 800d926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d92a:	b289      	uxth	r1, r1
 800d92c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d930:	f846 1b04 	str.w	r1, [r6], #4
 800d934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d938:	e7dd      	b.n	800d8f6 <__mdiff+0xd6>
 800d93a:	3f01      	subs	r7, #1
 800d93c:	e7e7      	b.n	800d90e <__mdiff+0xee>
 800d93e:	bf00      	nop
 800d940:	0800f8bc 	.word	0x0800f8bc
 800d944:	0800f8cd 	.word	0x0800f8cd

0800d948 <__d2b>:
 800d948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d94c:	460f      	mov	r7, r1
 800d94e:	2101      	movs	r1, #1
 800d950:	ec59 8b10 	vmov	r8, r9, d0
 800d954:	4616      	mov	r6, r2
 800d956:	f7ff fcd5 	bl	800d304 <_Balloc>
 800d95a:	4604      	mov	r4, r0
 800d95c:	b930      	cbnz	r0, 800d96c <__d2b+0x24>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b23      	ldr	r3, [pc, #140]	@ (800d9f0 <__d2b+0xa8>)
 800d962:	4824      	ldr	r0, [pc, #144]	@ (800d9f4 <__d2b+0xac>)
 800d964:	f240 310f 	movw	r1, #783	@ 0x30f
 800d968:	f000 fc38 	bl	800e1dc <__assert_func>
 800d96c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d974:	b10d      	cbz	r5, 800d97a <__d2b+0x32>
 800d976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	f1b8 0300 	subs.w	r3, r8, #0
 800d980:	d023      	beq.n	800d9ca <__d2b+0x82>
 800d982:	4668      	mov	r0, sp
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	f7ff fd84 	bl	800d492 <__lo0bits>
 800d98a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d98e:	b1d0      	cbz	r0, 800d9c6 <__d2b+0x7e>
 800d990:	f1c0 0320 	rsb	r3, r0, #32
 800d994:	fa02 f303 	lsl.w	r3, r2, r3
 800d998:	430b      	orrs	r3, r1
 800d99a:	40c2      	lsrs	r2, r0
 800d99c:	6163      	str	r3, [r4, #20]
 800d99e:	9201      	str	r2, [sp, #4]
 800d9a0:	9b01      	ldr	r3, [sp, #4]
 800d9a2:	61a3      	str	r3, [r4, #24]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2201      	moveq	r2, #1
 800d9aa:	2202      	movne	r2, #2
 800d9ac:	6122      	str	r2, [r4, #16]
 800d9ae:	b1a5      	cbz	r5, 800d9da <__d2b+0x92>
 800d9b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9b4:	4405      	add	r5, r0
 800d9b6:	603d      	str	r5, [r7, #0]
 800d9b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9bc:	6030      	str	r0, [r6, #0]
 800d9be:	4620      	mov	r0, r4
 800d9c0:	b003      	add	sp, #12
 800d9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9c6:	6161      	str	r1, [r4, #20]
 800d9c8:	e7ea      	b.n	800d9a0 <__d2b+0x58>
 800d9ca:	a801      	add	r0, sp, #4
 800d9cc:	f7ff fd61 	bl	800d492 <__lo0bits>
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	6163      	str	r3, [r4, #20]
 800d9d4:	3020      	adds	r0, #32
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	e7e8      	b.n	800d9ac <__d2b+0x64>
 800d9da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9e2:	6038      	str	r0, [r7, #0]
 800d9e4:	6918      	ldr	r0, [r3, #16]
 800d9e6:	f7ff fd35 	bl	800d454 <__hi0bits>
 800d9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9ee:	e7e5      	b.n	800d9bc <__d2b+0x74>
 800d9f0:	0800f8bc 	.word	0x0800f8bc
 800d9f4:	0800f8cd 	.word	0x0800f8cd

0800d9f8 <__ssputs_r>:
 800d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	688e      	ldr	r6, [r1, #8]
 800d9fe:	461f      	mov	r7, r3
 800da00:	42be      	cmp	r6, r7
 800da02:	680b      	ldr	r3, [r1, #0]
 800da04:	4682      	mov	sl, r0
 800da06:	460c      	mov	r4, r1
 800da08:	4690      	mov	r8, r2
 800da0a:	d82d      	bhi.n	800da68 <__ssputs_r+0x70>
 800da0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da14:	d026      	beq.n	800da64 <__ssputs_r+0x6c>
 800da16:	6965      	ldr	r5, [r4, #20]
 800da18:	6909      	ldr	r1, [r1, #16]
 800da1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da1e:	eba3 0901 	sub.w	r9, r3, r1
 800da22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da26:	1c7b      	adds	r3, r7, #1
 800da28:	444b      	add	r3, r9
 800da2a:	106d      	asrs	r5, r5, #1
 800da2c:	429d      	cmp	r5, r3
 800da2e:	bf38      	it	cc
 800da30:	461d      	movcc	r5, r3
 800da32:	0553      	lsls	r3, r2, #21
 800da34:	d527      	bpl.n	800da86 <__ssputs_r+0x8e>
 800da36:	4629      	mov	r1, r5
 800da38:	f7fd fe10 	bl	800b65c <_malloc_r>
 800da3c:	4606      	mov	r6, r0
 800da3e:	b360      	cbz	r0, 800da9a <__ssputs_r+0xa2>
 800da40:	6921      	ldr	r1, [r4, #16]
 800da42:	464a      	mov	r2, r9
 800da44:	f000 fbbc 	bl	800e1c0 <memcpy>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	6126      	str	r6, [r4, #16]
 800da56:	6165      	str	r5, [r4, #20]
 800da58:	444e      	add	r6, r9
 800da5a:	eba5 0509 	sub.w	r5, r5, r9
 800da5e:	6026      	str	r6, [r4, #0]
 800da60:	60a5      	str	r5, [r4, #8]
 800da62:	463e      	mov	r6, r7
 800da64:	42be      	cmp	r6, r7
 800da66:	d900      	bls.n	800da6a <__ssputs_r+0x72>
 800da68:	463e      	mov	r6, r7
 800da6a:	6820      	ldr	r0, [r4, #0]
 800da6c:	4632      	mov	r2, r6
 800da6e:	4641      	mov	r1, r8
 800da70:	f000 fb6a 	bl	800e148 <memmove>
 800da74:	68a3      	ldr	r3, [r4, #8]
 800da76:	1b9b      	subs	r3, r3, r6
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	4433      	add	r3, r6
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	2000      	movs	r0, #0
 800da82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da86:	462a      	mov	r2, r5
 800da88:	f000 fbec 	bl	800e264 <_realloc_r>
 800da8c:	4606      	mov	r6, r0
 800da8e:	2800      	cmp	r0, #0
 800da90:	d1e0      	bne.n	800da54 <__ssputs_r+0x5c>
 800da92:	6921      	ldr	r1, [r4, #16]
 800da94:	4650      	mov	r0, sl
 800da96:	f7ff fbeb 	bl	800d270 <_free_r>
 800da9a:	230c      	movs	r3, #12
 800da9c:	f8ca 3000 	str.w	r3, [sl]
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daa6:	81a3      	strh	r3, [r4, #12]
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295
 800daac:	e7e9      	b.n	800da82 <__ssputs_r+0x8a>
	...

0800dab0 <_svfiprintf_r>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	4698      	mov	r8, r3
 800dab6:	898b      	ldrh	r3, [r1, #12]
 800dab8:	061b      	lsls	r3, r3, #24
 800daba:	b09d      	sub	sp, #116	@ 0x74
 800dabc:	4607      	mov	r7, r0
 800dabe:	460d      	mov	r5, r1
 800dac0:	4614      	mov	r4, r2
 800dac2:	d510      	bpl.n	800dae6 <_svfiprintf_r+0x36>
 800dac4:	690b      	ldr	r3, [r1, #16]
 800dac6:	b973      	cbnz	r3, 800dae6 <_svfiprintf_r+0x36>
 800dac8:	2140      	movs	r1, #64	@ 0x40
 800daca:	f7fd fdc7 	bl	800b65c <_malloc_r>
 800dace:	6028      	str	r0, [r5, #0]
 800dad0:	6128      	str	r0, [r5, #16]
 800dad2:	b930      	cbnz	r0, 800dae2 <_svfiprintf_r+0x32>
 800dad4:	230c      	movs	r3, #12
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	f04f 30ff 	mov.w	r0, #4294967295
 800dadc:	b01d      	add	sp, #116	@ 0x74
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	2340      	movs	r3, #64	@ 0x40
 800dae4:	616b      	str	r3, [r5, #20]
 800dae6:	2300      	movs	r3, #0
 800dae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800daea:	2320      	movs	r3, #32
 800daec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800daf4:	2330      	movs	r3, #48	@ 0x30
 800daf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc94 <_svfiprintf_r+0x1e4>
 800dafa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dafe:	f04f 0901 	mov.w	r9, #1
 800db02:	4623      	mov	r3, r4
 800db04:	469a      	mov	sl, r3
 800db06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db0a:	b10a      	cbz	r2, 800db10 <_svfiprintf_r+0x60>
 800db0c:	2a25      	cmp	r2, #37	@ 0x25
 800db0e:	d1f9      	bne.n	800db04 <_svfiprintf_r+0x54>
 800db10:	ebba 0b04 	subs.w	fp, sl, r4
 800db14:	d00b      	beq.n	800db2e <_svfiprintf_r+0x7e>
 800db16:	465b      	mov	r3, fp
 800db18:	4622      	mov	r2, r4
 800db1a:	4629      	mov	r1, r5
 800db1c:	4638      	mov	r0, r7
 800db1e:	f7ff ff6b 	bl	800d9f8 <__ssputs_r>
 800db22:	3001      	adds	r0, #1
 800db24:	f000 80a7 	beq.w	800dc76 <_svfiprintf_r+0x1c6>
 800db28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db2a:	445a      	add	r2, fp
 800db2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db2e:	f89a 3000 	ldrb.w	r3, [sl]
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 809f 	beq.w	800dc76 <_svfiprintf_r+0x1c6>
 800db38:	2300      	movs	r3, #0
 800db3a:	f04f 32ff 	mov.w	r2, #4294967295
 800db3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db42:	f10a 0a01 	add.w	sl, sl, #1
 800db46:	9304      	str	r3, [sp, #16]
 800db48:	9307      	str	r3, [sp, #28]
 800db4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800db50:	4654      	mov	r4, sl
 800db52:	2205      	movs	r2, #5
 800db54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db58:	484e      	ldr	r0, [pc, #312]	@ (800dc94 <_svfiprintf_r+0x1e4>)
 800db5a:	f7f2 fb71 	bl	8000240 <memchr>
 800db5e:	9a04      	ldr	r2, [sp, #16]
 800db60:	b9d8      	cbnz	r0, 800db9a <_svfiprintf_r+0xea>
 800db62:	06d0      	lsls	r0, r2, #27
 800db64:	bf44      	itt	mi
 800db66:	2320      	movmi	r3, #32
 800db68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db6c:	0711      	lsls	r1, r2, #28
 800db6e:	bf44      	itt	mi
 800db70:	232b      	movmi	r3, #43	@ 0x2b
 800db72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db76:	f89a 3000 	ldrb.w	r3, [sl]
 800db7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db7c:	d015      	beq.n	800dbaa <_svfiprintf_r+0xfa>
 800db7e:	9a07      	ldr	r2, [sp, #28]
 800db80:	4654      	mov	r4, sl
 800db82:	2000      	movs	r0, #0
 800db84:	f04f 0c0a 	mov.w	ip, #10
 800db88:	4621      	mov	r1, r4
 800db8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db8e:	3b30      	subs	r3, #48	@ 0x30
 800db90:	2b09      	cmp	r3, #9
 800db92:	d94b      	bls.n	800dc2c <_svfiprintf_r+0x17c>
 800db94:	b1b0      	cbz	r0, 800dbc4 <_svfiprintf_r+0x114>
 800db96:	9207      	str	r2, [sp, #28]
 800db98:	e014      	b.n	800dbc4 <_svfiprintf_r+0x114>
 800db9a:	eba0 0308 	sub.w	r3, r0, r8
 800db9e:	fa09 f303 	lsl.w	r3, r9, r3
 800dba2:	4313      	orrs	r3, r2
 800dba4:	9304      	str	r3, [sp, #16]
 800dba6:	46a2      	mov	sl, r4
 800dba8:	e7d2      	b.n	800db50 <_svfiprintf_r+0xa0>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	1d19      	adds	r1, r3, #4
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	9103      	str	r1, [sp, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	bfbb      	ittet	lt
 800dbb6:	425b      	neglt	r3, r3
 800dbb8:	f042 0202 	orrlt.w	r2, r2, #2
 800dbbc:	9307      	strge	r3, [sp, #28]
 800dbbe:	9307      	strlt	r3, [sp, #28]
 800dbc0:	bfb8      	it	lt
 800dbc2:	9204      	strlt	r2, [sp, #16]
 800dbc4:	7823      	ldrb	r3, [r4, #0]
 800dbc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbc8:	d10a      	bne.n	800dbe0 <_svfiprintf_r+0x130>
 800dbca:	7863      	ldrb	r3, [r4, #1]
 800dbcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbce:	d132      	bne.n	800dc36 <_svfiprintf_r+0x186>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	1d1a      	adds	r2, r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	9203      	str	r2, [sp, #12]
 800dbd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbdc:	3402      	adds	r4, #2
 800dbde:	9305      	str	r3, [sp, #20]
 800dbe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dca4 <_svfiprintf_r+0x1f4>
 800dbe4:	7821      	ldrb	r1, [r4, #0]
 800dbe6:	2203      	movs	r2, #3
 800dbe8:	4650      	mov	r0, sl
 800dbea:	f7f2 fb29 	bl	8000240 <memchr>
 800dbee:	b138      	cbz	r0, 800dc00 <_svfiprintf_r+0x150>
 800dbf0:	9b04      	ldr	r3, [sp, #16]
 800dbf2:	eba0 000a 	sub.w	r0, r0, sl
 800dbf6:	2240      	movs	r2, #64	@ 0x40
 800dbf8:	4082      	lsls	r2, r0
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	3401      	adds	r4, #1
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc04:	4824      	ldr	r0, [pc, #144]	@ (800dc98 <_svfiprintf_r+0x1e8>)
 800dc06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc0a:	2206      	movs	r2, #6
 800dc0c:	f7f2 fb18 	bl	8000240 <memchr>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d036      	beq.n	800dc82 <_svfiprintf_r+0x1d2>
 800dc14:	4b21      	ldr	r3, [pc, #132]	@ (800dc9c <_svfiprintf_r+0x1ec>)
 800dc16:	bb1b      	cbnz	r3, 800dc60 <_svfiprintf_r+0x1b0>
 800dc18:	9b03      	ldr	r3, [sp, #12]
 800dc1a:	3307      	adds	r3, #7
 800dc1c:	f023 0307 	bic.w	r3, r3, #7
 800dc20:	3308      	adds	r3, #8
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc26:	4433      	add	r3, r6
 800dc28:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc2a:	e76a      	b.n	800db02 <_svfiprintf_r+0x52>
 800dc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc30:	460c      	mov	r4, r1
 800dc32:	2001      	movs	r0, #1
 800dc34:	e7a8      	b.n	800db88 <_svfiprintf_r+0xd8>
 800dc36:	2300      	movs	r3, #0
 800dc38:	3401      	adds	r4, #1
 800dc3a:	9305      	str	r3, [sp, #20]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f04f 0c0a 	mov.w	ip, #10
 800dc42:	4620      	mov	r0, r4
 800dc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc48:	3a30      	subs	r2, #48	@ 0x30
 800dc4a:	2a09      	cmp	r2, #9
 800dc4c:	d903      	bls.n	800dc56 <_svfiprintf_r+0x1a6>
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0c6      	beq.n	800dbe0 <_svfiprintf_r+0x130>
 800dc52:	9105      	str	r1, [sp, #20]
 800dc54:	e7c4      	b.n	800dbe0 <_svfiprintf_r+0x130>
 800dc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e7f0      	b.n	800dc42 <_svfiprintf_r+0x192>
 800dc60:	ab03      	add	r3, sp, #12
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	462a      	mov	r2, r5
 800dc66:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <_svfiprintf_r+0x1f0>)
 800dc68:	a904      	add	r1, sp, #16
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	f7fd fe22 	bl	800b8b4 <_printf_float>
 800dc70:	1c42      	adds	r2, r0, #1
 800dc72:	4606      	mov	r6, r0
 800dc74:	d1d6      	bne.n	800dc24 <_svfiprintf_r+0x174>
 800dc76:	89ab      	ldrh	r3, [r5, #12]
 800dc78:	065b      	lsls	r3, r3, #25
 800dc7a:	f53f af2d 	bmi.w	800dad8 <_svfiprintf_r+0x28>
 800dc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc80:	e72c      	b.n	800dadc <_svfiprintf_r+0x2c>
 800dc82:	ab03      	add	r3, sp, #12
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	462a      	mov	r2, r5
 800dc88:	4b05      	ldr	r3, [pc, #20]	@ (800dca0 <_svfiprintf_r+0x1f0>)
 800dc8a:	a904      	add	r1, sp, #16
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f7fe f8a9 	bl	800bde4 <_printf_i>
 800dc92:	e7ed      	b.n	800dc70 <_svfiprintf_r+0x1c0>
 800dc94:	0800f926 	.word	0x0800f926
 800dc98:	0800f930 	.word	0x0800f930
 800dc9c:	0800b8b5 	.word	0x0800b8b5
 800dca0:	0800d9f9 	.word	0x0800d9f9
 800dca4:	0800f92c 	.word	0x0800f92c

0800dca8 <__sfputc_r>:
 800dca8:	6893      	ldr	r3, [r2, #8]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	b410      	push	{r4}
 800dcb0:	6093      	str	r3, [r2, #8]
 800dcb2:	da08      	bge.n	800dcc6 <__sfputc_r+0x1e>
 800dcb4:	6994      	ldr	r4, [r2, #24]
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	db01      	blt.n	800dcbe <__sfputc_r+0x16>
 800dcba:	290a      	cmp	r1, #10
 800dcbc:	d103      	bne.n	800dcc6 <__sfputc_r+0x1e>
 800dcbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc2:	f7fe bb44 	b.w	800c34e <__swbuf_r>
 800dcc6:	6813      	ldr	r3, [r2, #0]
 800dcc8:	1c58      	adds	r0, r3, #1
 800dcca:	6010      	str	r0, [r2, #0]
 800dccc:	7019      	strb	r1, [r3, #0]
 800dcce:	4608      	mov	r0, r1
 800dcd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <__sfputs_r>:
 800dcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	4614      	mov	r4, r2
 800dcde:	18d5      	adds	r5, r2, r3
 800dce0:	42ac      	cmp	r4, r5
 800dce2:	d101      	bne.n	800dce8 <__sfputs_r+0x12>
 800dce4:	2000      	movs	r0, #0
 800dce6:	e007      	b.n	800dcf8 <__sfputs_r+0x22>
 800dce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcec:	463a      	mov	r2, r7
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f7ff ffda 	bl	800dca8 <__sfputc_r>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d1f3      	bne.n	800dce0 <__sfputs_r+0xa>
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcfc <_vfiprintf_r>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	460d      	mov	r5, r1
 800dd02:	b09d      	sub	sp, #116	@ 0x74
 800dd04:	4614      	mov	r4, r2
 800dd06:	4698      	mov	r8, r3
 800dd08:	4606      	mov	r6, r0
 800dd0a:	b118      	cbz	r0, 800dd14 <_vfiprintf_r+0x18>
 800dd0c:	6a03      	ldr	r3, [r0, #32]
 800dd0e:	b90b      	cbnz	r3, 800dd14 <_vfiprintf_r+0x18>
 800dd10:	f7fe fa12 	bl	800c138 <__sinit>
 800dd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd16:	07d9      	lsls	r1, r3, #31
 800dd18:	d405      	bmi.n	800dd26 <_vfiprintf_r+0x2a>
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	059a      	lsls	r2, r3, #22
 800dd1e:	d402      	bmi.n	800dd26 <_vfiprintf_r+0x2a>
 800dd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd22:	f7fe fc48 	bl	800c5b6 <__retarget_lock_acquire_recursive>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	071b      	lsls	r3, r3, #28
 800dd2a:	d501      	bpl.n	800dd30 <_vfiprintf_r+0x34>
 800dd2c:	692b      	ldr	r3, [r5, #16]
 800dd2e:	b99b      	cbnz	r3, 800dd58 <_vfiprintf_r+0x5c>
 800dd30:	4629      	mov	r1, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7fe fb4a 	bl	800c3cc <__swsetup_r>
 800dd38:	b170      	cbz	r0, 800dd58 <_vfiprintf_r+0x5c>
 800dd3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd3c:	07dc      	lsls	r4, r3, #31
 800dd3e:	d504      	bpl.n	800dd4a <_vfiprintf_r+0x4e>
 800dd40:	f04f 30ff 	mov.w	r0, #4294967295
 800dd44:	b01d      	add	sp, #116	@ 0x74
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	0598      	lsls	r0, r3, #22
 800dd4e:	d4f7      	bmi.n	800dd40 <_vfiprintf_r+0x44>
 800dd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd52:	f7fe fc31 	bl	800c5b8 <__retarget_lock_release_recursive>
 800dd56:	e7f3      	b.n	800dd40 <_vfiprintf_r+0x44>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5c:	2320      	movs	r3, #32
 800dd5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd62:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd66:	2330      	movs	r3, #48	@ 0x30
 800dd68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df18 <_vfiprintf_r+0x21c>
 800dd6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd70:	f04f 0901 	mov.w	r9, #1
 800dd74:	4623      	mov	r3, r4
 800dd76:	469a      	mov	sl, r3
 800dd78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd7c:	b10a      	cbz	r2, 800dd82 <_vfiprintf_r+0x86>
 800dd7e:	2a25      	cmp	r2, #37	@ 0x25
 800dd80:	d1f9      	bne.n	800dd76 <_vfiprintf_r+0x7a>
 800dd82:	ebba 0b04 	subs.w	fp, sl, r4
 800dd86:	d00b      	beq.n	800dda0 <_vfiprintf_r+0xa4>
 800dd88:	465b      	mov	r3, fp
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ffa1 	bl	800dcd6 <__sfputs_r>
 800dd94:	3001      	adds	r0, #1
 800dd96:	f000 80a7 	beq.w	800dee8 <_vfiprintf_r+0x1ec>
 800dd9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd9c:	445a      	add	r2, fp
 800dd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda0:	f89a 3000 	ldrb.w	r3, [sl]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 809f 	beq.w	800dee8 <_vfiprintf_r+0x1ec>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb4:	f10a 0a01 	add.w	sl, sl, #1
 800ddb8:	9304      	str	r3, [sp, #16]
 800ddba:	9307      	str	r3, [sp, #28]
 800ddbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddc2:	4654      	mov	r4, sl
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddca:	4853      	ldr	r0, [pc, #332]	@ (800df18 <_vfiprintf_r+0x21c>)
 800ddcc:	f7f2 fa38 	bl	8000240 <memchr>
 800ddd0:	9a04      	ldr	r2, [sp, #16]
 800ddd2:	b9d8      	cbnz	r0, 800de0c <_vfiprintf_r+0x110>
 800ddd4:	06d1      	lsls	r1, r2, #27
 800ddd6:	bf44      	itt	mi
 800ddd8:	2320      	movmi	r3, #32
 800ddda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddde:	0713      	lsls	r3, r2, #28
 800dde0:	bf44      	itt	mi
 800dde2:	232b      	movmi	r3, #43	@ 0x2b
 800dde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dde8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddec:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddee:	d015      	beq.n	800de1c <_vfiprintf_r+0x120>
 800ddf0:	9a07      	ldr	r2, [sp, #28]
 800ddf2:	4654      	mov	r4, sl
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f04f 0c0a 	mov.w	ip, #10
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de00:	3b30      	subs	r3, #48	@ 0x30
 800de02:	2b09      	cmp	r3, #9
 800de04:	d94b      	bls.n	800de9e <_vfiprintf_r+0x1a2>
 800de06:	b1b0      	cbz	r0, 800de36 <_vfiprintf_r+0x13a>
 800de08:	9207      	str	r2, [sp, #28]
 800de0a:	e014      	b.n	800de36 <_vfiprintf_r+0x13a>
 800de0c:	eba0 0308 	sub.w	r3, r0, r8
 800de10:	fa09 f303 	lsl.w	r3, r9, r3
 800de14:	4313      	orrs	r3, r2
 800de16:	9304      	str	r3, [sp, #16]
 800de18:	46a2      	mov	sl, r4
 800de1a:	e7d2      	b.n	800ddc2 <_vfiprintf_r+0xc6>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	1d19      	adds	r1, r3, #4
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	9103      	str	r1, [sp, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfbb      	ittet	lt
 800de28:	425b      	neglt	r3, r3
 800de2a:	f042 0202 	orrlt.w	r2, r2, #2
 800de2e:	9307      	strge	r3, [sp, #28]
 800de30:	9307      	strlt	r3, [sp, #28]
 800de32:	bfb8      	it	lt
 800de34:	9204      	strlt	r2, [sp, #16]
 800de36:	7823      	ldrb	r3, [r4, #0]
 800de38:	2b2e      	cmp	r3, #46	@ 0x2e
 800de3a:	d10a      	bne.n	800de52 <_vfiprintf_r+0x156>
 800de3c:	7863      	ldrb	r3, [r4, #1]
 800de3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de40:	d132      	bne.n	800dea8 <_vfiprintf_r+0x1ac>
 800de42:	9b03      	ldr	r3, [sp, #12]
 800de44:	1d1a      	adds	r2, r3, #4
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	9203      	str	r2, [sp, #12]
 800de4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de4e:	3402      	adds	r4, #2
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df28 <_vfiprintf_r+0x22c>
 800de56:	7821      	ldrb	r1, [r4, #0]
 800de58:	2203      	movs	r2, #3
 800de5a:	4650      	mov	r0, sl
 800de5c:	f7f2 f9f0 	bl	8000240 <memchr>
 800de60:	b138      	cbz	r0, 800de72 <_vfiprintf_r+0x176>
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	eba0 000a 	sub.w	r0, r0, sl
 800de68:	2240      	movs	r2, #64	@ 0x40
 800de6a:	4082      	lsls	r2, r0
 800de6c:	4313      	orrs	r3, r2
 800de6e:	3401      	adds	r4, #1
 800de70:	9304      	str	r3, [sp, #16]
 800de72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de76:	4829      	ldr	r0, [pc, #164]	@ (800df1c <_vfiprintf_r+0x220>)
 800de78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de7c:	2206      	movs	r2, #6
 800de7e:	f7f2 f9df 	bl	8000240 <memchr>
 800de82:	2800      	cmp	r0, #0
 800de84:	d03f      	beq.n	800df06 <_vfiprintf_r+0x20a>
 800de86:	4b26      	ldr	r3, [pc, #152]	@ (800df20 <_vfiprintf_r+0x224>)
 800de88:	bb1b      	cbnz	r3, 800ded2 <_vfiprintf_r+0x1d6>
 800de8a:	9b03      	ldr	r3, [sp, #12]
 800de8c:	3307      	adds	r3, #7
 800de8e:	f023 0307 	bic.w	r3, r3, #7
 800de92:	3308      	adds	r3, #8
 800de94:	9303      	str	r3, [sp, #12]
 800de96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de98:	443b      	add	r3, r7
 800de9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de9c:	e76a      	b.n	800dd74 <_vfiprintf_r+0x78>
 800de9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dea2:	460c      	mov	r4, r1
 800dea4:	2001      	movs	r0, #1
 800dea6:	e7a8      	b.n	800ddfa <_vfiprintf_r+0xfe>
 800dea8:	2300      	movs	r3, #0
 800deaa:	3401      	adds	r4, #1
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	4619      	mov	r1, r3
 800deb0:	f04f 0c0a 	mov.w	ip, #10
 800deb4:	4620      	mov	r0, r4
 800deb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deba:	3a30      	subs	r2, #48	@ 0x30
 800debc:	2a09      	cmp	r2, #9
 800debe:	d903      	bls.n	800dec8 <_vfiprintf_r+0x1cc>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d0c6      	beq.n	800de52 <_vfiprintf_r+0x156>
 800dec4:	9105      	str	r1, [sp, #20]
 800dec6:	e7c4      	b.n	800de52 <_vfiprintf_r+0x156>
 800dec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800decc:	4604      	mov	r4, r0
 800dece:	2301      	movs	r3, #1
 800ded0:	e7f0      	b.n	800deb4 <_vfiprintf_r+0x1b8>
 800ded2:	ab03      	add	r3, sp, #12
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	462a      	mov	r2, r5
 800ded8:	4b12      	ldr	r3, [pc, #72]	@ (800df24 <_vfiprintf_r+0x228>)
 800deda:	a904      	add	r1, sp, #16
 800dedc:	4630      	mov	r0, r6
 800dede:	f7fd fce9 	bl	800b8b4 <_printf_float>
 800dee2:	4607      	mov	r7, r0
 800dee4:	1c78      	adds	r0, r7, #1
 800dee6:	d1d6      	bne.n	800de96 <_vfiprintf_r+0x19a>
 800dee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800deea:	07d9      	lsls	r1, r3, #31
 800deec:	d405      	bmi.n	800defa <_vfiprintf_r+0x1fe>
 800deee:	89ab      	ldrh	r3, [r5, #12]
 800def0:	059a      	lsls	r2, r3, #22
 800def2:	d402      	bmi.n	800defa <_vfiprintf_r+0x1fe>
 800def4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800def6:	f7fe fb5f 	bl	800c5b8 <__retarget_lock_release_recursive>
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	065b      	lsls	r3, r3, #25
 800defe:	f53f af1f 	bmi.w	800dd40 <_vfiprintf_r+0x44>
 800df02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df04:	e71e      	b.n	800dd44 <_vfiprintf_r+0x48>
 800df06:	ab03      	add	r3, sp, #12
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	462a      	mov	r2, r5
 800df0c:	4b05      	ldr	r3, [pc, #20]	@ (800df24 <_vfiprintf_r+0x228>)
 800df0e:	a904      	add	r1, sp, #16
 800df10:	4630      	mov	r0, r6
 800df12:	f7fd ff67 	bl	800bde4 <_printf_i>
 800df16:	e7e4      	b.n	800dee2 <_vfiprintf_r+0x1e6>
 800df18:	0800f926 	.word	0x0800f926
 800df1c:	0800f930 	.word	0x0800f930
 800df20:	0800b8b5 	.word	0x0800b8b5
 800df24:	0800dcd7 	.word	0x0800dcd7
 800df28:	0800f92c 	.word	0x0800f92c

0800df2c <__sflush_r>:
 800df2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df34:	0716      	lsls	r6, r2, #28
 800df36:	4605      	mov	r5, r0
 800df38:	460c      	mov	r4, r1
 800df3a:	d454      	bmi.n	800dfe6 <__sflush_r+0xba>
 800df3c:	684b      	ldr	r3, [r1, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	dc02      	bgt.n	800df48 <__sflush_r+0x1c>
 800df42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df44:	2b00      	cmp	r3, #0
 800df46:	dd48      	ble.n	800dfda <__sflush_r+0xae>
 800df48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	d045      	beq.n	800dfda <__sflush_r+0xae>
 800df4e:	2300      	movs	r3, #0
 800df50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df54:	682f      	ldr	r7, [r5, #0]
 800df56:	6a21      	ldr	r1, [r4, #32]
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	d030      	beq.n	800dfbe <__sflush_r+0x92>
 800df5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	0759      	lsls	r1, r3, #29
 800df62:	d505      	bpl.n	800df70 <__sflush_r+0x44>
 800df64:	6863      	ldr	r3, [r4, #4]
 800df66:	1ad2      	subs	r2, r2, r3
 800df68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800df6a:	b10b      	cbz	r3, 800df70 <__sflush_r+0x44>
 800df6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df6e:	1ad2      	subs	r2, r2, r3
 800df70:	2300      	movs	r3, #0
 800df72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df74:	6a21      	ldr	r1, [r4, #32]
 800df76:	4628      	mov	r0, r5
 800df78:	47b0      	blx	r6
 800df7a:	1c43      	adds	r3, r0, #1
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	d106      	bne.n	800df8e <__sflush_r+0x62>
 800df80:	6829      	ldr	r1, [r5, #0]
 800df82:	291d      	cmp	r1, #29
 800df84:	d82b      	bhi.n	800dfde <__sflush_r+0xb2>
 800df86:	4a2a      	ldr	r2, [pc, #168]	@ (800e030 <__sflush_r+0x104>)
 800df88:	40ca      	lsrs	r2, r1
 800df8a:	07d6      	lsls	r6, r2, #31
 800df8c:	d527      	bpl.n	800dfde <__sflush_r+0xb2>
 800df8e:	2200      	movs	r2, #0
 800df90:	6062      	str	r2, [r4, #4]
 800df92:	04d9      	lsls	r1, r3, #19
 800df94:	6922      	ldr	r2, [r4, #16]
 800df96:	6022      	str	r2, [r4, #0]
 800df98:	d504      	bpl.n	800dfa4 <__sflush_r+0x78>
 800df9a:	1c42      	adds	r2, r0, #1
 800df9c:	d101      	bne.n	800dfa2 <__sflush_r+0x76>
 800df9e:	682b      	ldr	r3, [r5, #0]
 800dfa0:	b903      	cbnz	r3, 800dfa4 <__sflush_r+0x78>
 800dfa2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfa6:	602f      	str	r7, [r5, #0]
 800dfa8:	b1b9      	cbz	r1, 800dfda <__sflush_r+0xae>
 800dfaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfae:	4299      	cmp	r1, r3
 800dfb0:	d002      	beq.n	800dfb8 <__sflush_r+0x8c>
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f7ff f95c 	bl	800d270 <_free_r>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfbc:	e00d      	b.n	800dfda <__sflush_r+0xae>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	47b0      	blx	r6
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	1c50      	adds	r0, r2, #1
 800dfc8:	d1c9      	bne.n	800df5e <__sflush_r+0x32>
 800dfca:	682b      	ldr	r3, [r5, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d0c6      	beq.n	800df5e <__sflush_r+0x32>
 800dfd0:	2b1d      	cmp	r3, #29
 800dfd2:	d001      	beq.n	800dfd8 <__sflush_r+0xac>
 800dfd4:	2b16      	cmp	r3, #22
 800dfd6:	d11e      	bne.n	800e016 <__sflush_r+0xea>
 800dfd8:	602f      	str	r7, [r5, #0]
 800dfda:	2000      	movs	r0, #0
 800dfdc:	e022      	b.n	800e024 <__sflush_r+0xf8>
 800dfde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfe2:	b21b      	sxth	r3, r3
 800dfe4:	e01b      	b.n	800e01e <__sflush_r+0xf2>
 800dfe6:	690f      	ldr	r7, [r1, #16]
 800dfe8:	2f00      	cmp	r7, #0
 800dfea:	d0f6      	beq.n	800dfda <__sflush_r+0xae>
 800dfec:	0793      	lsls	r3, r2, #30
 800dfee:	680e      	ldr	r6, [r1, #0]
 800dff0:	bf08      	it	eq
 800dff2:	694b      	ldreq	r3, [r1, #20]
 800dff4:	600f      	str	r7, [r1, #0]
 800dff6:	bf18      	it	ne
 800dff8:	2300      	movne	r3, #0
 800dffa:	eba6 0807 	sub.w	r8, r6, r7
 800dffe:	608b      	str	r3, [r1, #8]
 800e000:	f1b8 0f00 	cmp.w	r8, #0
 800e004:	dde9      	ble.n	800dfda <__sflush_r+0xae>
 800e006:	6a21      	ldr	r1, [r4, #32]
 800e008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e00a:	4643      	mov	r3, r8
 800e00c:	463a      	mov	r2, r7
 800e00e:	4628      	mov	r0, r5
 800e010:	47b0      	blx	r6
 800e012:	2800      	cmp	r0, #0
 800e014:	dc08      	bgt.n	800e028 <__sflush_r+0xfc>
 800e016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e01e:	81a3      	strh	r3, [r4, #12]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e028:	4407      	add	r7, r0
 800e02a:	eba8 0800 	sub.w	r8, r8, r0
 800e02e:	e7e7      	b.n	800e000 <__sflush_r+0xd4>
 800e030:	20400001 	.word	0x20400001

0800e034 <_fflush_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	690b      	ldr	r3, [r1, #16]
 800e038:	4605      	mov	r5, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	b913      	cbnz	r3, 800e044 <_fflush_r+0x10>
 800e03e:	2500      	movs	r5, #0
 800e040:	4628      	mov	r0, r5
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	b118      	cbz	r0, 800e04e <_fflush_r+0x1a>
 800e046:	6a03      	ldr	r3, [r0, #32]
 800e048:	b90b      	cbnz	r3, 800e04e <_fflush_r+0x1a>
 800e04a:	f7fe f875 	bl	800c138 <__sinit>
 800e04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0f3      	beq.n	800e03e <_fflush_r+0xa>
 800e056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e058:	07d0      	lsls	r0, r2, #31
 800e05a:	d404      	bmi.n	800e066 <_fflush_r+0x32>
 800e05c:	0599      	lsls	r1, r3, #22
 800e05e:	d402      	bmi.n	800e066 <_fflush_r+0x32>
 800e060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e062:	f7fe faa8 	bl	800c5b6 <__retarget_lock_acquire_recursive>
 800e066:	4628      	mov	r0, r5
 800e068:	4621      	mov	r1, r4
 800e06a:	f7ff ff5f 	bl	800df2c <__sflush_r>
 800e06e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e070:	07da      	lsls	r2, r3, #31
 800e072:	4605      	mov	r5, r0
 800e074:	d4e4      	bmi.n	800e040 <_fflush_r+0xc>
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	059b      	lsls	r3, r3, #22
 800e07a:	d4e1      	bmi.n	800e040 <_fflush_r+0xc>
 800e07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e07e:	f7fe fa9b 	bl	800c5b8 <__retarget_lock_release_recursive>
 800e082:	e7dd      	b.n	800e040 <_fflush_r+0xc>

0800e084 <__swhatbuf_r>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	460c      	mov	r4, r1
 800e088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e08c:	2900      	cmp	r1, #0
 800e08e:	b096      	sub	sp, #88	@ 0x58
 800e090:	4615      	mov	r5, r2
 800e092:	461e      	mov	r6, r3
 800e094:	da0d      	bge.n	800e0b2 <__swhatbuf_r+0x2e>
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e09c:	f04f 0100 	mov.w	r1, #0
 800e0a0:	bf14      	ite	ne
 800e0a2:	2340      	movne	r3, #64	@ 0x40
 800e0a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	6031      	str	r1, [r6, #0]
 800e0ac:	602b      	str	r3, [r5, #0]
 800e0ae:	b016      	add	sp, #88	@ 0x58
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
 800e0b2:	466a      	mov	r2, sp
 800e0b4:	f000 f862 	bl	800e17c <_fstat_r>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	dbec      	blt.n	800e096 <__swhatbuf_r+0x12>
 800e0bc:	9901      	ldr	r1, [sp, #4]
 800e0be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0c6:	4259      	negs	r1, r3
 800e0c8:	4159      	adcs	r1, r3
 800e0ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0ce:	e7eb      	b.n	800e0a8 <__swhatbuf_r+0x24>

0800e0d0 <__smakebuf_r>:
 800e0d0:	898b      	ldrh	r3, [r1, #12]
 800e0d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0d4:	079d      	lsls	r5, r3, #30
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	460c      	mov	r4, r1
 800e0da:	d507      	bpl.n	800e0ec <__smakebuf_r+0x1c>
 800e0dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	6123      	str	r3, [r4, #16]
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	6163      	str	r3, [r4, #20]
 800e0e8:	b003      	add	sp, #12
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ec:	ab01      	add	r3, sp, #4
 800e0ee:	466a      	mov	r2, sp
 800e0f0:	f7ff ffc8 	bl	800e084 <__swhatbuf_r>
 800e0f4:	9f00      	ldr	r7, [sp, #0]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7fd faae 	bl	800b65c <_malloc_r>
 800e100:	b948      	cbnz	r0, 800e116 <__smakebuf_r+0x46>
 800e102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e106:	059a      	lsls	r2, r3, #22
 800e108:	d4ee      	bmi.n	800e0e8 <__smakebuf_r+0x18>
 800e10a:	f023 0303 	bic.w	r3, r3, #3
 800e10e:	f043 0302 	orr.w	r3, r3, #2
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	e7e2      	b.n	800e0dc <__smakebuf_r+0xc>
 800e116:	89a3      	ldrh	r3, [r4, #12]
 800e118:	6020      	str	r0, [r4, #0]
 800e11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11e:	81a3      	strh	r3, [r4, #12]
 800e120:	9b01      	ldr	r3, [sp, #4]
 800e122:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e126:	b15b      	cbz	r3, 800e140 <__smakebuf_r+0x70>
 800e128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e12c:	4630      	mov	r0, r6
 800e12e:	f000 f837 	bl	800e1a0 <_isatty_r>
 800e132:	b128      	cbz	r0, 800e140 <__smakebuf_r+0x70>
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	f043 0301 	orr.w	r3, r3, #1
 800e13e:	81a3      	strh	r3, [r4, #12]
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	431d      	orrs	r5, r3
 800e144:	81a5      	strh	r5, [r4, #12]
 800e146:	e7cf      	b.n	800e0e8 <__smakebuf_r+0x18>

0800e148 <memmove>:
 800e148:	4288      	cmp	r0, r1
 800e14a:	b510      	push	{r4, lr}
 800e14c:	eb01 0402 	add.w	r4, r1, r2
 800e150:	d902      	bls.n	800e158 <memmove+0x10>
 800e152:	4284      	cmp	r4, r0
 800e154:	4623      	mov	r3, r4
 800e156:	d807      	bhi.n	800e168 <memmove+0x20>
 800e158:	1e43      	subs	r3, r0, #1
 800e15a:	42a1      	cmp	r1, r4
 800e15c:	d008      	beq.n	800e170 <memmove+0x28>
 800e15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e166:	e7f8      	b.n	800e15a <memmove+0x12>
 800e168:	4402      	add	r2, r0
 800e16a:	4601      	mov	r1, r0
 800e16c:	428a      	cmp	r2, r1
 800e16e:	d100      	bne.n	800e172 <memmove+0x2a>
 800e170:	bd10      	pop	{r4, pc}
 800e172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e17a:	e7f7      	b.n	800e16c <memmove+0x24>

0800e17c <_fstat_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4d07      	ldr	r5, [pc, #28]	@ (800e19c <_fstat_r+0x20>)
 800e180:	2300      	movs	r3, #0
 800e182:	4604      	mov	r4, r0
 800e184:	4608      	mov	r0, r1
 800e186:	4611      	mov	r1, r2
 800e188:	602b      	str	r3, [r5, #0]
 800e18a:	f7f5 f893 	bl	80032b4 <_fstat>
 800e18e:	1c43      	adds	r3, r0, #1
 800e190:	d102      	bne.n	800e198 <_fstat_r+0x1c>
 800e192:	682b      	ldr	r3, [r5, #0]
 800e194:	b103      	cbz	r3, 800e198 <_fstat_r+0x1c>
 800e196:	6023      	str	r3, [r4, #0]
 800e198:	bd38      	pop	{r3, r4, r5, pc}
 800e19a:	bf00      	nop
 800e19c:	20002590 	.word	0x20002590

0800e1a0 <_isatty_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d06      	ldr	r5, [pc, #24]	@ (800e1bc <_isatty_r+0x1c>)
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	f7f5 f892 	bl	80032d4 <_isatty>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d102      	bne.n	800e1ba <_isatty_r+0x1a>
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	b103      	cbz	r3, 800e1ba <_isatty_r+0x1a>
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	20002590 	.word	0x20002590

0800e1c0 <memcpy>:
 800e1c0:	440a      	add	r2, r1
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1c8:	d100      	bne.n	800e1cc <memcpy+0xc>
 800e1ca:	4770      	bx	lr
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1d6:	4291      	cmp	r1, r2
 800e1d8:	d1f9      	bne.n	800e1ce <memcpy+0xe>
 800e1da:	bd10      	pop	{r4, pc}

0800e1dc <__assert_func>:
 800e1dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1de:	4614      	mov	r4, r2
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4b09      	ldr	r3, [pc, #36]	@ (800e208 <__assert_func+0x2c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	68d8      	ldr	r0, [r3, #12]
 800e1ea:	b14c      	cbz	r4, 800e200 <__assert_func+0x24>
 800e1ec:	4b07      	ldr	r3, [pc, #28]	@ (800e20c <__assert_func+0x30>)
 800e1ee:	9100      	str	r1, [sp, #0]
 800e1f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1f4:	4906      	ldr	r1, [pc, #24]	@ (800e210 <__assert_func+0x34>)
 800e1f6:	462b      	mov	r3, r5
 800e1f8:	f000 f870 	bl	800e2dc <fiprintf>
 800e1fc:	f000 f880 	bl	800e300 <abort>
 800e200:	4b04      	ldr	r3, [pc, #16]	@ (800e214 <__assert_func+0x38>)
 800e202:	461c      	mov	r4, r3
 800e204:	e7f3      	b.n	800e1ee <__assert_func+0x12>
 800e206:	bf00      	nop
 800e208:	20000030 	.word	0x20000030
 800e20c:	0800f941 	.word	0x0800f941
 800e210:	0800f94e 	.word	0x0800f94e
 800e214:	0800f97c 	.word	0x0800f97c

0800e218 <_calloc_r>:
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	fba1 5402 	umull	r5, r4, r1, r2
 800e21e:	b934      	cbnz	r4, 800e22e <_calloc_r+0x16>
 800e220:	4629      	mov	r1, r5
 800e222:	f7fd fa1b 	bl	800b65c <_malloc_r>
 800e226:	4606      	mov	r6, r0
 800e228:	b928      	cbnz	r0, 800e236 <_calloc_r+0x1e>
 800e22a:	4630      	mov	r0, r6
 800e22c:	bd70      	pop	{r4, r5, r6, pc}
 800e22e:	220c      	movs	r2, #12
 800e230:	6002      	str	r2, [r0, #0]
 800e232:	2600      	movs	r6, #0
 800e234:	e7f9      	b.n	800e22a <_calloc_r+0x12>
 800e236:	462a      	mov	r2, r5
 800e238:	4621      	mov	r1, r4
 800e23a:	f7fe f91d 	bl	800c478 <memset>
 800e23e:	e7f4      	b.n	800e22a <_calloc_r+0x12>

0800e240 <__ascii_mbtowc>:
 800e240:	b082      	sub	sp, #8
 800e242:	b901      	cbnz	r1, 800e246 <__ascii_mbtowc+0x6>
 800e244:	a901      	add	r1, sp, #4
 800e246:	b142      	cbz	r2, 800e25a <__ascii_mbtowc+0x1a>
 800e248:	b14b      	cbz	r3, 800e25e <__ascii_mbtowc+0x1e>
 800e24a:	7813      	ldrb	r3, [r2, #0]
 800e24c:	600b      	str	r3, [r1, #0]
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	1e10      	subs	r0, r2, #0
 800e252:	bf18      	it	ne
 800e254:	2001      	movne	r0, #1
 800e256:	b002      	add	sp, #8
 800e258:	4770      	bx	lr
 800e25a:	4610      	mov	r0, r2
 800e25c:	e7fb      	b.n	800e256 <__ascii_mbtowc+0x16>
 800e25e:	f06f 0001 	mvn.w	r0, #1
 800e262:	e7f8      	b.n	800e256 <__ascii_mbtowc+0x16>

0800e264 <_realloc_r>:
 800e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e268:	4607      	mov	r7, r0
 800e26a:	4614      	mov	r4, r2
 800e26c:	460d      	mov	r5, r1
 800e26e:	b921      	cbnz	r1, 800e27a <_realloc_r+0x16>
 800e270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e274:	4611      	mov	r1, r2
 800e276:	f7fd b9f1 	b.w	800b65c <_malloc_r>
 800e27a:	b92a      	cbnz	r2, 800e288 <_realloc_r+0x24>
 800e27c:	f7fe fff8 	bl	800d270 <_free_r>
 800e280:	4625      	mov	r5, r4
 800e282:	4628      	mov	r0, r5
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e288:	f000 f841 	bl	800e30e <_malloc_usable_size_r>
 800e28c:	4284      	cmp	r4, r0
 800e28e:	4606      	mov	r6, r0
 800e290:	d802      	bhi.n	800e298 <_realloc_r+0x34>
 800e292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e296:	d8f4      	bhi.n	800e282 <_realloc_r+0x1e>
 800e298:	4621      	mov	r1, r4
 800e29a:	4638      	mov	r0, r7
 800e29c:	f7fd f9de 	bl	800b65c <_malloc_r>
 800e2a0:	4680      	mov	r8, r0
 800e2a2:	b908      	cbnz	r0, 800e2a8 <_realloc_r+0x44>
 800e2a4:	4645      	mov	r5, r8
 800e2a6:	e7ec      	b.n	800e282 <_realloc_r+0x1e>
 800e2a8:	42b4      	cmp	r4, r6
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	bf28      	it	cs
 800e2b0:	4632      	movcs	r2, r6
 800e2b2:	f7ff ff85 	bl	800e1c0 <memcpy>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f7fe ffd9 	bl	800d270 <_free_r>
 800e2be:	e7f1      	b.n	800e2a4 <_realloc_r+0x40>

0800e2c0 <__ascii_wctomb>:
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	b141      	cbz	r1, 800e2d8 <__ascii_wctomb+0x18>
 800e2c6:	2aff      	cmp	r2, #255	@ 0xff
 800e2c8:	d904      	bls.n	800e2d4 <__ascii_wctomb+0x14>
 800e2ca:	228a      	movs	r2, #138	@ 0x8a
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d2:	4770      	bx	lr
 800e2d4:	700a      	strb	r2, [r1, #0]
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	4770      	bx	lr
	...

0800e2dc <fiprintf>:
 800e2dc:	b40e      	push	{r1, r2, r3}
 800e2de:	b503      	push	{r0, r1, lr}
 800e2e0:	4601      	mov	r1, r0
 800e2e2:	ab03      	add	r3, sp, #12
 800e2e4:	4805      	ldr	r0, [pc, #20]	@ (800e2fc <fiprintf+0x20>)
 800e2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ea:	6800      	ldr	r0, [r0, #0]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	f7ff fd05 	bl	800dcfc <_vfiprintf_r>
 800e2f2:	b002      	add	sp, #8
 800e2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f8:	b003      	add	sp, #12
 800e2fa:	4770      	bx	lr
 800e2fc:	20000030 	.word	0x20000030

0800e300 <abort>:
 800e300:	b508      	push	{r3, lr}
 800e302:	2006      	movs	r0, #6
 800e304:	f000 f834 	bl	800e370 <raise>
 800e308:	2001      	movs	r0, #1
 800e30a:	f7f4 ff83 	bl	8003214 <_exit>

0800e30e <_malloc_usable_size_r>:
 800e30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e312:	1f18      	subs	r0, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	bfbc      	itt	lt
 800e318:	580b      	ldrlt	r3, [r1, r0]
 800e31a:	18c0      	addlt	r0, r0, r3
 800e31c:	4770      	bx	lr

0800e31e <_raise_r>:
 800e31e:	291f      	cmp	r1, #31
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4605      	mov	r5, r0
 800e324:	460c      	mov	r4, r1
 800e326:	d904      	bls.n	800e332 <_raise_r+0x14>
 800e328:	2316      	movs	r3, #22
 800e32a:	6003      	str	r3, [r0, #0]
 800e32c:	f04f 30ff 	mov.w	r0, #4294967295
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e334:	b112      	cbz	r2, 800e33c <_raise_r+0x1e>
 800e336:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e33a:	b94b      	cbnz	r3, 800e350 <_raise_r+0x32>
 800e33c:	4628      	mov	r0, r5
 800e33e:	f000 f831 	bl	800e3a4 <_getpid_r>
 800e342:	4622      	mov	r2, r4
 800e344:	4601      	mov	r1, r0
 800e346:	4628      	mov	r0, r5
 800e348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e34c:	f000 b818 	b.w	800e380 <_kill_r>
 800e350:	2b01      	cmp	r3, #1
 800e352:	d00a      	beq.n	800e36a <_raise_r+0x4c>
 800e354:	1c59      	adds	r1, r3, #1
 800e356:	d103      	bne.n	800e360 <_raise_r+0x42>
 800e358:	2316      	movs	r3, #22
 800e35a:	6003      	str	r3, [r0, #0]
 800e35c:	2001      	movs	r0, #1
 800e35e:	e7e7      	b.n	800e330 <_raise_r+0x12>
 800e360:	2100      	movs	r1, #0
 800e362:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e366:	4620      	mov	r0, r4
 800e368:	4798      	blx	r3
 800e36a:	2000      	movs	r0, #0
 800e36c:	e7e0      	b.n	800e330 <_raise_r+0x12>
	...

0800e370 <raise>:
 800e370:	4b02      	ldr	r3, [pc, #8]	@ (800e37c <raise+0xc>)
 800e372:	4601      	mov	r1, r0
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	f7ff bfd2 	b.w	800e31e <_raise_r>
 800e37a:	bf00      	nop
 800e37c:	20000030 	.word	0x20000030

0800e380 <_kill_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4d07      	ldr	r5, [pc, #28]	@ (800e3a0 <_kill_r+0x20>)
 800e384:	2300      	movs	r3, #0
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	4611      	mov	r1, r2
 800e38c:	602b      	str	r3, [r5, #0]
 800e38e:	f7f4 ff31 	bl	80031f4 <_kill>
 800e392:	1c43      	adds	r3, r0, #1
 800e394:	d102      	bne.n	800e39c <_kill_r+0x1c>
 800e396:	682b      	ldr	r3, [r5, #0]
 800e398:	b103      	cbz	r3, 800e39c <_kill_r+0x1c>
 800e39a:	6023      	str	r3, [r4, #0]
 800e39c:	bd38      	pop	{r3, r4, r5, pc}
 800e39e:	bf00      	nop
 800e3a0:	20002590 	.word	0x20002590

0800e3a4 <_getpid_r>:
 800e3a4:	f7f4 bf1e 	b.w	80031e4 <_getpid>

0800e3a8 <_init>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	bf00      	nop
 800e3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ae:	bc08      	pop	{r3}
 800e3b0:	469e      	mov	lr, r3
 800e3b2:	4770      	bx	lr

0800e3b4 <_fini>:
 800e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b6:	bf00      	nop
 800e3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ba:	bc08      	pop	{r3}
 800e3bc:	469e      	mov	lr, r3
 800e3be:	4770      	bx	lr
