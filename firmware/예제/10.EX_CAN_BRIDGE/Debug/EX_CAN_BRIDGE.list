
EX_CAN_BRIDGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0bc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  0800a2a0  0800a2a0  0000b2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c4  0800b0c4  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b0c4  0800b0c4  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0cc  0800b0cc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0cc  0800b0cc  0000c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0d0  0800b0d0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b0d4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  200001d4  0800b2a8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  0800b2a8  0000d94c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aae  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003750  00000000  00000000  00024cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e16  00000000  00000000  000296a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020744  00000000  00000000  0002a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c49  00000000  00000000  0004abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a79  00000000  00000000  00062843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001262bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  00126300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a284 	.word	0x0800a284

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a284 	.word	0x0800a284

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f2a:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <MX_FDCAN1_Init+0x8c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f36:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f62:	220d      	movs	r2, #13
 8000f64:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f68:	2206      	movs	r2, #6
 8000f6a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_FDCAN1_Init+0x88>)
 8000f98:	f001 fd7e 	bl	8002a98 <HAL_FDCAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000fa2:	f000 fc8f 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	40006400 	.word	0x40006400

08000fb4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	@ 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2244      	movs	r2, #68	@ 0x44
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 f919 	bl	800820c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_FDCAN_MspInit+0xcc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d148      	bne.n	8001076 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fb43 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f000 fc60 	bl	80018c4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_FDCAN_MspInit+0xd0>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001046:	2309      	movs	r3, #9
 8001048:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104e:	4619      	mov	r1, r3
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <HAL_FDCAN_MspInit+0xd4>)
 8001052:	f002 faa1 	bl	8003598 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2015      	movs	r0, #21
 800105c:	f001 fc27 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001060:	2015      	movs	r0, #21
 8001062:	f001 fc3e 	bl	80028e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2016      	movs	r0, #22
 800106c:	f001 fc1f 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001070:	2016      	movs	r0, #22
 8001072:	f001 fc36 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3768      	adds	r7, #104	@ 0x68
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a29      	ldr	r2, [pc, #164]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010f2:	f002 fbd3 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f002 fbcc 	bl	800389c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_GPIO_Init+0xc4>)
 800111e:	f002 fa3b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001122:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113e:	f002 fa2b 	bl	8003598 <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <__io_putchar>:
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// printf 함수 리디렉션
int __io_putchar(int ch) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    (void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	2364      	movs	r3, #100	@ 0x64
 8001160:	2201      	movs	r2, #1
 8001162:	4804      	ldr	r0, [pc, #16]	@ (8001174 <__io_putchar+0x20>)
 8001164:	f004 f852 	bl	800520c <HAL_UART_Transmit>
    return ch;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200003f8 	.word	0x200003f8

08001178 <FDCAN_Init>:


// CAN 관련
void FDCAN_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig = { 0 };
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterIndex = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID1 = 0x500; // 받고싶은 id
 800119e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80011a2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterID2 = 0x7FF; // 11비트 모두 비교
 80011a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011a8:	61bb      	str	r3, [r7, #24]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <FDCAN_Init+0x80>)
 80011b0:	f001 fdcc 	bl	8002d4c <HAL_FDCAN_ConfigFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <FDCAN_Init+0x46>
    {
        Error_Handler();
 80011ba:	f000 fb83 	bl	80018c4 <Error_Handler>
    }
    // CAN 실행
    HAL_StatusTypeDef result;
    result = HAL_FDCAN_Start(&hfdcan1);
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <FDCAN_Init+0x80>)
 80011c0:	f001 fe1e 	bl	8002e00 <HAL_FDCAN_Start>
 80011c4:	4603      	mov	r3, r0
 80011c6:	77fb      	strb	r3, [r7, #31]
    if (result != HAL_OK)
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <FDCAN_Init+0x5c>
    {
        printf("FDCAN Start 실패\r\n");
 80011ce:	480b      	ldr	r0, [pc, #44]	@ (80011fc <FDCAN_Init+0x84>)
 80011d0:	f006 ff06 	bl	8007fe0 <puts>
    }
    result = HAL_FDCAN_ActivateNotification(&hfdcan1,
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <FDCAN_Init+0x80>)
 80011da:	f001 fe7d 	bl	8002ed8 <HAL_FDCAN_ActivateNotification>
 80011de:	4603      	mov	r3, r0
 80011e0:	77fb      	strb	r3, [r7, #31]
            FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
    if (result != HAL_OK)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <FDCAN_Init+0x76>
    {
        printf("FDCAN Notification 등록 실패\r\n");
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <FDCAN_Init+0x88>)
 80011ea:	f006 fef9 	bl	8007fe0 <puts>
    }
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f0 	.word	0x200001f0
 80011fc:	0800a2a0 	.word	0x0800a2a0
 8001200:	0800a2b4 	.word	0x0800a2b4

08001204 <Calculate_Modbus_CRC16>:


// ================= Modbus RTU 관련 ==========================
/* Modbus RTU CRC16 계산 함수 */
static uint16_t Calculate_Modbus_CRC16(uint8_t *data, uint16_t length)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // 1111 1111 1111 1111
 8001210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001214:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 8001216:	2300      	movs	r3, #0
 8001218:	81bb      	strh	r3, [r7, #12]
 800121a:	e022      	b.n	8001262 <Calculate_Modbus_CRC16+0x5e>
    {
        crc ^= data[i]; // 0xFFFF 와 XOR 연산
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4053      	eors	r3, r2
 800122a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 800122c:	2300      	movs	r3, #0
 800122e:	72fb      	strb	r3, [r7, #11]
 8001230:	e011      	b.n	8001256 <Calculate_Modbus_CRC16+0x52>
        {
            if (crc & 0x0001) // LSB가 1이라면..
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <Calculate_Modbus_CRC16+0x46>
            {
                crc = (crc >> 1) ^ 0xA001; // 오른쪽 쉬프트 한칸 -> 0xA001과 XOR연산
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <Calculate_Modbus_CRC16+0x74>)
 8001244:	4053      	eors	r3, r2
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e002      	b.n	8001250 <Calculate_Modbus_CRC16+0x4c>
            }
            else
            {
                crc = crc >> 1; // LSB가 0이라면... 쉬프트만...
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t bit = 0; bit < 8; bit++) // 모든 비트에 대해 ..
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	3301      	adds	r3, #1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	2b07      	cmp	r3, #7
 800125a:	d9ea      	bls.n	8001232 <Calculate_Modbus_CRC16+0x2e>
    for (uint16_t i = 0; i < length; i++) // 들어온 모든 데이터에 대해..
 800125c:	89bb      	ldrh	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	81bb      	strh	r3, [r7, #12]
 8001262:	89ba      	ldrh	r2, [r7, #12]
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3d8      	bcc.n	800121c <Calculate_Modbus_CRC16+0x18>
            }
        }
    }
    return crc;
 800126a:	89fb      	ldrh	r3, [r7, #14]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	ffffa001 	.word	0xffffa001

0800127c <Send_Modbus_Request>:

/* Modbus RTU 요청 전송 */
HAL_StatusTypeDef Send_Modbus_Request(uint8_t slave_addr, uint8_t func_code, uint16_t start_addr, uint16_t reg_count)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4603      	mov	r3, r0
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	460b      	mov	r3, r1
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	807b      	strh	r3, [r7, #2]
    uint8_t request_frame[MODBUS_REQUEST_SIZE];
    uint16_t crc;

    // 프레임 구성
    request_frame[0] = slave_addr;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	733b      	strb	r3, [r7, #12]
    request_frame[1] = func_code;
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	737b      	strb	r3, [r7, #13]
    request_frame[2] = (start_addr >> 8) & 0xFF;    // 시작 주소 상위 바이트
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	73bb      	strb	r3, [r7, #14]
    request_frame[3] = start_addr & 0xFF;           // 시작 주소 하위 바이트
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
    request_frame[4] = (reg_count >> 8) & 0xFF;     // 레지스터 개수 상위 바이트
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	743b      	strb	r3, [r7, #16]
    request_frame[5] = reg_count & 0xFF;            // 레지스터 개수 하위 바이트
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	747b      	strb	r3, [r7, #17]

    // CRC 계산 (첫 6바이트에 대해)
    crc = Calculate_Modbus_CRC16(request_frame, 6);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2106      	movs	r1, #6
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff9b 	bl	8001204 <Calculate_Modbus_CRC16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	82fb      	strh	r3, [r7, #22]

    request_frame[6] = crc & 0xFF;          // CRC 하위 바이트 (리틀엔디안)
 80012d2:	8afb      	ldrh	r3, [r7, #22]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	74bb      	strb	r3, [r7, #18]
    request_frame[7] = (crc >> 8) & 0xFF;   // CRC 상위 바이트
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	74fb      	strb	r3, [r7, #19]

    // UART3(RS485)로 전송
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, request_frame, MODBUS_REQUEST_SIZE, 1000);
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	2208      	movs	r2, #8
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <Send_Modbus_Request+0x9c>)
 80012ee:	f003 ff8d 	bl	800520c <HAL_UART_Transmit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	757b      	strb	r3, [r7, #21]
    if (status == HAL_OK)
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <Send_Modbus_Request+0x88>
    {
        printf("Modbus Request Success!r\n");
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <Send_Modbus_Request+0xa0>)
 80012fe:	f006 fe6f 	bl	8007fe0 <puts>
 8001302:	e004      	b.n	800130e <Send_Modbus_Request+0x92>
    }
    else
    {
        printf("Modbus Request Failed: Status=%d\r\n", status);
 8001304:	7d7b      	ldrb	r3, [r7, #21]
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <Send_Modbus_Request+0xa4>)
 800130a:	f006 fe01 	bl	8007f10 <iprintf>
    }
    return status;
 800130e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	2000048c 	.word	0x2000048c
 800131c:	0800a2d8 	.word	0x0800a2d8
 8001320:	0800a2f4 	.word	0x0800a2f4

08001324 <Process_Modbus_Response>:

/* Modbus RTU 응답 처리 */
HAL_StatusTypeDef Process_Modbus_Response(uint8_t* response_data, uint16_t length)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
    if (length < 5)
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	2b04      	cmp	r3, #4
 8001334:	d801      	bhi.n	800133a <Process_Modbus_Response+0x16>
    {
    	return HAL_ERROR; // 최소 프레임 크기 , 데이터가 없다고 해도 반드시 8바이트중 5바이트는 지켜져야 프레임이된다.
 8001336:	2301      	movs	r3, #1
 8001338:	e05a      	b.n	80013f0 <Process_Modbus_Response+0xcc>
    }


    Modbus_Response_t* response = (Modbus_Response_t*)response_data;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	617b      	str	r3, [r7, #20]

    // 🔧 CRC 검증 - Modbus RTU는 CRC를 리틀 엔디안으로 전송
    uint16_t calc_crc = Calculate_Modbus_CRC16(response_data, length - 2); // crc 제외!! 그래서 2를 뺌!
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	3b02      	subs	r3, #2
 8001342:	b29b      	uxth	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff5c 	bl	8001204 <Calculate_Modbus_CRC16>
 800134c:	4603      	mov	r3, r0
 800134e:	827b      	strh	r3, [r7, #18]


    // 🔧 리틀 엔디안으로 CRC 읽기 (하위바이트 먼저)
    uint16_t recv_crc = response_data[length-2] | (response_data[length-1] << 8);
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	3b02      	subs	r3, #2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b21a      	sxth	r2, r3
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	3b01      	subs	r3, #1
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	440b      	add	r3, r1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b21b      	sxth	r3, r3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	823b      	strh	r3, [r7, #16]

    if (calc_crc != recv_crc)
 8001372:	8a7a      	ldrh	r2, [r7, #18]
 8001374:	8a3b      	ldrh	r3, [r7, #16]
 8001376:	429a      	cmp	r2, r3
 8001378:	d027      	beq.n	80013ca <Process_Modbus_Response+0xa6>
    {
        // 🔧 반대 엔디안으로도 시도해보기
        uint16_t recv_crc_alt = (response_data[length-2] << 8) | response_data[length-1];
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	3b02      	subs	r3, #2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b21b      	sxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	3b01      	subs	r3, #1
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	440b      	add	r3, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21b      	sxth	r3, r3
 800139a:	81fb      	strh	r3, [r7, #14]
        printf("[CRC DEBUG] Trying Big-Endian: 0x%04X\r\n", recv_crc_alt);
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	4619      	mov	r1, r3
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <Process_Modbus_Response+0xd4>)
 80013a2:	f006 fdb5 	bl	8007f10 <iprintf>
        if (calc_crc == recv_crc_alt)
 80013a6:	8a7a      	ldrh	r2, [r7, #18]
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d105      	bne.n	80013ba <Process_Modbus_Response+0x96>
        {
            printf("[CRC INFO] CRC matched with Big-Endian!\r\n");
 80013ae:	4813      	ldr	r0, [pc, #76]	@ (80013fc <Process_Modbus_Response+0xd8>)
 80013b0:	f006 fe16 	bl	8007fe0 <puts>
            recv_crc = recv_crc_alt;  // 빅 엔디안이 맞음
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	823b      	strh	r3, [r7, #16]
 80013b8:	e007      	b.n	80013ca <Process_Modbus_Response+0xa6>
        }
        else
        {
            printf("Modbus CRC Error: Calc=0x%04X, Recv=0x%04X, Alt=0x%04X\r\n",
 80013ba:	8a79      	ldrh	r1, [r7, #18]
 80013bc:	8a3a      	ldrh	r2, [r7, #16]
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	480f      	ldr	r0, [pc, #60]	@ (8001400 <Process_Modbus_Response+0xdc>)
 80013c2:	f006 fda5 	bl	8007f10 <iprintf>
                   calc_crc, recv_crc, recv_crc_alt);
            return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e012      	b.n	80013f0 <Process_Modbus_Response+0xcc>
        }
    }
    // 슬레이브 주소 확인
    if (response->slave_addr != MODBUS_SLAVE_ADDR)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d007      	beq.n	80013e2 <Process_Modbus_Response+0xbe>
    {
        printf("Wrong Slave Address: 0x%02X\r\n", response->slave_addr);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	480a      	ldr	r0, [pc, #40]	@ (8001404 <Process_Modbus_Response+0xe0>)
 80013da:	f006 fd99 	bl	8007f10 <iprintf>
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e006      	b.n	80013f0 <Process_Modbus_Response+0xcc>
    }
    printf("[SUCCESS] CRC OK! Processing sensor data...\r\n");
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <Process_Modbus_Response+0xe4>)
 80013e4:	f006 fdfc 	bl	8007fe0 <puts>
    // 풍량센서 응답 파싱
    Parse_Wind_Sensor_Response(response);
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f000 f819 	bl	8001420 <Parse_Wind_Sensor_Response>
    return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800a318 	.word	0x0800a318
 80013fc:	0800a340 	.word	0x0800a340
 8001400:	0800a36c 	.word	0x0800a36c
 8001404:	0800a3a8 	.word	0x0800a3a8
 8001408:	0800a3c8 	.word	0x0800a3c8

0800140c <Request_Sensor_Data>:


/* 풍량센서 데이터 요청 */
void Request_Sensor_Data(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    // 풍속과 온도 데이터 요청 (위에서 define했던 값 세개!!! (레지스터는 두개))
    Send_Modbus_Request(MODBUS_SLAVE_ADDR, MODBUS_FUNC_READ_HOLD, WIND_SPEED_REG, 2);
 8001410:	2302      	movs	r3, #2
 8001412:	2200      	movs	r2, #0
 8001414:	2103      	movs	r1, #3
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff ff30 	bl	800127c <Send_Modbus_Request>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <Parse_Wind_Sensor_Response>:


/* 풍량센서 응답 데이터 파싱 */
void Parse_Wind_Sensor_Response(Modbus_Response_t* response)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    if (response->function_code == MODBUS_FUNC_READ_HOLD && response->byte_count >= 4)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d12f      	bne.n	8001490 <Parse_Wind_Sensor_Response+0x70>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d92b      	bls.n	8001490 <Parse_Wind_Sensor_Response+0x70>
    {
        // 풍속 데이터 (첫 번째 레지스터)
        uint16_t wind_raw = (response->data[0] << 8) | response->data[1];
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	b21b      	sxth	r3, r3
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	81fb      	strh	r3, [r7, #14]
        sensor_data.wind_speed = wind_raw * 0.1f; // 0.1 m/s 단위
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001498 <Parse_Wind_Sensor_Response+0x78>
 800145c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <Parse_Wind_Sensor_Response+0x7c>)
 8001462:	edc3 7a00 	vstr	s15, [r3]
        sensor_data.timestamp = HAL_GetTick();
 8001466:	f001 f919 	bl	800269c <HAL_GetTick>
 800146a:	4603      	mov	r3, r0
 800146c:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <Parse_Wind_Sensor_Response+0x7c>)
 800146e:	6093      	str	r3, [r2, #8]
        sensor_data.valid = 1;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <Parse_Wind_Sensor_Response+0x7c>)
 8001472:	2201      	movs	r2, #1
 8001474:	731a      	strb	r2, [r3, #12]
        printf("Wind Speed: %.1f m/s",sensor_data.wind_speed);
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <Parse_Wind_Sensor_Response+0x7c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f88c 	bl	8000598 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <Parse_Wind_Sensor_Response+0x80>)
 8001486:	f006 fd43 	bl	8007f10 <iprintf>

        // FDCAN으로 전송
        Bridge_Sensor_to_FDCAN(&sensor_data);
 800148a:	4804      	ldr	r0, [pc, #16]	@ (800149c <Parse_Wind_Sensor_Response+0x7c>)
 800148c:	f000 f80a 	bl	80014a4 <Bridge_Sensor_to_FDCAN>
    }
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	3dcccccd 	.word	0x3dcccccd
 800149c:	20000254 	.word	0x20000254
 80014a0:	0800a3f8 	.word	0x0800a3f8

080014a4 <Bridge_Sensor_to_FDCAN>:

/* 센서 데이터를 FDCAN으로 전송 */
HAL_StatusTypeDef Bridge_Sensor_to_FDCAN(Wind_Sensor_Data_t* sensor_data)
{
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b090      	sub	sp, #64	@ 0x40
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
    if (!sensor_data->valid)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <Bridge_Sensor_to_FDCAN+0x14>
    {
    	return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e06b      	b.n	8001590 <Bridge_Sensor_to_FDCAN+0xec>


    uint8_t can_data[8];

    // 풍속 데이터 (2바이트, 기본적으로 0.1 m/s 단위로 레지스터에 기록한다고 함.)
    uint16_t wind_data = (uint16_t)(sensor_data->wind_speed * 10);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ca:	ee17 3a90 	vmov	r3, s15
 80014ce:	86fb      	strh	r3, [r7, #54]	@ 0x36


    can_data[0] = (wind_data >> 8) & 0xFF; // 풍속 데이터 16비트중 상위 8비트!!
 80014d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    can_data[1] = wind_data & 0xFF; // 풍속 데이터 16비트중 하위 8비트!!
 80014dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // 본 예제에서는 풍속 외 온도등은 사용하지 않습니다.
    can_data[2] = 0 & 0xFF;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    can_data[3] = 0 & 0xFF;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // 타임스탬프 (4바이트)
    can_data[4] = (sensor_data->timestamp >> 24) & 0xFF;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	0e1b      	lsrs	r3, r3, #24
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    can_data[5] = (sensor_data->timestamp >> 16) & 0xFF;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    can_data[6] = (sensor_data->timestamp >> 8) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    can_data[7] = sensor_data->timestamp & 0xFF;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    // FDCAN 헤더 설정
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = 0x501; // 풍량센서 전용 CAN ID
 800151e:	f240 5301 	movw	r3, #1281	@ 0x501
 8001522:	60bb      	str	r3, [r7, #8]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800152c:	2308      	movs	r3, #8
 800152e:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.MessageMarker = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, can_data);
 8001544:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4619      	mov	r1, r3
 800154e:	4812      	ldr	r0, [pc, #72]	@ (8001598 <Bridge_Sensor_to_FDCAN+0xf4>)
 8001550:	f001 fc7e 	bl	8002e50 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    if (status == HAL_OK) {
 800155a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800155e:	2b00      	cmp	r3, #0
 8001560:	d114      	bne.n	800158c <Bridge_Sensor_to_FDCAN+0xe8>

        printf("Sensor→FDCAN: ID=0x501, Wind=%.1f m/s, Temp=%.1f °C\r\n",
               sensor_data->wind_speed, sensor_data->temperature);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
        printf("Sensor→FDCAN: ID=0x501, Wind=%.1f m/s, Temp=%.1f °C\r\n",
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f816 	bl	8000598 <__aeabi_f2d>
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
               sensor_data->wind_speed, sensor_data->temperature);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
        printf("Sensor→FDCAN: ID=0x501, Wind=%.1f m/s, Temp=%.1f °C\r\n",
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f80f 	bl	8000598 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9cd 2300 	strd	r2, r3, [sp]
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <Bridge_Sensor_to_FDCAN+0xf8>)
 8001588:	f006 fcc2 	bl	8007f10 <iprintf>
    }
    return status;
 800158c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 8001590:	4618      	mov	r0, r3
 8001592:	3738      	adds	r7, #56	@ 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bdb0      	pop	{r4, r5, r7, pc}
 8001598:	200001f0 	.word	0x200001f0
 800159c:	0800a410 	.word	0x0800a410

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f001 f814 	bl	80025d2 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f8ff 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ae:	f7ff fd6d 	bl	800108c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80015b2:	f7ff fcb7 	bl	8000f24 <MX_FDCAN1_Init>
  MX_USB_PCD_Init();
 80015b6:	f000 ff87 	bl	80024c8 <MX_USB_PCD_Init>
  MX_SPI3_Init();
 80015ba:	f000 fc6b 	bl	8001e94 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80015be:	f000 fe8b 	bl	80022d8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80015c2:	f000 fe3d 	bl	8002240 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Init();
 80015c6:	f7ff fdd7 	bl	8001178 <FDCAN_Init>
  // Modbus RTU 수신 시작
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	4961      	ldr	r1, [pc, #388]	@ (8001754 <main+0x1b4>)
 80015ce:	4862      	ldr	r0, [pc, #392]	@ (8001758 <main+0x1b8>)
 80015d0:	f003 feaa 	bl	8005328 <HAL_UART_Receive_IT>
  OLED_init();
 80015d4:	f000 f9fa 	bl	80019cc <OLED_init>
  OLED_fill(0);
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fad1 	bl	8001b80 <OLED_fill>
  oled_drawString(0, 0, "Modbus Monitor", &font_07x10, 15);      // ✨ 제목 변경
 80015de:	230f      	movs	r3, #15
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <main+0x1bc>)
 80015e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001760 <main+0x1c0>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 fc1d 	bl	8001e28 <oled_drawString>
  oled_drawString(0, 20, "Wind Speed:", &font_07x10, 15);         // CAN 수신용
 80015ee:	230f      	movs	r3, #15
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <main+0x1bc>)
 80015f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001764 <main+0x1c4>)
 80015f6:	2114      	movs	r1, #20
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fc15 	bl	8001e28 <oled_drawString>
  oled_drawString(0, 50, "CAN ID: 0x501", &font_07x10, 15);            // ✨ CAN ID 표시 추가
 80015fe:	230f      	movs	r3, #15
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4b56      	ldr	r3, [pc, #344]	@ (800175c <main+0x1bc>)
 8001604:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <main+0x1c8>)
 8001606:	2132      	movs	r1, #50	@ 0x32
 8001608:	2000      	movs	r0, #0
 800160a:	f000 fc0d 	bl	8001e28 <oled_drawString>
  printf("Modbus RTU Bridge Started!\r\n");
 800160e:	4857      	ldr	r0, [pc, #348]	@ (800176c <main+0x1cc>)
 8001610:	f006 fce6 	bl	8007fe0 <puts>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t last_request_time = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]

  while (1) {

	     // 1초마다 센서 데이터 요청
	     if (HAL_GetTick() - last_request_time >= 1000) {
 8001618:	f001 f840 	bl	800269c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001626:	d30f      	bcc.n	8001648 <main+0xa8>
	         // 🔧 이전 데이터 정리
	         modbus_rx_index = 0;
 8001628:	4b51      	ldr	r3, [pc, #324]	@ (8001770 <main+0x1d0>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 800162e:	4b51      	ldr	r3, [pc, #324]	@ (8001774 <main+0x1d4>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
	         Request_Sensor_Data();
 8001634:	f7ff feea 	bl	800140c <Request_Sensor_Data>
	         last_request_time = HAL_GetTick();
 8001638:	f001 f830 	bl	800269c <HAL_GetTick>
 800163c:	6078      	str	r0, [r7, #4]
	         last_rx_time = HAL_GetTick(); // 타이밍 리셋
 800163e:	f001 f82d 	bl	800269c <HAL_GetTick>
 8001642:	4603      	mov	r3, r0
 8001644:	4a4c      	ldr	r2, [pc, #304]	@ (8001778 <main+0x1d8>)
 8001646:	6013      	str	r3, [r2, #0]
	     }
	     // 🔧 타이밍 기반 프레임 완료 검출 (50ms 타임아웃)
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 8001648:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <main+0x1d0>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <main+0xda>
 8001650:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <main+0x1d4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d110      	bne.n	800167a <main+0xda>
	         (HAL_GetTick() - last_rx_time > 50)) {
 8001658:	f001 f820 	bl	800269c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <main+0x1d8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1ad3      	subs	r3, r2, r3
	     if (modbus_rx_index > 0 && !modbus_frame_ready &&
 8001664:	2b32      	cmp	r3, #50	@ 0x32
 8001666:	d908      	bls.n	800167a <main+0xda>
	         modbus_frame_ready = 1;
 8001668:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <main+0x1d4>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
	         printf("\r\n[TIMEOUT] Frame complete by timeout: %d bytes\r\n", modbus_rx_index);
 800166e:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <main+0x1d0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	4841      	ldr	r0, [pc, #260]	@ (800177c <main+0x1dc>)
 8001676:	f006 fc4b 	bl	8007f10 <iprintf>
	     }
	     // Modbus 응답 처리
	     if (modbus_frame_ready) {
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <main+0x1d4>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d03c      	beq.n	80016fc <main+0x15c>
	         printf("\r\n[INFO] ===== Modbus frame ready, length: %d =====\r\n", modbus_rx_index);
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <main+0x1d0>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	483d      	ldr	r0, [pc, #244]	@ (8001780 <main+0x1e0>)
 800168a:	f006 fc41 	bl	8007f10 <iprintf>
	         // Raw 데이터 출력
	         printf("[RAW] ");
 800168e:	483d      	ldr	r0, [pc, #244]	@ (8001784 <main+0x1e4>)
 8001690:	f006 fc3e 	bl	8007f10 <iprintf>
	         for (int i = 0; i < modbus_rx_index; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	e00a      	b.n	80016b0 <main+0x110>
	             printf("%02X ", modbus_rx_buffer[i]);
 800169a:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <main+0x1e8>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4839      	ldr	r0, [pc, #228]	@ (800178c <main+0x1ec>)
 80016a6:	f006 fc33 	bl	8007f10 <iprintf>
	         for (int i = 0; i < modbus_rx_index; i++) {
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <main+0x1d0>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	dbee      	blt.n	800169a <main+0xfa>
	         }
	         printf("\r\n");
 80016bc:	4834      	ldr	r0, [pc, #208]	@ (8001790 <main+0x1f0>)
 80016be:	f006 fc8f 	bl	8007fe0 <puts>
	         // 🔧 최소 길이 체크 (5바이트 이상)
	         if (modbus_rx_index >= 5) {
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <main+0x1d0>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d906      	bls.n	80016d8 <main+0x138>
	             Process_Modbus_Response(modbus_rx_buffer, modbus_rx_index);
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <main+0x1d0>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	482d      	ldr	r0, [pc, #180]	@ (8001788 <main+0x1e8>)
 80016d2:	f7ff fe27 	bl	8001324 <Process_Modbus_Response>
 80016d6:	e005      	b.n	80016e4 <main+0x144>
	         } else {
	             printf("[ERROR] Frame too short: %d bytes\r\n", modbus_rx_index);
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <main+0x1d0>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	482d      	ldr	r0, [pc, #180]	@ (8001794 <main+0x1f4>)
 80016e0:	f006 fc16 	bl	8007f10 <iprintf>
	         }
	         // 버퍼 리셋
	         modbus_rx_index = 0;
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <main+0x1d0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
	         modbus_frame_ready = 0;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <main+0x1d4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	         memset(modbus_rx_buffer, 0, sizeof(modbus_rx_buffer));
 80016f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f4:	2100      	movs	r1, #0
 80016f6:	4824      	ldr	r0, [pc, #144]	@ (8001788 <main+0x1e8>)
 80016f8:	f006 fd88 	bl	800820c <memset>
	     }
	     // OLED 업데이트 (기존과 동일)
	     if (sensor_data.valid) {
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <main+0x1f8>)
 80016fe:	7b1b      	ldrb	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d016      	beq.n	8001732 <main+0x192>
	         snprintf(buf, sizeof(buf), "%.1f m/s", sensor_data.wind_speed);
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <main+0x1f8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff45 	bl	8000598 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9cd 2300 	strd	r2, r3, [sp]
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <main+0x1fc>)
 8001718:	2120      	movs	r1, #32
 800171a:	4821      	ldr	r0, [pc, #132]	@ (80017a0 <main+0x200>)
 800171c:	f006 fc68 	bl	8007ff0 <sniprintf>
	         oled_drawString(80, 20, buf, &font_07x10, 15);
 8001720:	230f      	movs	r3, #15
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <main+0x1bc>)
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <main+0x200>)
 8001728:	2114      	movs	r1, #20
 800172a:	2050      	movs	r0, #80	@ 0x50
 800172c:	f000 fb7c 	bl	8001e28 <oled_drawString>
 8001730:	e772      	b.n	8001618 <main+0x78>
	     } else {
	         oled_drawString(80, 20, "WAIT...", &font_07x10, 15);
 8001732:	230f      	movs	r3, #15
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <main+0x1bc>)
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <main+0x204>)
 800173a:	2114      	movs	r1, #20
 800173c:	2050      	movs	r0, #80	@ 0x50
 800173e:	f000 fb73 	bl	8001e28 <oled_drawString>
	         oled_drawString(0, 40, "CAN Transmitting......", &font_07x10, 15);
 8001742:	230f      	movs	r3, #15
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <main+0x1bc>)
 8001748:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <main+0x208>)
 800174a:	2128      	movs	r1, #40	@ 0x28
 800174c:	2000      	movs	r0, #0
 800174e:	f000 fb6b 	bl	8001e28 <oled_drawString>
	     if (HAL_GetTick() - last_request_time >= 1000) {
 8001752:	e761      	b.n	8001618 <main+0x78>
 8001754:	20000367 	.word	0x20000367
 8001758:	2000048c 	.word	0x2000048c
 800175c:	0800acf4 	.word	0x0800acf4
 8001760:	0800a44c 	.word	0x0800a44c
 8001764:	0800a45c 	.word	0x0800a45c
 8001768:	0800a468 	.word	0x0800a468
 800176c:	0800a478 	.word	0x0800a478
 8001770:	20000364 	.word	0x20000364
 8001774:	20000366 	.word	0x20000366
 8001778:	20000388 	.word	0x20000388
 800177c:	0800a494 	.word	0x0800a494
 8001780:	0800a4c8 	.word	0x0800a4c8
 8001784:	0800a500 	.word	0x0800a500
 8001788:	20000264 	.word	0x20000264
 800178c:	0800a508 	.word	0x0800a508
 8001790:	0800a510 	.word	0x0800a510
 8001794:	0800a514 	.word	0x0800a514
 8001798:	20000254 	.word	0x20000254
 800179c:	0800a538 	.word	0x0800a538
 80017a0:	20000368 	.word	0x20000368
 80017a4:	0800a544 	.word	0x0800a544
 80017a8:	0800a54c 	.word	0x0800a54c

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	@ 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	2238      	movs	r2, #56	@ 0x38
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 fd26 	bl	800820c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f002 f974 	bl	8003abc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80017d4:	2321      	movs	r3, #33	@ 0x21
 80017d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017de:	2301      	movs	r3, #1
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e6:	2303      	movs	r3, #3
 80017e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017ee:	2328      	movs	r3, #40	@ 0x28
 80017f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0318 	add.w	r3, r7, #24
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fa0e 	bl	8003c24 <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800180e:	f000 f859 	bl	80018c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2104      	movs	r1, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fd0c 	bl	8004248 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001836:	f000 f845 	bl	80018c4 <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3750      	adds	r7, #80	@ 0x50
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// UART 수신 콜백 수정
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <HAL_UART_RxCpltCallback+0x60>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d121      	bne.n	800189a <HAL_UART_RxCpltCallback+0x56>
    {
    	last_rx_time = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_UART_RxCpltCallback+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
        // 수신된 바이트 저장
        modbus_rx_buffer[modbus_rx_index++] = rx_byte;
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_UART_RxCpltCallback+0x68>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	b291      	uxth	r1, r2
 8001864:	4a11      	ldr	r2, [pc, #68]	@ (80018ac <HAL_UART_RxCpltCallback+0x68>)
 8001866:	8011      	strh	r1, [r2, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_UART_RxCpltCallback+0x70>)
 8001870:	5499      	strb	r1, [r3, r2]
        last_rx_time = HAL_GetTick();
 8001872:	f000 ff13 	bl	800269c <HAL_GetTick>
 8001876:	4603      	mov	r3, r0
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_UART_RxCpltCallback+0x64>)
 800187a:	6013      	str	r3, [r2, #0]
        // 🔧 7바이트 강제 완료 제거 - 타이밍으로만 판단
        if (modbus_rx_index >= sizeof(modbus_rx_buffer) - 1) {
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_UART_RxCpltCallback+0x68>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	2bfe      	cmp	r3, #254	@ 0xfe
 8001882:	d905      	bls.n	8001890 <HAL_UART_RxCpltCallback+0x4c>
            modbus_frame_ready = 1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_UART_RxCpltCallback+0x74>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
            printf("\r\n[DEBUG] Buffer full, frame ready\r\n");
 800188a:	480c      	ldr	r0, [pc, #48]	@ (80018bc <HAL_UART_RxCpltCallback+0x78>)
 800188c:	f006 fba8 	bl	8007fe0 <puts>
        }
        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <HAL_UART_RxCpltCallback+0x7c>)
 8001896:	f003 fd47 	bl	8005328 <HAL_UART_Receive_IT>
    }
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40004800 	.word	0x40004800
 80018a8:	20000388 	.word	0x20000388
 80018ac:	20000364 	.word	0x20000364
 80018b0:	20000367 	.word	0x20000367
 80018b4:	20000264 	.word	0x20000264
 80018b8:	20000366 	.word	0x20000366
 80018bc:	0800a564 	.word	0x0800a564
 80018c0:	2000048c 	.word	0x2000048c

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e4:	f001 ffda 	bl	800389c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f2:	f001 ffd3 	bl	800389c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 80018f6:	1df9      	adds	r1, r7, #7
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	2201      	movs	r2, #1
 80018fe:	4807      	ldr	r0, [pc, #28]	@ (800191c <OLED_write_cmd+0x4c>)
 8001900:	f003 f959 	bl	8004bb6 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800190a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190e:	f001 ffc5 	bl	800389c <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000390 	.word	0x20000390

08001920 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f001 ffb1 	bl	800389c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001944:	f001 ffaa 	bl	800389c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4806      	ldr	r0, [pc, #24]	@ (800196c <OLED_write_data+0x4c>)
 8001952:	f003 f930 	bl	8004bb6 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f001 ff9c 	bl	800389c <HAL_GPIO_WritePin>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000390 	.word	0x20000390

08001970 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	4603      	mov	r3, r0
 8001984:	71bb      	strb	r3, [r7, #6]
 8001986:	460b      	mov	r3, r1
 8001988:	717b      	strb	r3, [r7, #5]
 800198a:	4613      	mov	r3, r2
 800198c:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 800198e:	2015      	movs	r0, #21
 8001990:	f7ff ff9e 	bl	80018d0 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	733b      	strb	r3, [r7, #12]
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2102      	movs	r1, #2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffbc 	bl	8001920 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 80019a8:	2075      	movs	r0, #117	@ 0x75
 80019aa:	f7ff ff91 	bl	80018d0 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	723b      	strb	r3, [r7, #8]
 80019b2:	793b      	ldrb	r3, [r7, #4]
 80019b4:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffaf 	bl	8001920 <OLED_write_data>
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
	...

080019cc <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019d8:	4867      	ldr	r0, [pc, #412]	@ (8001b78 <OLED_init+0x1ac>)
 80019da:	f001 ff5f 	bl	800389c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 80019de:	200a      	movs	r0, #10
 80019e0:	f000 fe68 	bl	80026b4 <HAL_Delay>
  RST_H();
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ea:	4863      	ldr	r0, [pc, #396]	@ (8001b78 <OLED_init+0x1ac>)
 80019ec:	f001 ff56 	bl	800389c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 80019f0:	200a      	movs	r0, #10
 80019f2:	f000 fe5f 	bl	80026b4 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 80019f6:	20ae      	movs	r0, #174	@ 0xae
 80019f8:	f7ff ff6a 	bl	80018d0 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 80019fc:	20fd      	movs	r0, #253	@ 0xfd
 80019fe:	f7ff ff67 	bl	80018d0 <OLED_write_cmd>
  d = 0x12;
 8001a02:	4b5e      	ldr	r3, [pc, #376]	@ (8001b7c <OLED_init+0x1b0>)
 8001a04:	2212      	movs	r2, #18
 8001a06:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	485c      	ldr	r0, [pc, #368]	@ (8001b7c <OLED_init+0x1b0>)
 8001a0c:	f7ff ff88 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8001a10:	20b3      	movs	r0, #179	@ 0xb3
 8001a12:	f7ff ff5d 	bl	80018d0 <OLED_write_cmd>
  d = 0x91;
 8001a16:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <OLED_init+0x1b0>)
 8001a18:	2291      	movs	r2, #145	@ 0x91
 8001a1a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4857      	ldr	r0, [pc, #348]	@ (8001b7c <OLED_init+0x1b0>)
 8001a20:	f7ff ff7e 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 8001a24:	20ca      	movs	r0, #202	@ 0xca
 8001a26:	f7ff ff53 	bl	80018d0 <OLED_write_cmd>
  d = 0x3F;
 8001a2a:	4b54      	ldr	r3, [pc, #336]	@ (8001b7c <OLED_init+0x1b0>)
 8001a2c:	223f      	movs	r2, #63	@ 0x3f
 8001a2e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	4852      	ldr	r0, [pc, #328]	@ (8001b7c <OLED_init+0x1b0>)
 8001a34:	f7ff ff74 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 8001a38:	20a2      	movs	r0, #162	@ 0xa2
 8001a3a:	f7ff ff49 	bl	80018d0 <OLED_write_cmd>
  d = 0x00;
 8001a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b7c <OLED_init+0x1b0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	484d      	ldr	r0, [pc, #308]	@ (8001b7c <OLED_init+0x1b0>)
 8001a48:	f7ff ff6a 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 8001a4c:	20a1      	movs	r0, #161	@ 0xa1
 8001a4e:	f7ff ff3f 	bl	80018d0 <OLED_write_cmd>
  d = 0x00;
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <OLED_init+0x1b0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4848      	ldr	r0, [pc, #288]	@ (8001b7c <OLED_init+0x1b0>)
 8001a5c:	f7ff ff60 	bl	8001920 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 8001a60:	20a0      	movs	r0, #160	@ 0xa0
 8001a62:	f7ff ff35 	bl	80018d0 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x6, 0x11};  // 니블 순서, 듀얼COM 설정
 8001a66:	f241 1306 	movw	r3, #4358	@ 0x1106
 8001a6a:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2102      	movs	r1, #2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff54 	bl	8001920 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 8001a78:	20b5      	movs	r0, #181	@ 0xb5
 8001a7a:	f7ff ff29 	bl	80018d0 <OLED_write_cmd>
  d = 0x00;
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b7c <OLED_init+0x1b0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a84:	2101      	movs	r1, #1
 8001a86:	483d      	ldr	r0, [pc, #244]	@ (8001b7c <OLED_init+0x1b0>)
 8001a88:	f7ff ff4a 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 8001a8c:	20ab      	movs	r0, #171	@ 0xab
 8001a8e:	f7ff ff1f 	bl	80018d0 <OLED_write_cmd>
  d = 0x01;
 8001a92:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <OLED_init+0x1b0>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4838      	ldr	r0, [pc, #224]	@ (8001b7c <OLED_init+0x1b0>)
 8001a9c:	f7ff ff40 	bl	8001920 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 8001aa0:	20b4      	movs	r0, #180	@ 0xb4
 8001aa2:	f7ff ff15 	bl	80018d0 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 8001aa6:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8001aaa:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff34 	bl	8001920 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 8001ab8:	20c1      	movs	r0, #193	@ 0xc1
 8001aba:	f7ff ff09 	bl	80018d0 <OLED_write_cmd>
  d = 0xFF;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <OLED_init+0x1b0>)
 8001ac0:	22ff      	movs	r2, #255	@ 0xff
 8001ac2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	482d      	ldr	r0, [pc, #180]	@ (8001b7c <OLED_init+0x1b0>)
 8001ac8:	f7ff ff2a 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 8001acc:	20c7      	movs	r0, #199	@ 0xc7
 8001ace:	f7ff feff 	bl	80018d0 <OLED_write_cmd>
  d = 0x0F;
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <OLED_init+0x1b0>)
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4828      	ldr	r0, [pc, #160]	@ (8001b7c <OLED_init+0x1b0>)
 8001adc:	f7ff ff20 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 8001ae0:	20b9      	movs	r0, #185	@ 0xb9
 8001ae2:	f7ff fef5 	bl	80018d0 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 8001ae6:	20b1      	movs	r0, #177	@ 0xb1
 8001ae8:	f7ff fef2 	bl	80018d0 <OLED_write_cmd>
  d = 0xE2;
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <OLED_init+0x1b0>)
 8001aee:	22e2      	movs	r2, #226	@ 0xe2
 8001af0:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001af2:	2101      	movs	r1, #1
 8001af4:	4821      	ldr	r0, [pc, #132]	@ (8001b7c <OLED_init+0x1b0>)
 8001af6:	f7ff ff13 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 8001afa:	20d1      	movs	r0, #209	@ 0xd1
 8001afc:	f7ff fee8 	bl	80018d0 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8001b00:	f242 0382 	movw	r3, #8322	@ 0x2082
 8001b04:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff08 	bl	8001920 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8001b10:	20bb      	movs	r0, #187	@ 0xbb
 8001b12:	f7ff fedd 	bl	80018d0 <OLED_write_cmd>
  d = 0x1F;
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <OLED_init+0x1b0>)
 8001b18:	221f      	movs	r2, #31
 8001b1a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4817      	ldr	r0, [pc, #92]	@ (8001b7c <OLED_init+0x1b0>)
 8001b20:	f7ff fefe 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 8001b24:	20b6      	movs	r0, #182	@ 0xb6
 8001b26:	f7ff fed3 	bl	80018d0 <OLED_write_cmd>
  d = 0x08;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <OLED_init+0x1b0>)
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	4812      	ldr	r0, [pc, #72]	@ (8001b7c <OLED_init+0x1b0>)
 8001b34:	f7ff fef4 	bl	8001920 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 8001b38:	20be      	movs	r0, #190	@ 0xbe
 8001b3a:	f7ff fec9 	bl	80018d0 <OLED_write_cmd>
  d = 0x07;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <OLED_init+0x1b0>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8001b44:	2101      	movs	r1, #1
 8001b46:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <OLED_init+0x1b0>)
 8001b48:	f7ff feea 	bl	8001920 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 8001b4c:	20a6      	movs	r0, #166	@ 0xa6
 8001b4e:	f7ff febf 	bl	80018d0 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 8001b52:	20a9      	movs	r0, #169	@ 0xa9
 8001b54:	f7ff febc 	bl	80018d0 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001b58:	233f      	movs	r3, #63	@ 0x3f
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	215b      	movs	r1, #91	@ 0x5b
 8001b5e:	201c      	movs	r0, #28
 8001b60:	f7ff ff06 	bl	8001970 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 8001b64:	20af      	movs	r0, #175	@ 0xaf
 8001b66:	f7ff feb3 	bl	80018d0 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 8001b6a:	2032      	movs	r0, #50	@ 0x32
 8001b6c:	f000 fda2 	bl	80026b4 <HAL_Delay>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	2000038c 	.word	0x2000038c

08001b80 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0a4      	sub	sp, #144	@ 0x90
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 8001ba4:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	2280      	movs	r2, #128	@ 0x80
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f006 fb2c 	bl	800820c <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8001bb4:	233f      	movs	r3, #63	@ 0x3f
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	215b      	movs	r1, #91	@ 0x5b
 8001bba:	201c      	movs	r0, #28
 8001bbc:	f7ff fed8 	bl	8001970 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 8001bc0:	205c      	movs	r0, #92	@ 0x5c
 8001bc2:	f7ff fe85 	bl	80018d0 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bcc:	e00a      	b.n	8001be4 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fea3 	bl	8001920 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 8001bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bde:	3301      	adds	r3, #1
 8001be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bea:	ddf0      	ble.n	8001bce <OLED_fill+0x4e>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3790      	adds	r7, #144	@ 0x90
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	105b      	asrs	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	331c      	adds	r3, #28
 8001c06:	b2db      	uxtb	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ae      	sub	sp, #184	@ 0xb8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b1f      	cmp	r3, #31
 8001c40:	f240 80ea 	bls.w	8001e18 <oled_drawChar+0x1ec>
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c48:	f200 80e6 	bhi.w	8001e18 <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 8001c4c:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d902      	bls.n	8001c5a <oled_drawChar+0x2e>
 8001c54:	230f      	movs	r3, #15
 8001c56:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f2c0 80dd 	blt.w	8001e1c <oled_drawChar+0x1f0>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c70:	f300 80d4 	bgt.w	8001e1c <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f2c0 80d2 	blt.w	8001e20 <oled_drawChar+0x1f4>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	2b40      	cmp	r3, #64	@ 0x40
 8001c88:	f300 80ca 	bgt.w	8001e20 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f1a3 0220 	sub.w	r2, r3, #32
 8001c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	0fda      	lsrs	r2, r3, #31
 8001cae:	4413      	add	r3, r2
 8001cb0:	105b      	asrs	r3, r3, #1
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cbc:	e0a3      	b.n	8001e06 <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cca:	440b      	add	r3, r1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8001cd6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 fa93 	bl	800820c <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001cec:	e04f      	b.n	8001d8e <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8001cee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cf2:	105b      	asrs	r3, r3, #1
 8001cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8001cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8001d0e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8001d12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d1a:	fa41 f303 	asr.w	r3, r1, r3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d02f      	beq.n	8001d84 <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8001d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8001d2c:	f107 0214 	add.w	r2, r7, #20
 8001d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25a      	sxtb	r2, r3
 8001d3a:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2d9      	uxtb	r1, r3
 8001d48:	f107 0214 	add.w	r2, r7, #20
 8001d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d50:	4413      	add	r3, r2
 8001d52:	460a      	mov	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e015      	b.n	8001d84 <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8001d58:	f107 0214 	add.w	r2, r7, #20
 8001d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b25a      	sxtb	r2, r3
 8001d66:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	b2d9      	uxtb	r1, r3
 8001d76:	f107 0214 	add.w	r2, r7, #20
 8001d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d7e:	4413      	add	r3, r2
 8001d80:	460a      	mov	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8001d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	dba8      	blt.n	8001cee <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff ff2a 	bl	8001bf6 <colbyte_from_x>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8001da8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8001db2:	4413      	add	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff25 	bl	8001c14 <rowaddr_from_y>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8001dd0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001dd4:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001dd8:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8001ddc:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8001de0:	f7ff fdc6 	bl	8001970 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8001de4:	205c      	movs	r0, #92	@ 0x5c
 8001de6:	f7ff fd73 	bl	80018d0 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8001dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fd92 	bl	8001920 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8001dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e00:	3301      	adds	r3, #1
 8001e02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f6ff af54 	blt.w	8001cbe <oled_drawChar+0x92>
 8001e16:	e004      	b.n	8001e22 <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8001e18:	bf00      	nop
 8001e1a:	e002      	b.n	8001e22 <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8001e1c:	bf00      	nop
 8001e1e:	e000      	b.n	8001e22 <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8001e20:	bf00      	nop
  }
}
 8001e22:	37b8      	adds	r7, #184	@ 0xb8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8001e3e:	e020      	b.n	8001e82 <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d108      	bne.n	8001e5a <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e010      	b.n	8001e7c <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b0d      	cmp	r3, #13
 8001e60:	d00c      	beq.n	8001e7c <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6939      	ldr	r1, [r7, #16]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7ff fedb 	bl	8001c2c <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
  while (*str) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1da      	bne.n	8001e40 <oled_drawString+0x18>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <MX_SPI3_Init+0x78>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ea4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001eae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001eb2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001eca:	2228      	movs	r2, #40	@ 0x28
 8001ecc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_SPI3_Init+0x74>)
 8001ef4:	f002 fdb4 	bl	8004a60 <HAL_SPI_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001efe:	f7ff fce1 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000390 	.word	0x20000390
 8001f0c:	40003c00 	.word	0x40003c00

08001f10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <HAL_SPI_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d127      	bne.n	8001f82 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4a16      	ldr	r2, [pc, #88]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_SPI_MspInit+0x80>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f62:	2328      	movs	r3, #40	@ 0x28
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f72:	2306      	movs	r3, #6
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_SPI_MspInit+0x84>)
 8001f7e:	f001 fb0b 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	@ 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40003c00 	.word	0x40003c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	48000400 	.word	0x48000400

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_MspInit+0x44>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fce:	f001 fe19 	bl	8003c04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 fb1f 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <FDCAN1_IT0_IRQHandler+0x10>)
 8002046:	f001 f82d 	bl	80030a4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200001f0 	.word	0x200001f0

08002054 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <FDCAN1_IT1_IRQHandler+0x10>)
 800205a:	f001 f823 	bl	80030a4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001f0 	.word	0x200001f0

08002068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <USART1_IRQHandler+0x10>)
 800206e:	f003 f9a7 	bl	80053c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003f8 	.word	0x200003f8

0800207c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <USART3_IRQHandler+0x10>)
 8002082:	f003 f99d 	bl	80053c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000048c 	.word	0x2000048c

08002090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return 1;
 8002094:	2301      	movs	r3, #1
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_kill>:

int _kill(int pid, int sig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020aa:	f006 f901 	bl	80082b0 <__errno>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2216      	movs	r2, #22
 80020b2:	601a      	str	r2, [r3, #0]
  return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_exit>:

void _exit (int status)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffe7 	bl	80020a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d2:	bf00      	nop
 80020d4:	e7fd      	b.n	80020d2 <_exit+0x12>

080020d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e00a      	b.n	80020fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e8:	f3af 8000 	nop.w
 80020ec:	4601      	mov	r1, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf0      	blt.n	80020e8 <_read+0x12>
  }

  return len;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e009      	b.n	8002136 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f812 	bl	8001154 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf1      	blt.n	8002122 <_write+0x12>
  }
  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_close>:

int _close(int file)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_isatty>:

int _isatty(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f006 f866 	bl	80082b0 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20008000 	.word	0x20008000
 8002210:	00000400 	.word	0x00000400
 8002214:	200003f4 	.word	0x200003f4
 8002218:	20000950 	.word	0x20000950

0800221c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002244:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002246:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <MX_USART1_UART_Init+0x94>)
 8002248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800224a:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800227c:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002288:	4811      	ldr	r0, [pc, #68]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800228a:	f002 ff6f 	bl	800516c <HAL_UART_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002294:	f7ff fb16 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002298:	2100      	movs	r1, #0
 800229a:	480d      	ldr	r0, [pc, #52]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 800229c:	f005 f81e 	bl	80072dc <HAL_UARTEx_SetTxFifoThreshold>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022a6:	f7ff fb0d 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022aa:	2100      	movs	r1, #0
 80022ac:	4808      	ldr	r0, [pc, #32]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 80022ae:	f005 f853 	bl	8007358 <HAL_UARTEx_SetRxFifoThreshold>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b8:	f7ff fb04 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022bc:	4804      	ldr	r0, [pc, #16]	@ (80022d0 <MX_USART1_UART_Init+0x90>)
 80022be:	f004 ffd4 	bl	800726a <HAL_UARTEx_DisableFifoMode>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c8:	f7ff fafc 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200003f8 	.word	0x200003f8
 80022d4:	40013800 	.word	0x40013800

080022d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022de:	4a25      	ldr	r2, [pc, #148]	@ (8002374 <MX_USART3_UART_Init+0x9c>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022e2:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	4812      	ldr	r0, [pc, #72]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 8002328:	f004 ff18 	bl	800715c <HAL_RS485Ex_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8002332:	f7ff fac7 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002336:	2100      	movs	r1, #0
 8002338:	480d      	ldr	r0, [pc, #52]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 800233a:	f004 ffcf 	bl	80072dc <HAL_UARTEx_SetTxFifoThreshold>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8002344:	f7ff fabe 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002348:	2100      	movs	r1, #0
 800234a:	4809      	ldr	r0, [pc, #36]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 800234c:	f005 f804 	bl	8007358 <HAL_UARTEx_SetRxFifoThreshold>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_USART3_UART_Init+0x82>
  {
    Error_Handler();
 8002356:	f7ff fab5 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_USART3_UART_Init+0x98>)
 800235c:	f004 ff85 	bl	800726a <HAL_UARTEx_DisableFifoMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART3_UART_Init+0x92>
  {
    Error_Handler();
 8002366:	f7ff faad 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000048c 	.word	0x2000048c
 8002374:	40004800 	.word	0x40004800

08002378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b09c      	sub	sp, #112	@ 0x70
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	f107 0318 	add.w	r3, r7, #24
 8002394:	2244      	movs	r2, #68	@ 0x44
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f005 ff37 	bl	800820c <memset>
  if(uartHandle->Instance==USART1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <HAL_UART_MspInit+0x140>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d13e      	bne.n	8002426 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 f963 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c0:	f7ff fa80 	bl	80018c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c4:	4b3d      	ldr	r3, [pc, #244]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	4a3c      	ldr	r2, [pc, #240]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d0:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023dc:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e0:	4a36      	ldr	r2, [pc, #216]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_UART_MspInit+0x144>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023f4:	23c0      	movs	r3, #192	@ 0xc0
 80023f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002404:	2307      	movs	r3, #7
 8002406:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800240c:	4619      	mov	r1, r3
 800240e:	482c      	ldr	r0, [pc, #176]	@ (80024c0 <HAL_UART_MspInit+0x148>)
 8002410:	f001 f8c2 	bl	8003598 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2025      	movs	r0, #37	@ 0x25
 800241a:	f000 fa48 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241e:	2025      	movs	r0, #37	@ 0x25
 8002420:	f000 fa5f 	bl	80028e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002424:	e043      	b.n	80024ae <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART3)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a26      	ldr	r2, [pc, #152]	@ (80024c4 <HAL_UART_MspInit+0x14c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d13e      	bne.n	80024ae <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002430:	2304      	movs	r3, #4
 8002432:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f91f 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002448:	f7ff fa3c 	bl	80018c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_UART_MspInit+0x144>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_UART_MspInit+0x144>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002456:	6593      	str	r3, [r2, #88]	@ 0x58
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_UART_MspInit+0x144>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_UART_MspInit+0x144>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_UART_MspInit+0x144>)
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_UART_MspInit+0x144>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 800247c:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 8002480:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800248e:	2307      	movs	r3, #7
 8002490:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002496:	4619      	mov	r1, r3
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <HAL_UART_MspInit+0x148>)
 800249a:	f001 f87d 	bl	8003598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2027      	movs	r0, #39	@ 0x27
 80024a4:	f000 fa03 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024a8:	2027      	movs	r0, #39	@ 0x27
 80024aa:	f000 fa1a 	bl	80028e2 <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3770      	adds	r7, #112	@ 0x70
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000400 	.word	0x48000400
 80024c4:	40004800 	.word	0x40004800

080024c8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80024cc:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <MX_USB_PCD_Init+0x4c>)
 80024d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024d4:	2208      	movs	r2, #8
 80024d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024da:	2202      	movs	r2, #2
 80024dc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024de:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	@ (8002510 <MX_USB_PCD_Init+0x48>)
 80024fe:	f001 f9e5 	bl	80038cc <HAL_PCD_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002508:	f7ff f9dc 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000520 	.word	0x20000520
 8002514:	40005c00 	.word	0x40005c00

08002518 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b094      	sub	sp, #80	@ 0x50
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2244      	movs	r2, #68	@ 0x44
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f005 fe6f 	bl	800820c <memset>
  if(pcdHandle->Instance==USB)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a11      	ldr	r2, [pc, #68]	@ (8002578 <HAL_PCD_MspInit+0x60>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d11a      	bne.n	800256e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800253c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800253e:	2300      	movs	r3, #0
 8002540:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4618      	mov	r0, r3
 8002548:	f002 f89a 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002552:	f7ff f9b7 	bl	80018c4 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_PCD_MspInit+0x64>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_PCD_MspInit+0x64>)
 800255c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_PCD_MspInit+0x64>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800256e:	bf00      	nop
 8002570:	3750      	adds	r7, #80	@ 0x50
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40005c00 	.word	0x40005c00
 800257c:	40021000 	.word	0x40021000

08002580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002580:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002582:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002584:	f7ff fe4a 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	@ (80025bc <LoopForever+0x6>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	@ (80025c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <LoopForever+0xe>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	@ (80025cc <LoopForever+0x16>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025ae:	f005 fe85 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025b2:	f7fe fff5 	bl	80015a0 <main>

080025b6 <LoopForever>:

LoopForever:
    b LoopForever
 80025b6:	e7fe      	b.n	80025b6 <LoopForever>
  ldr   r0, =_estack
 80025b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025c4:	0800b0d4 	.word	0x0800b0d4
  ldr r2, =_sbss
 80025c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025cc:	2000094c 	.word	0x2000094c

080025d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC1_2_IRQHandler>

080025d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f95b 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e2:	200f      	movs	r0, #15
 80025e4:	f000 f80e 	bl	8002604 <HAL_InitTick>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	71fb      	strb	r3, [r7, #7]
 80025f2:	e001      	b.n	80025f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025f4:	f7ff fcd0 	bl	8001f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025f8:	79fb      	ldrb	r3, [r7, #7]

}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_InitTick+0x68>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d022      	beq.n	800265e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <HAL_InitTick+0x6c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_InitTick+0x68>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f966 	bl	80028fe <HAL_SYSTICK_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10f      	bne.n	8002658 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d809      	bhi.n	8002652 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800263e:	2200      	movs	r2, #0
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	f04f 30ff 	mov.w	r0, #4294967295
 8002646:	f000 f932 	bl	80028ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_InitTick+0x70>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e007      	b.n	8002662 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
 8002656:	e004      	b.n	8002662 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e001      	b.n	8002662 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000008 	.word	0x20000008
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_IncTick+0x1c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_IncTick+0x20>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	4a03      	ldr	r2, [pc, #12]	@ (8002694 <HAL_IncTick+0x1c>)
 8002688:	6013      	str	r3, [r2, #0]
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	200007fc 	.word	0x200007fc
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200007fc 	.word	0x200007fc

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d004      	beq.n	80026d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_Delay+0x40>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d8:	bf00      	nop
 80026da:	f7ff ffdf 	bl	800269c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d8f7      	bhi.n	80026da <HAL_Delay+0x26>
  {
  }
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000008 	.word	0x20000008

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	@ (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	@ (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff40 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff90 	bl	80027ec <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5f 	bl	8002798 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff33 	bl	800275c <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa4 	bl	8002854 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d005      	beq.n	800293a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e037      	b.n	80029aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 020e 	bic.w	r2, r2, #14
 8002948:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002958:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002986:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00c      	beq.n	80029aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800299e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d00d      	beq.n	80029fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e047      	b.n	8002a8c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
    }
  }
  return status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e147      	b.n	8002d3a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fa78 	bl	8000fb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0210 	bic.w	r2, r2, #16
 8002ad2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7ff fde2 	bl	800269c <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ada:	e012      	b.n	8002b02 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002adc:	f7ff fdde 	bl	800269c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b0a      	cmp	r3, #10
 8002ae8:	d90b      	bls.n	8002b02 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2203      	movs	r2, #3
 8002afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e11b      	b.n	8002d3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d0e5      	beq.n	8002adc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7ff fdbc 	bl	800269c <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b26:	e012      	b.n	8002b4e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b28:	f7ff fdb8 	bl	800269c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b0a      	cmp	r3, #10
 8002b34:	d90b      	bls.n	8002b4e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0f5      	b.n	8002d3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0e5      	beq.n	8002b28 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0202 	orr.w	r2, r2, #2
 8002b6a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a74      	ldr	r2, [pc, #464]	@ (8002d44 <HAL_FDCAN_Init+0x2ac>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d103      	bne.n	8002b7e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b76:	4a74      	ldr	r2, [pc, #464]	@ (8002d48 <HAL_FDCAN_Init+0x2b0>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7c1b      	ldrb	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e007      	b.n	8002ba8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ba6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c5b      	ldrb	r3, [r3, #17]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bd0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7c9b      	ldrb	r3, [r3, #18]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e007      	b.n	8002bfc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bfa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002c20:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0210 	bic.w	r2, r2, #16
 8002c30:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0204 	orr.w	r2, r2, #4
 8002c48:	619a      	str	r2, [r3, #24]
 8002c4a:	e02c      	b.n	8002ca6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d028      	beq.n	8002ca6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d01c      	beq.n	8002c96 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c6a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0210 	orr.w	r2, r2, #16
 8002c7a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d110      	bne.n	8002ca6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	619a      	str	r2, [r3, #24]
 8002c94:	e007      	b.n	8002ca6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cb6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cbe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cd0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cda:	d115      	bne.n	8002d08 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cf4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fb68 	bl	80033f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40006400 	.word	0x40006400
 8002d48:	40006500 	.word	0x40006500

08002d4c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d5c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <HAL_FDCAN_ConfigFilter+0x1e>
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d13d      	bne.n	8002de6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d7e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002d86:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e01d      	b.n	8002de2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	075a      	lsls	r2, r3, #29
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	079a      	lsls	r2, r3, #30
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e006      	b.n	8002df4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d110      	bne.n	8002e36 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e006      	b.n	8002e44 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d12c      	bne.n	8002ec2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e023      	b.n	8002ed0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fafe 	bl	80034a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e006      	b.n	8002ed0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eea:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d003      	beq.n	8002efa <HAL_FDCAN_ActivateNotification+0x22>
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 80c8 	bne.w	800308a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03b      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d031      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d027      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01d      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d013      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d13b      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d131      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d127      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0202 	orr.w	r2, r2, #2
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	430a      	orrs	r2, r1
 8003054:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	430a      	orrs	r2, r1
 8003072:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	430a      	orrs	r2, r1
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e006      	b.n	8003098 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	@ 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c0:	4013      	ands	r3, r2
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d8:	4013      	ands	r3, r2
 80030da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	4013      	ands	r3, r2
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80030fe:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	4013      	ands	r3, r2
 800310a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003112:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003116:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	4013      	ands	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003132:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f92d 	bl	80033b4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01a      	beq.n	800319c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d014      	beq.n	800319c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800317a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003192:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003194:	6939      	ldr	r1, [r7, #16]
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8ed 	bl	8003376 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80031aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8ac 	bl	800330a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80031c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8ac 	bl	8003320 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80031d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8ac 	bl	8003336 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	0a5b      	lsrs	r3, r3, #9
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	0a5b      	lsrs	r3, r3, #9
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8a3 	bl	800334c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	09db      	lsrs	r3, r3, #7
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	09db      	lsrs	r3, r3, #7
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003226:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f88d 	bl	8003360 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0b5b      	lsrs	r3, r3, #13
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	0b5b      	lsrs	r3, r3, #13
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003266:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f88f 	bl	800338c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	0bdb      	lsrs	r3, r3, #15
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	0bdb      	lsrs	r3, r3, #15
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800328e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f885 	bl	80033a0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	0b9b      	lsrs	r3, r3, #14
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	0b9b      	lsrs	r3, r3, #14
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80032d2:	69f9      	ldr	r1, [r7, #28]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f881 	bl	80033dc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f863 	bl	80033c8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003302:	bf00      	nop
 8003304:	3730      	adds	r7, #48	@ 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80033fe:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	041a      	lsls	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003434:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	061a      	lsls	r2, r3, #24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e005      	b.n	8003482 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	429a      	cmp	r2, r3
 800348c:	d3f3      	bcc.n	8003476 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	4000a400 	.word	0x4000a400

080034a0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	@ 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80034be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e00a      	b.n	80034e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80034d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80034da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80034ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80034f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80034f8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	3304      	adds	r3, #4
 8003520:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	3304      	adds	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e020      	b.n	8003576 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3303      	adds	r3, #3
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3302      	adds	r3, #2
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	440b      	add	r3, r1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800354c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	440b      	add	r3, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800355a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	440a      	add	r2, r1
 8003562:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003564:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3304      	adds	r3, #4
 800356e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3304      	adds	r3, #4
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4a06      	ldr	r2, [pc, #24]	@ (8003594 <FDCAN_CopyMessageToRAM+0xf4>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	461a      	mov	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4293      	cmp	r3, r2
 8003584:	d3d6      	bcc.n	8003534 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003586:	bf00      	nop
 8003588:	bf00      	nop
 800358a:	3724      	adds	r7, #36	@ 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	0800ad14 	.word	0x0800ad14

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035a6:	e15a      	b.n	800385e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 814c 	beq.w	8003858 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d017      	beq.n	8003676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d123      	bne.n	80036ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	6939      	ldr	r1, [r7, #16]
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a6 	beq.w	8003858 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b5b      	ldr	r3, [pc, #364]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	4a5a      	ldr	r2, [pc, #360]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6613      	str	r3, [r2, #96]	@ 0x60
 8003718:	4b58      	ldr	r3, [pc, #352]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003724:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800374e:	d01f      	beq.n	8003790 <HAL_GPIO_Init+0x1f8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a4c      	ldr	r2, [pc, #304]	@ (8003884 <HAL_GPIO_Init+0x2ec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d019      	beq.n	800378c <HAL_GPIO_Init+0x1f4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4b      	ldr	r2, [pc, #300]	@ (8003888 <HAL_GPIO_Init+0x2f0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_GPIO_Init+0x1f0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a4a      	ldr	r2, [pc, #296]	@ (800388c <HAL_GPIO_Init+0x2f4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1ec>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a49      	ldr	r2, [pc, #292]	@ (8003890 <HAL_GPIO_Init+0x2f8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1e8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1e4>
 8003778:	2305      	movs	r3, #5
 800377a:	e00a      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 800377c:	2306      	movs	r3, #6
 800377e:	e008      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003780:	2304      	movs	r3, #4
 8003782:	e006      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003784:	2303      	movs	r3, #3
 8003786:	e004      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003788:	2302      	movs	r3, #2
 800378a:	e002      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003790:	2300      	movs	r3, #0
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a2:	4937      	ldr	r1, [pc, #220]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b0:	4b39      	ldr	r3, [pc, #228]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d4:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037da:	4b2f      	ldr	r3, [pc, #188]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fe:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003828:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <HAL_GPIO_Init+0x300>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800382e:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003852:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3301      	adds	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	f47f ae9d 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40021000 	.word	0x40021000
 8003880:	40010000 	.word	0x40010000
 8003884:	48000400 	.word	0x48000400
 8003888:	48000800 	.word	0x48000800
 800388c:	48000c00 	.word	0x48000c00
 8003890:	48001000 	.word	0x48001000
 8003894:	48001400 	.word	0x48001400
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
 80038a8:	4613      	mov	r3, r2
 80038aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038ac:	787b      	ldrb	r3, [r7, #1]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0c0      	b.n	8003a60 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe fe10 	bl	8002518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2203      	movs	r2, #3
 80038fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fdb3 	bl	8007470 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e03e      	b.n	800398e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3311      	adds	r3, #17
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	3310      	adds	r3, #16
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	3313      	adds	r3, #19
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3320      	adds	r3, #32
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3324      	adds	r3, #36	@ 0x24
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	440b      	add	r3, r1
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	791b      	ldrb	r3, [r3, #4]
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3bb      	bcc.n	8003910 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e044      	b.n	8003a28 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	440b      	add	r3, r1
 80039ac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	3301      	adds	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d3b5      	bcc.n	800399e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003a3e:	f003 fd32 	bl	80074a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7a9b      	ldrb	r3, [r3, #10]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f805 	bl	8003a68 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d141      	bne.n	8003b4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aca:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d131      	bne.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ad8:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ade:	4a46      	ldr	r2, [pc, #280]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae8:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003af0:	4a41      	ldr	r2, [pc, #260]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003af8:	4b40      	ldr	r3, [pc, #256]	@ (8003bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2232      	movs	r2, #50	@ 0x32
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a3f      	ldr	r2, [pc, #252]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	0c9b      	lsrs	r3, r3, #18
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0e:	e002      	b.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b16:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b22:	d102      	bne.n	8003b2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f2      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2a:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b36:	d158      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e057      	b.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b42:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b4c:	e04d      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d141      	bne.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b56:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b62:	d131      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b64:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b6a:	4a23      	ldr	r2, [pc, #140]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2232      	movs	r2, #50	@ 0x32
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	0c9b      	lsrs	r3, r3, #18
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9a:	e002      	b.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bae:	d102      	bne.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f2      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc2:	d112      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e011      	b.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bce:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bd8:	e007      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003be2:	4a05      	ldr	r2, [pc, #20]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003be8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	431bde83 	.word	0x431bde83

08003c04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	@ (8003c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c12:	6093      	str	r3, [r2, #8]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40007000 	.word	0x40007000

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e2fe      	b.n	8004234 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d075      	beq.n	8003d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	4b97      	ldr	r3, [pc, #604]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	4b94      	ldr	r3, [pc, #592]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3e>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_OscConfig+0x44>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05b      	beq.n	8003d2c <HAL_RCC_OscConfig+0x108>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d157      	bne.n	8003d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e2d9      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x74>
 8003c8a:	4b85      	ldr	r3, [pc, #532]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a84      	ldr	r2, [pc, #528]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x98>
 8003ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	4b78      	ldr	r3, [pc, #480]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a77      	ldr	r2, [pc, #476]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b75      	ldr	r3, [pc, #468]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a74      	ldr	r2, [pc, #464]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fcde 	bl	800269c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fcda 	bl	800269c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e29e      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xc0>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fcca 	bl	800269c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fcc6 	bl	800269c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e28a      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1e:	4b60      	ldr	r3, [pc, #384]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0xe8>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	4b59      	ldr	r3, [pc, #356]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	4b56      	ldr	r3, [pc, #344]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0x136>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_OscConfig+0x13c>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11f      	bne.n	8003da0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_OscConfig+0x154>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e25d      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	4946      	ldr	r1, [pc, #280]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fc37 	bl	8002604 <HAL_InitTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d043      	beq.n	8003e24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e249      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe fc72 	bl	800269c <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fe fc6e 	bl	800269c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e232      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dce:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	492d      	ldr	r1, [pc, #180]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
 8003dee:	e01a      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fc4e 	bl	800269c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fc4a 	bl	800269c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e20e      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1e0>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d041      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e40:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fc27 	bl	800269c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe fc23 	bl	800269c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1e7      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ef      	beq.n	8003e52 <HAL_RCC_OscConfig+0x22e>
 8003e72:	e020      	b.n	8003eb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fe fc0a 	bl	800269c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e8a:	e00d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fc06 	bl	800269c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d906      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1ca      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ea      	bne.n	8003e8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a6 	beq.w	8004010 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec8:	4b84      	ldr	r3, [pc, #528]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2b4>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x2b6>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b7f      	ldr	r3, [pc, #508]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eea:	4b7c      	ldr	r3, [pc, #496]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	4b79      	ldr	r3, [pc, #484]	@ (80040e0 <HAL_RCC_OscConfig+0x4bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f06:	4b76      	ldr	r3, [pc, #472]	@ (80040e0 <HAL_RCC_OscConfig+0x4bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a75      	ldr	r2, [pc, #468]	@ (80040e0 <HAL_RCC_OscConfig+0x4bc>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fe fbc3 	bl	800269c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fe fbbf 	bl	800269c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e183      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80040e0 <HAL_RCC_OscConfig+0x4bc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCC_OscConfig+0x32e>
 8003f40:	4b66      	ldr	r3, [pc, #408]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	4a65      	ldr	r2, [pc, #404]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f50:	e024      	b.n	8003f9c <HAL_RCC_OscConfig+0x378>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d110      	bne.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f5a:	4b60      	ldr	r3, [pc, #384]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f60:	4a5e      	ldr	r2, [pc, #376]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f70:	4a5a      	ldr	r2, [pc, #360]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f7a:	e00f      	b.n	8003f9c <HAL_RCC_OscConfig+0x378>
 8003f7c:	4b57      	ldr	r3, [pc, #348]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	4a56      	ldr	r2, [pc, #344]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f8c:	4b53      	ldr	r3, [pc, #332]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	4a52      	ldr	r2, [pc, #328]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fb7a 	bl	800269c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fb76 	bl	800269c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e138      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	4b46      	ldr	r3, [pc, #280]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ed      	beq.n	8003fac <HAL_RCC_OscConfig+0x388>
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fb63 	bl	800269c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe fb5f 	bl	800269c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e121      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ed      	bne.n	8003fda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b35      	ldr	r3, [pc, #212]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	4a34      	ldr	r2, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d03c      	beq.n	8004096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01c      	beq.n	800405e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004024:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8004026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800402a:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fe fb32 	bl	800269c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403c:	f7fe fb2e 	bl	800269c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0f2      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCC_OscConfig+0x418>
 800405c:	e01b      	b.n	8004096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800405e:	4b1f      	ldr	r3, [pc, #124]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fe fb15 	bl	800269c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004076:	f7fe fb11 	bl	800269c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d5      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004088:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ef      	bne.n	8004076 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80c9 	beq.w	8004232 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	f000 8083 	beq.w	80041b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d15e      	bne.n	8004174 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe faeb 	bl	800269c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	e00c      	b.n	80040e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fae7 	bl	800269c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d905      	bls.n	80040e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0ab      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e4:	4b55      	ldr	r3, [pc, #340]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ec      	bne.n	80040ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f0:	4b52      	ldr	r3, [pc, #328]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	4b52      	ldr	r3, [pc, #328]	@ (8004240 <HAL_RCC_OscConfig+0x61c>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6a11      	ldr	r1, [r2, #32]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004100:	3a01      	subs	r2, #1
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800410a:	0212      	lsls	r2, r2, #8
 800410c:	4311      	orrs	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004112:	0852      	lsrs	r2, r2, #1
 8004114:	3a01      	subs	r2, #1
 8004116:	0552      	lsls	r2, r2, #21
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800411e:	0852      	lsrs	r2, r2, #1
 8004120:	3a01      	subs	r2, #1
 8004122:	0652      	lsls	r2, r2, #25
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800412a:	06d2      	lsls	r2, r2, #27
 800412c:	430a      	orrs	r2, r1
 800412e:	4943      	ldr	r1, [pc, #268]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004130:	4313      	orrs	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004134:	4b41      	ldr	r3, [pc, #260]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a40      	ldr	r2, [pc, #256]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800413e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004140:	4b3e      	ldr	r3, [pc, #248]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a3d      	ldr	r2, [pc, #244]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe faa6 	bl	800269c <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe faa2 	bl	800269c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e066      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004166:	4b35      	ldr	r3, [pc, #212]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x530>
 8004172:	e05e      	b.n	8004232 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a30      	ldr	r2, [pc, #192]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe fa8c 	bl	800269c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fa88 	bl	800269c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04c      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419a:	4b28      	ldr	r3, [pc, #160]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041a6:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	4924      	ldr	r1, [pc, #144]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 80041ac:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <HAL_RCC_OscConfig+0x620>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
 80041b2:	e03e      	b.n	8004232 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e039      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_RCC_OscConfig+0x618>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d12c      	bne.n	800422e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d123      	bne.n	800422e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11b      	bne.n	800422e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d113      	bne.n	800422e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d109      	bne.n	800422e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	019f800c 	.word	0x019f800c
 8004244:	feeefffc 	.word	0xfeeefffc

08004248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e11e      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b91      	ldr	r3, [pc, #580]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b8e      	ldr	r3, [pc, #568]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 020f 	bic.w	r2, r3, #15
 8004276:	498c      	ldr	r1, [pc, #560]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b8a      	ldr	r3, [pc, #552]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e106      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d073      	beq.n	8004384 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d129      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a4:	4b81      	ldr	r3, [pc, #516]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0f4      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042b4:	f000 f99e 	bl	80045f4 <RCC_GetSysClockFreqFromPLLSource>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4a7c      	ldr	r2, [pc, #496]	@ (80044b0 <HAL_RCC_ClockConfig+0x268>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d93f      	bls.n	8004342 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042c2:	4b7a      	ldr	r3, [pc, #488]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d033      	beq.n	8004342 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d12f      	bne.n	8004342 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042e2:	4b72      	ldr	r3, [pc, #456]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ea:	4a70      	ldr	r2, [pc, #448]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80042ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e024      	b.n	8004342 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004300:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0c6      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	4b66      	ldr	r3, [pc, #408]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0be      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004320:	f000 f8ce 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8004324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4a61      	ldr	r2, [pc, #388]	@ (80044b0 <HAL_RCC_ClockConfig+0x268>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d909      	bls.n	8004342 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800432e:	4b5f      	ldr	r3, [pc, #380]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004336:	4a5d      	ldr	r2, [pc, #372]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b5a      	ldr	r3, [pc, #360]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4957      	ldr	r1, [pc, #348]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fe f9a2 	bl	800269c <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fe f99e 	bl	800269c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e095      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b4e      	ldr	r3, [pc, #312]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b43      	ldr	r3, [pc, #268]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a42      	ldr	r2, [pc, #264]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043b4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043bc:	4a3b      	ldr	r2, [pc, #236]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4936      	ldr	r1, [pc, #216]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
 80043d6:	e008      	b.n	80043ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b80      	cmp	r3, #128	@ 0x80
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043de:	4b33      	ldr	r3, [pc, #204]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4a32      	ldr	r2, [pc, #200]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 80043e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ea:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d21d      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 020f 	bic.w	r2, r3, #15
 8004400:	4929      	ldr	r1, [pc, #164]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004408:	f7fe f948 	bl	800269c <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7fe f944 	bl	800269c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e03b      	b.n	800449e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d1ed      	bne.n	8004410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4917      	ldr	r1, [pc, #92]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490f      	ldr	r1, [pc, #60]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004472:	f000 f825 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <HAL_RCC_ClockConfig+0x264>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490c      	ldr	r1, [pc, #48]	@ (80044b4 <HAL_RCC_ClockConfig+0x26c>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x270>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x274>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f8b4 	bl	8002604 <HAL_InitTick>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40021000 	.word	0x40021000
 80044b0:	04c4b400 	.word	0x04c4b400
 80044b4:	0800acfc 	.word	0x0800acfc
 80044b8:	20000000 	.word	0x20000000
 80044bc:	20000004 	.word	0x20000004

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d102      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044d2:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e047      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044d8:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d102      	bne.n	80044ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e4:	4b26      	ldr	r3, [pc, #152]	@ (8004580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e03e      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044ea:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d136      	bne.n	8004564 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d10c      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004514:	4a1a      	ldr	r2, [pc, #104]	@ (8004580 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800451e:	68d2      	ldr	r2, [r2, #12]
 8004520:	0a12      	lsrs	r2, r2, #8
 8004522:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	617b      	str	r3, [r7, #20]
      break;
 800452c:	e00c      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800452e:	4a13      	ldr	r2, [pc, #76]	@ (800457c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	4a10      	ldr	r2, [pc, #64]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004538:	68d2      	ldr	r2, [r2, #12]
 800453a:	0a12      	lsrs	r2, r2, #8
 800453c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
      break;
 8004546:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0e5b      	lsrs	r3, r3, #25
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	3301      	adds	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e001      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004568:	693b      	ldr	r3, [r7, #16]
}
 800456a:	4618      	mov	r0, r3
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200

08004584 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004588:	4b03      	ldr	r3, [pc, #12]	@ (8004598 <HAL_RCC_GetHCLKFreq+0x14>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000000 	.word	0x20000000

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045a0:	f7ff fff0 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800ad0c 	.word	0x0800ad0c

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045cc:	f7ff ffda 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	0adb      	lsrs	r3, r3, #11
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4904      	ldr	r1, [pc, #16]	@ (80045f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	0800ad0c 	.word	0x0800ad0c

080045f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004604:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d10c      	bne.n	8004632 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004618:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004622:	68d2      	ldr	r2, [r2, #12]
 8004624:	0a12      	lsrs	r2, r2, #8
 8004626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
    break;
 8004630:	e00c      	b.n	800464c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	4a0e      	ldr	r2, [pc, #56]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800463c:	68d2      	ldr	r2, [r2, #12]
 800463e:	0a12      	lsrs	r2, r2, #8
 8004640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
    break;
 800464a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0e5b      	lsrs	r3, r3, #25
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004666:	687b      	ldr	r3, [r7, #4]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000
 8004678:	007a1200 	.word	0x007a1200
 800467c:	00f42400 	.word	0x00f42400

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004688:	2300      	movs	r3, #0
 800468a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800468c:	2300      	movs	r3, #0
 800468e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8098 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	4a3f      	ldr	r2, [pc, #252]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ba:	4b3d      	ldr	r3, [pc, #244]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a39      	ldr	r2, [pc, #228]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d6:	f7fd ffe1 	bl	800269c <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046dc:	e009      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fd ffdd 	bl	800269c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	74fb      	strb	r3, [r7, #19]
        break;
 80046f0:	e005      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f2:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d159      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004704:	4b2a      	ldr	r3, [pc, #168]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01e      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	d019      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004720:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800474c:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fd ff9d 	bl	800269c <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004764:	e00b      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd ff99 	bl	800269c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d902      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	74fb      	strb	r3, [r7, #19]
            break;
 800477c:	e006      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ec      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	4903      	ldr	r1, [pc, #12]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	74bb      	strb	r3, [r7, #18]
 80047ae:	e005      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7c7b      	ldrb	r3, [r7, #17]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4ba6      	ldr	r3, [pc, #664]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c6:	4aa5      	ldr	r2, [pc, #660]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047da:	4ba0      	ldr	r3, [pc, #640]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f023 0203 	bic.w	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	499c      	ldr	r1, [pc, #624]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047fc:	4b97      	ldr	r3, [pc, #604]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f023 020c 	bic.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4994      	ldr	r1, [pc, #592]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800481e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	498b      	ldr	r1, [pc, #556]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004840:	4b86      	ldr	r3, [pc, #536]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	4983      	ldr	r1, [pc, #524]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004862:	4b7e      	ldr	r3, [pc, #504]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	497a      	ldr	r1, [pc, #488]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004884:	4b75      	ldr	r3, [pc, #468]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	4972      	ldr	r1, [pc, #456]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048a6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4969      	ldr	r1, [pc, #420]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c8:	4b64      	ldr	r3, [pc, #400]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4961      	ldr	r1, [pc, #388]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ea:	4b5c      	ldr	r3, [pc, #368]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	4958      	ldr	r1, [pc, #352]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004908:	2b00      	cmp	r3, #0
 800490a:	d015      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800490c:	4b53      	ldr	r3, [pc, #332]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	4950      	ldr	r1, [pc, #320]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492a:	d105      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a4a      	ldr	r2, [pc, #296]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004936:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004944:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	4942      	ldr	r1, [pc, #264]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004962:	d105      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b3d      	ldr	r3, [pc, #244]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a3c      	ldr	r2, [pc, #240]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800497c:	4b37      	ldr	r3, [pc, #220]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	4934      	ldr	r1, [pc, #208]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800499a:	d105      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b4:	4b29      	ldr	r3, [pc, #164]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	4926      	ldr	r1, [pc, #152]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a20      	ldr	r2, [pc, #128]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	4918      	ldr	r1, [pc, #96]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b13      	ldr	r3, [pc, #76]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a12      	ldr	r2, [pc, #72]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d015      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a24:	4b0d      	ldr	r3, [pc, #52]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	490a      	ldr	r1, [pc, #40]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a50:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000

08004a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e09d      	b.n	8004bae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d108      	bne.n	8004a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a82:	d009      	beq.n	8004a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
 8004a8a:	e005      	b.n	8004a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fd fa2c 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ad8:	d902      	bls.n	8004ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e002      	b.n	8004ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004aee:	d007      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b42:	ea42 0103 	orr.w	r1, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0204 	and.w	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b7c:	ea42 0103 	orr.w	r1, r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc6:	f7fd fd69 	bl	800269c <HAL_GetTick>
 8004bca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e15c      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x36>
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e154      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Transmit+0x48>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e14d      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	88fa      	ldrh	r2, [r7, #6]
 8004c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d10f      	bne.n	8004c72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c98:	d952      	bls.n	8004d40 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SPI_Transmit+0xf2>
 8004ca2:	8b7b      	ldrh	r3, [r7, #26]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d145      	bne.n	8004d34 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	881a      	ldrh	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ccc:	e032      	b.n	8004d34 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d112      	bne.n	8004d02 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	881a      	ldrh	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d00:	e018      	b.n	8004d34 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d02:	f7fd fccb 	bl	800269c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d803      	bhi.n	8004d1a <HAL_SPI_Transmit+0x164>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Transmit+0x16a>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0b2      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c7      	bne.n	8004cce <HAL_SPI_Transmit+0x118>
 8004d3e:	e083      	b.n	8004e48 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_SPI_Transmit+0x198>
 8004d48:	8b7b      	ldrh	r3, [r7, #26]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d177      	bne.n	8004e3e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d912      	bls.n	8004d7e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	1c9a      	adds	r2, r3, #2
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b02      	subs	r3, #2
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d7c:	e05f      	b.n	8004e3e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004da4:	e04b      	b.n	8004e3e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d12b      	bne.n	8004e0c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d912      	bls.n	8004de4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004de2:	e02c      	b.n	8004e3e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e0a:	e018      	b.n	8004e3e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0c:	f7fd fc46 	bl	800269c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d803      	bhi.n	8004e24 <HAL_SPI_Transmit+0x26e>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Transmit+0x274>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e02d      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ae      	bne.n	8004da6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f947 	bl	80050e0 <SPI_EndRxTxTransaction>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eb4:	f7fd fbf2 	bl	800269c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ec4:	f7fd fbea 	bl	800269c <HAL_GetTick>
 8004ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eca:	4b39      	ldr	r3, [pc, #228]	@ (8004fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	015b      	lsls	r3, r3, #5
 8004ed0:	0d1b      	lsrs	r3, r3, #20
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	e054      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d050      	beq.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee4:	f7fd fbda 	bl	800269c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d902      	bls.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f12:	d111      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f1c:	d004      	beq.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d107      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f40:	d10f      	bne.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e017      	b.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d19b      	bne.n	8004edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fc6:	f7fd fb69 	bl	800269c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fd6:	f7fd fb61 	bl	800269c <HAL_GetTick>
 8004fda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80050dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	00da      	lsls	r2, r3, #3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	0d1b      	lsrs	r3, r3, #20
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ffc:	e060      	b.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005004:	d107      	bne.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005014:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d050      	beq.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800501e:	f7fd fb3d 	bl	800269c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502a:	429a      	cmp	r2, r3
 800502c:	d902      	bls.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x80>
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d13d      	bne.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005042:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800504c:	d111      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005056:	d004      	beq.n	8005062 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005060:	d107      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005070:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	d10f      	bne.n	800509c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800509a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e010      	b.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	3b01      	subs	r3, #1
 80050be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d196      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3728      	adds	r7, #40	@ 0x28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000000 	.word	0x20000000

080050e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff5b 	bl	8004fb4 <SPI_WaitFifoStateUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e027      	b.n	8005164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	2180      	movs	r1, #128	@ 0x80
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff fec0 	bl	8004ea4 <SPI_WaitFlagStateUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e014      	b.n	8005164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff ff34 	bl	8004fb4 <SPI_WaitFifoStateUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e000      	b.n	8005164 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e042      	b.n	8005204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fd f8f1 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2224      	movs	r2, #36	@ 0x24
 800519a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 ff30 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fc61 	bl	8005a84 <UART_SetConfig>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e01b      	b.n	8005204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 ffaf 	bl	8006160 <UART_CheckIdleState>
 8005202:	4603      	mov	r3, r0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	@ 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005222:	2b20      	cmp	r3, #32
 8005224:	d17b      	bne.n	800531e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_UART_Transmit+0x26>
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e074      	b.n	8005320 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	@ 0x21
 8005242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005246:	f7fd fa29 	bl	800269c <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005264:	d108      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e003      	b.n	8005280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005280:	e030      	b.n	80052e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f001 f811 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e03d      	b.n	8005320 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3302      	adds	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e007      	b.n	80052d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	3301      	adds	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1c8      	bne.n	8005282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	2140      	movs	r1, #64	@ 0x40
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 ffda 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e006      	b.n	8005320 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	@ 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800533c:	2b20      	cmp	r3, #32
 800533e:	d137      	bne.n	80053b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_Receive_IT+0x24>
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e030      	b.n	80053b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <HAL_UART_Receive_IT+0x94>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d01f      	beq.n	80053a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	613b      	str	r3, [r7, #16]
   return(result);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	623b      	str	r3, [r7, #32]
 800538e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	61bb      	str	r3, [r7, #24]
   return(result);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	461a      	mov	r2, r3
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fff2 	bl	8006390 <UART_Start_Receive_IT>
 80053ac:	4603      	mov	r3, r0
 80053ae:	e000      	b.n	80053b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3728      	adds	r7, #40	@ 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40008000 	.word	0x40008000

080053c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b0ba      	sub	sp, #232	@ 0xe8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80053ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80053ee:	4013      	ands	r3, r2
 80053f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11b      	bne.n	8005434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8300 	beq.w	8005a2a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
      }
      return;
 8005432:	e2fa      	b.n	8005a2a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8123 	beq.w	8005684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800543e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005442:	4b8d      	ldr	r3, [pc, #564]	@ (8005678 <HAL_UART_IRQHandler+0x2b8>)
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800544a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800544e:	4b8b      	ldr	r3, [pc, #556]	@ (800567c <HAL_UART_IRQHandler+0x2bc>)
 8005450:	4013      	ands	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8116 	beq.w	8005684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d011      	beq.n	8005488 <HAL_UART_IRQHandler+0xc8>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d011      	beq.n	80054b8 <HAL_UART_IRQHandler+0xf8>
 8005494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2202      	movs	r2, #2
 80054a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <HAL_UART_IRQHandler+0x128>
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2204      	movs	r2, #4
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f043 0202 	orr.w	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d017      	beq.n	8005524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005504:	4b5c      	ldr	r3, [pc, #368]	@ (8005678 <HAL_UART_IRQHandler+0x2b8>)
 8005506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2208      	movs	r2, #8
 8005512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551a:	f043 0208 	orr.w	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552c:	2b00      	cmp	r3, #0
 800552e:	d012      	beq.n	8005556 <HAL_UART_IRQHandler+0x196>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8266 	beq.w	8005a2e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d013      	beq.n	8005596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800557a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800557e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d054      	beq.n	8005664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 f80a 	bl	80065d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d146      	bne.n	800565c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1d9      	bne.n	80055ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005620:	2b00      	cmp	r3, #0
 8005622:	d017      	beq.n	8005654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562a:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <HAL_UART_IRQHandler+0x2c0>)
 800562c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd f9c7 	bl	80029c8 <HAL_DMA_Abort_IT>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d019      	beq.n	8005674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800564e:	4610      	mov	r0, r2
 8005650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005652:	e00f      	b.n	8005674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f9ff 	bl	8005a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565a:	e00b      	b.n	8005674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f9fb 	bl	8005a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005662:	e007      	b.n	8005674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9f7 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005672:	e1dc      	b.n	8005a2e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	bf00      	nop
    return;
 8005676:	e1da      	b.n	8005a2e <HAL_UART_IRQHandler+0x66e>
 8005678:	10000001 	.word	0x10000001
 800567c:	04000120 	.word	0x04000120
 8005680:	080066a1 	.word	0x080066a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 8170 	bne.w	800596e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8169 	beq.w	800596e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8162 	beq.w	800596e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	f040 80d8 	bne.w	8005872 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80af 	beq.w	8005838 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f080 80a7 	bcs.w	8005838 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 8087 	bne.w	8005816 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800571c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800573e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800574a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1da      	bne.n	8005708 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800577a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800577e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e1      	bne.n	8005752 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800579e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e4:	f023 0310 	bic.w	r3, r3, #16
 80057e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e4      	bne.n	80057d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd f880 	bl	8002916 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005828:	b29b      	uxth	r3, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	b29b      	uxth	r3, r3
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f91b 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005836:	e0fc      	b.n	8005a32 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800583e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005842:	429a      	cmp	r2, r3
 8005844:	f040 80f5 	bne.w	8005a32 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	f040 80eb 	bne.w	8005a32 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8fe 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
      return;
 8005870:	e0df      	b.n	8005a32 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800587e:	b29b      	uxth	r3, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80d1 	beq.w	8005a36 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80cc 	beq.w	8005a36 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e4      	bne.n	800589e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	623b      	str	r3, [r7, #32]
   return(result);
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e1      	bne.n	80058d4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60fb      	str	r3, [r7, #12]
   return(result);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e4      	bne.n	8005924 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f880 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596c:	e063      	b.n	8005a36 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <HAL_UART_IRQHandler+0x5d8>
 800597a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800598e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fc4c 	bl	800722e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005996:	e051      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d014      	beq.n	80059ce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d03a      	beq.n	8005a3a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4798      	blx	r3
    }
    return;
 80059cc:	e035      	b.n	8005a3a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_UART_IRQHandler+0x62e>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fe6c 	bl	80066c4 <UART_EndTransmit_IT>
    return;
 80059ec:	e026      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_UART_IRQHandler+0x64e>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fc25 	bl	8007256 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a0c:	e016      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <HAL_UART_IRQHandler+0x67c>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da0c      	bge.n	8005a3c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fc0d 	bl	8007242 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a28:	e008      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8005a2a:	bf00      	nop
 8005a2c:	e006      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
    return;
 8005a2e:	bf00      	nop
 8005a30:	e004      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
      return;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <HAL_UART_IRQHandler+0x67c>
    return;
 8005a3a:	bf00      	nop
  }
}
 8005a3c:	37e8      	adds	r7, #232	@ 0xe8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b08c      	sub	sp, #48	@ 0x30
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4bab      	ldr	r3, [pc, #684]	@ (8005d60 <UART_SetConfig+0x2dc>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4aa0      	ldr	r2, [pc, #640]	@ (8005d64 <UART_SetConfig+0x2e0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aec:	4313      	orrs	r3, r2
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005afa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	f023 010f 	bic.w	r1, r3, #15
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a91      	ldr	r2, [pc, #580]	@ (8005d68 <UART_SetConfig+0x2e4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d125      	bne.n	8005b74 <UART_SetConfig+0xf0>
 8005b28:	4b90      	ldr	r3, [pc, #576]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d81a      	bhi.n	8005b6c <UART_SetConfig+0xe8>
 8005b36:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <UART_SetConfig+0xb8>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b4d 	.word	0x08005b4d
 8005b40:	08005b5d 	.word	0x08005b5d
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b65 	.word	0x08005b65
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e0d6      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005b54:	2302      	movs	r3, #2
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	e0d2      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b62:	e0ce      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005b64:	2308      	movs	r3, #8
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e0ca      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b72:	e0c6      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a7d      	ldr	r2, [pc, #500]	@ (8005d70 <UART_SetConfig+0x2ec>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d138      	bne.n	8005bf0 <UART_SetConfig+0x16c>
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d82d      	bhi.n	8005be8 <UART_SetConfig+0x164>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0x110>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005be9 	.word	0x08005be9
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005be9 	.word	0x08005be9
 8005bac:	08005be9 	.word	0x08005be9
 8005bb0:	08005be9 	.word	0x08005be9
 8005bb4:	08005bd1 	.word	0x08005bd1
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e098      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e094      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e090      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e08c      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	e088      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8005d74 <UART_SetConfig+0x2f0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d125      	bne.n	8005c46 <UART_SetConfig+0x1c2>
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c04:	2b30      	cmp	r3, #48	@ 0x30
 8005c06:	d016      	beq.n	8005c36 <UART_SetConfig+0x1b2>
 8005c08:	2b30      	cmp	r3, #48	@ 0x30
 8005c0a:	d818      	bhi.n	8005c3e <UART_SetConfig+0x1ba>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d00a      	beq.n	8005c26 <UART_SetConfig+0x1a2>
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d814      	bhi.n	8005c3e <UART_SetConfig+0x1ba>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <UART_SetConfig+0x19a>
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d008      	beq.n	8005c2e <UART_SetConfig+0x1aa>
 8005c1c:	e00f      	b.n	8005c3e <UART_SetConfig+0x1ba>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c24:	e06d      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2c:	e069      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c34:	e065      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c36:	2308      	movs	r3, #8
 8005c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3c:	e061      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c3e:	2310      	movs	r3, #16
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c44:	e05d      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d125      	bne.n	8005c9c <UART_SetConfig+0x218>
 8005c50:	4b46      	ldr	r3, [pc, #280]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c5c:	d016      	beq.n	8005c8c <UART_SetConfig+0x208>
 8005c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c60:	d818      	bhi.n	8005c94 <UART_SetConfig+0x210>
 8005c62:	2b80      	cmp	r3, #128	@ 0x80
 8005c64:	d00a      	beq.n	8005c7c <UART_SetConfig+0x1f8>
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	d814      	bhi.n	8005c94 <UART_SetConfig+0x210>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <UART_SetConfig+0x1f0>
 8005c6e:	2b40      	cmp	r3, #64	@ 0x40
 8005c70:	d008      	beq.n	8005c84 <UART_SetConfig+0x200>
 8005c72:	e00f      	b.n	8005c94 <UART_SetConfig+0x210>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7a:	e042      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c82:	e03e      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	e03a      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e036      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e032      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a30      	ldr	r2, [pc, #192]	@ (8005d64 <UART_SetConfig+0x2e0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d12a      	bne.n	8005cfc <UART_SetConfig+0x278>
 8005ca6:	4b31      	ldr	r3, [pc, #196]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cb4:	d01a      	beq.n	8005cec <UART_SetConfig+0x268>
 8005cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cba:	d81b      	bhi.n	8005cf4 <UART_SetConfig+0x270>
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cc0:	d00c      	beq.n	8005cdc <UART_SetConfig+0x258>
 8005cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cc6:	d815      	bhi.n	8005cf4 <UART_SetConfig+0x270>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <UART_SetConfig+0x250>
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd0:	d008      	beq.n	8005ce4 <UART_SetConfig+0x260>
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x270>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e012      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce2:	e00e      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cea:	e00a      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf2:	e006      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0x27e>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <UART_SetConfig+0x2e0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	f040 80a8 	bne.w	8005e5e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d834      	bhi.n	8005d80 <UART_SetConfig+0x2fc>
 8005d16:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <UART_SetConfig+0x298>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d81 	.word	0x08005d81
 8005d2c:	08005d4f 	.word	0x08005d4f
 8005d30:	08005d81 	.word	0x08005d81
 8005d34:	08005d81 	.word	0x08005d81
 8005d38:	08005d81 	.word	0x08005d81
 8005d3c:	08005d57 	.word	0x08005d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fe fc2c 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d46:	e021      	b.n	8005d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	@ (8005d7c <UART_SetConfig+0x2f8>)
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d4c:	e01e      	b.n	8005d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7fe fbb7 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8005d52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d54:	e01a      	b.n	8005d8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d5c:	e016      	b.n	8005d8c <UART_SetConfig+0x308>
 8005d5e:	bf00      	nop
 8005d60:	cfff69f3 	.word	0xcfff69f3
 8005d64:	40008000 	.word	0x40008000
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	40004400 	.word	0x40004400
 8005d74:	40004800 	.word	0x40004800
 8005d78:	40004c00 	.word	0x40004c00
 8005d7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 812a 	beq.w	8005fe8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	4a9e      	ldr	r2, [pc, #632]	@ (8006014 <UART_SetConfig+0x590>)
 8005d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d305      	bcc.n	8005dc4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d903      	bls.n	8005dcc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dca:	e10d      	b.n	8005fe8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	60fa      	str	r2, [r7, #12]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8006014 <UART_SetConfig+0x590>)
 8005dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dee:	f7fa ff03 	bl	8000bf8 <__aeabi_uldivmod>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	020b      	lsls	r3, r1, #8
 8005e04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e08:	0202      	lsls	r2, r0, #8
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	6849      	ldr	r1, [r1, #4]
 8005e0e:	0849      	lsrs	r1, r1, #1
 8005e10:	2000      	movs	r0, #0
 8005e12:	460c      	mov	r4, r1
 8005e14:	4605      	mov	r5, r0
 8005e16:	eb12 0804 	adds.w	r8, r2, r4
 8005e1a:	eb43 0905 	adc.w	r9, r3, r5
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	469a      	mov	sl, r3
 8005e26:	4693      	mov	fp, r2
 8005e28:	4652      	mov	r2, sl
 8005e2a:	465b      	mov	r3, fp
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4649      	mov	r1, r9
 8005e30:	f7fa fee2 	bl	8000bf8 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e42:	d308      	bcc.n	8005e56 <UART_SetConfig+0x3d2>
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e4a:	d204      	bcs.n	8005e56 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	60da      	str	r2, [r3, #12]
 8005e54:	e0c8      	b.n	8005fe8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e5c:	e0c4      	b.n	8005fe8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e66:	d167      	bne.n	8005f38 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d828      	bhi.n	8005ec2 <UART_SetConfig+0x43e>
 8005e70:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <UART_SetConfig+0x3f4>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005ec3 	.word	0x08005ec3
 8005e90:	08005ec3 	.word	0x08005ec3
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	08005ebb 	.word	0x08005ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7fe fb7e 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ea2:	e014      	b.n	8005ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea4:	f7fe fb90 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eaa:	e010      	b.n	8005ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eac:	4b5a      	ldr	r3, [pc, #360]	@ (8006018 <UART_SetConfig+0x594>)
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005eb0:	e00d      	b.n	8005ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7fe fb05 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8005eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eb8:	e009      	b.n	8005ece <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ec0:	e005      	b.n	8005ece <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8089 	beq.w	8005fe8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	4a4e      	ldr	r2, [pc, #312]	@ (8006014 <UART_SetConfig+0x590>)
 8005edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee8:	005a      	lsls	r2, r3, #1
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	441a      	add	r2, r3
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b0f      	cmp	r3, #15
 8005f00:	d916      	bls.n	8005f30 <UART_SetConfig+0x4ac>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f08:	d212      	bcs.n	8005f30 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f023 030f 	bic.w	r3, r3, #15
 8005f12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	8bfa      	ldrh	r2, [r7, #30]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e05b      	b.n	8005fe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f36:	e057      	b.n	8005fe8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d828      	bhi.n	8005f92 <UART_SetConfig+0x50e>
 8005f40:	a201      	add	r2, pc, #4	@ (adr r2, 8005f48 <UART_SetConfig+0x4c4>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	08005f93 	.word	0x08005f93
 8005f58:	08005f83 	.word	0x08005f83
 8005f5c:	08005f93 	.word	0x08005f93
 8005f60:	08005f93 	.word	0x08005f93
 8005f64:	08005f93 	.word	0x08005f93
 8005f68:	08005f8b 	.word	0x08005f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f7fe fb16 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005f70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f72:	e014      	b.n	8005f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe fb28 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f7a:	e010      	b.n	8005f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f7c:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <UART_SetConfig+0x594>)
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f80:	e00d      	b.n	8005f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f82:	f7fe fa9d 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 8005f86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f88:	e009      	b.n	8005f9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f90:	e005      	b.n	8005f9e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f9c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d021      	beq.n	8005fe8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8006014 <UART_SetConfig+0x590>)
 8005faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	441a      	add	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	d909      	bls.n	8005fe2 <UART_SetConfig+0x55e>
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd4:	d205      	bcs.n	8005fe2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60da      	str	r2, [r3, #12]
 8005fe0:	e002      	b.n	8005fe8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2200      	movs	r2, #0
 8006002:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006004:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006008:	4618      	mov	r0, r3
 800600a:	3730      	adds	r7, #48	@ 0x30
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	0800ad24 	.word	0x0800ad24
 8006018:	00f42400 	.word	0x00f42400

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01a      	beq.n	8006132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611a:	d10a      	bne.n	8006132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b098      	sub	sp, #96	@ 0x60
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006170:	f7fc fa94 	bl	800269c <HAL_GetTick>
 8006174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d12f      	bne.n	80061e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f88e 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d022      	beq.n	80061e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e063      	b.n	80062ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d149      	bne.n	8006286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fa:	2200      	movs	r2, #0
 80061fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f857 	bl	80062b4 <UART_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d03c      	beq.n	8006286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	623b      	str	r3, [r7, #32]
   return(result);
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30
 800622c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	60fb      	str	r3, [r7, #12]
   return(result);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800625e:	61fa      	str	r2, [r7, #28]
 8006260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	69b9      	ldr	r1, [r7, #24]
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	617b      	str	r3, [r7, #20]
   return(result);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e5      	bne.n	800623e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e012      	b.n	80062ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3758      	adds	r7, #88	@ 0x58
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c4:	e04f      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d04b      	beq.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fc f9e5 	bl	800269c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e04e      	b.n	8006386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d037      	beq.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b80      	cmp	r3, #128	@ 0x80
 80062fa:	d034      	beq.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d031      	beq.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b08      	cmp	r3, #8
 800630e:	d110      	bne.n	8006332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2208      	movs	r2, #8
 8006316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f95b 	bl	80065d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2208      	movs	r2, #8
 8006322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e029      	b.n	8006386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800633c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006340:	d111      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800634a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f941 	bl	80065d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e00f      	b.n	8006386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4013      	ands	r3, r2
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	429a      	cmp	r2, r3
 8006374:	bf0c      	ite	eq
 8006376:	2301      	moveq	r3, #1
 8006378:	2300      	movne	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	429a      	cmp	r2, r3
 8006382:	d0a0      	beq.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006390:	b480      	push	{r7}
 8006392:	b0a3      	sub	sp, #140	@ 0x8c
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	d10e      	bne.n	80063e2 <UART_Start_Receive_IT+0x52>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <UART_Start_Receive_IT+0x48>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063d6:	e02d      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	22ff      	movs	r2, #255	@ 0xff
 80063dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063e0:	e028      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <UART_Start_Receive_IT+0x76>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <UART_Start_Receive_IT+0x6c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	22ff      	movs	r2, #255	@ 0xff
 80063f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80063fa:	e01b      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	227f      	movs	r2, #127	@ 0x7f
 8006400:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006404:	e016      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640e:	d10d      	bne.n	800642c <UART_Start_Receive_IT+0x9c>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <UART_Start_Receive_IT+0x92>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	227f      	movs	r2, #127	@ 0x7f
 800641c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006420:	e008      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	223f      	movs	r2, #63	@ 0x3f
 8006426:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800642a:	e003      	b.n	8006434 <UART_Start_Receive_IT+0xa4>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2222      	movs	r2, #34	@ 0x22
 8006440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006468:	673a      	str	r2, [r7, #112]	@ 0x70
 800646a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800646e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e3      	bne.n	8006444 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006484:	d14f      	bne.n	8006526 <UART_Start_Receive_IT+0x196>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	429a      	cmp	r2, r3
 8006490:	d349      	bcc.n	8006526 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649a:	d107      	bne.n	80064ac <UART_Start_Receive_IT+0x11c>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a47      	ldr	r2, [pc, #284]	@ (80065c4 <UART_Start_Receive_IT+0x234>)
 80064a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80064aa:	e002      	b.n	80064b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a46      	ldr	r2, [pc, #280]	@ (80065c8 <UART_Start_Receive_IT+0x238>)
 80064b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80064c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80064e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80064ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e4      	bne.n	80064ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006506:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006510:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006512:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800651e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_Start_Receive_IT+0x160>
 8006524:	e046      	b.n	80065b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652e:	d107      	bne.n	8006540 <UART_Start_Receive_IT+0x1b0>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a24      	ldr	r2, [pc, #144]	@ (80065cc <UART_Start_Receive_IT+0x23c>)
 800653c:	675a      	str	r2, [r3, #116]	@ 0x74
 800653e:	e002      	b.n	8006546 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a23      	ldr	r2, [pc, #140]	@ (80065d0 <UART_Start_Receive_IT+0x240>)
 8006544:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d019      	beq.n	8006582 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006562:	677b      	str	r3, [r7, #116]	@ 0x74
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
 800656e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_Start_Receive_IT+0x1be>
 8006580:	e018      	b.n	80065b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	613b      	str	r3, [r7, #16]
   return(result);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f043 0320 	orr.w	r3, r3, #32
 8006596:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	69f9      	ldr	r1, [r7, #28]
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	378c      	adds	r7, #140	@ 0x8c
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	08006df1 	.word	0x08006df1
 80065c8:	08006a8d 	.word	0x08006a8d
 80065cc:	080068d5 	.word	0x080068d5
 80065d0:	0800671d 	.word	0x0800671d

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b095      	sub	sp, #84	@ 0x54
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e6      	bne.n	80065dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	61fb      	str	r3, [r7, #28]
   return(result);
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e3      	bne.n	800660e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800664a:	2b01      	cmp	r3, #1
 800664c:	d118      	bne.n	8006680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	60bb      	str	r3, [r7, #8]
   return(result);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	647b      	str	r3, [r7, #68]	@ 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6979      	ldr	r1, [r7, #20]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	613b      	str	r3, [r7, #16]
   return(result);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006694:	bf00      	nop
 8006696:	3754      	adds	r7, #84	@ 0x54
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f7ff f9ce 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	613b      	str	r3, [r7, #16]
   return(result);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e6      	bne.n	80066cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff f999 	bl	8005a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006712:	bf00      	nop
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b09c      	sub	sp, #112	@ 0x70
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800672a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006734:	2b22      	cmp	r3, #34	@ 0x22
 8006736:	f040 80be 	bne.w	80068b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006744:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800674e:	b2da      	uxtb	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	400a      	ands	r2, r1
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 80a1 	bne.w	80068c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80067d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a33      	ldr	r2, [pc, #204]	@ (80068d0 <UART_RxISR_8BIT+0x1b4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01f      	beq.n	8006848 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	623b      	str	r3, [r7, #32]
   return(result);
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800682a:	663b      	str	r3, [r7, #96]	@ 0x60
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006834:	633b      	str	r3, [r7, #48]	@ 0x30
 8006836:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e6      	bne.n	8006816 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d12e      	bne.n	80068ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	60fb      	str	r3, [r7, #12]
   return(result);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0310 	bic.w	r3, r3, #16
 800686a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	69b9      	ldr	r1, [r7, #24]
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	617b      	str	r3, [r7, #20]
   return(result);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b10      	cmp	r3, #16
 8006894:	d103      	bne.n	800689e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2210      	movs	r2, #16
 800689c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff f8e0 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068ac:	e00b      	b.n	80068c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fa ffc8 	bl	8001844 <HAL_UART_RxCpltCallback>
}
 80068b4:	e007      	b.n	80068c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699a      	ldr	r2, [r3, #24]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0208 	orr.w	r2, r2, #8
 80068c4:	619a      	str	r2, [r3, #24]
}
 80068c6:	bf00      	nop
 80068c8:	3770      	adds	r7, #112	@ 0x70
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40008000 	.word	0x40008000

080068d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b09c      	sub	sp, #112	@ 0x70
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ec:	2b22      	cmp	r3, #34	@ 0x22
 80068ee:	f040 80be 	bne.w	8006a6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006900:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006902:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800690a:	4013      	ands	r3, r2
 800690c:	b29a      	uxth	r2, r3
 800690e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 80a1 	bne.w	8006a7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800694a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006950:	667b      	str	r3, [r7, #100]	@ 0x64
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800695a:	657b      	str	r3, [r7, #84]	@ 0x54
 800695c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e6      	bne.n	800693c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	663b      	str	r3, [r7, #96]	@ 0x60
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800698e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e5      	bne.n	800696e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a33      	ldr	r2, [pc, #204]	@ (8006a88 <UART_RxISR_16BIT+0x1b4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01f      	beq.n	8006a00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d018      	beq.n	8006a00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	61fb      	str	r3, [r7, #28]
   return(result);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d12e      	bne.n	8006a66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6979      	ldr	r1, [r7, #20]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e6      	bne.n	8006a0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d103      	bne.n	8006a56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2210      	movs	r2, #16
 8006a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff f804 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a64:	e00b      	b.n	8006a7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa feec 	bl	8001844 <HAL_UART_RxCpltCallback>
}
 8006a6c:	e007      	b.n	8006a7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0208 	orr.w	r2, r2, #8
 8006a7c:	619a      	str	r2, [r3, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	3770      	adds	r7, #112	@ 0x70
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40008000 	.word	0x40008000

08006a8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b0ac      	sub	sp, #176	@ 0xb0
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ac2:	2b22      	cmp	r3, #34	@ 0x22
 8006ac4:	f040 8183 	bne.w	8006dce <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ace:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ad2:	e126      	b.n	8006d22 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ade:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006ae2:	b2d9      	uxtb	r1, r3
 8006ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aee:	400a      	ands	r2, r1
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d053      	beq.n	8006bce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2201      	movs	r2, #1
 8006b44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	f043 0201 	orr.w	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d011      	beq.n	8006b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2202      	movs	r2, #2
 8006b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7c:	f043 0204 	orr.w	r2, r3, #4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d011      	beq.n	8006bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7fe ff49 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 80a3 	bne.w	8006d22 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c00:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006c04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006c0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e4      	bne.n	8006bdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3308      	adds	r3, #8
 8006c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c3a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006c3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006c40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e1      	bne.n	8006c12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a60      	ldr	r2, [pc, #384]	@ (8006de8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d021      	beq.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01a      	beq.n	8006cb0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c9e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e4      	bne.n	8006c7a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d130      	bne.n	8006d1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	f023 0310 	bic.w	r3, r3, #16
 8006cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e4      	bne.n	8006cbe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d103      	bne.n	8006d0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2210      	movs	r2, #16
 8006d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe feaa 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006d18:	e00e      	b.n	8006d38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fa fd92 	bl	8001844 <HAL_UART_RxCpltCallback>
        break;
 8006d20:	e00a      	b.n	8006d38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d22:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f47f aece 	bne.w	8006ad4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d3e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d049      	beq.n	8006dde <UART_RxISR_8BIT_FIFOEN+0x352>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d50:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d242      	bcs.n	8006dde <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006d94:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f043 0320 	orr.w	r3, r3, #32
 8006daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6979      	ldr	r1, [r7, #20]
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e4      	bne.n	8006d96 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dcc:	e007      	b.n	8006dde <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0208 	orr.w	r2, r2, #8
 8006ddc:	619a      	str	r2, [r3, #24]
}
 8006dde:	bf00      	nop
 8006de0:	37b0      	adds	r7, #176	@ 0xb0
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40008000 	.word	0x40008000
 8006dec:	0800671d 	.word	0x0800671d

08006df0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0ae      	sub	sp, #184	@ 0xb8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006dfe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e26:	2b22      	cmp	r3, #34	@ 0x22
 8006e28:	f040 8187 	bne.w	800713a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006e32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e36:	e12a      	b.n	800708e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006e4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006e52:	4013      	ands	r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e60:	1c9a      	adds	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d053      	beq.n	8006f36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d011      	beq.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0xce>
 8006e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb4:	f043 0201 	orr.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d011      	beq.n	8006eee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006eca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2202      	movs	r2, #2
 8006edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d011      	beq.n	8006f1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f14:	f043 0202 	orr.w	r2, r3, #2
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d006      	beq.n	8006f36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fe fd95 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 80a5 	bne.w	800708e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e2      	bne.n	8006f44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006fa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e1      	bne.n	8006f7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a60      	ldr	r2, [pc, #384]	@ (8007154 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d021      	beq.n	800701c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01a      	beq.n	800701c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007008:	65bb      	str	r3, [r7, #88]	@ 0x58
 800700a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800700e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e4      	bne.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d130      	bne.n	8007086 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	f023 0310 	bic.w	r3, r3, #16
 800703e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800704c:	647b      	str	r3, [r7, #68]	@ 0x44
 800704e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800705a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e4      	bne.n	800702a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b10      	cmp	r3, #16
 800706c:	d103      	bne.n	8007076 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2210      	movs	r2, #16
 8007074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fe fcf4 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007084:	e00e      	b.n	80070a4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fa fbdc 	bl	8001844 <HAL_UART_RxCpltCallback>
        break;
 800708c:	e00a      	b.n	80070a4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800708e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007092:	2b00      	cmp	r3, #0
 8007094:	d006      	beq.n	80070a4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f47f aeca 	bne.w	8006e38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070aa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d049      	beq.n	800714a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070bc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d242      	bcs.n	800714a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	623b      	str	r3, [r7, #32]
   return(result);
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80070e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e3      	bne.n	80070c4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007100:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f043 0320 	orr.w	r3, r3, #32
 8007116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	69b9      	ldr	r1, [r7, #24]
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	617b      	str	r3, [r7, #20]
   return(result);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e4      	bne.n	8007102 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007138:	e007      	b.n	800714a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0208 	orr.w	r2, r2, #8
 8007148:	619a      	str	r2, [r3, #24]
}
 800714a:	bf00      	nop
 800714c:	37b8      	adds	r7, #184	@ 0xb8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40008000 	.word	0x40008000
 8007158:	080068d5 	.word	0x080068d5

0800715c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e058      	b.n	8007226 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7fb f8f6 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2224      	movs	r2, #36	@ 0x24
 8007190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7fe ff35 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7fe fc66 	bl	8005a84 <UART_SetConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e031      	b.n	8007226 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071d0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	055b      	lsls	r3, r3, #21
 80071ea:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	041b      	lsls	r3, r3, #16
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8007200:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	6979      	ldr	r1, [r7, #20]
 800720a:	430b      	orrs	r3, r1
 800720c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7fe ff9e 	bl	8006160 <UART_CheckIdleState>
 8007224:	4603      	mov	r3, r0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_UARTEx_DisableFifoMode+0x16>
 800727c:	2302      	movs	r3, #2
 800727e:	e027      	b.n	80072d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2224      	movs	r2, #36	@ 0x24
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e02d      	b.n	8007350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	@ 0x24
 8007300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0201 	bic.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f84f 	bl	80073d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800736c:	2302      	movs	r3, #2
 800736e:	e02d      	b.n	80073cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2224      	movs	r2, #36	@ 0x24
 800737c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0201 	bic.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f811 	bl	80073d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d108      	bne.n	80073f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073f4:	e031      	b.n	800745a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073f6:	2308      	movs	r3, #8
 80073f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073fa:	2308      	movs	r3, #8
 80073fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	0e5b      	lsrs	r3, r3, #25
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	0f5b      	lsrs	r3, r3, #29
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	7b3a      	ldrb	r2, [r7, #12]
 8007422:	4911      	ldr	r1, [pc, #68]	@ (8007468 <UARTEx_SetNbDataToProcess+0x94>)
 8007424:	5c8a      	ldrb	r2, [r1, r2]
 8007426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800742a:	7b3a      	ldrb	r2, [r7, #12]
 800742c:	490f      	ldr	r1, [pc, #60]	@ (800746c <UARTEx_SetNbDataToProcess+0x98>)
 800742e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007430:	fb93 f3f2 	sdiv	r3, r3, r2
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	7b7a      	ldrb	r2, [r7, #13]
 8007440:	4909      	ldr	r1, [pc, #36]	@ (8007468 <UARTEx_SetNbDataToProcess+0x94>)
 8007442:	5c8a      	ldrb	r2, [r1, r2]
 8007444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007448:	7b7a      	ldrb	r2, [r7, #13]
 800744a:	4908      	ldr	r1, [pc, #32]	@ (800746c <UARTEx_SetNbDataToProcess+0x98>)
 800744c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800744e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	0800ad3c 	.word	0x0800ad3c
 800746c:	0800ad44 	.word	0x0800ad44

08007470 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007478:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800747c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	b29b      	uxth	r3, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	b29b      	uxth	r3, r3
 800748e:	4013      	ands	r3, r2
 8007490:	b29a      	uxth	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <__cvt>:
 80074e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e6:	ec57 6b10 	vmov	r6, r7, d0
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	460c      	mov	r4, r1
 80074ee:	4619      	mov	r1, r3
 80074f0:	463b      	mov	r3, r7
 80074f2:	bfbb      	ittet	lt
 80074f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074f8:	461f      	movlt	r7, r3
 80074fa:	2300      	movge	r3, #0
 80074fc:	232d      	movlt	r3, #45	@ 0x2d
 80074fe:	700b      	strb	r3, [r1, #0]
 8007500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007502:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007506:	4691      	mov	r9, r2
 8007508:	f023 0820 	bic.w	r8, r3, #32
 800750c:	bfbc      	itt	lt
 800750e:	4632      	movlt	r2, r6
 8007510:	4616      	movlt	r6, r2
 8007512:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007516:	d005      	beq.n	8007524 <__cvt+0x42>
 8007518:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800751c:	d100      	bne.n	8007520 <__cvt+0x3e>
 800751e:	3401      	adds	r4, #1
 8007520:	2102      	movs	r1, #2
 8007522:	e000      	b.n	8007526 <__cvt+0x44>
 8007524:	2103      	movs	r1, #3
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	ab02      	add	r3, sp, #8
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	ec47 6b10 	vmov	d0, r6, r7
 8007532:	4653      	mov	r3, sl
 8007534:	4622      	mov	r2, r4
 8007536:	f000 ff73 	bl	8008420 <_dtoa_r>
 800753a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800753e:	4605      	mov	r5, r0
 8007540:	d119      	bne.n	8007576 <__cvt+0x94>
 8007542:	f019 0f01 	tst.w	r9, #1
 8007546:	d00e      	beq.n	8007566 <__cvt+0x84>
 8007548:	eb00 0904 	add.w	r9, r0, r4
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f9 fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8007558:	b108      	cbz	r0, 800755e <__cvt+0x7c>
 800755a:	f8cd 900c 	str.w	r9, [sp, #12]
 800755e:	2230      	movs	r2, #48	@ 0x30
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	454b      	cmp	r3, r9
 8007564:	d31e      	bcc.n	80075a4 <__cvt+0xc2>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800756a:	1b5b      	subs	r3, r3, r5
 800756c:	4628      	mov	r0, r5
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	b004      	add	sp, #16
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800757a:	eb00 0904 	add.w	r9, r0, r4
 800757e:	d1e5      	bne.n	800754c <__cvt+0x6a>
 8007580:	7803      	ldrb	r3, [r0, #0]
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d10a      	bne.n	800759c <__cvt+0xba>
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 fac3 	bl	8000b18 <__aeabi_dcmpeq>
 8007592:	b918      	cbnz	r0, 800759c <__cvt+0xba>
 8007594:	f1c4 0401 	rsb	r4, r4, #1
 8007598:	f8ca 4000 	str.w	r4, [sl]
 800759c:	f8da 3000 	ldr.w	r3, [sl]
 80075a0:	4499      	add	r9, r3
 80075a2:	e7d3      	b.n	800754c <__cvt+0x6a>
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e7d9      	b.n	8007560 <__cvt+0x7e>

080075ac <__exponent>:
 80075ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ae:	2900      	cmp	r1, #0
 80075b0:	bfba      	itte	lt
 80075b2:	4249      	neglt	r1, r1
 80075b4:	232d      	movlt	r3, #45	@ 0x2d
 80075b6:	232b      	movge	r3, #43	@ 0x2b
 80075b8:	2909      	cmp	r1, #9
 80075ba:	7002      	strb	r2, [r0, #0]
 80075bc:	7043      	strb	r3, [r0, #1]
 80075be:	dd29      	ble.n	8007614 <__exponent+0x68>
 80075c0:	f10d 0307 	add.w	r3, sp, #7
 80075c4:	461d      	mov	r5, r3
 80075c6:	270a      	movs	r7, #10
 80075c8:	461a      	mov	r2, r3
 80075ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80075ce:	fb07 1416 	mls	r4, r7, r6, r1
 80075d2:	3430      	adds	r4, #48	@ 0x30
 80075d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075d8:	460c      	mov	r4, r1
 80075da:	2c63      	cmp	r4, #99	@ 0x63
 80075dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80075e0:	4631      	mov	r1, r6
 80075e2:	dcf1      	bgt.n	80075c8 <__exponent+0x1c>
 80075e4:	3130      	adds	r1, #48	@ 0x30
 80075e6:	1e94      	subs	r4, r2, #2
 80075e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075ec:	1c41      	adds	r1, r0, #1
 80075ee:	4623      	mov	r3, r4
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	d30a      	bcc.n	800760a <__exponent+0x5e>
 80075f4:	f10d 0309 	add.w	r3, sp, #9
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	42ac      	cmp	r4, r5
 80075fc:	bf88      	it	hi
 80075fe:	2300      	movhi	r3, #0
 8007600:	3302      	adds	r3, #2
 8007602:	4403      	add	r3, r0
 8007604:	1a18      	subs	r0, r3, r0
 8007606:	b003      	add	sp, #12
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800760e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007612:	e7ed      	b.n	80075f0 <__exponent+0x44>
 8007614:	2330      	movs	r3, #48	@ 0x30
 8007616:	3130      	adds	r1, #48	@ 0x30
 8007618:	7083      	strb	r3, [r0, #2]
 800761a:	70c1      	strb	r1, [r0, #3]
 800761c:	1d03      	adds	r3, r0, #4
 800761e:	e7f1      	b.n	8007604 <__exponent+0x58>

08007620 <_printf_float>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	b08d      	sub	sp, #52	@ 0x34
 8007626:	460c      	mov	r4, r1
 8007628:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800762c:	4616      	mov	r6, r2
 800762e:	461f      	mov	r7, r3
 8007630:	4605      	mov	r5, r0
 8007632:	f000 fdf3 	bl	800821c <_localeconv_r>
 8007636:	6803      	ldr	r3, [r0, #0]
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	4618      	mov	r0, r3
 800763c:	f7f8 fe40 	bl	80002c0 <strlen>
 8007640:	2300      	movs	r3, #0
 8007642:	930a      	str	r3, [sp, #40]	@ 0x28
 8007644:	f8d8 3000 	ldr.w	r3, [r8]
 8007648:	9005      	str	r0, [sp, #20]
 800764a:	3307      	adds	r3, #7
 800764c:	f023 0307 	bic.w	r3, r3, #7
 8007650:	f103 0208 	add.w	r2, r3, #8
 8007654:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007658:	f8d4 b000 	ldr.w	fp, [r4]
 800765c:	f8c8 2000 	str.w	r2, [r8]
 8007660:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007664:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007668:	9307      	str	r3, [sp, #28]
 800766a:	f8cd 8018 	str.w	r8, [sp, #24]
 800766e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007676:	4b9c      	ldr	r3, [pc, #624]	@ (80078e8 <_printf_float+0x2c8>)
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	f7f9 fa7e 	bl	8000b7c <__aeabi_dcmpun>
 8007680:	bb70      	cbnz	r0, 80076e0 <_printf_float+0xc0>
 8007682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007686:	4b98      	ldr	r3, [pc, #608]	@ (80078e8 <_printf_float+0x2c8>)
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	f7f9 fa58 	bl	8000b40 <__aeabi_dcmple>
 8007690:	bb30      	cbnz	r0, 80076e0 <_printf_float+0xc0>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f9 fa47 	bl	8000b2c <__aeabi_dcmplt>
 800769e:	b110      	cbz	r0, 80076a6 <_printf_float+0x86>
 80076a0:	232d      	movs	r3, #45	@ 0x2d
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a6:	4a91      	ldr	r2, [pc, #580]	@ (80078ec <_printf_float+0x2cc>)
 80076a8:	4b91      	ldr	r3, [pc, #580]	@ (80078f0 <_printf_float+0x2d0>)
 80076aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076ae:	bf8c      	ite	hi
 80076b0:	4690      	movhi	r8, r2
 80076b2:	4698      	movls	r8, r3
 80076b4:	2303      	movs	r3, #3
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	f02b 0304 	bic.w	r3, fp, #4
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	9700      	str	r7, [sp, #0]
 80076c4:	4633      	mov	r3, r6
 80076c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f9d2 	bl	8007a74 <_printf_common>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f040 808d 	bne.w	80077f0 <_printf_float+0x1d0>
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	b00d      	add	sp, #52	@ 0x34
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	4649      	mov	r1, r9
 80076e8:	f7f9 fa48 	bl	8000b7c <__aeabi_dcmpun>
 80076ec:	b140      	cbz	r0, 8007700 <_printf_float+0xe0>
 80076ee:	464b      	mov	r3, r9
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfbc      	itt	lt
 80076f4:	232d      	movlt	r3, #45	@ 0x2d
 80076f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076fa:	4a7e      	ldr	r2, [pc, #504]	@ (80078f4 <_printf_float+0x2d4>)
 80076fc:	4b7e      	ldr	r3, [pc, #504]	@ (80078f8 <_printf_float+0x2d8>)
 80076fe:	e7d4      	b.n	80076aa <_printf_float+0x8a>
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007706:	9206      	str	r2, [sp, #24]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	d13b      	bne.n	8007784 <_printf_float+0x164>
 800770c:	2306      	movs	r3, #6
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007714:	2300      	movs	r3, #0
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	ab0a      	add	r3, sp, #40	@ 0x28
 800771c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007720:	ab09      	add	r3, sp, #36	@ 0x24
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	6861      	ldr	r1, [r4, #4]
 8007726:	ec49 8b10 	vmov	d0, r8, r9
 800772a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800772e:	4628      	mov	r0, r5
 8007730:	f7ff fed7 	bl	80074e2 <__cvt>
 8007734:	9b06      	ldr	r3, [sp, #24]
 8007736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007738:	2b47      	cmp	r3, #71	@ 0x47
 800773a:	4680      	mov	r8, r0
 800773c:	d129      	bne.n	8007792 <_printf_float+0x172>
 800773e:	1cc8      	adds	r0, r1, #3
 8007740:	db02      	blt.n	8007748 <_printf_float+0x128>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	4299      	cmp	r1, r3
 8007746:	dd41      	ble.n	80077cc <_printf_float+0x1ac>
 8007748:	f1aa 0a02 	sub.w	sl, sl, #2
 800774c:	fa5f fa8a 	uxtb.w	sl, sl
 8007750:	3901      	subs	r1, #1
 8007752:	4652      	mov	r2, sl
 8007754:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007758:	9109      	str	r1, [sp, #36]	@ 0x24
 800775a:	f7ff ff27 	bl	80075ac <__exponent>
 800775e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007760:	1813      	adds	r3, r2, r0
 8007762:	2a01      	cmp	r2, #1
 8007764:	4681      	mov	r9, r0
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	dc02      	bgt.n	8007770 <_printf_float+0x150>
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	07d2      	lsls	r2, r2, #31
 800776e:	d501      	bpl.n	8007774 <_printf_float+0x154>
 8007770:	3301      	adds	r3, #1
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0a2      	beq.n	80076c2 <_printf_float+0xa2>
 800777c:	232d      	movs	r3, #45	@ 0x2d
 800777e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007782:	e79e      	b.n	80076c2 <_printf_float+0xa2>
 8007784:	9a06      	ldr	r2, [sp, #24]
 8007786:	2a47      	cmp	r2, #71	@ 0x47
 8007788:	d1c2      	bne.n	8007710 <_printf_float+0xf0>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1c0      	bne.n	8007710 <_printf_float+0xf0>
 800778e:	2301      	movs	r3, #1
 8007790:	e7bd      	b.n	800770e <_printf_float+0xee>
 8007792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007796:	d9db      	bls.n	8007750 <_printf_float+0x130>
 8007798:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800779c:	d118      	bne.n	80077d0 <_printf_float+0x1b0>
 800779e:	2900      	cmp	r1, #0
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	dd0b      	ble.n	80077bc <_printf_float+0x19c>
 80077a4:	6121      	str	r1, [r4, #16]
 80077a6:	b913      	cbnz	r3, 80077ae <_printf_float+0x18e>
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	07d0      	lsls	r0, r2, #31
 80077ac:	d502      	bpl.n	80077b4 <_printf_float+0x194>
 80077ae:	3301      	adds	r3, #1
 80077b0:	440b      	add	r3, r1
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077b6:	f04f 0900 	mov.w	r9, #0
 80077ba:	e7db      	b.n	8007774 <_printf_float+0x154>
 80077bc:	b913      	cbnz	r3, 80077c4 <_printf_float+0x1a4>
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	07d2      	lsls	r2, r2, #31
 80077c2:	d501      	bpl.n	80077c8 <_printf_float+0x1a8>
 80077c4:	3302      	adds	r3, #2
 80077c6:	e7f4      	b.n	80077b2 <_printf_float+0x192>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7f2      	b.n	80077b2 <_printf_float+0x192>
 80077cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d2:	4299      	cmp	r1, r3
 80077d4:	db05      	blt.n	80077e2 <_printf_float+0x1c2>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	6121      	str	r1, [r4, #16]
 80077da:	07d8      	lsls	r0, r3, #31
 80077dc:	d5ea      	bpl.n	80077b4 <_printf_float+0x194>
 80077de:	1c4b      	adds	r3, r1, #1
 80077e0:	e7e7      	b.n	80077b2 <_printf_float+0x192>
 80077e2:	2900      	cmp	r1, #0
 80077e4:	bfd4      	ite	le
 80077e6:	f1c1 0202 	rsble	r2, r1, #2
 80077ea:	2201      	movgt	r2, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	e7e0      	b.n	80077b2 <_printf_float+0x192>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	055a      	lsls	r2, r3, #21
 80077f4:	d407      	bmi.n	8007806 <_printf_float+0x1e6>
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	4642      	mov	r2, r8
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	d12b      	bne.n	800785c <_printf_float+0x23c>
 8007804:	e767      	b.n	80076d6 <_printf_float+0xb6>
 8007806:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800780a:	f240 80dd 	bls.w	80079c8 <_printf_float+0x3a8>
 800780e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	f7f9 f97f 	bl	8000b18 <__aeabi_dcmpeq>
 800781a:	2800      	cmp	r0, #0
 800781c:	d033      	beq.n	8007886 <_printf_float+0x266>
 800781e:	4a37      	ldr	r2, [pc, #220]	@ (80078fc <_printf_float+0x2dc>)
 8007820:	2301      	movs	r3, #1
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f af54 	beq.w	80076d6 <_printf_float+0xb6>
 800782e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007832:	4543      	cmp	r3, r8
 8007834:	db02      	blt.n	800783c <_printf_float+0x21c>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07d8      	lsls	r0, r3, #31
 800783a:	d50f      	bpl.n	800785c <_printf_float+0x23c>
 800783c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af45 	beq.w	80076d6 <_printf_float+0xb6>
 800784c:	f04f 0900 	mov.w	r9, #0
 8007850:	f108 38ff 	add.w	r8, r8, #4294967295
 8007854:	f104 0a1a 	add.w	sl, r4, #26
 8007858:	45c8      	cmp	r8, r9
 800785a:	dc09      	bgt.n	8007870 <_printf_float+0x250>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	079b      	lsls	r3, r3, #30
 8007860:	f100 8103 	bmi.w	8007a6a <_printf_float+0x44a>
 8007864:	68e0      	ldr	r0, [r4, #12]
 8007866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007868:	4298      	cmp	r0, r3
 800786a:	bfb8      	it	lt
 800786c:	4618      	movlt	r0, r3
 800786e:	e734      	b.n	80076da <_printf_float+0xba>
 8007870:	2301      	movs	r3, #1
 8007872:	4652      	mov	r2, sl
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af2b 	beq.w	80076d6 <_printf_float+0xb6>
 8007880:	f109 0901 	add.w	r9, r9, #1
 8007884:	e7e8      	b.n	8007858 <_printf_float+0x238>
 8007886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	dc39      	bgt.n	8007900 <_printf_float+0x2e0>
 800788c:	4a1b      	ldr	r2, [pc, #108]	@ (80078fc <_printf_float+0x2dc>)
 800788e:	2301      	movs	r3, #1
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af1d 	beq.w	80076d6 <_printf_float+0xb6>
 800789c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078a0:	ea59 0303 	orrs.w	r3, r9, r3
 80078a4:	d102      	bne.n	80078ac <_printf_float+0x28c>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	07d9      	lsls	r1, r3, #31
 80078aa:	d5d7      	bpl.n	800785c <_printf_float+0x23c>
 80078ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f af0d 	beq.w	80076d6 <_printf_float+0xb6>
 80078bc:	f04f 0a00 	mov.w	sl, #0
 80078c0:	f104 0b1a 	add.w	fp, r4, #26
 80078c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c6:	425b      	negs	r3, r3
 80078c8:	4553      	cmp	r3, sl
 80078ca:	dc01      	bgt.n	80078d0 <_printf_float+0x2b0>
 80078cc:	464b      	mov	r3, r9
 80078ce:	e793      	b.n	80077f8 <_printf_float+0x1d8>
 80078d0:	2301      	movs	r3, #1
 80078d2:	465a      	mov	r2, fp
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f aefb 	beq.w	80076d6 <_printf_float+0xb6>
 80078e0:	f10a 0a01 	add.w	sl, sl, #1
 80078e4:	e7ee      	b.n	80078c4 <_printf_float+0x2a4>
 80078e6:	bf00      	nop
 80078e8:	7fefffff 	.word	0x7fefffff
 80078ec:	0800ad50 	.word	0x0800ad50
 80078f0:	0800ad4c 	.word	0x0800ad4c
 80078f4:	0800ad58 	.word	0x0800ad58
 80078f8:	0800ad54 	.word	0x0800ad54
 80078fc:	0800ad5c 	.word	0x0800ad5c
 8007900:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007902:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007906:	4553      	cmp	r3, sl
 8007908:	bfa8      	it	ge
 800790a:	4653      	movge	r3, sl
 800790c:	2b00      	cmp	r3, #0
 800790e:	4699      	mov	r9, r3
 8007910:	dc36      	bgt.n	8007980 <_printf_float+0x360>
 8007912:	f04f 0b00 	mov.w	fp, #0
 8007916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800791a:	f104 021a 	add.w	r2, r4, #26
 800791e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007920:	9306      	str	r3, [sp, #24]
 8007922:	eba3 0309 	sub.w	r3, r3, r9
 8007926:	455b      	cmp	r3, fp
 8007928:	dc31      	bgt.n	800798e <_printf_float+0x36e>
 800792a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792c:	459a      	cmp	sl, r3
 800792e:	dc3a      	bgt.n	80079a6 <_printf_float+0x386>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07da      	lsls	r2, r3, #31
 8007934:	d437      	bmi.n	80079a6 <_printf_float+0x386>
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	ebaa 0903 	sub.w	r9, sl, r3
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	ebaa 0303 	sub.w	r3, sl, r3
 8007942:	4599      	cmp	r9, r3
 8007944:	bfa8      	it	ge
 8007946:	4699      	movge	r9, r3
 8007948:	f1b9 0f00 	cmp.w	r9, #0
 800794c:	dc33      	bgt.n	80079b6 <_printf_float+0x396>
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007956:	f104 0b1a 	add.w	fp, r4, #26
 800795a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795c:	ebaa 0303 	sub.w	r3, sl, r3
 8007960:	eba3 0309 	sub.w	r3, r3, r9
 8007964:	4543      	cmp	r3, r8
 8007966:	f77f af79 	ble.w	800785c <_printf_float+0x23c>
 800796a:	2301      	movs	r3, #1
 800796c:	465a      	mov	r2, fp
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f aeae 	beq.w	80076d6 <_printf_float+0xb6>
 800797a:	f108 0801 	add.w	r8, r8, #1
 800797e:	e7ec      	b.n	800795a <_printf_float+0x33a>
 8007980:	4642      	mov	r2, r8
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	d1c2      	bne.n	8007912 <_printf_float+0x2f2>
 800798c:	e6a3      	b.n	80076d6 <_printf_float+0xb6>
 800798e:	2301      	movs	r3, #1
 8007990:	4631      	mov	r1, r6
 8007992:	4628      	mov	r0, r5
 8007994:	9206      	str	r2, [sp, #24]
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae9c 	beq.w	80076d6 <_printf_float+0xb6>
 800799e:	9a06      	ldr	r2, [sp, #24]
 80079a0:	f10b 0b01 	add.w	fp, fp, #1
 80079a4:	e7bb      	b.n	800791e <_printf_float+0x2fe>
 80079a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	d1c0      	bne.n	8007936 <_printf_float+0x316>
 80079b4:	e68f      	b.n	80076d6 <_printf_float+0xb6>
 80079b6:	9a06      	ldr	r2, [sp, #24]
 80079b8:	464b      	mov	r3, r9
 80079ba:	4442      	add	r2, r8
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	d1c3      	bne.n	800794e <_printf_float+0x32e>
 80079c6:	e686      	b.n	80076d6 <_printf_float+0xb6>
 80079c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079cc:	f1ba 0f01 	cmp.w	sl, #1
 80079d0:	dc01      	bgt.n	80079d6 <_printf_float+0x3b6>
 80079d2:	07db      	lsls	r3, r3, #31
 80079d4:	d536      	bpl.n	8007a44 <_printf_float+0x424>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4642      	mov	r2, r8
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f ae78 	beq.w	80076d6 <_printf_float+0xb6>
 80079e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	f43f ae70 	beq.w	80076d6 <_printf_float+0xb6>
 80079f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079fa:	2200      	movs	r2, #0
 80079fc:	2300      	movs	r3, #0
 80079fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a02:	f7f9 f889 	bl	8000b18 <__aeabi_dcmpeq>
 8007a06:	b9c0      	cbnz	r0, 8007a3a <_printf_float+0x41a>
 8007a08:	4653      	mov	r3, sl
 8007a0a:	f108 0201 	add.w	r2, r8, #1
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	d10c      	bne.n	8007a32 <_printf_float+0x412>
 8007a18:	e65d      	b.n	80076d6 <_printf_float+0xb6>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	465a      	mov	r2, fp
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	f43f ae56 	beq.w	80076d6 <_printf_float+0xb6>
 8007a2a:	f108 0801 	add.w	r8, r8, #1
 8007a2e:	45d0      	cmp	r8, sl
 8007a30:	dbf3      	blt.n	8007a1a <_printf_float+0x3fa>
 8007a32:	464b      	mov	r3, r9
 8007a34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a38:	e6df      	b.n	80077fa <_printf_float+0x1da>
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	f104 0b1a 	add.w	fp, r4, #26
 8007a42:	e7f4      	b.n	8007a2e <_printf_float+0x40e>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4642      	mov	r2, r8
 8007a48:	e7e1      	b.n	8007a0e <_printf_float+0x3ee>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	464a      	mov	r2, r9
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f ae3e 	beq.w	80076d6 <_printf_float+0xb6>
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a62:	1a5b      	subs	r3, r3, r1
 8007a64:	4543      	cmp	r3, r8
 8007a66:	dcf0      	bgt.n	8007a4a <_printf_float+0x42a>
 8007a68:	e6fc      	b.n	8007864 <_printf_float+0x244>
 8007a6a:	f04f 0800 	mov.w	r8, #0
 8007a6e:	f104 0919 	add.w	r9, r4, #25
 8007a72:	e7f4      	b.n	8007a5e <_printf_float+0x43e>

08007a74 <_printf_common>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	4616      	mov	r6, r2
 8007a7a:	4698      	mov	r8, r3
 8007a7c:	688a      	ldr	r2, [r1, #8]
 8007a7e:	690b      	ldr	r3, [r1, #16]
 8007a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	bfb8      	it	lt
 8007a88:	4613      	movlt	r3, r2
 8007a8a:	6033      	str	r3, [r6, #0]
 8007a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a90:	4607      	mov	r7, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	b10a      	cbz	r2, 8007a9a <_printf_common+0x26>
 8007a96:	3301      	adds	r3, #1
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	0699      	lsls	r1, r3, #26
 8007a9e:	bf42      	ittt	mi
 8007aa0:	6833      	ldrmi	r3, [r6, #0]
 8007aa2:	3302      	addmi	r3, #2
 8007aa4:	6033      	strmi	r3, [r6, #0]
 8007aa6:	6825      	ldr	r5, [r4, #0]
 8007aa8:	f015 0506 	ands.w	r5, r5, #6
 8007aac:	d106      	bne.n	8007abc <_printf_common+0x48>
 8007aae:	f104 0a19 	add.w	sl, r4, #25
 8007ab2:	68e3      	ldr	r3, [r4, #12]
 8007ab4:	6832      	ldr	r2, [r6, #0]
 8007ab6:	1a9b      	subs	r3, r3, r2
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	dc26      	bgt.n	8007b0a <_printf_common+0x96>
 8007abc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ac0:	6822      	ldr	r2, [r4, #0]
 8007ac2:	3b00      	subs	r3, #0
 8007ac4:	bf18      	it	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	0692      	lsls	r2, r2, #26
 8007aca:	d42b      	bmi.n	8007b24 <_printf_common+0xb0>
 8007acc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	47c8      	blx	r9
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d01e      	beq.n	8007b18 <_printf_common+0xa4>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	f003 0306 	and.w	r3, r3, #6
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	bf02      	ittt	eq
 8007ae6:	68e5      	ldreq	r5, [r4, #12]
 8007ae8:	6833      	ldreq	r3, [r6, #0]
 8007aea:	1aed      	subeq	r5, r5, r3
 8007aec:	68a3      	ldr	r3, [r4, #8]
 8007aee:	bf0c      	ite	eq
 8007af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007af4:	2500      	movne	r5, #0
 8007af6:	4293      	cmp	r3, r2
 8007af8:	bfc4      	itt	gt
 8007afa:	1a9b      	subgt	r3, r3, r2
 8007afc:	18ed      	addgt	r5, r5, r3
 8007afe:	2600      	movs	r6, #0
 8007b00:	341a      	adds	r4, #26
 8007b02:	42b5      	cmp	r5, r6
 8007b04:	d11a      	bne.n	8007b3c <_printf_common+0xc8>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e008      	b.n	8007b1c <_printf_common+0xa8>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	4641      	mov	r1, r8
 8007b10:	4638      	mov	r0, r7
 8007b12:	47c8      	blx	r9
 8007b14:	3001      	adds	r0, #1
 8007b16:	d103      	bne.n	8007b20 <_printf_common+0xac>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b20:	3501      	adds	r5, #1
 8007b22:	e7c6      	b.n	8007ab2 <_printf_common+0x3e>
 8007b24:	18e1      	adds	r1, r4, r3
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	2030      	movs	r0, #48	@ 0x30
 8007b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b2e:	4422      	add	r2, r4
 8007b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b38:	3302      	adds	r3, #2
 8007b3a:	e7c7      	b.n	8007acc <_printf_common+0x58>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4641      	mov	r1, r8
 8007b42:	4638      	mov	r0, r7
 8007b44:	47c8      	blx	r9
 8007b46:	3001      	adds	r0, #1
 8007b48:	d0e6      	beq.n	8007b18 <_printf_common+0xa4>
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7d9      	b.n	8007b02 <_printf_common+0x8e>
	...

08007b50 <_printf_i>:
 8007b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	7e0f      	ldrb	r7, [r1, #24]
 8007b56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b58:	2f78      	cmp	r7, #120	@ 0x78
 8007b5a:	4691      	mov	r9, r2
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	469a      	mov	sl, r3
 8007b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b66:	d807      	bhi.n	8007b78 <_printf_i+0x28>
 8007b68:	2f62      	cmp	r7, #98	@ 0x62
 8007b6a:	d80a      	bhi.n	8007b82 <_printf_i+0x32>
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	f000 80d1 	beq.w	8007d14 <_printf_i+0x1c4>
 8007b72:	2f58      	cmp	r7, #88	@ 0x58
 8007b74:	f000 80b8 	beq.w	8007ce8 <_printf_i+0x198>
 8007b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b80:	e03a      	b.n	8007bf8 <_printf_i+0xa8>
 8007b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b86:	2b15      	cmp	r3, #21
 8007b88:	d8f6      	bhi.n	8007b78 <_printf_i+0x28>
 8007b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b90 <_printf_i+0x40>)
 8007b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b90:	08007be9 	.word	0x08007be9
 8007b94:	08007bfd 	.word	0x08007bfd
 8007b98:	08007b79 	.word	0x08007b79
 8007b9c:	08007b79 	.word	0x08007b79
 8007ba0:	08007b79 	.word	0x08007b79
 8007ba4:	08007b79 	.word	0x08007b79
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007b79 	.word	0x08007b79
 8007bb0:	08007b79 	.word	0x08007b79
 8007bb4:	08007b79 	.word	0x08007b79
 8007bb8:	08007b79 	.word	0x08007b79
 8007bbc:	08007cfb 	.word	0x08007cfb
 8007bc0:	08007c27 	.word	0x08007c27
 8007bc4:	08007cb5 	.word	0x08007cb5
 8007bc8:	08007b79 	.word	0x08007b79
 8007bcc:	08007b79 	.word	0x08007b79
 8007bd0:	08007d1d 	.word	0x08007d1d
 8007bd4:	08007b79 	.word	0x08007b79
 8007bd8:	08007c27 	.word	0x08007c27
 8007bdc:	08007b79 	.word	0x08007b79
 8007be0:	08007b79 	.word	0x08007b79
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	6833      	ldr	r3, [r6, #0]
 8007bea:	1d1a      	adds	r2, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6032      	str	r2, [r6, #0]
 8007bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e09c      	b.n	8007d36 <_printf_i+0x1e6>
 8007bfc:	6833      	ldr	r3, [r6, #0]
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	1d19      	adds	r1, r3, #4
 8007c02:	6031      	str	r1, [r6, #0]
 8007c04:	0606      	lsls	r6, r0, #24
 8007c06:	d501      	bpl.n	8007c0c <_printf_i+0xbc>
 8007c08:	681d      	ldr	r5, [r3, #0]
 8007c0a:	e003      	b.n	8007c14 <_printf_i+0xc4>
 8007c0c:	0645      	lsls	r5, r0, #25
 8007c0e:	d5fb      	bpl.n	8007c08 <_printf_i+0xb8>
 8007c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c14:	2d00      	cmp	r5, #0
 8007c16:	da03      	bge.n	8007c20 <_printf_i+0xd0>
 8007c18:	232d      	movs	r3, #45	@ 0x2d
 8007c1a:	426d      	negs	r5, r5
 8007c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c20:	4858      	ldr	r0, [pc, #352]	@ (8007d84 <_printf_i+0x234>)
 8007c22:	230a      	movs	r3, #10
 8007c24:	e011      	b.n	8007c4a <_printf_i+0xfa>
 8007c26:	6821      	ldr	r1, [r4, #0]
 8007c28:	6833      	ldr	r3, [r6, #0]
 8007c2a:	0608      	lsls	r0, r1, #24
 8007c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c30:	d402      	bmi.n	8007c38 <_printf_i+0xe8>
 8007c32:	0649      	lsls	r1, r1, #25
 8007c34:	bf48      	it	mi
 8007c36:	b2ad      	uxthmi	r5, r5
 8007c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c3a:	4852      	ldr	r0, [pc, #328]	@ (8007d84 <_printf_i+0x234>)
 8007c3c:	6033      	str	r3, [r6, #0]
 8007c3e:	bf14      	ite	ne
 8007c40:	230a      	movne	r3, #10
 8007c42:	2308      	moveq	r3, #8
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c4a:	6866      	ldr	r6, [r4, #4]
 8007c4c:	60a6      	str	r6, [r4, #8]
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	db05      	blt.n	8007c5e <_printf_i+0x10e>
 8007c52:	6821      	ldr	r1, [r4, #0]
 8007c54:	432e      	orrs	r6, r5
 8007c56:	f021 0104 	bic.w	r1, r1, #4
 8007c5a:	6021      	str	r1, [r4, #0]
 8007c5c:	d04b      	beq.n	8007cf6 <_printf_i+0x1a6>
 8007c5e:	4616      	mov	r6, r2
 8007c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c64:	fb03 5711 	mls	r7, r3, r1, r5
 8007c68:	5dc7      	ldrb	r7, [r0, r7]
 8007c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c6e:	462f      	mov	r7, r5
 8007c70:	42bb      	cmp	r3, r7
 8007c72:	460d      	mov	r5, r1
 8007c74:	d9f4      	bls.n	8007c60 <_printf_i+0x110>
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d10b      	bne.n	8007c92 <_printf_i+0x142>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	07df      	lsls	r7, r3, #31
 8007c7e:	d508      	bpl.n	8007c92 <_printf_i+0x142>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	6861      	ldr	r1, [r4, #4]
 8007c84:	4299      	cmp	r1, r3
 8007c86:	bfde      	ittt	le
 8007c88:	2330      	movle	r3, #48	@ 0x30
 8007c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c92:	1b92      	subs	r2, r2, r6
 8007c94:	6122      	str	r2, [r4, #16]
 8007c96:	f8cd a000 	str.w	sl, [sp]
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	aa03      	add	r2, sp, #12
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	f7ff fee7 	bl	8007a74 <_printf_common>
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d14a      	bne.n	8007d40 <_printf_i+0x1f0>
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	b004      	add	sp, #16
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	f043 0320 	orr.w	r3, r3, #32
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	4832      	ldr	r0, [pc, #200]	@ (8007d88 <_printf_i+0x238>)
 8007cbe:	2778      	movs	r7, #120	@ 0x78
 8007cc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	6831      	ldr	r1, [r6, #0]
 8007cc8:	061f      	lsls	r7, r3, #24
 8007cca:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cce:	d402      	bmi.n	8007cd6 <_printf_i+0x186>
 8007cd0:	065f      	lsls	r7, r3, #25
 8007cd2:	bf48      	it	mi
 8007cd4:	b2ad      	uxthmi	r5, r5
 8007cd6:	6031      	str	r1, [r6, #0]
 8007cd8:	07d9      	lsls	r1, r3, #31
 8007cda:	bf44      	itt	mi
 8007cdc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce0:	6023      	strmi	r3, [r4, #0]
 8007ce2:	b11d      	cbz	r5, 8007cec <_printf_i+0x19c>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	e7ad      	b.n	8007c44 <_printf_i+0xf4>
 8007ce8:	4826      	ldr	r0, [pc, #152]	@ (8007d84 <_printf_i+0x234>)
 8007cea:	e7e9      	b.n	8007cc0 <_printf_i+0x170>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	f023 0320 	bic.w	r3, r3, #32
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	e7f6      	b.n	8007ce4 <_printf_i+0x194>
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	e7bd      	b.n	8007c76 <_printf_i+0x126>
 8007cfa:	6833      	ldr	r3, [r6, #0]
 8007cfc:	6825      	ldr	r5, [r4, #0]
 8007cfe:	6961      	ldr	r1, [r4, #20]
 8007d00:	1d18      	adds	r0, r3, #4
 8007d02:	6030      	str	r0, [r6, #0]
 8007d04:	062e      	lsls	r6, r5, #24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	d501      	bpl.n	8007d0e <_printf_i+0x1be>
 8007d0a:	6019      	str	r1, [r3, #0]
 8007d0c:	e002      	b.n	8007d14 <_printf_i+0x1c4>
 8007d0e:	0668      	lsls	r0, r5, #25
 8007d10:	d5fb      	bpl.n	8007d0a <_printf_i+0x1ba>
 8007d12:	8019      	strh	r1, [r3, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	4616      	mov	r6, r2
 8007d1a:	e7bc      	b.n	8007c96 <_printf_i+0x146>
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	1d1a      	adds	r2, r3, #4
 8007d20:	6032      	str	r2, [r6, #0]
 8007d22:	681e      	ldr	r6, [r3, #0]
 8007d24:	6862      	ldr	r2, [r4, #4]
 8007d26:	2100      	movs	r1, #0
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7f8 fa79 	bl	8000220 <memchr>
 8007d2e:	b108      	cbz	r0, 8007d34 <_printf_i+0x1e4>
 8007d30:	1b80      	subs	r0, r0, r6
 8007d32:	6060      	str	r0, [r4, #4]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d3e:	e7aa      	b.n	8007c96 <_printf_i+0x146>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	4632      	mov	r2, r6
 8007d44:	4649      	mov	r1, r9
 8007d46:	4640      	mov	r0, r8
 8007d48:	47d0      	blx	sl
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0ad      	beq.n	8007caa <_printf_i+0x15a>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	079b      	lsls	r3, r3, #30
 8007d52:	d413      	bmi.n	8007d7c <_printf_i+0x22c>
 8007d54:	68e0      	ldr	r0, [r4, #12]
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	4298      	cmp	r0, r3
 8007d5a:	bfb8      	it	lt
 8007d5c:	4618      	movlt	r0, r3
 8007d5e:	e7a6      	b.n	8007cae <_printf_i+0x15e>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4632      	mov	r2, r6
 8007d64:	4649      	mov	r1, r9
 8007d66:	4640      	mov	r0, r8
 8007d68:	47d0      	blx	sl
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d09d      	beq.n	8007caa <_printf_i+0x15a>
 8007d6e:	3501      	adds	r5, #1
 8007d70:	68e3      	ldr	r3, [r4, #12]
 8007d72:	9903      	ldr	r1, [sp, #12]
 8007d74:	1a5b      	subs	r3, r3, r1
 8007d76:	42ab      	cmp	r3, r5
 8007d78:	dcf2      	bgt.n	8007d60 <_printf_i+0x210>
 8007d7a:	e7eb      	b.n	8007d54 <_printf_i+0x204>
 8007d7c:	2500      	movs	r5, #0
 8007d7e:	f104 0619 	add.w	r6, r4, #25
 8007d82:	e7f5      	b.n	8007d70 <_printf_i+0x220>
 8007d84:	0800ad5e 	.word	0x0800ad5e
 8007d88:	0800ad6f 	.word	0x0800ad6f

08007d8c <std>:
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	e9c0 3300 	strd	r3, r3, [r0]
 8007d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d9a:	6083      	str	r3, [r0, #8]
 8007d9c:	8181      	strh	r1, [r0, #12]
 8007d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007da0:	81c2      	strh	r2, [r0, #14]
 8007da2:	6183      	str	r3, [r0, #24]
 8007da4:	4619      	mov	r1, r3
 8007da6:	2208      	movs	r2, #8
 8007da8:	305c      	adds	r0, #92	@ 0x5c
 8007daa:	f000 fa2f 	bl	800820c <memset>
 8007dae:	4b0d      	ldr	r3, [pc, #52]	@ (8007de4 <std+0x58>)
 8007db0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007db2:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <std+0x5c>)
 8007db4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007db6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <std+0x60>)
 8007db8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dba:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <std+0x64>)
 8007dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <std+0x68>)
 8007dc0:	6224      	str	r4, [r4, #32]
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d006      	beq.n	8007dd4 <std+0x48>
 8007dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dca:	4294      	cmp	r4, r2
 8007dcc:	d002      	beq.n	8007dd4 <std+0x48>
 8007dce:	33d0      	adds	r3, #208	@ 0xd0
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	d105      	bne.n	8007de0 <std+0x54>
 8007dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	f000 ba92 	b.w	8008304 <__retarget_lock_init_recursive>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	0800805d 	.word	0x0800805d
 8007de8:	0800807f 	.word	0x0800807f
 8007dec:	080080b7 	.word	0x080080b7
 8007df0:	080080db 	.word	0x080080db
 8007df4:	20000800 	.word	0x20000800

08007df8 <stdio_exit_handler>:
 8007df8:	4a02      	ldr	r2, [pc, #8]	@ (8007e04 <stdio_exit_handler+0xc>)
 8007dfa:	4903      	ldr	r1, [pc, #12]	@ (8007e08 <stdio_exit_handler+0x10>)
 8007dfc:	4803      	ldr	r0, [pc, #12]	@ (8007e0c <stdio_exit_handler+0x14>)
 8007dfe:	f000 b869 	b.w	8007ed4 <_fwalk_sglue>
 8007e02:	bf00      	nop
 8007e04:	2000000c 	.word	0x2000000c
 8007e08:	08009ef1 	.word	0x08009ef1
 8007e0c:	2000001c 	.word	0x2000001c

08007e10 <cleanup_stdio>:
 8007e10:	6841      	ldr	r1, [r0, #4]
 8007e12:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <cleanup_stdio+0x34>)
 8007e14:	4299      	cmp	r1, r3
 8007e16:	b510      	push	{r4, lr}
 8007e18:	4604      	mov	r4, r0
 8007e1a:	d001      	beq.n	8007e20 <cleanup_stdio+0x10>
 8007e1c:	f002 f868 	bl	8009ef0 <_fflush_r>
 8007e20:	68a1      	ldr	r1, [r4, #8]
 8007e22:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <cleanup_stdio+0x38>)
 8007e24:	4299      	cmp	r1, r3
 8007e26:	d002      	beq.n	8007e2e <cleanup_stdio+0x1e>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f002 f861 	bl	8009ef0 <_fflush_r>
 8007e2e:	68e1      	ldr	r1, [r4, #12]
 8007e30:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <cleanup_stdio+0x3c>)
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d004      	beq.n	8007e40 <cleanup_stdio+0x30>
 8007e36:	4620      	mov	r0, r4
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f002 b858 	b.w	8009ef0 <_fflush_r>
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	bf00      	nop
 8007e44:	20000800 	.word	0x20000800
 8007e48:	20000868 	.word	0x20000868
 8007e4c:	200008d0 	.word	0x200008d0

08007e50 <global_stdio_init.part.0>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <global_stdio_init.part.0+0x30>)
 8007e54:	4c0b      	ldr	r4, [pc, #44]	@ (8007e84 <global_stdio_init.part.0+0x34>)
 8007e56:	4a0c      	ldr	r2, [pc, #48]	@ (8007e88 <global_stdio_init.part.0+0x38>)
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2104      	movs	r1, #4
 8007e60:	f7ff ff94 	bl	8007d8c <std>
 8007e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e68:	2201      	movs	r2, #1
 8007e6a:	2109      	movs	r1, #9
 8007e6c:	f7ff ff8e 	bl	8007d8c <std>
 8007e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e74:	2202      	movs	r2, #2
 8007e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7a:	2112      	movs	r1, #18
 8007e7c:	f7ff bf86 	b.w	8007d8c <std>
 8007e80:	20000938 	.word	0x20000938
 8007e84:	20000800 	.word	0x20000800
 8007e88:	08007df9 	.word	0x08007df9

08007e8c <__sfp_lock_acquire>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	@ (8007e94 <__sfp_lock_acquire+0x8>)
 8007e8e:	f000 ba3a 	b.w	8008306 <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	20000941 	.word	0x20000941

08007e98 <__sfp_lock_release>:
 8007e98:	4801      	ldr	r0, [pc, #4]	@ (8007ea0 <__sfp_lock_release+0x8>)
 8007e9a:	f000 ba35 	b.w	8008308 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20000941 	.word	0x20000941

08007ea4 <__sinit>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f7ff fff0 	bl	8007e8c <__sfp_lock_acquire>
 8007eac:	6a23      	ldr	r3, [r4, #32]
 8007eae:	b11b      	cbz	r3, 8007eb8 <__sinit+0x14>
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f7ff bff0 	b.w	8007e98 <__sfp_lock_release>
 8007eb8:	4b04      	ldr	r3, [pc, #16]	@ (8007ecc <__sinit+0x28>)
 8007eba:	6223      	str	r3, [r4, #32]
 8007ebc:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <__sinit+0x2c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1f5      	bne.n	8007eb0 <__sinit+0xc>
 8007ec4:	f7ff ffc4 	bl	8007e50 <global_stdio_init.part.0>
 8007ec8:	e7f2      	b.n	8007eb0 <__sinit+0xc>
 8007eca:	bf00      	nop
 8007ecc:	08007e11 	.word	0x08007e11
 8007ed0:	20000938 	.word	0x20000938

08007ed4 <_fwalk_sglue>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4607      	mov	r7, r0
 8007eda:	4688      	mov	r8, r1
 8007edc:	4614      	mov	r4, r2
 8007ede:	2600      	movs	r6, #0
 8007ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ee8:	d505      	bpl.n	8007ef6 <_fwalk_sglue+0x22>
 8007eea:	6824      	ldr	r4, [r4, #0]
 8007eec:	2c00      	cmp	r4, #0
 8007eee:	d1f7      	bne.n	8007ee0 <_fwalk_sglue+0xc>
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d907      	bls.n	8007f0c <_fwalk_sglue+0x38>
 8007efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f00:	3301      	adds	r3, #1
 8007f02:	d003      	beq.n	8007f0c <_fwalk_sglue+0x38>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4638      	mov	r0, r7
 8007f08:	47c0      	blx	r8
 8007f0a:	4306      	orrs	r6, r0
 8007f0c:	3568      	adds	r5, #104	@ 0x68
 8007f0e:	e7e9      	b.n	8007ee4 <_fwalk_sglue+0x10>

08007f10 <iprintf>:
 8007f10:	b40f      	push	{r0, r1, r2, r3}
 8007f12:	b507      	push	{r0, r1, r2, lr}
 8007f14:	4906      	ldr	r1, [pc, #24]	@ (8007f30 <iprintf+0x20>)
 8007f16:	ab04      	add	r3, sp, #16
 8007f18:	6808      	ldr	r0, [r1, #0]
 8007f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1e:	6881      	ldr	r1, [r0, #8]
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f001 fe49 	bl	8009bb8 <_vfiprintf_r>
 8007f26:	b003      	add	sp, #12
 8007f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f2c:	b004      	add	sp, #16
 8007f2e:	4770      	bx	lr
 8007f30:	20000018 	.word	0x20000018

08007f34 <_puts_r>:
 8007f34:	6a03      	ldr	r3, [r0, #32]
 8007f36:	b570      	push	{r4, r5, r6, lr}
 8007f38:	6884      	ldr	r4, [r0, #8]
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	460e      	mov	r6, r1
 8007f3e:	b90b      	cbnz	r3, 8007f44 <_puts_r+0x10>
 8007f40:	f7ff ffb0 	bl	8007ea4 <__sinit>
 8007f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f46:	07db      	lsls	r3, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_puts_r+0x22>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	0598      	lsls	r0, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_puts_r+0x22>
 8007f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f52:	f000 f9d8 	bl	8008306 <__retarget_lock_acquire_recursive>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	0719      	lsls	r1, r3, #28
 8007f5a:	d502      	bpl.n	8007f62 <_puts_r+0x2e>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d135      	bne.n	8007fce <_puts_r+0x9a>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f8fb 	bl	8008160 <__swsetup_r>
 8007f6a:	b380      	cbz	r0, 8007fce <_puts_r+0x9a>
 8007f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f72:	07da      	lsls	r2, r3, #31
 8007f74:	d405      	bmi.n	8007f82 <_puts_r+0x4e>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	059b      	lsls	r3, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_puts_r+0x4e>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f7e:	f000 f9c3 	bl	8008308 <__retarget_lock_release_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da04      	bge.n	8007f94 <_puts_r+0x60>
 8007f8a:	69a2      	ldr	r2, [r4, #24]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	dc17      	bgt.n	8007fc0 <_puts_r+0x8c>
 8007f90:	290a      	cmp	r1, #10
 8007f92:	d015      	beq.n	8007fc0 <_puts_r+0x8c>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	6022      	str	r2, [r4, #0]
 8007f9a:	7019      	strb	r1, [r3, #0]
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d1ed      	bne.n	8007f86 <_puts_r+0x52>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da11      	bge.n	8007fd2 <_puts_r+0x9e>
 8007fae:	4622      	mov	r2, r4
 8007fb0:	210a      	movs	r1, #10
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f000 f895 	bl	80080e2 <__swbuf_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0d7      	beq.n	8007f6c <_puts_r+0x38>
 8007fbc:	250a      	movs	r5, #10
 8007fbe:	e7d7      	b.n	8007f70 <_puts_r+0x3c>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f000 f88d 	bl	80080e2 <__swbuf_r>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d1e7      	bne.n	8007f9c <_puts_r+0x68>
 8007fcc:	e7ce      	b.n	8007f6c <_puts_r+0x38>
 8007fce:	3e01      	subs	r6, #1
 8007fd0:	e7e4      	b.n	8007f9c <_puts_r+0x68>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	6022      	str	r2, [r4, #0]
 8007fd8:	220a      	movs	r2, #10
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e7ee      	b.n	8007fbc <_puts_r+0x88>
	...

08007fe0 <puts>:
 8007fe0:	4b02      	ldr	r3, [pc, #8]	@ (8007fec <puts+0xc>)
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f7ff bfa5 	b.w	8007f34 <_puts_r>
 8007fea:	bf00      	nop
 8007fec:	20000018 	.word	0x20000018

08007ff0 <sniprintf>:
 8007ff0:	b40c      	push	{r2, r3}
 8007ff2:	b530      	push	{r4, r5, lr}
 8007ff4:	4b18      	ldr	r3, [pc, #96]	@ (8008058 <sniprintf+0x68>)
 8007ff6:	1e0c      	subs	r4, r1, #0
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	b09d      	sub	sp, #116	@ 0x74
 8007ffc:	da08      	bge.n	8008010 <sniprintf+0x20>
 8007ffe:	238b      	movs	r3, #139	@ 0x8b
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	b01d      	add	sp, #116	@ 0x74
 8008008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800800c:	b002      	add	sp, #8
 800800e:	4770      	bx	lr
 8008010:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800801e:	bf14      	ite	ne
 8008020:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008024:	4623      	moveq	r3, r4
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800802e:	9002      	str	r0, [sp, #8]
 8008030:	9006      	str	r0, [sp, #24]
 8008032:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008036:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008038:	ab21      	add	r3, sp, #132	@ 0x84
 800803a:	a902      	add	r1, sp, #8
 800803c:	4628      	mov	r0, r5
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	f001 fc94 	bl	800996c <_svfiprintf_r>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	bfbc      	itt	lt
 8008048:	238b      	movlt	r3, #139	@ 0x8b
 800804a:	602b      	strlt	r3, [r5, #0]
 800804c:	2c00      	cmp	r4, #0
 800804e:	d0da      	beq.n	8008006 <sniprintf+0x16>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e7d6      	b.n	8008006 <sniprintf+0x16>
 8008058:	20000018 	.word	0x20000018

0800805c <__sread>:
 800805c:	b510      	push	{r4, lr}
 800805e:	460c      	mov	r4, r1
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	f000 f900 	bl	8008268 <_read_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	bfab      	itete	ge
 800806c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800806e:	89a3      	ldrhlt	r3, [r4, #12]
 8008070:	181b      	addge	r3, r3, r0
 8008072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008076:	bfac      	ite	ge
 8008078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800807a:	81a3      	strhlt	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__swrite>:
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	461f      	mov	r7, r3
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	05db      	lsls	r3, r3, #23
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4616      	mov	r6, r2
 800808e:	d505      	bpl.n	800809c <__swrite+0x1e>
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	2302      	movs	r3, #2
 8008096:	2200      	movs	r2, #0
 8008098:	f000 f8d4 	bl	8008244 <_lseek_r>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f000 b8eb 	b.w	800828c <_write_r>

080080b6 <__sseek>:
 80080b6:	b510      	push	{r4, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080be:	f000 f8c1 	bl	8008244 <_lseek_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	bf15      	itete	ne
 80080c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080d2:	81a3      	strheq	r3, [r4, #12]
 80080d4:	bf18      	it	ne
 80080d6:	81a3      	strhne	r3, [r4, #12]
 80080d8:	bd10      	pop	{r4, pc}

080080da <__sclose>:
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 b8a1 	b.w	8008224 <_close_r>

080080e2 <__swbuf_r>:
 80080e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e4:	460e      	mov	r6, r1
 80080e6:	4614      	mov	r4, r2
 80080e8:	4605      	mov	r5, r0
 80080ea:	b118      	cbz	r0, 80080f4 <__swbuf_r+0x12>
 80080ec:	6a03      	ldr	r3, [r0, #32]
 80080ee:	b90b      	cbnz	r3, 80080f4 <__swbuf_r+0x12>
 80080f0:	f7ff fed8 	bl	8007ea4 <__sinit>
 80080f4:	69a3      	ldr	r3, [r4, #24]
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	071a      	lsls	r2, r3, #28
 80080fc:	d501      	bpl.n	8008102 <__swbuf_r+0x20>
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b943      	cbnz	r3, 8008114 <__swbuf_r+0x32>
 8008102:	4621      	mov	r1, r4
 8008104:	4628      	mov	r0, r5
 8008106:	f000 f82b 	bl	8008160 <__swsetup_r>
 800810a:	b118      	cbz	r0, 8008114 <__swbuf_r+0x32>
 800810c:	f04f 37ff 	mov.w	r7, #4294967295
 8008110:	4638      	mov	r0, r7
 8008112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	6922      	ldr	r2, [r4, #16]
 8008118:	1a98      	subs	r0, r3, r2
 800811a:	6963      	ldr	r3, [r4, #20]
 800811c:	b2f6      	uxtb	r6, r6
 800811e:	4283      	cmp	r3, r0
 8008120:	4637      	mov	r7, r6
 8008122:	dc05      	bgt.n	8008130 <__swbuf_r+0x4e>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f001 fee2 	bl	8009ef0 <_fflush_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	d1ed      	bne.n	800810c <__swbuf_r+0x2a>
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	3b01      	subs	r3, #1
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701e      	strb	r6, [r3, #0]
 800813e:	6962      	ldr	r2, [r4, #20]
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	429a      	cmp	r2, r3
 8008144:	d004      	beq.n	8008150 <__swbuf_r+0x6e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	07db      	lsls	r3, r3, #31
 800814a:	d5e1      	bpl.n	8008110 <__swbuf_r+0x2e>
 800814c:	2e0a      	cmp	r6, #10
 800814e:	d1df      	bne.n	8008110 <__swbuf_r+0x2e>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f001 fecc 	bl	8009ef0 <_fflush_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0d9      	beq.n	8008110 <__swbuf_r+0x2e>
 800815c:	e7d6      	b.n	800810c <__swbuf_r+0x2a>
	...

08008160 <__swsetup_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4b29      	ldr	r3, [pc, #164]	@ (8008208 <__swsetup_r+0xa8>)
 8008164:	4605      	mov	r5, r0
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	460c      	mov	r4, r1
 800816a:	b118      	cbz	r0, 8008174 <__swsetup_r+0x14>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <__swsetup_r+0x14>
 8008170:	f7ff fe98 	bl	8007ea4 <__sinit>
 8008174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	d422      	bmi.n	80081c2 <__swsetup_r+0x62>
 800817c:	06da      	lsls	r2, r3, #27
 800817e:	d407      	bmi.n	8008190 <__swsetup_r+0x30>
 8008180:	2209      	movs	r2, #9
 8008182:	602a      	str	r2, [r5, #0]
 8008184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	e033      	b.n	80081f8 <__swsetup_r+0x98>
 8008190:	0758      	lsls	r0, r3, #29
 8008192:	d512      	bpl.n	80081ba <__swsetup_r+0x5a>
 8008194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008196:	b141      	cbz	r1, 80081aa <__swsetup_r+0x4a>
 8008198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800819c:	4299      	cmp	r1, r3
 800819e:	d002      	beq.n	80081a6 <__swsetup_r+0x46>
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 ff0d 	bl	8008fc0 <_free_r>
 80081a6:	2300      	movs	r3, #0
 80081a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	2300      	movs	r3, #0
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f043 0308 	orr.w	r3, r3, #8
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	b94b      	cbnz	r3, 80081da <__swsetup_r+0x7a>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d0:	d003      	beq.n	80081da <__swsetup_r+0x7a>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	f001 fed9 	bl	8009f8c <__smakebuf_r>
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	f013 0201 	ands.w	r2, r3, #1
 80081e2:	d00a      	beq.n	80081fa <__swsetup_r+0x9a>
 80081e4:	2200      	movs	r2, #0
 80081e6:	60a2      	str	r2, [r4, #8]
 80081e8:	6962      	ldr	r2, [r4, #20]
 80081ea:	4252      	negs	r2, r2
 80081ec:	61a2      	str	r2, [r4, #24]
 80081ee:	6922      	ldr	r2, [r4, #16]
 80081f0:	b942      	cbnz	r2, 8008204 <__swsetup_r+0xa4>
 80081f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081f6:	d1c5      	bne.n	8008184 <__swsetup_r+0x24>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	0799      	lsls	r1, r3, #30
 80081fc:	bf58      	it	pl
 80081fe:	6962      	ldrpl	r2, [r4, #20]
 8008200:	60a2      	str	r2, [r4, #8]
 8008202:	e7f4      	b.n	80081ee <__swsetup_r+0x8e>
 8008204:	2000      	movs	r0, #0
 8008206:	e7f7      	b.n	80081f8 <__swsetup_r+0x98>
 8008208:	20000018 	.word	0x20000018

0800820c <memset>:
 800820c:	4402      	add	r2, r0
 800820e:	4603      	mov	r3, r0
 8008210:	4293      	cmp	r3, r2
 8008212:	d100      	bne.n	8008216 <memset+0xa>
 8008214:	4770      	bx	lr
 8008216:	f803 1b01 	strb.w	r1, [r3], #1
 800821a:	e7f9      	b.n	8008210 <memset+0x4>

0800821c <_localeconv_r>:
 800821c:	4800      	ldr	r0, [pc, #0]	@ (8008220 <_localeconv_r+0x4>)
 800821e:	4770      	bx	lr
 8008220:	20000158 	.word	0x20000158

08008224 <_close_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d06      	ldr	r5, [pc, #24]	@ (8008240 <_close_r+0x1c>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	f7f9 ff8a 	bl	8002148 <_close>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_close_r+0x1a>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_close_r+0x1a>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	2000093c 	.word	0x2000093c

08008244 <_lseek_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_lseek_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7f9 ff9f 	bl	8002196 <_lseek>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_lseek_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_lseek_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	2000093c 	.word	0x2000093c

08008268 <_read_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d07      	ldr	r5, [pc, #28]	@ (8008288 <_read_r+0x20>)
 800826c:	4604      	mov	r4, r0
 800826e:	4608      	mov	r0, r1
 8008270:	4611      	mov	r1, r2
 8008272:	2200      	movs	r2, #0
 8008274:	602a      	str	r2, [r5, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f7f9 ff2d 	bl	80020d6 <_read>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_read_r+0x1e>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_read_r+0x1e>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	2000093c 	.word	0x2000093c

0800828c <_write_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d07      	ldr	r5, [pc, #28]	@ (80082ac <_write_r+0x20>)
 8008290:	4604      	mov	r4, r0
 8008292:	4608      	mov	r0, r1
 8008294:	4611      	mov	r1, r2
 8008296:	2200      	movs	r2, #0
 8008298:	602a      	str	r2, [r5, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	f7f9 ff38 	bl	8002110 <_write>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_write_r+0x1e>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_write_r+0x1e>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	2000093c 	.word	0x2000093c

080082b0 <__errno>:
 80082b0:	4b01      	ldr	r3, [pc, #4]	@ (80082b8 <__errno+0x8>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000018 	.word	0x20000018

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4d0d      	ldr	r5, [pc, #52]	@ (80082f4 <__libc_init_array+0x38>)
 80082c0:	4c0d      	ldr	r4, [pc, #52]	@ (80082f8 <__libc_init_array+0x3c>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	2600      	movs	r6, #0
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	4d0b      	ldr	r5, [pc, #44]	@ (80082fc <__libc_init_array+0x40>)
 80082ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008300 <__libc_init_array+0x44>)
 80082d0:	f001 ffd8 	bl	800a284 <_init>
 80082d4:	1b64      	subs	r4, r4, r5
 80082d6:	10a4      	asrs	r4, r4, #2
 80082d8:	2600      	movs	r6, #0
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	0800b0cc 	.word	0x0800b0cc
 80082f8:	0800b0cc 	.word	0x0800b0cc
 80082fc:	0800b0cc 	.word	0x0800b0cc
 8008300:	0800b0d0 	.word	0x0800b0d0

08008304 <__retarget_lock_init_recursive>:
 8008304:	4770      	bx	lr

08008306 <__retarget_lock_acquire_recursive>:
 8008306:	4770      	bx	lr

08008308 <__retarget_lock_release_recursive>:
 8008308:	4770      	bx	lr

0800830a <quorem>:
 800830a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830e:	6903      	ldr	r3, [r0, #16]
 8008310:	690c      	ldr	r4, [r1, #16]
 8008312:	42a3      	cmp	r3, r4
 8008314:	4607      	mov	r7, r0
 8008316:	db7e      	blt.n	8008416 <quorem+0x10c>
 8008318:	3c01      	subs	r4, #1
 800831a:	f101 0814 	add.w	r8, r1, #20
 800831e:	00a3      	lsls	r3, r4, #2
 8008320:	f100 0514 	add.w	r5, r0, #20
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008334:	3301      	adds	r3, #1
 8008336:	429a      	cmp	r2, r3
 8008338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800833c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008340:	d32e      	bcc.n	80083a0 <quorem+0x96>
 8008342:	f04f 0a00 	mov.w	sl, #0
 8008346:	46c4      	mov	ip, r8
 8008348:	46ae      	mov	lr, r5
 800834a:	46d3      	mov	fp, sl
 800834c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008350:	b298      	uxth	r0, r3
 8008352:	fb06 a000 	mla	r0, r6, r0, sl
 8008356:	0c02      	lsrs	r2, r0, #16
 8008358:	0c1b      	lsrs	r3, r3, #16
 800835a:	fb06 2303 	mla	r3, r6, r3, r2
 800835e:	f8de 2000 	ldr.w	r2, [lr]
 8008362:	b280      	uxth	r0, r0
 8008364:	b292      	uxth	r2, r2
 8008366:	1a12      	subs	r2, r2, r0
 8008368:	445a      	add	r2, fp
 800836a:	f8de 0000 	ldr.w	r0, [lr]
 800836e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008378:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800837c:	b292      	uxth	r2, r2
 800837e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008382:	45e1      	cmp	r9, ip
 8008384:	f84e 2b04 	str.w	r2, [lr], #4
 8008388:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800838c:	d2de      	bcs.n	800834c <quorem+0x42>
 800838e:	9b00      	ldr	r3, [sp, #0]
 8008390:	58eb      	ldr	r3, [r5, r3]
 8008392:	b92b      	cbnz	r3, 80083a0 <quorem+0x96>
 8008394:	9b01      	ldr	r3, [sp, #4]
 8008396:	3b04      	subs	r3, #4
 8008398:	429d      	cmp	r5, r3
 800839a:	461a      	mov	r2, r3
 800839c:	d32f      	bcc.n	80083fe <quorem+0xf4>
 800839e:	613c      	str	r4, [r7, #16]
 80083a0:	4638      	mov	r0, r7
 80083a2:	f001 f97f 	bl	80096a4 <__mcmp>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	db25      	blt.n	80083f6 <quorem+0xec>
 80083aa:	4629      	mov	r1, r5
 80083ac:	2000      	movs	r0, #0
 80083ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80083b2:	f8d1 c000 	ldr.w	ip, [r1]
 80083b6:	fa1f fe82 	uxth.w	lr, r2
 80083ba:	fa1f f38c 	uxth.w	r3, ip
 80083be:	eba3 030e 	sub.w	r3, r3, lr
 80083c2:	4403      	add	r3, r0
 80083c4:	0c12      	lsrs	r2, r2, #16
 80083c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083d4:	45c1      	cmp	r9, r8
 80083d6:	f841 3b04 	str.w	r3, [r1], #4
 80083da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083de:	d2e6      	bcs.n	80083ae <quorem+0xa4>
 80083e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083e8:	b922      	cbnz	r2, 80083f4 <quorem+0xea>
 80083ea:	3b04      	subs	r3, #4
 80083ec:	429d      	cmp	r5, r3
 80083ee:	461a      	mov	r2, r3
 80083f0:	d30b      	bcc.n	800840a <quorem+0x100>
 80083f2:	613c      	str	r4, [r7, #16]
 80083f4:	3601      	adds	r6, #1
 80083f6:	4630      	mov	r0, r6
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	3b04      	subs	r3, #4
 8008402:	2a00      	cmp	r2, #0
 8008404:	d1cb      	bne.n	800839e <quorem+0x94>
 8008406:	3c01      	subs	r4, #1
 8008408:	e7c6      	b.n	8008398 <quorem+0x8e>
 800840a:	6812      	ldr	r2, [r2, #0]
 800840c:	3b04      	subs	r3, #4
 800840e:	2a00      	cmp	r2, #0
 8008410:	d1ef      	bne.n	80083f2 <quorem+0xe8>
 8008412:	3c01      	subs	r4, #1
 8008414:	e7ea      	b.n	80083ec <quorem+0xe2>
 8008416:	2000      	movs	r0, #0
 8008418:	e7ee      	b.n	80083f8 <quorem+0xee>
 800841a:	0000      	movs	r0, r0
 800841c:	0000      	movs	r0, r0
	...

08008420 <_dtoa_r>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	69c7      	ldr	r7, [r0, #28]
 8008426:	b097      	sub	sp, #92	@ 0x5c
 8008428:	ed8d 0b04 	vstr	d0, [sp, #16]
 800842c:	ec55 4b10 	vmov	r4, r5, d0
 8008430:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008432:	9107      	str	r1, [sp, #28]
 8008434:	4681      	mov	r9, r0
 8008436:	920c      	str	r2, [sp, #48]	@ 0x30
 8008438:	9311      	str	r3, [sp, #68]	@ 0x44
 800843a:	b97f      	cbnz	r7, 800845c <_dtoa_r+0x3c>
 800843c:	2010      	movs	r0, #16
 800843e:	f000 fe09 	bl	8009054 <malloc>
 8008442:	4602      	mov	r2, r0
 8008444:	f8c9 001c 	str.w	r0, [r9, #28]
 8008448:	b920      	cbnz	r0, 8008454 <_dtoa_r+0x34>
 800844a:	4ba9      	ldr	r3, [pc, #676]	@ (80086f0 <_dtoa_r+0x2d0>)
 800844c:	21ef      	movs	r1, #239	@ 0xef
 800844e:	48a9      	ldr	r0, [pc, #676]	@ (80086f4 <_dtoa_r+0x2d4>)
 8008450:	f001 fe32 	bl	800a0b8 <__assert_func>
 8008454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008458:	6007      	str	r7, [r0, #0]
 800845a:	60c7      	str	r7, [r0, #12]
 800845c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	b159      	cbz	r1, 800847c <_dtoa_r+0x5c>
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	604a      	str	r2, [r1, #4]
 8008468:	2301      	movs	r3, #1
 800846a:	4093      	lsls	r3, r2
 800846c:	608b      	str	r3, [r1, #8]
 800846e:	4648      	mov	r0, r9
 8008470:	f000 fee6 	bl	8009240 <_Bfree>
 8008474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	1e2b      	subs	r3, r5, #0
 800847e:	bfb9      	ittee	lt
 8008480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008484:	9305      	strlt	r3, [sp, #20]
 8008486:	2300      	movge	r3, #0
 8008488:	6033      	strge	r3, [r6, #0]
 800848a:	9f05      	ldr	r7, [sp, #20]
 800848c:	4b9a      	ldr	r3, [pc, #616]	@ (80086f8 <_dtoa_r+0x2d8>)
 800848e:	bfbc      	itt	lt
 8008490:	2201      	movlt	r2, #1
 8008492:	6032      	strlt	r2, [r6, #0]
 8008494:	43bb      	bics	r3, r7
 8008496:	d112      	bne.n	80084be <_dtoa_r+0x9e>
 8008498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800849a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084a4:	4323      	orrs	r3, r4
 80084a6:	f000 855a 	beq.w	8008f5e <_dtoa_r+0xb3e>
 80084aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800870c <_dtoa_r+0x2ec>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 855c 	beq.w	8008f6e <_dtoa_r+0xb4e>
 80084b6:	f10a 0303 	add.w	r3, sl, #3
 80084ba:	f000 bd56 	b.w	8008f6a <_dtoa_r+0xb4a>
 80084be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80084c2:	2200      	movs	r2, #0
 80084c4:	ec51 0b17 	vmov	r0, r1, d7
 80084c8:	2300      	movs	r3, #0
 80084ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80084ce:	f7f8 fb23 	bl	8000b18 <__aeabi_dcmpeq>
 80084d2:	4680      	mov	r8, r0
 80084d4:	b158      	cbz	r0, 80084ee <_dtoa_r+0xce>
 80084d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80084d8:	2301      	movs	r3, #1
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084de:	b113      	cbz	r3, 80084e6 <_dtoa_r+0xc6>
 80084e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80084e2:	4b86      	ldr	r3, [pc, #536]	@ (80086fc <_dtoa_r+0x2dc>)
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008710 <_dtoa_r+0x2f0>
 80084ea:	f000 bd40 	b.w	8008f6e <_dtoa_r+0xb4e>
 80084ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80084f2:	aa14      	add	r2, sp, #80	@ 0x50
 80084f4:	a915      	add	r1, sp, #84	@ 0x54
 80084f6:	4648      	mov	r0, r9
 80084f8:	f001 f984 	bl	8009804 <__d2b>
 80084fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008500:	9002      	str	r0, [sp, #8]
 8008502:	2e00      	cmp	r6, #0
 8008504:	d078      	beq.n	80085f8 <_dtoa_r+0x1d8>
 8008506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008508:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800850c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800851c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008520:	4619      	mov	r1, r3
 8008522:	2200      	movs	r2, #0
 8008524:	4b76      	ldr	r3, [pc, #472]	@ (8008700 <_dtoa_r+0x2e0>)
 8008526:	f7f7 fed7 	bl	80002d8 <__aeabi_dsub>
 800852a:	a36b      	add	r3, pc, #428	@ (adr r3, 80086d8 <_dtoa_r+0x2b8>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f7f8 f88a 	bl	8000648 <__aeabi_dmul>
 8008534:	a36a      	add	r3, pc, #424	@ (adr r3, 80086e0 <_dtoa_r+0x2c0>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	f7f7 fecf 	bl	80002dc <__adddf3>
 800853e:	4604      	mov	r4, r0
 8008540:	4630      	mov	r0, r6
 8008542:	460d      	mov	r5, r1
 8008544:	f7f8 f816 	bl	8000574 <__aeabi_i2d>
 8008548:	a367      	add	r3, pc, #412	@ (adr r3, 80086e8 <_dtoa_r+0x2c8>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f8 f87b 	bl	8000648 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 febf 	bl	80002dc <__adddf3>
 800855e:	4604      	mov	r4, r0
 8008560:	460d      	mov	r5, r1
 8008562:	f7f8 fb21 	bl	8000ba8 <__aeabi_d2iz>
 8008566:	2200      	movs	r2, #0
 8008568:	4607      	mov	r7, r0
 800856a:	2300      	movs	r3, #0
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f8 fadc 	bl	8000b2c <__aeabi_dcmplt>
 8008574:	b140      	cbz	r0, 8008588 <_dtoa_r+0x168>
 8008576:	4638      	mov	r0, r7
 8008578:	f7f7 fffc 	bl	8000574 <__aeabi_i2d>
 800857c:	4622      	mov	r2, r4
 800857e:	462b      	mov	r3, r5
 8008580:	f7f8 faca 	bl	8000b18 <__aeabi_dcmpeq>
 8008584:	b900      	cbnz	r0, 8008588 <_dtoa_r+0x168>
 8008586:	3f01      	subs	r7, #1
 8008588:	2f16      	cmp	r7, #22
 800858a:	d852      	bhi.n	8008632 <_dtoa_r+0x212>
 800858c:	4b5d      	ldr	r3, [pc, #372]	@ (8008704 <_dtoa_r+0x2e4>)
 800858e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800859a:	f7f8 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d049      	beq.n	8008636 <_dtoa_r+0x216>
 80085a2:	3f01      	subs	r7, #1
 80085a4:	2300      	movs	r3, #0
 80085a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80085a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80085aa:	1b9b      	subs	r3, r3, r6
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	bf45      	ittet	mi
 80085b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80085b4:	9300      	strmi	r3, [sp, #0]
 80085b6:	2300      	movpl	r3, #0
 80085b8:	2300      	movmi	r3, #0
 80085ba:	9206      	str	r2, [sp, #24]
 80085bc:	bf54      	ite	pl
 80085be:	9300      	strpl	r3, [sp, #0]
 80085c0:	9306      	strmi	r3, [sp, #24]
 80085c2:	2f00      	cmp	r7, #0
 80085c4:	db39      	blt.n	800863a <_dtoa_r+0x21a>
 80085c6:	9b06      	ldr	r3, [sp, #24]
 80085c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80085ca:	443b      	add	r3, r7
 80085cc:	9306      	str	r3, [sp, #24]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d863      	bhi.n	80086a0 <_dtoa_r+0x280>
 80085d8:	2b05      	cmp	r3, #5
 80085da:	bfc4      	itt	gt
 80085dc:	3b04      	subgt	r3, #4
 80085de:	9307      	strgt	r3, [sp, #28]
 80085e0:	9b07      	ldr	r3, [sp, #28]
 80085e2:	f1a3 0302 	sub.w	r3, r3, #2
 80085e6:	bfcc      	ite	gt
 80085e8:	2400      	movgt	r4, #0
 80085ea:	2401      	movle	r4, #1
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d863      	bhi.n	80086b8 <_dtoa_r+0x298>
 80085f0:	e8df f003 	tbb	[pc, r3]
 80085f4:	2b375452 	.word	0x2b375452
 80085f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80085fc:	441e      	add	r6, r3
 80085fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008602:	2b20      	cmp	r3, #32
 8008604:	bfc1      	itttt	gt
 8008606:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800860a:	409f      	lslgt	r7, r3
 800860c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008610:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008614:	bfd6      	itet	le
 8008616:	f1c3 0320 	rsble	r3, r3, #32
 800861a:	ea47 0003 	orrgt.w	r0, r7, r3
 800861e:	fa04 f003 	lslle.w	r0, r4, r3
 8008622:	f7f7 ff97 	bl	8000554 <__aeabi_ui2d>
 8008626:	2201      	movs	r2, #1
 8008628:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800862c:	3e01      	subs	r6, #1
 800862e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008630:	e776      	b.n	8008520 <_dtoa_r+0x100>
 8008632:	2301      	movs	r3, #1
 8008634:	e7b7      	b.n	80085a6 <_dtoa_r+0x186>
 8008636:	9010      	str	r0, [sp, #64]	@ 0x40
 8008638:	e7b6      	b.n	80085a8 <_dtoa_r+0x188>
 800863a:	9b00      	ldr	r3, [sp, #0]
 800863c:	1bdb      	subs	r3, r3, r7
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	427b      	negs	r3, r7
 8008642:	9308      	str	r3, [sp, #32]
 8008644:	2300      	movs	r3, #0
 8008646:	930d      	str	r3, [sp, #52]	@ 0x34
 8008648:	e7c3      	b.n	80085d2 <_dtoa_r+0x1b2>
 800864a:	2301      	movs	r3, #1
 800864c:	9309      	str	r3, [sp, #36]	@ 0x24
 800864e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008650:	eb07 0b03 	add.w	fp, r7, r3
 8008654:	f10b 0301 	add.w	r3, fp, #1
 8008658:	2b01      	cmp	r3, #1
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	bfb8      	it	lt
 800865e:	2301      	movlt	r3, #1
 8008660:	e006      	b.n	8008670 <_dtoa_r+0x250>
 8008662:	2301      	movs	r3, #1
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd28      	ble.n	80086be <_dtoa_r+0x29e>
 800866c:	469b      	mov	fp, r3
 800866e:	9303      	str	r3, [sp, #12]
 8008670:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008674:	2100      	movs	r1, #0
 8008676:	2204      	movs	r2, #4
 8008678:	f102 0514 	add.w	r5, r2, #20
 800867c:	429d      	cmp	r5, r3
 800867e:	d926      	bls.n	80086ce <_dtoa_r+0x2ae>
 8008680:	6041      	str	r1, [r0, #4]
 8008682:	4648      	mov	r0, r9
 8008684:	f000 fd9c 	bl	80091c0 <_Balloc>
 8008688:	4682      	mov	sl, r0
 800868a:	2800      	cmp	r0, #0
 800868c:	d142      	bne.n	8008714 <_dtoa_r+0x2f4>
 800868e:	4b1e      	ldr	r3, [pc, #120]	@ (8008708 <_dtoa_r+0x2e8>)
 8008690:	4602      	mov	r2, r0
 8008692:	f240 11af 	movw	r1, #431	@ 0x1af
 8008696:	e6da      	b.n	800844e <_dtoa_r+0x2e>
 8008698:	2300      	movs	r3, #0
 800869a:	e7e3      	b.n	8008664 <_dtoa_r+0x244>
 800869c:	2300      	movs	r3, #0
 800869e:	e7d5      	b.n	800864c <_dtoa_r+0x22c>
 80086a0:	2401      	movs	r4, #1
 80086a2:	2300      	movs	r3, #0
 80086a4:	9307      	str	r3, [sp, #28]
 80086a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80086a8:	f04f 3bff 	mov.w	fp, #4294967295
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80086b2:	2312      	movs	r3, #18
 80086b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80086b6:	e7db      	b.n	8008670 <_dtoa_r+0x250>
 80086b8:	2301      	movs	r3, #1
 80086ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80086bc:	e7f4      	b.n	80086a8 <_dtoa_r+0x288>
 80086be:	f04f 0b01 	mov.w	fp, #1
 80086c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80086c6:	465b      	mov	r3, fp
 80086c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80086cc:	e7d0      	b.n	8008670 <_dtoa_r+0x250>
 80086ce:	3101      	adds	r1, #1
 80086d0:	0052      	lsls	r2, r2, #1
 80086d2:	e7d1      	b.n	8008678 <_dtoa_r+0x258>
 80086d4:	f3af 8000 	nop.w
 80086d8:	636f4361 	.word	0x636f4361
 80086dc:	3fd287a7 	.word	0x3fd287a7
 80086e0:	8b60c8b3 	.word	0x8b60c8b3
 80086e4:	3fc68a28 	.word	0x3fc68a28
 80086e8:	509f79fb 	.word	0x509f79fb
 80086ec:	3fd34413 	.word	0x3fd34413
 80086f0:	0800ad8d 	.word	0x0800ad8d
 80086f4:	0800ada4 	.word	0x0800ada4
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	0800ad5d 	.word	0x0800ad5d
 8008700:	3ff80000 	.word	0x3ff80000
 8008704:	0800aef8 	.word	0x0800aef8
 8008708:	0800adfc 	.word	0x0800adfc
 800870c:	0800ad89 	.word	0x0800ad89
 8008710:	0800ad5c 	.word	0x0800ad5c
 8008714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008718:	6018      	str	r0, [r3, #0]
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	2b0e      	cmp	r3, #14
 800871e:	f200 80a1 	bhi.w	8008864 <_dtoa_r+0x444>
 8008722:	2c00      	cmp	r4, #0
 8008724:	f000 809e 	beq.w	8008864 <_dtoa_r+0x444>
 8008728:	2f00      	cmp	r7, #0
 800872a:	dd33      	ble.n	8008794 <_dtoa_r+0x374>
 800872c:	4b9c      	ldr	r3, [pc, #624]	@ (80089a0 <_dtoa_r+0x580>)
 800872e:	f007 020f 	and.w	r2, r7, #15
 8008732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008736:	ed93 7b00 	vldr	d7, [r3]
 800873a:	05f8      	lsls	r0, r7, #23
 800873c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008744:	d516      	bpl.n	8008774 <_dtoa_r+0x354>
 8008746:	4b97      	ldr	r3, [pc, #604]	@ (80089a4 <_dtoa_r+0x584>)
 8008748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800874c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008750:	f7f8 f8a4 	bl	800089c <__aeabi_ddiv>
 8008754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008758:	f004 040f 	and.w	r4, r4, #15
 800875c:	2603      	movs	r6, #3
 800875e:	4d91      	ldr	r5, [pc, #580]	@ (80089a4 <_dtoa_r+0x584>)
 8008760:	b954      	cbnz	r4, 8008778 <_dtoa_r+0x358>
 8008762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800876a:	f7f8 f897 	bl	800089c <__aeabi_ddiv>
 800876e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008772:	e028      	b.n	80087c6 <_dtoa_r+0x3a6>
 8008774:	2602      	movs	r6, #2
 8008776:	e7f2      	b.n	800875e <_dtoa_r+0x33e>
 8008778:	07e1      	lsls	r1, r4, #31
 800877a:	d508      	bpl.n	800878e <_dtoa_r+0x36e>
 800877c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008784:	f7f7 ff60 	bl	8000648 <__aeabi_dmul>
 8008788:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800878c:	3601      	adds	r6, #1
 800878e:	1064      	asrs	r4, r4, #1
 8008790:	3508      	adds	r5, #8
 8008792:	e7e5      	b.n	8008760 <_dtoa_r+0x340>
 8008794:	f000 80af 	beq.w	80088f6 <_dtoa_r+0x4d6>
 8008798:	427c      	negs	r4, r7
 800879a:	4b81      	ldr	r3, [pc, #516]	@ (80089a0 <_dtoa_r+0x580>)
 800879c:	4d81      	ldr	r5, [pc, #516]	@ (80089a4 <_dtoa_r+0x584>)
 800879e:	f004 020f 	and.w	r2, r4, #15
 80087a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087ae:	f7f7 ff4b 	bl	8000648 <__aeabi_dmul>
 80087b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b6:	1124      	asrs	r4, r4, #4
 80087b8:	2300      	movs	r3, #0
 80087ba:	2602      	movs	r6, #2
 80087bc:	2c00      	cmp	r4, #0
 80087be:	f040 808f 	bne.w	80088e0 <_dtoa_r+0x4c0>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1d3      	bne.n	800876e <_dtoa_r+0x34e>
 80087c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8094 	beq.w	80088fa <_dtoa_r+0x4da>
 80087d2:	4b75      	ldr	r3, [pc, #468]	@ (80089a8 <_dtoa_r+0x588>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f8 f9a7 	bl	8000b2c <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f000 808b 	beq.w	80088fa <_dtoa_r+0x4da>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 8087 	beq.w	80088fa <_dtoa_r+0x4da>
 80087ec:	f1bb 0f00 	cmp.w	fp, #0
 80087f0:	dd34      	ble.n	800885c <_dtoa_r+0x43c>
 80087f2:	4620      	mov	r0, r4
 80087f4:	4b6d      	ldr	r3, [pc, #436]	@ (80089ac <_dtoa_r+0x58c>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f7 ff25 	bl	8000648 <__aeabi_dmul>
 80087fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008802:	f107 38ff 	add.w	r8, r7, #4294967295
 8008806:	3601      	adds	r6, #1
 8008808:	465c      	mov	r4, fp
 800880a:	4630      	mov	r0, r6
 800880c:	f7f7 feb2 	bl	8000574 <__aeabi_i2d>
 8008810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008814:	f7f7 ff18 	bl	8000648 <__aeabi_dmul>
 8008818:	4b65      	ldr	r3, [pc, #404]	@ (80089b0 <_dtoa_r+0x590>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f7 fd5e 	bl	80002dc <__adddf3>
 8008820:	4605      	mov	r5, r0
 8008822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008826:	2c00      	cmp	r4, #0
 8008828:	d16a      	bne.n	8008900 <_dtoa_r+0x4e0>
 800882a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882e:	4b61      	ldr	r3, [pc, #388]	@ (80089b4 <_dtoa_r+0x594>)
 8008830:	2200      	movs	r2, #0
 8008832:	f7f7 fd51 	bl	80002d8 <__aeabi_dsub>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800883e:	462a      	mov	r2, r5
 8008840:	4633      	mov	r3, r6
 8008842:	f7f8 f991 	bl	8000b68 <__aeabi_dcmpgt>
 8008846:	2800      	cmp	r0, #0
 8008848:	f040 8298 	bne.w	8008d7c <_dtoa_r+0x95c>
 800884c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008850:	462a      	mov	r2, r5
 8008852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008856:	f7f8 f969 	bl	8000b2c <__aeabi_dcmplt>
 800885a:	bb38      	cbnz	r0, 80088ac <_dtoa_r+0x48c>
 800885c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008866:	2b00      	cmp	r3, #0
 8008868:	f2c0 8157 	blt.w	8008b1a <_dtoa_r+0x6fa>
 800886c:	2f0e      	cmp	r7, #14
 800886e:	f300 8154 	bgt.w	8008b1a <_dtoa_r+0x6fa>
 8008872:	4b4b      	ldr	r3, [pc, #300]	@ (80089a0 <_dtoa_r+0x580>)
 8008874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008878:	ed93 7b00 	vldr	d7, [r3]
 800887c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800887e:	2b00      	cmp	r3, #0
 8008880:	ed8d 7b00 	vstr	d7, [sp]
 8008884:	f280 80e5 	bge.w	8008a52 <_dtoa_r+0x632>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f300 80e1 	bgt.w	8008a52 <_dtoa_r+0x632>
 8008890:	d10c      	bne.n	80088ac <_dtoa_r+0x48c>
 8008892:	4b48      	ldr	r3, [pc, #288]	@ (80089b4 <_dtoa_r+0x594>)
 8008894:	2200      	movs	r2, #0
 8008896:	ec51 0b17 	vmov	r0, r1, d7
 800889a:	f7f7 fed5 	bl	8000648 <__aeabi_dmul>
 800889e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a2:	f7f8 f957 	bl	8000b54 <__aeabi_dcmpge>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f000 8266 	beq.w	8008d78 <_dtoa_r+0x958>
 80088ac:	2400      	movs	r4, #0
 80088ae:	4625      	mov	r5, r4
 80088b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088b2:	4656      	mov	r6, sl
 80088b4:	ea6f 0803 	mvn.w	r8, r3
 80088b8:	2700      	movs	r7, #0
 80088ba:	4621      	mov	r1, r4
 80088bc:	4648      	mov	r0, r9
 80088be:	f000 fcbf 	bl	8009240 <_Bfree>
 80088c2:	2d00      	cmp	r5, #0
 80088c4:	f000 80bd 	beq.w	8008a42 <_dtoa_r+0x622>
 80088c8:	b12f      	cbz	r7, 80088d6 <_dtoa_r+0x4b6>
 80088ca:	42af      	cmp	r7, r5
 80088cc:	d003      	beq.n	80088d6 <_dtoa_r+0x4b6>
 80088ce:	4639      	mov	r1, r7
 80088d0:	4648      	mov	r0, r9
 80088d2:	f000 fcb5 	bl	8009240 <_Bfree>
 80088d6:	4629      	mov	r1, r5
 80088d8:	4648      	mov	r0, r9
 80088da:	f000 fcb1 	bl	8009240 <_Bfree>
 80088de:	e0b0      	b.n	8008a42 <_dtoa_r+0x622>
 80088e0:	07e2      	lsls	r2, r4, #31
 80088e2:	d505      	bpl.n	80088f0 <_dtoa_r+0x4d0>
 80088e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088e8:	f7f7 feae 	bl	8000648 <__aeabi_dmul>
 80088ec:	3601      	adds	r6, #1
 80088ee:	2301      	movs	r3, #1
 80088f0:	1064      	asrs	r4, r4, #1
 80088f2:	3508      	adds	r5, #8
 80088f4:	e762      	b.n	80087bc <_dtoa_r+0x39c>
 80088f6:	2602      	movs	r6, #2
 80088f8:	e765      	b.n	80087c6 <_dtoa_r+0x3a6>
 80088fa:	9c03      	ldr	r4, [sp, #12]
 80088fc:	46b8      	mov	r8, r7
 80088fe:	e784      	b.n	800880a <_dtoa_r+0x3ea>
 8008900:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <_dtoa_r+0x580>)
 8008902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800890c:	4454      	add	r4, sl
 800890e:	2900      	cmp	r1, #0
 8008910:	d054      	beq.n	80089bc <_dtoa_r+0x59c>
 8008912:	4929      	ldr	r1, [pc, #164]	@ (80089b8 <_dtoa_r+0x598>)
 8008914:	2000      	movs	r0, #0
 8008916:	f7f7 ffc1 	bl	800089c <__aeabi_ddiv>
 800891a:	4633      	mov	r3, r6
 800891c:	462a      	mov	r2, r5
 800891e:	f7f7 fcdb 	bl	80002d8 <__aeabi_dsub>
 8008922:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008926:	4656      	mov	r6, sl
 8008928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800892c:	f7f8 f93c 	bl	8000ba8 <__aeabi_d2iz>
 8008930:	4605      	mov	r5, r0
 8008932:	f7f7 fe1f 	bl	8000574 <__aeabi_i2d>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800893e:	f7f7 fccb 	bl	80002d8 <__aeabi_dsub>
 8008942:	3530      	adds	r5, #48	@ 0x30
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800894c:	f806 5b01 	strb.w	r5, [r6], #1
 8008950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008954:	f7f8 f8ea 	bl	8000b2c <__aeabi_dcmplt>
 8008958:	2800      	cmp	r0, #0
 800895a:	d172      	bne.n	8008a42 <_dtoa_r+0x622>
 800895c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008960:	4911      	ldr	r1, [pc, #68]	@ (80089a8 <_dtoa_r+0x588>)
 8008962:	2000      	movs	r0, #0
 8008964:	f7f7 fcb8 	bl	80002d8 <__aeabi_dsub>
 8008968:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800896c:	f7f8 f8de 	bl	8000b2c <__aeabi_dcmplt>
 8008970:	2800      	cmp	r0, #0
 8008972:	f040 80b4 	bne.w	8008ade <_dtoa_r+0x6be>
 8008976:	42a6      	cmp	r6, r4
 8008978:	f43f af70 	beq.w	800885c <_dtoa_r+0x43c>
 800897c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008980:	4b0a      	ldr	r3, [pc, #40]	@ (80089ac <_dtoa_r+0x58c>)
 8008982:	2200      	movs	r2, #0
 8008984:	f7f7 fe60 	bl	8000648 <__aeabi_dmul>
 8008988:	4b08      	ldr	r3, [pc, #32]	@ (80089ac <_dtoa_r+0x58c>)
 800898a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800898e:	2200      	movs	r2, #0
 8008990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008994:	f7f7 fe58 	bl	8000648 <__aeabi_dmul>
 8008998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800899c:	e7c4      	b.n	8008928 <_dtoa_r+0x508>
 800899e:	bf00      	nop
 80089a0:	0800aef8 	.word	0x0800aef8
 80089a4:	0800aed0 	.word	0x0800aed0
 80089a8:	3ff00000 	.word	0x3ff00000
 80089ac:	40240000 	.word	0x40240000
 80089b0:	401c0000 	.word	0x401c0000
 80089b4:	40140000 	.word	0x40140000
 80089b8:	3fe00000 	.word	0x3fe00000
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fe42 	bl	8000648 <__aeabi_dmul>
 80089c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80089ca:	4656      	mov	r6, sl
 80089cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d0:	f7f8 f8ea 	bl	8000ba8 <__aeabi_d2iz>
 80089d4:	4605      	mov	r5, r0
 80089d6:	f7f7 fdcd 	bl	8000574 <__aeabi_i2d>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e2:	f7f7 fc79 	bl	80002d8 <__aeabi_dsub>
 80089e6:	3530      	adds	r5, #48	@ 0x30
 80089e8:	f806 5b01 	strb.w	r5, [r6], #1
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	42a6      	cmp	r6, r4
 80089f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	d124      	bne.n	8008a46 <_dtoa_r+0x626>
 80089fc:	4baf      	ldr	r3, [pc, #700]	@ (8008cbc <_dtoa_r+0x89c>)
 80089fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a02:	f7f7 fc6b 	bl	80002dc <__adddf3>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a0e:	f7f8 f8ab 	bl	8000b68 <__aeabi_dcmpgt>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d163      	bne.n	8008ade <_dtoa_r+0x6be>
 8008a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a1a:	49a8      	ldr	r1, [pc, #672]	@ (8008cbc <_dtoa_r+0x89c>)
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7f7 fc5b 	bl	80002d8 <__aeabi_dsub>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a2a:	f7f8 f87f 	bl	8000b2c <__aeabi_dcmplt>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	f43f af14 	beq.w	800885c <_dtoa_r+0x43c>
 8008a34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008a36:	1e73      	subs	r3, r6, #1
 8008a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a3e:	2b30      	cmp	r3, #48	@ 0x30
 8008a40:	d0f8      	beq.n	8008a34 <_dtoa_r+0x614>
 8008a42:	4647      	mov	r7, r8
 8008a44:	e03b      	b.n	8008abe <_dtoa_r+0x69e>
 8008a46:	4b9e      	ldr	r3, [pc, #632]	@ (8008cc0 <_dtoa_r+0x8a0>)
 8008a48:	f7f7 fdfe 	bl	8000648 <__aeabi_dmul>
 8008a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a50:	e7bc      	b.n	80089cc <_dtoa_r+0x5ac>
 8008a52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008a56:	4656      	mov	r6, sl
 8008a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	f7f7 ff1c 	bl	800089c <__aeabi_ddiv>
 8008a64:	f7f8 f8a0 	bl	8000ba8 <__aeabi_d2iz>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	f7f7 fd83 	bl	8000574 <__aeabi_i2d>
 8008a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a72:	f7f7 fde9 	bl	8000648 <__aeabi_dmul>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a82:	f7f7 fc29 	bl	80002d8 <__aeabi_dsub>
 8008a86:	f806 4b01 	strb.w	r4, [r6], #1
 8008a8a:	9d03      	ldr	r5, [sp, #12]
 8008a8c:	eba6 040a 	sub.w	r4, r6, sl
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	d133      	bne.n	8008b00 <_dtoa_r+0x6e0>
 8008a98:	f7f7 fc20 	bl	80002dc <__adddf3>
 8008a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	f7f8 f860 	bl	8000b68 <__aeabi_dcmpgt>
 8008aa8:	b9c0      	cbnz	r0, 8008adc <_dtoa_r+0x6bc>
 8008aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f8 f831 	bl	8000b18 <__aeabi_dcmpeq>
 8008ab6:	b110      	cbz	r0, 8008abe <_dtoa_r+0x69e>
 8008ab8:	f018 0f01 	tst.w	r8, #1
 8008abc:	d10e      	bne.n	8008adc <_dtoa_r+0x6bc>
 8008abe:	9902      	ldr	r1, [sp, #8]
 8008ac0:	4648      	mov	r0, r9
 8008ac2:	f000 fbbd 	bl	8009240 <_Bfree>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	7033      	strb	r3, [r6, #0]
 8008aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008acc:	3701      	adds	r7, #1
 8008ace:	601f      	str	r7, [r3, #0]
 8008ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 824b 	beq.w	8008f6e <_dtoa_r+0xb4e>
 8008ad8:	601e      	str	r6, [r3, #0]
 8008ada:	e248      	b.n	8008f6e <_dtoa_r+0xb4e>
 8008adc:	46b8      	mov	r8, r7
 8008ade:	4633      	mov	r3, r6
 8008ae0:	461e      	mov	r6, r3
 8008ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ae6:	2a39      	cmp	r2, #57	@ 0x39
 8008ae8:	d106      	bne.n	8008af8 <_dtoa_r+0x6d8>
 8008aea:	459a      	cmp	sl, r3
 8008aec:	d1f8      	bne.n	8008ae0 <_dtoa_r+0x6c0>
 8008aee:	2230      	movs	r2, #48	@ 0x30
 8008af0:	f108 0801 	add.w	r8, r8, #1
 8008af4:	f88a 2000 	strb.w	r2, [sl]
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	3201      	adds	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e7a0      	b.n	8008a42 <_dtoa_r+0x622>
 8008b00:	4b6f      	ldr	r3, [pc, #444]	@ (8008cc0 <_dtoa_r+0x8a0>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	f7f7 fda0 	bl	8000648 <__aeabi_dmul>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	460d      	mov	r5, r1
 8008b10:	f7f8 f802 	bl	8000b18 <__aeabi_dcmpeq>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d09f      	beq.n	8008a58 <_dtoa_r+0x638>
 8008b18:	e7d1      	b.n	8008abe <_dtoa_r+0x69e>
 8008b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b1c:	2a00      	cmp	r2, #0
 8008b1e:	f000 80ea 	beq.w	8008cf6 <_dtoa_r+0x8d6>
 8008b22:	9a07      	ldr	r2, [sp, #28]
 8008b24:	2a01      	cmp	r2, #1
 8008b26:	f300 80cd 	bgt.w	8008cc4 <_dtoa_r+0x8a4>
 8008b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	f000 80c1 	beq.w	8008cb4 <_dtoa_r+0x894>
 8008b32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b36:	9c08      	ldr	r4, [sp, #32]
 8008b38:	9e00      	ldr	r6, [sp, #0]
 8008b3a:	9a00      	ldr	r2, [sp, #0]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	9200      	str	r2, [sp, #0]
 8008b40:	9a06      	ldr	r2, [sp, #24]
 8008b42:	2101      	movs	r1, #1
 8008b44:	441a      	add	r2, r3
 8008b46:	4648      	mov	r0, r9
 8008b48:	9206      	str	r2, [sp, #24]
 8008b4a:	f000 fc2d 	bl	80093a8 <__i2b>
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b166      	cbz	r6, 8008b6c <_dtoa_r+0x74c>
 8008b52:	9b06      	ldr	r3, [sp, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd09      	ble.n	8008b6c <_dtoa_r+0x74c>
 8008b58:	42b3      	cmp	r3, r6
 8008b5a:	9a00      	ldr	r2, [sp, #0]
 8008b5c:	bfa8      	it	ge
 8008b5e:	4633      	movge	r3, r6
 8008b60:	1ad2      	subs	r2, r2, r3
 8008b62:	9200      	str	r2, [sp, #0]
 8008b64:	9a06      	ldr	r2, [sp, #24]
 8008b66:	1af6      	subs	r6, r6, r3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	9306      	str	r3, [sp, #24]
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	b30b      	cbz	r3, 8008bb4 <_dtoa_r+0x794>
 8008b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80c6 	beq.w	8008d04 <_dtoa_r+0x8e4>
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	f000 80c0 	beq.w	8008cfe <_dtoa_r+0x8de>
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4622      	mov	r2, r4
 8008b82:	4648      	mov	r0, r9
 8008b84:	f000 fcc8 	bl	8009518 <__pow5mult>
 8008b88:	9a02      	ldr	r2, [sp, #8]
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	4648      	mov	r0, r9
 8008b90:	f000 fc20 	bl	80093d4 <__multiply>
 8008b94:	9902      	ldr	r1, [sp, #8]
 8008b96:	4680      	mov	r8, r0
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f000 fb51 	bl	8009240 <_Bfree>
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	1b1b      	subs	r3, r3, r4
 8008ba2:	9308      	str	r3, [sp, #32]
 8008ba4:	f000 80b1 	beq.w	8008d0a <_dtoa_r+0x8ea>
 8008ba8:	9a08      	ldr	r2, [sp, #32]
 8008baa:	4641      	mov	r1, r8
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 fcb3 	bl	8009518 <__pow5mult>
 8008bb2:	9002      	str	r0, [sp, #8]
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	4648      	mov	r0, r9
 8008bb8:	f000 fbf6 	bl	80093a8 <__i2b>
 8008bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 81d8 	beq.w	8008f76 <_dtoa_r+0xb56>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4601      	mov	r1, r0
 8008bca:	4648      	mov	r0, r9
 8008bcc:	f000 fca4 	bl	8009518 <__pow5mult>
 8008bd0:	9b07      	ldr	r3, [sp, #28]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	f300 809f 	bgt.w	8008d18 <_dtoa_r+0x8f8>
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 8097 	bne.w	8008d10 <_dtoa_r+0x8f0>
 8008be2:	9b05      	ldr	r3, [sp, #20]
 8008be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 8093 	bne.w	8008d14 <_dtoa_r+0x8f4>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bf4:	0d1b      	lsrs	r3, r3, #20
 8008bf6:	051b      	lsls	r3, r3, #20
 8008bf8:	b133      	cbz	r3, 8008c08 <_dtoa_r+0x7e8>
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	3301      	adds	r3, #1
 8008c04:	9306      	str	r3, [sp, #24]
 8008c06:	2301      	movs	r3, #1
 8008c08:	9308      	str	r3, [sp, #32]
 8008c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 81b8 	beq.w	8008f82 <_dtoa_r+0xb62>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c18:	6918      	ldr	r0, [r3, #16]
 8008c1a:	f000 fb79 	bl	8009310 <__hi0bits>
 8008c1e:	f1c0 0020 	rsb	r0, r0, #32
 8008c22:	9b06      	ldr	r3, [sp, #24]
 8008c24:	4418      	add	r0, r3
 8008c26:	f010 001f 	ands.w	r0, r0, #31
 8008c2a:	f000 8082 	beq.w	8008d32 <_dtoa_r+0x912>
 8008c2e:	f1c0 0320 	rsb	r3, r0, #32
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	dd73      	ble.n	8008d1e <_dtoa_r+0x8fe>
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	f1c0 001c 	rsb	r0, r0, #28
 8008c3c:	4403      	add	r3, r0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	4403      	add	r3, r0
 8008c44:	4406      	add	r6, r0
 8008c46:	9306      	str	r3, [sp, #24]
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dd05      	ble.n	8008c5a <_dtoa_r+0x83a>
 8008c4e:	9902      	ldr	r1, [sp, #8]
 8008c50:	461a      	mov	r2, r3
 8008c52:	4648      	mov	r0, r9
 8008c54:	f000 fcba 	bl	80095cc <__lshift>
 8008c58:	9002      	str	r0, [sp, #8]
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd05      	ble.n	8008c6c <_dtoa_r+0x84c>
 8008c60:	4621      	mov	r1, r4
 8008c62:	461a      	mov	r2, r3
 8008c64:	4648      	mov	r0, r9
 8008c66:	f000 fcb1 	bl	80095cc <__lshift>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d061      	beq.n	8008d36 <_dtoa_r+0x916>
 8008c72:	9802      	ldr	r0, [sp, #8]
 8008c74:	4621      	mov	r1, r4
 8008c76:	f000 fd15 	bl	80096a4 <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	da5b      	bge.n	8008d36 <_dtoa_r+0x916>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9902      	ldr	r1, [sp, #8]
 8008c82:	220a      	movs	r2, #10
 8008c84:	4648      	mov	r0, r9
 8008c86:	f000 fafd 	bl	8009284 <__multadd>
 8008c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8177 	beq.w	8008f86 <_dtoa_r+0xb66>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f000 faf0 	bl	8009284 <__multadd>
 8008ca4:	f1bb 0f00 	cmp.w	fp, #0
 8008ca8:	4605      	mov	r5, r0
 8008caa:	dc6f      	bgt.n	8008d8c <_dtoa_r+0x96c>
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dc49      	bgt.n	8008d46 <_dtoa_r+0x926>
 8008cb2:	e06b      	b.n	8008d8c <_dtoa_r+0x96c>
 8008cb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cba:	e73c      	b.n	8008b36 <_dtoa_r+0x716>
 8008cbc:	3fe00000 	.word	0x3fe00000
 8008cc0:	40240000 	.word	0x40240000
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	1e5c      	subs	r4, r3, #1
 8008cc8:	9b08      	ldr	r3, [sp, #32]
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	db09      	blt.n	8008ce2 <_dtoa_r+0x8c2>
 8008cce:	1b1c      	subs	r4, r3, r4
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f6bf af30 	bge.w	8008b38 <_dtoa_r+0x718>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	9a03      	ldr	r2, [sp, #12]
 8008cdc:	1a9e      	subs	r6, r3, r2
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e72b      	b.n	8008b3a <_dtoa_r+0x71a>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ce6:	9408      	str	r4, [sp, #32]
 8008ce8:	1ae3      	subs	r3, r4, r3
 8008cea:	441a      	add	r2, r3
 8008cec:	9e00      	ldr	r6, [sp, #0]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008cf2:	2400      	movs	r4, #0
 8008cf4:	e721      	b.n	8008b3a <_dtoa_r+0x71a>
 8008cf6:	9c08      	ldr	r4, [sp, #32]
 8008cf8:	9e00      	ldr	r6, [sp, #0]
 8008cfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008cfc:	e728      	b.n	8008b50 <_dtoa_r+0x730>
 8008cfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d02:	e751      	b.n	8008ba8 <_dtoa_r+0x788>
 8008d04:	9a08      	ldr	r2, [sp, #32]
 8008d06:	9902      	ldr	r1, [sp, #8]
 8008d08:	e750      	b.n	8008bac <_dtoa_r+0x78c>
 8008d0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d0e:	e751      	b.n	8008bb4 <_dtoa_r+0x794>
 8008d10:	2300      	movs	r3, #0
 8008d12:	e779      	b.n	8008c08 <_dtoa_r+0x7e8>
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	e777      	b.n	8008c08 <_dtoa_r+0x7e8>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9308      	str	r3, [sp, #32]
 8008d1c:	e779      	b.n	8008c12 <_dtoa_r+0x7f2>
 8008d1e:	d093      	beq.n	8008c48 <_dtoa_r+0x828>
 8008d20:	9a00      	ldr	r2, [sp, #0]
 8008d22:	331c      	adds	r3, #28
 8008d24:	441a      	add	r2, r3
 8008d26:	9200      	str	r2, [sp, #0]
 8008d28:	9a06      	ldr	r2, [sp, #24]
 8008d2a:	441a      	add	r2, r3
 8008d2c:	441e      	add	r6, r3
 8008d2e:	9206      	str	r2, [sp, #24]
 8008d30:	e78a      	b.n	8008c48 <_dtoa_r+0x828>
 8008d32:	4603      	mov	r3, r0
 8008d34:	e7f4      	b.n	8008d20 <_dtoa_r+0x900>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	46b8      	mov	r8, r7
 8008d3c:	dc20      	bgt.n	8008d80 <_dtoa_r+0x960>
 8008d3e:	469b      	mov	fp, r3
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	dd1e      	ble.n	8008d84 <_dtoa_r+0x964>
 8008d46:	f1bb 0f00 	cmp.w	fp, #0
 8008d4a:	f47f adb1 	bne.w	80088b0 <_dtoa_r+0x490>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	465b      	mov	r3, fp
 8008d52:	2205      	movs	r2, #5
 8008d54:	4648      	mov	r0, r9
 8008d56:	f000 fa95 	bl	8009284 <__multadd>
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	9802      	ldr	r0, [sp, #8]
 8008d60:	f000 fca0 	bl	80096a4 <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f77f ada3 	ble.w	80088b0 <_dtoa_r+0x490>
 8008d6a:	4656      	mov	r6, sl
 8008d6c:	2331      	movs	r3, #49	@ 0x31
 8008d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008d72:	f108 0801 	add.w	r8, r8, #1
 8008d76:	e59f      	b.n	80088b8 <_dtoa_r+0x498>
 8008d78:	9c03      	ldr	r4, [sp, #12]
 8008d7a:	46b8      	mov	r8, r7
 8008d7c:	4625      	mov	r5, r4
 8008d7e:	e7f4      	b.n	8008d6a <_dtoa_r+0x94a>
 8008d80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8101 	beq.w	8008f8e <_dtoa_r+0xb6e>
 8008d8c:	2e00      	cmp	r6, #0
 8008d8e:	dd05      	ble.n	8008d9c <_dtoa_r+0x97c>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4632      	mov	r2, r6
 8008d94:	4648      	mov	r0, r9
 8008d96:	f000 fc19 	bl	80095cc <__lshift>
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d05c      	beq.n	8008e5c <_dtoa_r+0xa3c>
 8008da2:	6869      	ldr	r1, [r5, #4]
 8008da4:	4648      	mov	r0, r9
 8008da6:	f000 fa0b 	bl	80091c0 <_Balloc>
 8008daa:	4606      	mov	r6, r0
 8008dac:	b928      	cbnz	r0, 8008dba <_dtoa_r+0x99a>
 8008dae:	4b82      	ldr	r3, [pc, #520]	@ (8008fb8 <_dtoa_r+0xb98>)
 8008db0:	4602      	mov	r2, r0
 8008db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008db6:	f7ff bb4a 	b.w	800844e <_dtoa_r+0x2e>
 8008dba:	692a      	ldr	r2, [r5, #16]
 8008dbc:	3202      	adds	r2, #2
 8008dbe:	0092      	lsls	r2, r2, #2
 8008dc0:	f105 010c 	add.w	r1, r5, #12
 8008dc4:	300c      	adds	r0, #12
 8008dc6:	f001 f969 	bl	800a09c <memcpy>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f000 fbfc 	bl	80095cc <__lshift>
 8008dd4:	f10a 0301 	add.w	r3, sl, #1
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	eb0a 030b 	add.w	r3, sl, fp
 8008dde:	9308      	str	r3, [sp, #32]
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	462f      	mov	r7, r5
 8008de8:	9306      	str	r3, [sp, #24]
 8008dea:	4605      	mov	r5, r0
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	9802      	ldr	r0, [sp, #8]
 8008df0:	4621      	mov	r1, r4
 8008df2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008df6:	f7ff fa88 	bl	800830a <quorem>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	3330      	adds	r3, #48	@ 0x30
 8008dfe:	9003      	str	r0, [sp, #12]
 8008e00:	4639      	mov	r1, r7
 8008e02:	9802      	ldr	r0, [sp, #8]
 8008e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e06:	f000 fc4d 	bl	80096a4 <__mcmp>
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	9004      	str	r0, [sp, #16]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4648      	mov	r0, r9
 8008e12:	f000 fc63 	bl	80096dc <__mdiff>
 8008e16:	68c2      	ldr	r2, [r0, #12]
 8008e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	bb02      	cbnz	r2, 8008e60 <_dtoa_r+0xa40>
 8008e1e:	4601      	mov	r1, r0
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	f000 fc3f 	bl	80096a4 <__mcmp>
 8008e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e28:	4602      	mov	r2, r0
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e32:	f000 fa05 	bl	8009240 <_Bfree>
 8008e36:	9b07      	ldr	r3, [sp, #28]
 8008e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e3a:	9e00      	ldr	r6, [sp, #0]
 8008e3c:	ea42 0103 	orr.w	r1, r2, r3
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	4319      	orrs	r1, r3
 8008e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e46:	d10d      	bne.n	8008e64 <_dtoa_r+0xa44>
 8008e48:	2b39      	cmp	r3, #57	@ 0x39
 8008e4a:	d027      	beq.n	8008e9c <_dtoa_r+0xa7c>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	dd01      	ble.n	8008e56 <_dtoa_r+0xa36>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	3331      	adds	r3, #49	@ 0x31
 8008e56:	f88b 3000 	strb.w	r3, [fp]
 8008e5a:	e52e      	b.n	80088ba <_dtoa_r+0x49a>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	e7b9      	b.n	8008dd4 <_dtoa_r+0x9b4>
 8008e60:	2201      	movs	r2, #1
 8008e62:	e7e2      	b.n	8008e2a <_dtoa_r+0xa0a>
 8008e64:	9904      	ldr	r1, [sp, #16]
 8008e66:	2900      	cmp	r1, #0
 8008e68:	db04      	blt.n	8008e74 <_dtoa_r+0xa54>
 8008e6a:	9807      	ldr	r0, [sp, #28]
 8008e6c:	4301      	orrs	r1, r0
 8008e6e:	9806      	ldr	r0, [sp, #24]
 8008e70:	4301      	orrs	r1, r0
 8008e72:	d120      	bne.n	8008eb6 <_dtoa_r+0xa96>
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	ddee      	ble.n	8008e56 <_dtoa_r+0xa36>
 8008e78:	9902      	ldr	r1, [sp, #8]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f000 fba4 	bl	80095cc <__lshift>
 8008e84:	4621      	mov	r1, r4
 8008e86:	9002      	str	r0, [sp, #8]
 8008e88:	f000 fc0c 	bl	80096a4 <__mcmp>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	9b00      	ldr	r3, [sp, #0]
 8008e90:	dc02      	bgt.n	8008e98 <_dtoa_r+0xa78>
 8008e92:	d1e0      	bne.n	8008e56 <_dtoa_r+0xa36>
 8008e94:	07da      	lsls	r2, r3, #31
 8008e96:	d5de      	bpl.n	8008e56 <_dtoa_r+0xa36>
 8008e98:	2b39      	cmp	r3, #57	@ 0x39
 8008e9a:	d1da      	bne.n	8008e52 <_dtoa_r+0xa32>
 8008e9c:	2339      	movs	r3, #57	@ 0x39
 8008e9e:	f88b 3000 	strb.w	r3, [fp]
 8008ea2:	4633      	mov	r3, r6
 8008ea4:	461e      	mov	r6, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008eac:	2a39      	cmp	r2, #57	@ 0x39
 8008eae:	d04e      	beq.n	8008f4e <_dtoa_r+0xb2e>
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]
 8008eb4:	e501      	b.n	80088ba <_dtoa_r+0x49a>
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	dd03      	ble.n	8008ec2 <_dtoa_r+0xaa2>
 8008eba:	2b39      	cmp	r3, #57	@ 0x39
 8008ebc:	d0ee      	beq.n	8008e9c <_dtoa_r+0xa7c>
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	e7c9      	b.n	8008e56 <_dtoa_r+0xa36>
 8008ec2:	9a00      	ldr	r2, [sp, #0]
 8008ec4:	9908      	ldr	r1, [sp, #32]
 8008ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008eca:	428a      	cmp	r2, r1
 8008ecc:	d028      	beq.n	8008f20 <_dtoa_r+0xb00>
 8008ece:	9902      	ldr	r1, [sp, #8]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	220a      	movs	r2, #10
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 f9d5 	bl	8009284 <__multadd>
 8008eda:	42af      	cmp	r7, r5
 8008edc:	9002      	str	r0, [sp, #8]
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	f04f 020a 	mov.w	r2, #10
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	4648      	mov	r0, r9
 8008eea:	d107      	bne.n	8008efc <_dtoa_r+0xadc>
 8008eec:	f000 f9ca 	bl	8009284 <__multadd>
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	e777      	b.n	8008dec <_dtoa_r+0x9cc>
 8008efc:	f000 f9c2 	bl	8009284 <__multadd>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4607      	mov	r7, r0
 8008f04:	2300      	movs	r3, #0
 8008f06:	220a      	movs	r2, #10
 8008f08:	4648      	mov	r0, r9
 8008f0a:	f000 f9bb 	bl	8009284 <__multadd>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	e7f0      	b.n	8008ef4 <_dtoa_r+0xad4>
 8008f12:	f1bb 0f00 	cmp.w	fp, #0
 8008f16:	bfcc      	ite	gt
 8008f18:	465e      	movgt	r6, fp
 8008f1a:	2601      	movle	r6, #1
 8008f1c:	4456      	add	r6, sl
 8008f1e:	2700      	movs	r7, #0
 8008f20:	9902      	ldr	r1, [sp, #8]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2201      	movs	r2, #1
 8008f26:	4648      	mov	r0, r9
 8008f28:	f000 fb50 	bl	80095cc <__lshift>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	9002      	str	r0, [sp, #8]
 8008f30:	f000 fbb8 	bl	80096a4 <__mcmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	dcb4      	bgt.n	8008ea2 <_dtoa_r+0xa82>
 8008f38:	d102      	bne.n	8008f40 <_dtoa_r+0xb20>
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	07db      	lsls	r3, r3, #31
 8008f3e:	d4b0      	bmi.n	8008ea2 <_dtoa_r+0xa82>
 8008f40:	4633      	mov	r3, r6
 8008f42:	461e      	mov	r6, r3
 8008f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f48:	2a30      	cmp	r2, #48	@ 0x30
 8008f4a:	d0fa      	beq.n	8008f42 <_dtoa_r+0xb22>
 8008f4c:	e4b5      	b.n	80088ba <_dtoa_r+0x49a>
 8008f4e:	459a      	cmp	sl, r3
 8008f50:	d1a8      	bne.n	8008ea4 <_dtoa_r+0xa84>
 8008f52:	2331      	movs	r3, #49	@ 0x31
 8008f54:	f108 0801 	add.w	r8, r8, #1
 8008f58:	f88a 3000 	strb.w	r3, [sl]
 8008f5c:	e4ad      	b.n	80088ba <_dtoa_r+0x49a>
 8008f5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008fbc <_dtoa_r+0xb9c>
 8008f64:	b11b      	cbz	r3, 8008f6e <_dtoa_r+0xb4e>
 8008f66:	f10a 0308 	add.w	r3, sl, #8
 8008f6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	4650      	mov	r0, sl
 8008f70:	b017      	add	sp, #92	@ 0x5c
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	9b07      	ldr	r3, [sp, #28]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f77f ae2e 	ble.w	8008bda <_dtoa_r+0x7ba>
 8008f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f80:	9308      	str	r3, [sp, #32]
 8008f82:	2001      	movs	r0, #1
 8008f84:	e64d      	b.n	8008c22 <_dtoa_r+0x802>
 8008f86:	f1bb 0f00 	cmp.w	fp, #0
 8008f8a:	f77f aed9 	ble.w	8008d40 <_dtoa_r+0x920>
 8008f8e:	4656      	mov	r6, sl
 8008f90:	9802      	ldr	r0, [sp, #8]
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff f9b9 	bl	800830a <quorem>
 8008f98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8008fa0:	eba6 020a 	sub.w	r2, r6, sl
 8008fa4:	4593      	cmp	fp, r2
 8008fa6:	ddb4      	ble.n	8008f12 <_dtoa_r+0xaf2>
 8008fa8:	9902      	ldr	r1, [sp, #8]
 8008faa:	2300      	movs	r3, #0
 8008fac:	220a      	movs	r2, #10
 8008fae:	4648      	mov	r0, r9
 8008fb0:	f000 f968 	bl	8009284 <__multadd>
 8008fb4:	9002      	str	r0, [sp, #8]
 8008fb6:	e7eb      	b.n	8008f90 <_dtoa_r+0xb70>
 8008fb8:	0800adfc 	.word	0x0800adfc
 8008fbc:	0800ad80 	.word	0x0800ad80

08008fc0 <_free_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d041      	beq.n	800904c <_free_r+0x8c>
 8008fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fcc:	1f0c      	subs	r4, r1, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	18e4      	addlt	r4, r4, r3
 8008fd4:	f000 f8e8 	bl	80091a8 <__malloc_lock>
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <_free_r+0x90>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x2c>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe8:	f000 b8e4 	b.w	80091b4 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x42>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	1821      	adds	r1, r4, r0
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1809      	addeq	r1, r1, r0
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x1e>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x4c>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x42>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1850      	adds	r0, r2, r1
 8009010:	42a0      	cmp	r0, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x6c>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	4401      	add	r1, r0
 8009018:	1850      	adds	r0, r2, r1
 800901a:	4283      	cmp	r3, r0
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x22>
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4408      	add	r0, r1
 8009028:	6010      	str	r0, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x22>
 800902c:	d902      	bls.n	8009034 <_free_r+0x74>
 800902e:	230c      	movs	r3, #12
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x22>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	1821      	adds	r1, r4, r0
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1809      	addeq	r1, r1, r0
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x22>
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	20000948 	.word	0x20000948

08009054 <malloc>:
 8009054:	4b02      	ldr	r3, [pc, #8]	@ (8009060 <malloc+0xc>)
 8009056:	4601      	mov	r1, r0
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	f000 b825 	b.w	80090a8 <_malloc_r>
 800905e:	bf00      	nop
 8009060:	20000018 	.word	0x20000018

08009064 <sbrk_aligned>:
 8009064:	b570      	push	{r4, r5, r6, lr}
 8009066:	4e0f      	ldr	r6, [pc, #60]	@ (80090a4 <sbrk_aligned+0x40>)
 8009068:	460c      	mov	r4, r1
 800906a:	6831      	ldr	r1, [r6, #0]
 800906c:	4605      	mov	r5, r0
 800906e:	b911      	cbnz	r1, 8009076 <sbrk_aligned+0x12>
 8009070:	f001 f804 	bl	800a07c <_sbrk_r>
 8009074:	6030      	str	r0, [r6, #0]
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f000 ffff 	bl	800a07c <_sbrk_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d103      	bne.n	800908a <sbrk_aligned+0x26>
 8009082:	f04f 34ff 	mov.w	r4, #4294967295
 8009086:	4620      	mov	r0, r4
 8009088:	bd70      	pop	{r4, r5, r6, pc}
 800908a:	1cc4      	adds	r4, r0, #3
 800908c:	f024 0403 	bic.w	r4, r4, #3
 8009090:	42a0      	cmp	r0, r4
 8009092:	d0f8      	beq.n	8009086 <sbrk_aligned+0x22>
 8009094:	1a21      	subs	r1, r4, r0
 8009096:	4628      	mov	r0, r5
 8009098:	f000 fff0 	bl	800a07c <_sbrk_r>
 800909c:	3001      	adds	r0, #1
 800909e:	d1f2      	bne.n	8009086 <sbrk_aligned+0x22>
 80090a0:	e7ef      	b.n	8009082 <sbrk_aligned+0x1e>
 80090a2:	bf00      	nop
 80090a4:	20000944 	.word	0x20000944

080090a8 <_malloc_r>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	1ccd      	adds	r5, r1, #3
 80090ae:	f025 0503 	bic.w	r5, r5, #3
 80090b2:	3508      	adds	r5, #8
 80090b4:	2d0c      	cmp	r5, #12
 80090b6:	bf38      	it	cc
 80090b8:	250c      	movcc	r5, #12
 80090ba:	2d00      	cmp	r5, #0
 80090bc:	4606      	mov	r6, r0
 80090be:	db01      	blt.n	80090c4 <_malloc_r+0x1c>
 80090c0:	42a9      	cmp	r1, r5
 80090c2:	d904      	bls.n	80090ce <_malloc_r+0x26>
 80090c4:	230c      	movs	r3, #12
 80090c6:	6033      	str	r3, [r6, #0]
 80090c8:	2000      	movs	r0, #0
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091a4 <_malloc_r+0xfc>
 80090d2:	f000 f869 	bl	80091a8 <__malloc_lock>
 80090d6:	f8d8 3000 	ldr.w	r3, [r8]
 80090da:	461c      	mov	r4, r3
 80090dc:	bb44      	cbnz	r4, 8009130 <_malloc_r+0x88>
 80090de:	4629      	mov	r1, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7ff ffbf 	bl	8009064 <sbrk_aligned>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	4604      	mov	r4, r0
 80090ea:	d158      	bne.n	800919e <_malloc_r+0xf6>
 80090ec:	f8d8 4000 	ldr.w	r4, [r8]
 80090f0:	4627      	mov	r7, r4
 80090f2:	2f00      	cmp	r7, #0
 80090f4:	d143      	bne.n	800917e <_malloc_r+0xd6>
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	d04b      	beq.n	8009192 <_malloc_r+0xea>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	4639      	mov	r1, r7
 80090fe:	4630      	mov	r0, r6
 8009100:	eb04 0903 	add.w	r9, r4, r3
 8009104:	f000 ffba 	bl	800a07c <_sbrk_r>
 8009108:	4581      	cmp	r9, r0
 800910a:	d142      	bne.n	8009192 <_malloc_r+0xea>
 800910c:	6821      	ldr	r1, [r4, #0]
 800910e:	1a6d      	subs	r5, r5, r1
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffa6 	bl	8009064 <sbrk_aligned>
 8009118:	3001      	adds	r0, #1
 800911a:	d03a      	beq.n	8009192 <_malloc_r+0xea>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	442b      	add	r3, r5
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	f8d8 3000 	ldr.w	r3, [r8]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	bb62      	cbnz	r2, 8009184 <_malloc_r+0xdc>
 800912a:	f8c8 7000 	str.w	r7, [r8]
 800912e:	e00f      	b.n	8009150 <_malloc_r+0xa8>
 8009130:	6822      	ldr	r2, [r4, #0]
 8009132:	1b52      	subs	r2, r2, r5
 8009134:	d420      	bmi.n	8009178 <_malloc_r+0xd0>
 8009136:	2a0b      	cmp	r2, #11
 8009138:	d917      	bls.n	800916a <_malloc_r+0xc2>
 800913a:	1961      	adds	r1, r4, r5
 800913c:	42a3      	cmp	r3, r4
 800913e:	6025      	str	r5, [r4, #0]
 8009140:	bf18      	it	ne
 8009142:	6059      	strne	r1, [r3, #4]
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	bf08      	it	eq
 8009148:	f8c8 1000 	streq.w	r1, [r8]
 800914c:	5162      	str	r2, [r4, r5]
 800914e:	604b      	str	r3, [r1, #4]
 8009150:	4630      	mov	r0, r6
 8009152:	f000 f82f 	bl	80091b4 <__malloc_unlock>
 8009156:	f104 000b 	add.w	r0, r4, #11
 800915a:	1d23      	adds	r3, r4, #4
 800915c:	f020 0007 	bic.w	r0, r0, #7
 8009160:	1ac2      	subs	r2, r0, r3
 8009162:	bf1c      	itt	ne
 8009164:	1a1b      	subne	r3, r3, r0
 8009166:	50a3      	strne	r3, [r4, r2]
 8009168:	e7af      	b.n	80090ca <_malloc_r+0x22>
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	42a3      	cmp	r3, r4
 800916e:	bf0c      	ite	eq
 8009170:	f8c8 2000 	streq.w	r2, [r8]
 8009174:	605a      	strne	r2, [r3, #4]
 8009176:	e7eb      	b.n	8009150 <_malloc_r+0xa8>
 8009178:	4623      	mov	r3, r4
 800917a:	6864      	ldr	r4, [r4, #4]
 800917c:	e7ae      	b.n	80090dc <_malloc_r+0x34>
 800917e:	463c      	mov	r4, r7
 8009180:	687f      	ldr	r7, [r7, #4]
 8009182:	e7b6      	b.n	80090f2 <_malloc_r+0x4a>
 8009184:	461a      	mov	r2, r3
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	42a3      	cmp	r3, r4
 800918a:	d1fb      	bne.n	8009184 <_malloc_r+0xdc>
 800918c:	2300      	movs	r3, #0
 800918e:	6053      	str	r3, [r2, #4]
 8009190:	e7de      	b.n	8009150 <_malloc_r+0xa8>
 8009192:	230c      	movs	r3, #12
 8009194:	6033      	str	r3, [r6, #0]
 8009196:	4630      	mov	r0, r6
 8009198:	f000 f80c 	bl	80091b4 <__malloc_unlock>
 800919c:	e794      	b.n	80090c8 <_malloc_r+0x20>
 800919e:	6005      	str	r5, [r0, #0]
 80091a0:	e7d6      	b.n	8009150 <_malloc_r+0xa8>
 80091a2:	bf00      	nop
 80091a4:	20000948 	.word	0x20000948

080091a8 <__malloc_lock>:
 80091a8:	4801      	ldr	r0, [pc, #4]	@ (80091b0 <__malloc_lock+0x8>)
 80091aa:	f7ff b8ac 	b.w	8008306 <__retarget_lock_acquire_recursive>
 80091ae:	bf00      	nop
 80091b0:	20000940 	.word	0x20000940

080091b4 <__malloc_unlock>:
 80091b4:	4801      	ldr	r0, [pc, #4]	@ (80091bc <__malloc_unlock+0x8>)
 80091b6:	f7ff b8a7 	b.w	8008308 <__retarget_lock_release_recursive>
 80091ba:	bf00      	nop
 80091bc:	20000940 	.word	0x20000940

080091c0 <_Balloc>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	69c6      	ldr	r6, [r0, #28]
 80091c4:	4604      	mov	r4, r0
 80091c6:	460d      	mov	r5, r1
 80091c8:	b976      	cbnz	r6, 80091e8 <_Balloc+0x28>
 80091ca:	2010      	movs	r0, #16
 80091cc:	f7ff ff42 	bl	8009054 <malloc>
 80091d0:	4602      	mov	r2, r0
 80091d2:	61e0      	str	r0, [r4, #28]
 80091d4:	b920      	cbnz	r0, 80091e0 <_Balloc+0x20>
 80091d6:	4b18      	ldr	r3, [pc, #96]	@ (8009238 <_Balloc+0x78>)
 80091d8:	4818      	ldr	r0, [pc, #96]	@ (800923c <_Balloc+0x7c>)
 80091da:	216b      	movs	r1, #107	@ 0x6b
 80091dc:	f000 ff6c 	bl	800a0b8 <__assert_func>
 80091e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e4:	6006      	str	r6, [r0, #0]
 80091e6:	60c6      	str	r6, [r0, #12]
 80091e8:	69e6      	ldr	r6, [r4, #28]
 80091ea:	68f3      	ldr	r3, [r6, #12]
 80091ec:	b183      	cbz	r3, 8009210 <_Balloc+0x50>
 80091ee:	69e3      	ldr	r3, [r4, #28]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f6:	b9b8      	cbnz	r0, 8009228 <_Balloc+0x68>
 80091f8:	2101      	movs	r1, #1
 80091fa:	fa01 f605 	lsl.w	r6, r1, r5
 80091fe:	1d72      	adds	r2, r6, #5
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	4620      	mov	r0, r4
 8009204:	f000 ff76 	bl	800a0f4 <_calloc_r>
 8009208:	b160      	cbz	r0, 8009224 <_Balloc+0x64>
 800920a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920e:	e00e      	b.n	800922e <_Balloc+0x6e>
 8009210:	2221      	movs	r2, #33	@ 0x21
 8009212:	2104      	movs	r1, #4
 8009214:	4620      	mov	r0, r4
 8009216:	f000 ff6d 	bl	800a0f4 <_calloc_r>
 800921a:	69e3      	ldr	r3, [r4, #28]
 800921c:	60f0      	str	r0, [r6, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e4      	bne.n	80091ee <_Balloc+0x2e>
 8009224:	2000      	movs	r0, #0
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922e:	2300      	movs	r3, #0
 8009230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009234:	e7f7      	b.n	8009226 <_Balloc+0x66>
 8009236:	bf00      	nop
 8009238:	0800ad8d 	.word	0x0800ad8d
 800923c:	0800ae0d 	.word	0x0800ae0d

08009240 <_Bfree>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	69c6      	ldr	r6, [r0, #28]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b976      	cbnz	r6, 8009268 <_Bfree+0x28>
 800924a:	2010      	movs	r0, #16
 800924c:	f7ff ff02 	bl	8009054 <malloc>
 8009250:	4602      	mov	r2, r0
 8009252:	61e8      	str	r0, [r5, #28]
 8009254:	b920      	cbnz	r0, 8009260 <_Bfree+0x20>
 8009256:	4b09      	ldr	r3, [pc, #36]	@ (800927c <_Bfree+0x3c>)
 8009258:	4809      	ldr	r0, [pc, #36]	@ (8009280 <_Bfree+0x40>)
 800925a:	218f      	movs	r1, #143	@ 0x8f
 800925c:	f000 ff2c 	bl	800a0b8 <__assert_func>
 8009260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009264:	6006      	str	r6, [r0, #0]
 8009266:	60c6      	str	r6, [r0, #12]
 8009268:	b13c      	cbz	r4, 800927a <_Bfree+0x3a>
 800926a:	69eb      	ldr	r3, [r5, #28]
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009274:	6021      	str	r1, [r4, #0]
 8009276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0800ad8d 	.word	0x0800ad8d
 8009280:	0800ae0d 	.word	0x0800ae0d

08009284 <__multadd>:
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	690d      	ldr	r5, [r1, #16]
 800928a:	4607      	mov	r7, r0
 800928c:	460c      	mov	r4, r1
 800928e:	461e      	mov	r6, r3
 8009290:	f101 0c14 	add.w	ip, r1, #20
 8009294:	2000      	movs	r0, #0
 8009296:	f8dc 3000 	ldr.w	r3, [ip]
 800929a:	b299      	uxth	r1, r3
 800929c:	fb02 6101 	mla	r1, r2, r1, r6
 80092a0:	0c1e      	lsrs	r6, r3, #16
 80092a2:	0c0b      	lsrs	r3, r1, #16
 80092a4:	fb02 3306 	mla	r3, r2, r6, r3
 80092a8:	b289      	uxth	r1, r1
 80092aa:	3001      	adds	r0, #1
 80092ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092b0:	4285      	cmp	r5, r0
 80092b2:	f84c 1b04 	str.w	r1, [ip], #4
 80092b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ba:	dcec      	bgt.n	8009296 <__multadd+0x12>
 80092bc:	b30e      	cbz	r6, 8009302 <__multadd+0x7e>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dc19      	bgt.n	80092f8 <__multadd+0x74>
 80092c4:	6861      	ldr	r1, [r4, #4]
 80092c6:	4638      	mov	r0, r7
 80092c8:	3101      	adds	r1, #1
 80092ca:	f7ff ff79 	bl	80091c0 <_Balloc>
 80092ce:	4680      	mov	r8, r0
 80092d0:	b928      	cbnz	r0, 80092de <__multadd+0x5a>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009308 <__multadd+0x84>)
 80092d6:	480d      	ldr	r0, [pc, #52]	@ (800930c <__multadd+0x88>)
 80092d8:	21ba      	movs	r1, #186	@ 0xba
 80092da:	f000 feed 	bl	800a0b8 <__assert_func>
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	3202      	adds	r2, #2
 80092e2:	f104 010c 	add.w	r1, r4, #12
 80092e6:	0092      	lsls	r2, r2, #2
 80092e8:	300c      	adds	r0, #12
 80092ea:	f000 fed7 	bl	800a09c <memcpy>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff ffa5 	bl	8009240 <_Bfree>
 80092f6:	4644      	mov	r4, r8
 80092f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092fc:	3501      	adds	r5, #1
 80092fe:	615e      	str	r6, [r3, #20]
 8009300:	6125      	str	r5, [r4, #16]
 8009302:	4620      	mov	r0, r4
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	0800adfc 	.word	0x0800adfc
 800930c:	0800ae0d 	.word	0x0800ae0d

08009310 <__hi0bits>:
 8009310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009314:	4603      	mov	r3, r0
 8009316:	bf36      	itet	cc
 8009318:	0403      	lslcc	r3, r0, #16
 800931a:	2000      	movcs	r0, #0
 800931c:	2010      	movcc	r0, #16
 800931e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009322:	bf3c      	itt	cc
 8009324:	021b      	lslcc	r3, r3, #8
 8009326:	3008      	addcc	r0, #8
 8009328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800932c:	bf3c      	itt	cc
 800932e:	011b      	lslcc	r3, r3, #4
 8009330:	3004      	addcc	r0, #4
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009336:	bf3c      	itt	cc
 8009338:	009b      	lslcc	r3, r3, #2
 800933a:	3002      	addcc	r0, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	db05      	blt.n	800934c <__hi0bits+0x3c>
 8009340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009344:	f100 0001 	add.w	r0, r0, #1
 8009348:	bf08      	it	eq
 800934a:	2020      	moveq	r0, #32
 800934c:	4770      	bx	lr

0800934e <__lo0bits>:
 800934e:	6803      	ldr	r3, [r0, #0]
 8009350:	4602      	mov	r2, r0
 8009352:	f013 0007 	ands.w	r0, r3, #7
 8009356:	d00b      	beq.n	8009370 <__lo0bits+0x22>
 8009358:	07d9      	lsls	r1, r3, #31
 800935a:	d421      	bmi.n	80093a0 <__lo0bits+0x52>
 800935c:	0798      	lsls	r0, r3, #30
 800935e:	bf49      	itett	mi
 8009360:	085b      	lsrmi	r3, r3, #1
 8009362:	089b      	lsrpl	r3, r3, #2
 8009364:	2001      	movmi	r0, #1
 8009366:	6013      	strmi	r3, [r2, #0]
 8009368:	bf5c      	itt	pl
 800936a:	6013      	strpl	r3, [r2, #0]
 800936c:	2002      	movpl	r0, #2
 800936e:	4770      	bx	lr
 8009370:	b299      	uxth	r1, r3
 8009372:	b909      	cbnz	r1, 8009378 <__lo0bits+0x2a>
 8009374:	0c1b      	lsrs	r3, r3, #16
 8009376:	2010      	movs	r0, #16
 8009378:	b2d9      	uxtb	r1, r3
 800937a:	b909      	cbnz	r1, 8009380 <__lo0bits+0x32>
 800937c:	3008      	adds	r0, #8
 800937e:	0a1b      	lsrs	r3, r3, #8
 8009380:	0719      	lsls	r1, r3, #28
 8009382:	bf04      	itt	eq
 8009384:	091b      	lsreq	r3, r3, #4
 8009386:	3004      	addeq	r0, #4
 8009388:	0799      	lsls	r1, r3, #30
 800938a:	bf04      	itt	eq
 800938c:	089b      	lsreq	r3, r3, #2
 800938e:	3002      	addeq	r0, #2
 8009390:	07d9      	lsls	r1, r3, #31
 8009392:	d403      	bmi.n	800939c <__lo0bits+0x4e>
 8009394:	085b      	lsrs	r3, r3, #1
 8009396:	f100 0001 	add.w	r0, r0, #1
 800939a:	d003      	beq.n	80093a4 <__lo0bits+0x56>
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	4770      	bx	lr
 80093a0:	2000      	movs	r0, #0
 80093a2:	4770      	bx	lr
 80093a4:	2020      	movs	r0, #32
 80093a6:	4770      	bx	lr

080093a8 <__i2b>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	2101      	movs	r1, #1
 80093ae:	f7ff ff07 	bl	80091c0 <_Balloc>
 80093b2:	4602      	mov	r2, r0
 80093b4:	b928      	cbnz	r0, 80093c2 <__i2b+0x1a>
 80093b6:	4b05      	ldr	r3, [pc, #20]	@ (80093cc <__i2b+0x24>)
 80093b8:	4805      	ldr	r0, [pc, #20]	@ (80093d0 <__i2b+0x28>)
 80093ba:	f240 1145 	movw	r1, #325	@ 0x145
 80093be:	f000 fe7b 	bl	800a0b8 <__assert_func>
 80093c2:	2301      	movs	r3, #1
 80093c4:	6144      	str	r4, [r0, #20]
 80093c6:	6103      	str	r3, [r0, #16]
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	bf00      	nop
 80093cc:	0800adfc 	.word	0x0800adfc
 80093d0:	0800ae0d 	.word	0x0800ae0d

080093d4 <__multiply>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	4617      	mov	r7, r2
 80093da:	690a      	ldr	r2, [r1, #16]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	bfa8      	it	ge
 80093e2:	463b      	movge	r3, r7
 80093e4:	4689      	mov	r9, r1
 80093e6:	bfa4      	itt	ge
 80093e8:	460f      	movge	r7, r1
 80093ea:	4699      	movge	r9, r3
 80093ec:	693d      	ldr	r5, [r7, #16]
 80093ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	eb05 060a 	add.w	r6, r5, sl
 80093fa:	42b3      	cmp	r3, r6
 80093fc:	b085      	sub	sp, #20
 80093fe:	bfb8      	it	lt
 8009400:	3101      	addlt	r1, #1
 8009402:	f7ff fedd 	bl	80091c0 <_Balloc>
 8009406:	b930      	cbnz	r0, 8009416 <__multiply+0x42>
 8009408:	4602      	mov	r2, r0
 800940a:	4b41      	ldr	r3, [pc, #260]	@ (8009510 <__multiply+0x13c>)
 800940c:	4841      	ldr	r0, [pc, #260]	@ (8009514 <__multiply+0x140>)
 800940e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009412:	f000 fe51 	bl	800a0b8 <__assert_func>
 8009416:	f100 0414 	add.w	r4, r0, #20
 800941a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800941e:	4623      	mov	r3, r4
 8009420:	2200      	movs	r2, #0
 8009422:	4573      	cmp	r3, lr
 8009424:	d320      	bcc.n	8009468 <__multiply+0x94>
 8009426:	f107 0814 	add.w	r8, r7, #20
 800942a:	f109 0114 	add.w	r1, r9, #20
 800942e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009432:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	1beb      	subs	r3, r5, r7
 800943a:	3b15      	subs	r3, #21
 800943c:	f023 0303 	bic.w	r3, r3, #3
 8009440:	3304      	adds	r3, #4
 8009442:	3715      	adds	r7, #21
 8009444:	42bd      	cmp	r5, r7
 8009446:	bf38      	it	cc
 8009448:	2304      	movcc	r3, #4
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	9b02      	ldr	r3, [sp, #8]
 800944e:	9103      	str	r1, [sp, #12]
 8009450:	428b      	cmp	r3, r1
 8009452:	d80c      	bhi.n	800946e <__multiply+0x9a>
 8009454:	2e00      	cmp	r6, #0
 8009456:	dd03      	ble.n	8009460 <__multiply+0x8c>
 8009458:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800945c:	2b00      	cmp	r3, #0
 800945e:	d055      	beq.n	800950c <__multiply+0x138>
 8009460:	6106      	str	r6, [r0, #16]
 8009462:	b005      	add	sp, #20
 8009464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009468:	f843 2b04 	str.w	r2, [r3], #4
 800946c:	e7d9      	b.n	8009422 <__multiply+0x4e>
 800946e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009472:	f1ba 0f00 	cmp.w	sl, #0
 8009476:	d01f      	beq.n	80094b8 <__multiply+0xe4>
 8009478:	46c4      	mov	ip, r8
 800947a:	46a1      	mov	r9, r4
 800947c:	2700      	movs	r7, #0
 800947e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009482:	f8d9 3000 	ldr.w	r3, [r9]
 8009486:	fa1f fb82 	uxth.w	fp, r2
 800948a:	b29b      	uxth	r3, r3
 800948c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009490:	443b      	add	r3, r7
 8009492:	f8d9 7000 	ldr.w	r7, [r9]
 8009496:	0c12      	lsrs	r2, r2, #16
 8009498:	0c3f      	lsrs	r7, r7, #16
 800949a:	fb0a 7202 	mla	r2, sl, r2, r7
 800949e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a8:	4565      	cmp	r5, ip
 80094aa:	f849 3b04 	str.w	r3, [r9], #4
 80094ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80094b2:	d8e4      	bhi.n	800947e <__multiply+0xaa>
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	50e7      	str	r7, [r4, r3]
 80094b8:	9b03      	ldr	r3, [sp, #12]
 80094ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094be:	3104      	adds	r1, #4
 80094c0:	f1b9 0f00 	cmp.w	r9, #0
 80094c4:	d020      	beq.n	8009508 <__multiply+0x134>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	4647      	mov	r7, r8
 80094ca:	46a4      	mov	ip, r4
 80094cc:	f04f 0a00 	mov.w	sl, #0
 80094d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80094d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80094d8:	fb09 220b 	mla	r2, r9, fp, r2
 80094dc:	4452      	add	r2, sl
 80094de:	b29b      	uxth	r3, r3
 80094e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094e4:	f84c 3b04 	str.w	r3, [ip], #4
 80094e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80094ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80094f4:	fb09 330a 	mla	r3, r9, sl, r3
 80094f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094fc:	42bd      	cmp	r5, r7
 80094fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009502:	d8e5      	bhi.n	80094d0 <__multiply+0xfc>
 8009504:	9a01      	ldr	r2, [sp, #4]
 8009506:	50a3      	str	r3, [r4, r2]
 8009508:	3404      	adds	r4, #4
 800950a:	e79f      	b.n	800944c <__multiply+0x78>
 800950c:	3e01      	subs	r6, #1
 800950e:	e7a1      	b.n	8009454 <__multiply+0x80>
 8009510:	0800adfc 	.word	0x0800adfc
 8009514:	0800ae0d 	.word	0x0800ae0d

08009518 <__pow5mult>:
 8009518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800951c:	4615      	mov	r5, r2
 800951e:	f012 0203 	ands.w	r2, r2, #3
 8009522:	4607      	mov	r7, r0
 8009524:	460e      	mov	r6, r1
 8009526:	d007      	beq.n	8009538 <__pow5mult+0x20>
 8009528:	4c25      	ldr	r4, [pc, #148]	@ (80095c0 <__pow5mult+0xa8>)
 800952a:	3a01      	subs	r2, #1
 800952c:	2300      	movs	r3, #0
 800952e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009532:	f7ff fea7 	bl	8009284 <__multadd>
 8009536:	4606      	mov	r6, r0
 8009538:	10ad      	asrs	r5, r5, #2
 800953a:	d03d      	beq.n	80095b8 <__pow5mult+0xa0>
 800953c:	69fc      	ldr	r4, [r7, #28]
 800953e:	b97c      	cbnz	r4, 8009560 <__pow5mult+0x48>
 8009540:	2010      	movs	r0, #16
 8009542:	f7ff fd87 	bl	8009054 <malloc>
 8009546:	4602      	mov	r2, r0
 8009548:	61f8      	str	r0, [r7, #28]
 800954a:	b928      	cbnz	r0, 8009558 <__pow5mult+0x40>
 800954c:	4b1d      	ldr	r3, [pc, #116]	@ (80095c4 <__pow5mult+0xac>)
 800954e:	481e      	ldr	r0, [pc, #120]	@ (80095c8 <__pow5mult+0xb0>)
 8009550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009554:	f000 fdb0 	bl	800a0b8 <__assert_func>
 8009558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800955c:	6004      	str	r4, [r0, #0]
 800955e:	60c4      	str	r4, [r0, #12]
 8009560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009568:	b94c      	cbnz	r4, 800957e <__pow5mult+0x66>
 800956a:	f240 2171 	movw	r1, #625	@ 0x271
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ff1a 	bl	80093a8 <__i2b>
 8009574:	2300      	movs	r3, #0
 8009576:	f8c8 0008 	str.w	r0, [r8, #8]
 800957a:	4604      	mov	r4, r0
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	f04f 0900 	mov.w	r9, #0
 8009582:	07eb      	lsls	r3, r5, #31
 8009584:	d50a      	bpl.n	800959c <__pow5mult+0x84>
 8009586:	4631      	mov	r1, r6
 8009588:	4622      	mov	r2, r4
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff ff22 	bl	80093d4 <__multiply>
 8009590:	4631      	mov	r1, r6
 8009592:	4680      	mov	r8, r0
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff fe53 	bl	8009240 <_Bfree>
 800959a:	4646      	mov	r6, r8
 800959c:	106d      	asrs	r5, r5, #1
 800959e:	d00b      	beq.n	80095b8 <__pow5mult+0xa0>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	b938      	cbnz	r0, 80095b4 <__pow5mult+0x9c>
 80095a4:	4622      	mov	r2, r4
 80095a6:	4621      	mov	r1, r4
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ff13 	bl	80093d4 <__multiply>
 80095ae:	6020      	str	r0, [r4, #0]
 80095b0:	f8c0 9000 	str.w	r9, [r0]
 80095b4:	4604      	mov	r4, r0
 80095b6:	e7e4      	b.n	8009582 <__pow5mult+0x6a>
 80095b8:	4630      	mov	r0, r6
 80095ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095be:	bf00      	nop
 80095c0:	0800aec0 	.word	0x0800aec0
 80095c4:	0800ad8d 	.word	0x0800ad8d
 80095c8:	0800ae0d 	.word	0x0800ae0d

080095cc <__lshift>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	460c      	mov	r4, r1
 80095d2:	6849      	ldr	r1, [r1, #4]
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	4607      	mov	r7, r0
 80095de:	4691      	mov	r9, r2
 80095e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095e4:	f108 0601 	add.w	r6, r8, #1
 80095e8:	42b3      	cmp	r3, r6
 80095ea:	db0b      	blt.n	8009604 <__lshift+0x38>
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff fde7 	bl	80091c0 <_Balloc>
 80095f2:	4605      	mov	r5, r0
 80095f4:	b948      	cbnz	r0, 800960a <__lshift+0x3e>
 80095f6:	4602      	mov	r2, r0
 80095f8:	4b28      	ldr	r3, [pc, #160]	@ (800969c <__lshift+0xd0>)
 80095fa:	4829      	ldr	r0, [pc, #164]	@ (80096a0 <__lshift+0xd4>)
 80095fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009600:	f000 fd5a 	bl	800a0b8 <__assert_func>
 8009604:	3101      	adds	r1, #1
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	e7ee      	b.n	80095e8 <__lshift+0x1c>
 800960a:	2300      	movs	r3, #0
 800960c:	f100 0114 	add.w	r1, r0, #20
 8009610:	f100 0210 	add.w	r2, r0, #16
 8009614:	4618      	mov	r0, r3
 8009616:	4553      	cmp	r3, sl
 8009618:	db33      	blt.n	8009682 <__lshift+0xb6>
 800961a:	6920      	ldr	r0, [r4, #16]
 800961c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009620:	f104 0314 	add.w	r3, r4, #20
 8009624:	f019 091f 	ands.w	r9, r9, #31
 8009628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800962c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009630:	d02b      	beq.n	800968a <__lshift+0xbe>
 8009632:	f1c9 0e20 	rsb	lr, r9, #32
 8009636:	468a      	mov	sl, r1
 8009638:	2200      	movs	r2, #0
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	fa00 f009 	lsl.w	r0, r0, r9
 8009640:	4310      	orrs	r0, r2
 8009642:	f84a 0b04 	str.w	r0, [sl], #4
 8009646:	f853 2b04 	ldr.w	r2, [r3], #4
 800964a:	459c      	cmp	ip, r3
 800964c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009650:	d8f3      	bhi.n	800963a <__lshift+0x6e>
 8009652:	ebac 0304 	sub.w	r3, ip, r4
 8009656:	3b15      	subs	r3, #21
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	3304      	adds	r3, #4
 800965e:	f104 0015 	add.w	r0, r4, #21
 8009662:	4560      	cmp	r0, ip
 8009664:	bf88      	it	hi
 8009666:	2304      	movhi	r3, #4
 8009668:	50ca      	str	r2, [r1, r3]
 800966a:	b10a      	cbz	r2, 8009670 <__lshift+0xa4>
 800966c:	f108 0602 	add.w	r6, r8, #2
 8009670:	3e01      	subs	r6, #1
 8009672:	4638      	mov	r0, r7
 8009674:	612e      	str	r6, [r5, #16]
 8009676:	4621      	mov	r1, r4
 8009678:	f7ff fde2 	bl	8009240 <_Bfree>
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	f842 0f04 	str.w	r0, [r2, #4]!
 8009686:	3301      	adds	r3, #1
 8009688:	e7c5      	b.n	8009616 <__lshift+0x4a>
 800968a:	3904      	subs	r1, #4
 800968c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009690:	f841 2f04 	str.w	r2, [r1, #4]!
 8009694:	459c      	cmp	ip, r3
 8009696:	d8f9      	bhi.n	800968c <__lshift+0xc0>
 8009698:	e7ea      	b.n	8009670 <__lshift+0xa4>
 800969a:	bf00      	nop
 800969c:	0800adfc 	.word	0x0800adfc
 80096a0:	0800ae0d 	.word	0x0800ae0d

080096a4 <__mcmp>:
 80096a4:	690a      	ldr	r2, [r1, #16]
 80096a6:	4603      	mov	r3, r0
 80096a8:	6900      	ldr	r0, [r0, #16]
 80096aa:	1a80      	subs	r0, r0, r2
 80096ac:	b530      	push	{r4, r5, lr}
 80096ae:	d10e      	bne.n	80096ce <__mcmp+0x2a>
 80096b0:	3314      	adds	r3, #20
 80096b2:	3114      	adds	r1, #20
 80096b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096c4:	4295      	cmp	r5, r2
 80096c6:	d003      	beq.n	80096d0 <__mcmp+0x2c>
 80096c8:	d205      	bcs.n	80096d6 <__mcmp+0x32>
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	bd30      	pop	{r4, r5, pc}
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d3f3      	bcc.n	80096bc <__mcmp+0x18>
 80096d4:	e7fb      	b.n	80096ce <__mcmp+0x2a>
 80096d6:	2001      	movs	r0, #1
 80096d8:	e7f9      	b.n	80096ce <__mcmp+0x2a>
	...

080096dc <__mdiff>:
 80096dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	4689      	mov	r9, r1
 80096e2:	4606      	mov	r6, r0
 80096e4:	4611      	mov	r1, r2
 80096e6:	4648      	mov	r0, r9
 80096e8:	4614      	mov	r4, r2
 80096ea:	f7ff ffdb 	bl	80096a4 <__mcmp>
 80096ee:	1e05      	subs	r5, r0, #0
 80096f0:	d112      	bne.n	8009718 <__mdiff+0x3c>
 80096f2:	4629      	mov	r1, r5
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff fd63 	bl	80091c0 <_Balloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	b928      	cbnz	r0, 800970a <__mdiff+0x2e>
 80096fe:	4b3f      	ldr	r3, [pc, #252]	@ (80097fc <__mdiff+0x120>)
 8009700:	f240 2137 	movw	r1, #567	@ 0x237
 8009704:	483e      	ldr	r0, [pc, #248]	@ (8009800 <__mdiff+0x124>)
 8009706:	f000 fcd7 	bl	800a0b8 <__assert_func>
 800970a:	2301      	movs	r3, #1
 800970c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009710:	4610      	mov	r0, r2
 8009712:	b003      	add	sp, #12
 8009714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009718:	bfbc      	itt	lt
 800971a:	464b      	movlt	r3, r9
 800971c:	46a1      	movlt	r9, r4
 800971e:	4630      	mov	r0, r6
 8009720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009724:	bfba      	itte	lt
 8009726:	461c      	movlt	r4, r3
 8009728:	2501      	movlt	r5, #1
 800972a:	2500      	movge	r5, #0
 800972c:	f7ff fd48 	bl	80091c0 <_Balloc>
 8009730:	4602      	mov	r2, r0
 8009732:	b918      	cbnz	r0, 800973c <__mdiff+0x60>
 8009734:	4b31      	ldr	r3, [pc, #196]	@ (80097fc <__mdiff+0x120>)
 8009736:	f240 2145 	movw	r1, #581	@ 0x245
 800973a:	e7e3      	b.n	8009704 <__mdiff+0x28>
 800973c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009740:	6926      	ldr	r6, [r4, #16]
 8009742:	60c5      	str	r5, [r0, #12]
 8009744:	f109 0310 	add.w	r3, r9, #16
 8009748:	f109 0514 	add.w	r5, r9, #20
 800974c:	f104 0e14 	add.w	lr, r4, #20
 8009750:	f100 0b14 	add.w	fp, r0, #20
 8009754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	46d9      	mov	r9, fp
 8009760:	f04f 0c00 	mov.w	ip, #0
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800976a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	fa1f f38a 	uxth.w	r3, sl
 8009774:	4619      	mov	r1, r3
 8009776:	b283      	uxth	r3, r0
 8009778:	1acb      	subs	r3, r1, r3
 800977a:	0c00      	lsrs	r0, r0, #16
 800977c:	4463      	add	r3, ip
 800977e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009786:	b29b      	uxth	r3, r3
 8009788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800978c:	4576      	cmp	r6, lr
 800978e:	f849 3b04 	str.w	r3, [r9], #4
 8009792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009796:	d8e5      	bhi.n	8009764 <__mdiff+0x88>
 8009798:	1b33      	subs	r3, r6, r4
 800979a:	3b15      	subs	r3, #21
 800979c:	f023 0303 	bic.w	r3, r3, #3
 80097a0:	3415      	adds	r4, #21
 80097a2:	3304      	adds	r3, #4
 80097a4:	42a6      	cmp	r6, r4
 80097a6:	bf38      	it	cc
 80097a8:	2304      	movcc	r3, #4
 80097aa:	441d      	add	r5, r3
 80097ac:	445b      	add	r3, fp
 80097ae:	461e      	mov	r6, r3
 80097b0:	462c      	mov	r4, r5
 80097b2:	4544      	cmp	r4, r8
 80097b4:	d30e      	bcc.n	80097d4 <__mdiff+0xf8>
 80097b6:	f108 0103 	add.w	r1, r8, #3
 80097ba:	1b49      	subs	r1, r1, r5
 80097bc:	f021 0103 	bic.w	r1, r1, #3
 80097c0:	3d03      	subs	r5, #3
 80097c2:	45a8      	cmp	r8, r5
 80097c4:	bf38      	it	cc
 80097c6:	2100      	movcc	r1, #0
 80097c8:	440b      	add	r3, r1
 80097ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ce:	b191      	cbz	r1, 80097f6 <__mdiff+0x11a>
 80097d0:	6117      	str	r7, [r2, #16]
 80097d2:	e79d      	b.n	8009710 <__mdiff+0x34>
 80097d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80097d8:	46e6      	mov	lr, ip
 80097da:	0c08      	lsrs	r0, r1, #16
 80097dc:	fa1c fc81 	uxtah	ip, ip, r1
 80097e0:	4471      	add	r1, lr
 80097e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80097e6:	b289      	uxth	r1, r1
 80097e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097ec:	f846 1b04 	str.w	r1, [r6], #4
 80097f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097f4:	e7dd      	b.n	80097b2 <__mdiff+0xd6>
 80097f6:	3f01      	subs	r7, #1
 80097f8:	e7e7      	b.n	80097ca <__mdiff+0xee>
 80097fa:	bf00      	nop
 80097fc:	0800adfc 	.word	0x0800adfc
 8009800:	0800ae0d 	.word	0x0800ae0d

08009804 <__d2b>:
 8009804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009808:	460f      	mov	r7, r1
 800980a:	2101      	movs	r1, #1
 800980c:	ec59 8b10 	vmov	r8, r9, d0
 8009810:	4616      	mov	r6, r2
 8009812:	f7ff fcd5 	bl	80091c0 <_Balloc>
 8009816:	4604      	mov	r4, r0
 8009818:	b930      	cbnz	r0, 8009828 <__d2b+0x24>
 800981a:	4602      	mov	r2, r0
 800981c:	4b23      	ldr	r3, [pc, #140]	@ (80098ac <__d2b+0xa8>)
 800981e:	4824      	ldr	r0, [pc, #144]	@ (80098b0 <__d2b+0xac>)
 8009820:	f240 310f 	movw	r1, #783	@ 0x30f
 8009824:	f000 fc48 	bl	800a0b8 <__assert_func>
 8009828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800982c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009830:	b10d      	cbz	r5, 8009836 <__d2b+0x32>
 8009832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	f1b8 0300 	subs.w	r3, r8, #0
 800983c:	d023      	beq.n	8009886 <__d2b+0x82>
 800983e:	4668      	mov	r0, sp
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	f7ff fd84 	bl	800934e <__lo0bits>
 8009846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800984a:	b1d0      	cbz	r0, 8009882 <__d2b+0x7e>
 800984c:	f1c0 0320 	rsb	r3, r0, #32
 8009850:	fa02 f303 	lsl.w	r3, r2, r3
 8009854:	430b      	orrs	r3, r1
 8009856:	40c2      	lsrs	r2, r0
 8009858:	6163      	str	r3, [r4, #20]
 800985a:	9201      	str	r2, [sp, #4]
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	61a3      	str	r3, [r4, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	bf0c      	ite	eq
 8009864:	2201      	moveq	r2, #1
 8009866:	2202      	movne	r2, #2
 8009868:	6122      	str	r2, [r4, #16]
 800986a:	b1a5      	cbz	r5, 8009896 <__d2b+0x92>
 800986c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009870:	4405      	add	r5, r0
 8009872:	603d      	str	r5, [r7, #0]
 8009874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009878:	6030      	str	r0, [r6, #0]
 800987a:	4620      	mov	r0, r4
 800987c:	b003      	add	sp, #12
 800987e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009882:	6161      	str	r1, [r4, #20]
 8009884:	e7ea      	b.n	800985c <__d2b+0x58>
 8009886:	a801      	add	r0, sp, #4
 8009888:	f7ff fd61 	bl	800934e <__lo0bits>
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	6163      	str	r3, [r4, #20]
 8009890:	3020      	adds	r0, #32
 8009892:	2201      	movs	r2, #1
 8009894:	e7e8      	b.n	8009868 <__d2b+0x64>
 8009896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800989a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800989e:	6038      	str	r0, [r7, #0]
 80098a0:	6918      	ldr	r0, [r3, #16]
 80098a2:	f7ff fd35 	bl	8009310 <__hi0bits>
 80098a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098aa:	e7e5      	b.n	8009878 <__d2b+0x74>
 80098ac:	0800adfc 	.word	0x0800adfc
 80098b0:	0800ae0d 	.word	0x0800ae0d

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	461f      	mov	r7, r3
 80098bc:	42be      	cmp	r6, r7
 80098be:	680b      	ldr	r3, [r1, #0]
 80098c0:	4682      	mov	sl, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4690      	mov	r8, r2
 80098c6:	d82d      	bhi.n	8009924 <__ssputs_r+0x70>
 80098c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098d0:	d026      	beq.n	8009920 <__ssputs_r+0x6c>
 80098d2:	6965      	ldr	r5, [r4, #20]
 80098d4:	6909      	ldr	r1, [r1, #16]
 80098d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098da:	eba3 0901 	sub.w	r9, r3, r1
 80098de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e2:	1c7b      	adds	r3, r7, #1
 80098e4:	444b      	add	r3, r9
 80098e6:	106d      	asrs	r5, r5, #1
 80098e8:	429d      	cmp	r5, r3
 80098ea:	bf38      	it	cc
 80098ec:	461d      	movcc	r5, r3
 80098ee:	0553      	lsls	r3, r2, #21
 80098f0:	d527      	bpl.n	8009942 <__ssputs_r+0x8e>
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7ff fbd8 	bl	80090a8 <_malloc_r>
 80098f8:	4606      	mov	r6, r0
 80098fa:	b360      	cbz	r0, 8009956 <__ssputs_r+0xa2>
 80098fc:	6921      	ldr	r1, [r4, #16]
 80098fe:	464a      	mov	r2, r9
 8009900:	f000 fbcc 	bl	800a09c <memcpy>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800990a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	6126      	str	r6, [r4, #16]
 8009912:	6165      	str	r5, [r4, #20]
 8009914:	444e      	add	r6, r9
 8009916:	eba5 0509 	sub.w	r5, r5, r9
 800991a:	6026      	str	r6, [r4, #0]
 800991c:	60a5      	str	r5, [r4, #8]
 800991e:	463e      	mov	r6, r7
 8009920:	42be      	cmp	r6, r7
 8009922:	d900      	bls.n	8009926 <__ssputs_r+0x72>
 8009924:	463e      	mov	r6, r7
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	4632      	mov	r2, r6
 800992a:	4641      	mov	r1, r8
 800992c:	f000 fb6a 	bl	800a004 <memmove>
 8009930:	68a3      	ldr	r3, [r4, #8]
 8009932:	1b9b      	subs	r3, r3, r6
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	4433      	add	r3, r6
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	2000      	movs	r0, #0
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009942:	462a      	mov	r2, r5
 8009944:	f000 fbfc 	bl	800a140 <_realloc_r>
 8009948:	4606      	mov	r6, r0
 800994a:	2800      	cmp	r0, #0
 800994c:	d1e0      	bne.n	8009910 <__ssputs_r+0x5c>
 800994e:	6921      	ldr	r1, [r4, #16]
 8009950:	4650      	mov	r0, sl
 8009952:	f7ff fb35 	bl	8008fc0 <_free_r>
 8009956:	230c      	movs	r3, #12
 8009958:	f8ca 3000 	str.w	r3, [sl]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	e7e9      	b.n	800993e <__ssputs_r+0x8a>
	...

0800996c <_svfiprintf_r>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	4698      	mov	r8, r3
 8009972:	898b      	ldrh	r3, [r1, #12]
 8009974:	061b      	lsls	r3, r3, #24
 8009976:	b09d      	sub	sp, #116	@ 0x74
 8009978:	4607      	mov	r7, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4614      	mov	r4, r2
 800997e:	d510      	bpl.n	80099a2 <_svfiprintf_r+0x36>
 8009980:	690b      	ldr	r3, [r1, #16]
 8009982:	b973      	cbnz	r3, 80099a2 <_svfiprintf_r+0x36>
 8009984:	2140      	movs	r1, #64	@ 0x40
 8009986:	f7ff fb8f 	bl	80090a8 <_malloc_r>
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	6128      	str	r0, [r5, #16]
 800998e:	b930      	cbnz	r0, 800999e <_svfiprintf_r+0x32>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	b01d      	add	sp, #116	@ 0x74
 800999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999e:	2340      	movs	r3, #64	@ 0x40
 80099a0:	616b      	str	r3, [r5, #20]
 80099a2:	2300      	movs	r3, #0
 80099a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a6:	2320      	movs	r3, #32
 80099a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b0:	2330      	movs	r3, #48	@ 0x30
 80099b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b50 <_svfiprintf_r+0x1e4>
 80099b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099ba:	f04f 0901 	mov.w	r9, #1
 80099be:	4623      	mov	r3, r4
 80099c0:	469a      	mov	sl, r3
 80099c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c6:	b10a      	cbz	r2, 80099cc <_svfiprintf_r+0x60>
 80099c8:	2a25      	cmp	r2, #37	@ 0x25
 80099ca:	d1f9      	bne.n	80099c0 <_svfiprintf_r+0x54>
 80099cc:	ebba 0b04 	subs.w	fp, sl, r4
 80099d0:	d00b      	beq.n	80099ea <_svfiprintf_r+0x7e>
 80099d2:	465b      	mov	r3, fp
 80099d4:	4622      	mov	r2, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ff6b 	bl	80098b4 <__ssputs_r>
 80099de:	3001      	adds	r0, #1
 80099e0:	f000 80a7 	beq.w	8009b32 <_svfiprintf_r+0x1c6>
 80099e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e6:	445a      	add	r2, fp
 80099e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ea:	f89a 3000 	ldrb.w	r3, [sl]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 809f 	beq.w	8009b32 <_svfiprintf_r+0x1c6>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fe:	f10a 0a01 	add.w	sl, sl, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	9307      	str	r3, [sp, #28]
 8009a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a0c:	4654      	mov	r4, sl
 8009a0e:	2205      	movs	r2, #5
 8009a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a14:	484e      	ldr	r0, [pc, #312]	@ (8009b50 <_svfiprintf_r+0x1e4>)
 8009a16:	f7f6 fc03 	bl	8000220 <memchr>
 8009a1a:	9a04      	ldr	r2, [sp, #16]
 8009a1c:	b9d8      	cbnz	r0, 8009a56 <_svfiprintf_r+0xea>
 8009a1e:	06d0      	lsls	r0, r2, #27
 8009a20:	bf44      	itt	mi
 8009a22:	2320      	movmi	r3, #32
 8009a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a28:	0711      	lsls	r1, r2, #28
 8009a2a:	bf44      	itt	mi
 8009a2c:	232b      	movmi	r3, #43	@ 0x2b
 8009a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a32:	f89a 3000 	ldrb.w	r3, [sl]
 8009a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a38:	d015      	beq.n	8009a66 <_svfiprintf_r+0xfa>
 8009a3a:	9a07      	ldr	r2, [sp, #28]
 8009a3c:	4654      	mov	r4, sl
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f04f 0c0a 	mov.w	ip, #10
 8009a44:	4621      	mov	r1, r4
 8009a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4a:	3b30      	subs	r3, #48	@ 0x30
 8009a4c:	2b09      	cmp	r3, #9
 8009a4e:	d94b      	bls.n	8009ae8 <_svfiprintf_r+0x17c>
 8009a50:	b1b0      	cbz	r0, 8009a80 <_svfiprintf_r+0x114>
 8009a52:	9207      	str	r2, [sp, #28]
 8009a54:	e014      	b.n	8009a80 <_svfiprintf_r+0x114>
 8009a56:	eba0 0308 	sub.w	r3, r0, r8
 8009a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	46a2      	mov	sl, r4
 8009a64:	e7d2      	b.n	8009a0c <_svfiprintf_r+0xa0>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	1d19      	adds	r1, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9103      	str	r1, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfbb      	ittet	lt
 8009a72:	425b      	neglt	r3, r3
 8009a74:	f042 0202 	orrlt.w	r2, r2, #2
 8009a78:	9307      	strge	r3, [sp, #28]
 8009a7a:	9307      	strlt	r3, [sp, #28]
 8009a7c:	bfb8      	it	lt
 8009a7e:	9204      	strlt	r2, [sp, #16]
 8009a80:	7823      	ldrb	r3, [r4, #0]
 8009a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a84:	d10a      	bne.n	8009a9c <_svfiprintf_r+0x130>
 8009a86:	7863      	ldrb	r3, [r4, #1]
 8009a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8a:	d132      	bne.n	8009af2 <_svfiprintf_r+0x186>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	9203      	str	r2, [sp, #12]
 8009a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a98:	3402      	adds	r4, #2
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b60 <_svfiprintf_r+0x1f4>
 8009aa0:	7821      	ldrb	r1, [r4, #0]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	f7f6 fbbb 	bl	8000220 <memchr>
 8009aaa:	b138      	cbz	r0, 8009abc <_svfiprintf_r+0x150>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	eba0 000a 	sub.w	r0, r0, sl
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	4082      	lsls	r2, r0
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	3401      	adds	r4, #1
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac0:	4824      	ldr	r0, [pc, #144]	@ (8009b54 <_svfiprintf_r+0x1e8>)
 8009ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ac6:	2206      	movs	r2, #6
 8009ac8:	f7f6 fbaa 	bl	8000220 <memchr>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d036      	beq.n	8009b3e <_svfiprintf_r+0x1d2>
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <_svfiprintf_r+0x1ec>)
 8009ad2:	bb1b      	cbnz	r3, 8009b1c <_svfiprintf_r+0x1b0>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	3307      	adds	r3, #7
 8009ad8:	f023 0307 	bic.w	r3, r3, #7
 8009adc:	3308      	adds	r3, #8
 8009ade:	9303      	str	r3, [sp, #12]
 8009ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae2:	4433      	add	r3, r6
 8009ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae6:	e76a      	b.n	80099be <_svfiprintf_r+0x52>
 8009ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aec:	460c      	mov	r4, r1
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7a8      	b.n	8009a44 <_svfiprintf_r+0xd8>
 8009af2:	2300      	movs	r3, #0
 8009af4:	3401      	adds	r4, #1
 8009af6:	9305      	str	r3, [sp, #20]
 8009af8:	4619      	mov	r1, r3
 8009afa:	f04f 0c0a 	mov.w	ip, #10
 8009afe:	4620      	mov	r0, r4
 8009b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b04:	3a30      	subs	r2, #48	@ 0x30
 8009b06:	2a09      	cmp	r2, #9
 8009b08:	d903      	bls.n	8009b12 <_svfiprintf_r+0x1a6>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0c6      	beq.n	8009a9c <_svfiprintf_r+0x130>
 8009b0e:	9105      	str	r1, [sp, #20]
 8009b10:	e7c4      	b.n	8009a9c <_svfiprintf_r+0x130>
 8009b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b16:	4604      	mov	r4, r0
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7f0      	b.n	8009afe <_svfiprintf_r+0x192>
 8009b1c:	ab03      	add	r3, sp, #12
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	462a      	mov	r2, r5
 8009b22:	4b0e      	ldr	r3, [pc, #56]	@ (8009b5c <_svfiprintf_r+0x1f0>)
 8009b24:	a904      	add	r1, sp, #16
 8009b26:	4638      	mov	r0, r7
 8009b28:	f7fd fd7a 	bl	8007620 <_printf_float>
 8009b2c:	1c42      	adds	r2, r0, #1
 8009b2e:	4606      	mov	r6, r0
 8009b30:	d1d6      	bne.n	8009ae0 <_svfiprintf_r+0x174>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	065b      	lsls	r3, r3, #25
 8009b36:	f53f af2d 	bmi.w	8009994 <_svfiprintf_r+0x28>
 8009b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3c:	e72c      	b.n	8009998 <_svfiprintf_r+0x2c>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <_svfiprintf_r+0x1f0>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7fe f801 	bl	8007b50 <_printf_i>
 8009b4e:	e7ed      	b.n	8009b2c <_svfiprintf_r+0x1c0>
 8009b50:	0800ae66 	.word	0x0800ae66
 8009b54:	0800ae70 	.word	0x0800ae70
 8009b58:	08007621 	.word	0x08007621
 8009b5c:	080098b5 	.word	0x080098b5
 8009b60:	0800ae6c 	.word	0x0800ae6c

08009b64 <__sfputc_r>:
 8009b64:	6893      	ldr	r3, [r2, #8]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	b410      	push	{r4}
 8009b6c:	6093      	str	r3, [r2, #8]
 8009b6e:	da08      	bge.n	8009b82 <__sfputc_r+0x1e>
 8009b70:	6994      	ldr	r4, [r2, #24]
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	db01      	blt.n	8009b7a <__sfputc_r+0x16>
 8009b76:	290a      	cmp	r1, #10
 8009b78:	d103      	bne.n	8009b82 <__sfputc_r+0x1e>
 8009b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b7e:	f7fe bab0 	b.w	80080e2 <__swbuf_r>
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	1c58      	adds	r0, r3, #1
 8009b86:	6010      	str	r0, [r2, #0]
 8009b88:	7019      	strb	r1, [r3, #0]
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <__sfputs_r>:
 8009b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	18d5      	adds	r5, r2, r3
 8009b9c:	42ac      	cmp	r4, r5
 8009b9e:	d101      	bne.n	8009ba4 <__sfputs_r+0x12>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e007      	b.n	8009bb4 <__sfputs_r+0x22>
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	463a      	mov	r2, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff ffda 	bl	8009b64 <__sfputc_r>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d1f3      	bne.n	8009b9c <__sfputs_r+0xa>
 8009bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bb8 <_vfiprintf_r>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	b09d      	sub	sp, #116	@ 0x74
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	4698      	mov	r8, r3
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	b118      	cbz	r0, 8009bd0 <_vfiprintf_r+0x18>
 8009bc8:	6a03      	ldr	r3, [r0, #32]
 8009bca:	b90b      	cbnz	r3, 8009bd0 <_vfiprintf_r+0x18>
 8009bcc:	f7fe f96a 	bl	8007ea4 <__sinit>
 8009bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bd2:	07d9      	lsls	r1, r3, #31
 8009bd4:	d405      	bmi.n	8009be2 <_vfiprintf_r+0x2a>
 8009bd6:	89ab      	ldrh	r3, [r5, #12]
 8009bd8:	059a      	lsls	r2, r3, #22
 8009bda:	d402      	bmi.n	8009be2 <_vfiprintf_r+0x2a>
 8009bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bde:	f7fe fb92 	bl	8008306 <__retarget_lock_acquire_recursive>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	071b      	lsls	r3, r3, #28
 8009be6:	d501      	bpl.n	8009bec <_vfiprintf_r+0x34>
 8009be8:	692b      	ldr	r3, [r5, #16]
 8009bea:	b99b      	cbnz	r3, 8009c14 <_vfiprintf_r+0x5c>
 8009bec:	4629      	mov	r1, r5
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7fe fab6 	bl	8008160 <__swsetup_r>
 8009bf4:	b170      	cbz	r0, 8009c14 <_vfiprintf_r+0x5c>
 8009bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf8:	07dc      	lsls	r4, r3, #31
 8009bfa:	d504      	bpl.n	8009c06 <_vfiprintf_r+0x4e>
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009c00:	b01d      	add	sp, #116	@ 0x74
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	0598      	lsls	r0, r3, #22
 8009c0a:	d4f7      	bmi.n	8009bfc <_vfiprintf_r+0x44>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c0e:	f7fe fb7b 	bl	8008308 <__retarget_lock_release_recursive>
 8009c12:	e7f3      	b.n	8009bfc <_vfiprintf_r+0x44>
 8009c14:	2300      	movs	r3, #0
 8009c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c22:	2330      	movs	r3, #48	@ 0x30
 8009c24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dd4 <_vfiprintf_r+0x21c>
 8009c28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c2c:	f04f 0901 	mov.w	r9, #1
 8009c30:	4623      	mov	r3, r4
 8009c32:	469a      	mov	sl, r3
 8009c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c38:	b10a      	cbz	r2, 8009c3e <_vfiprintf_r+0x86>
 8009c3a:	2a25      	cmp	r2, #37	@ 0x25
 8009c3c:	d1f9      	bne.n	8009c32 <_vfiprintf_r+0x7a>
 8009c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c42:	d00b      	beq.n	8009c5c <_vfiprintf_r+0xa4>
 8009c44:	465b      	mov	r3, fp
 8009c46:	4622      	mov	r2, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ffa1 	bl	8009b92 <__sfputs_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	f000 80a7 	beq.w	8009da4 <_vfiprintf_r+0x1ec>
 8009c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c58:	445a      	add	r2, fp
 8009c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 809f 	beq.w	8009da4 <_vfiprintf_r+0x1ec>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c70:	f10a 0a01 	add.w	sl, sl, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2205      	movs	r2, #5
 8009c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c86:	4853      	ldr	r0, [pc, #332]	@ (8009dd4 <_vfiprintf_r+0x21c>)
 8009c88:	f7f6 faca 	bl	8000220 <memchr>
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	b9d8      	cbnz	r0, 8009cc8 <_vfiprintf_r+0x110>
 8009c90:	06d1      	lsls	r1, r2, #27
 8009c92:	bf44      	itt	mi
 8009c94:	2320      	movmi	r3, #32
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9a:	0713      	lsls	r3, r2, #28
 8009c9c:	bf44      	itt	mi
 8009c9e:	232b      	movmi	r3, #43	@ 0x2b
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009caa:	d015      	beq.n	8009cd8 <_vfiprintf_r+0x120>
 8009cac:	9a07      	ldr	r2, [sp, #28]
 8009cae:	4654      	mov	r4, sl
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f04f 0c0a 	mov.w	ip, #10
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cbc:	3b30      	subs	r3, #48	@ 0x30
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d94b      	bls.n	8009d5a <_vfiprintf_r+0x1a2>
 8009cc2:	b1b0      	cbz	r0, 8009cf2 <_vfiprintf_r+0x13a>
 8009cc4:	9207      	str	r2, [sp, #28]
 8009cc6:	e014      	b.n	8009cf2 <_vfiprintf_r+0x13a>
 8009cc8:	eba0 0308 	sub.w	r3, r0, r8
 8009ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	46a2      	mov	sl, r4
 8009cd6:	e7d2      	b.n	8009c7e <_vfiprintf_r+0xc6>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	1d19      	adds	r1, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	9103      	str	r1, [sp, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfbb      	ittet	lt
 8009ce4:	425b      	neglt	r3, r3
 8009ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cea:	9307      	strge	r3, [sp, #28]
 8009cec:	9307      	strlt	r3, [sp, #28]
 8009cee:	bfb8      	it	lt
 8009cf0:	9204      	strlt	r2, [sp, #16]
 8009cf2:	7823      	ldrb	r3, [r4, #0]
 8009cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf6:	d10a      	bne.n	8009d0e <_vfiprintf_r+0x156>
 8009cf8:	7863      	ldrb	r3, [r4, #1]
 8009cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cfc:	d132      	bne.n	8009d64 <_vfiprintf_r+0x1ac>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	1d1a      	adds	r2, r3, #4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	9203      	str	r2, [sp, #12]
 8009d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d0a:	3402      	adds	r4, #2
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009de4 <_vfiprintf_r+0x22c>
 8009d12:	7821      	ldrb	r1, [r4, #0]
 8009d14:	2203      	movs	r2, #3
 8009d16:	4650      	mov	r0, sl
 8009d18:	f7f6 fa82 	bl	8000220 <memchr>
 8009d1c:	b138      	cbz	r0, 8009d2e <_vfiprintf_r+0x176>
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	eba0 000a 	sub.w	r0, r0, sl
 8009d24:	2240      	movs	r2, #64	@ 0x40
 8009d26:	4082      	lsls	r2, r0
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4829      	ldr	r0, [pc, #164]	@ (8009dd8 <_vfiprintf_r+0x220>)
 8009d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d38:	2206      	movs	r2, #6
 8009d3a:	f7f6 fa71 	bl	8000220 <memchr>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d03f      	beq.n	8009dc2 <_vfiprintf_r+0x20a>
 8009d42:	4b26      	ldr	r3, [pc, #152]	@ (8009ddc <_vfiprintf_r+0x224>)
 8009d44:	bb1b      	cbnz	r3, 8009d8e <_vfiprintf_r+0x1d6>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	3307      	adds	r3, #7
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	3308      	adds	r3, #8
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	443b      	add	r3, r7
 8009d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d58:	e76a      	b.n	8009c30 <_vfiprintf_r+0x78>
 8009d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5e:	460c      	mov	r4, r1
 8009d60:	2001      	movs	r0, #1
 8009d62:	e7a8      	b.n	8009cb6 <_vfiprintf_r+0xfe>
 8009d64:	2300      	movs	r3, #0
 8009d66:	3401      	adds	r4, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f04f 0c0a 	mov.w	ip, #10
 8009d70:	4620      	mov	r0, r4
 8009d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d76:	3a30      	subs	r2, #48	@ 0x30
 8009d78:	2a09      	cmp	r2, #9
 8009d7a:	d903      	bls.n	8009d84 <_vfiprintf_r+0x1cc>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0c6      	beq.n	8009d0e <_vfiprintf_r+0x156>
 8009d80:	9105      	str	r1, [sp, #20]
 8009d82:	e7c4      	b.n	8009d0e <_vfiprintf_r+0x156>
 8009d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d88:	4604      	mov	r4, r0
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7f0      	b.n	8009d70 <_vfiprintf_r+0x1b8>
 8009d8e:	ab03      	add	r3, sp, #12
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	462a      	mov	r2, r5
 8009d94:	4b12      	ldr	r3, [pc, #72]	@ (8009de0 <_vfiprintf_r+0x228>)
 8009d96:	a904      	add	r1, sp, #16
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7fd fc41 	bl	8007620 <_printf_float>
 8009d9e:	4607      	mov	r7, r0
 8009da0:	1c78      	adds	r0, r7, #1
 8009da2:	d1d6      	bne.n	8009d52 <_vfiprintf_r+0x19a>
 8009da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009da6:	07d9      	lsls	r1, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_vfiprintf_r+0x1fe>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	059a      	lsls	r2, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_vfiprintf_r+0x1fe>
 8009db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009db2:	f7fe faa9 	bl	8008308 <__retarget_lock_release_recursive>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	065b      	lsls	r3, r3, #25
 8009dba:	f53f af1f 	bmi.w	8009bfc <_vfiprintf_r+0x44>
 8009dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dc0:	e71e      	b.n	8009c00 <_vfiprintf_r+0x48>
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <_vfiprintf_r+0x228>)
 8009dca:	a904      	add	r1, sp, #16
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7fd febf 	bl	8007b50 <_printf_i>
 8009dd2:	e7e4      	b.n	8009d9e <_vfiprintf_r+0x1e6>
 8009dd4:	0800ae66 	.word	0x0800ae66
 8009dd8:	0800ae70 	.word	0x0800ae70
 8009ddc:	08007621 	.word	0x08007621
 8009de0:	08009b93 	.word	0x08009b93
 8009de4:	0800ae6c 	.word	0x0800ae6c

08009de8 <__sflush_r>:
 8009de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	0716      	lsls	r6, r2, #28
 8009df2:	4605      	mov	r5, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	d454      	bmi.n	8009ea2 <__sflush_r+0xba>
 8009df8:	684b      	ldr	r3, [r1, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dc02      	bgt.n	8009e04 <__sflush_r+0x1c>
 8009dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dd48      	ble.n	8009e96 <__sflush_r+0xae>
 8009e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	d045      	beq.n	8009e96 <__sflush_r+0xae>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e10:	682f      	ldr	r7, [r5, #0]
 8009e12:	6a21      	ldr	r1, [r4, #32]
 8009e14:	602b      	str	r3, [r5, #0]
 8009e16:	d030      	beq.n	8009e7a <__sflush_r+0x92>
 8009e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	0759      	lsls	r1, r3, #29
 8009e1e:	d505      	bpl.n	8009e2c <__sflush_r+0x44>
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	1ad2      	subs	r2, r2, r3
 8009e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e26:	b10b      	cbz	r3, 8009e2c <__sflush_r+0x44>
 8009e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e30:	6a21      	ldr	r1, [r4, #32]
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b0      	blx	r6
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	d106      	bne.n	8009e4a <__sflush_r+0x62>
 8009e3c:	6829      	ldr	r1, [r5, #0]
 8009e3e:	291d      	cmp	r1, #29
 8009e40:	d82b      	bhi.n	8009e9a <__sflush_r+0xb2>
 8009e42:	4a2a      	ldr	r2, [pc, #168]	@ (8009eec <__sflush_r+0x104>)
 8009e44:	40ca      	lsrs	r2, r1
 8009e46:	07d6      	lsls	r6, r2, #31
 8009e48:	d527      	bpl.n	8009e9a <__sflush_r+0xb2>
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	6062      	str	r2, [r4, #4]
 8009e4e:	04d9      	lsls	r1, r3, #19
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	6022      	str	r2, [r4, #0]
 8009e54:	d504      	bpl.n	8009e60 <__sflush_r+0x78>
 8009e56:	1c42      	adds	r2, r0, #1
 8009e58:	d101      	bne.n	8009e5e <__sflush_r+0x76>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b903      	cbnz	r3, 8009e60 <__sflush_r+0x78>
 8009e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e62:	602f      	str	r7, [r5, #0]
 8009e64:	b1b9      	cbz	r1, 8009e96 <__sflush_r+0xae>
 8009e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	d002      	beq.n	8009e74 <__sflush_r+0x8c>
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7ff f8a6 	bl	8008fc0 <_free_r>
 8009e74:	2300      	movs	r3, #0
 8009e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e78:	e00d      	b.n	8009e96 <__sflush_r+0xae>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b0      	blx	r6
 8009e80:	4602      	mov	r2, r0
 8009e82:	1c50      	adds	r0, r2, #1
 8009e84:	d1c9      	bne.n	8009e1a <__sflush_r+0x32>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0c6      	beq.n	8009e1a <__sflush_r+0x32>
 8009e8c:	2b1d      	cmp	r3, #29
 8009e8e:	d001      	beq.n	8009e94 <__sflush_r+0xac>
 8009e90:	2b16      	cmp	r3, #22
 8009e92:	d11e      	bne.n	8009ed2 <__sflush_r+0xea>
 8009e94:	602f      	str	r7, [r5, #0]
 8009e96:	2000      	movs	r0, #0
 8009e98:	e022      	b.n	8009ee0 <__sflush_r+0xf8>
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e9e:	b21b      	sxth	r3, r3
 8009ea0:	e01b      	b.n	8009eda <__sflush_r+0xf2>
 8009ea2:	690f      	ldr	r7, [r1, #16]
 8009ea4:	2f00      	cmp	r7, #0
 8009ea6:	d0f6      	beq.n	8009e96 <__sflush_r+0xae>
 8009ea8:	0793      	lsls	r3, r2, #30
 8009eaa:	680e      	ldr	r6, [r1, #0]
 8009eac:	bf08      	it	eq
 8009eae:	694b      	ldreq	r3, [r1, #20]
 8009eb0:	600f      	str	r7, [r1, #0]
 8009eb2:	bf18      	it	ne
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	eba6 0807 	sub.w	r8, r6, r7
 8009eba:	608b      	str	r3, [r1, #8]
 8009ebc:	f1b8 0f00 	cmp.w	r8, #0
 8009ec0:	dde9      	ble.n	8009e96 <__sflush_r+0xae>
 8009ec2:	6a21      	ldr	r1, [r4, #32]
 8009ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ec6:	4643      	mov	r3, r8
 8009ec8:	463a      	mov	r2, r7
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b0      	blx	r6
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	dc08      	bgt.n	8009ee4 <__sflush_r+0xfc>
 8009ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee4:	4407      	add	r7, r0
 8009ee6:	eba8 0800 	sub.w	r8, r8, r0
 8009eea:	e7e7      	b.n	8009ebc <__sflush_r+0xd4>
 8009eec:	20400001 	.word	0x20400001

08009ef0 <_fflush_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	690b      	ldr	r3, [r1, #16]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b913      	cbnz	r3, 8009f00 <_fflush_r+0x10>
 8009efa:	2500      	movs	r5, #0
 8009efc:	4628      	mov	r0, r5
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	b118      	cbz	r0, 8009f0a <_fflush_r+0x1a>
 8009f02:	6a03      	ldr	r3, [r0, #32]
 8009f04:	b90b      	cbnz	r3, 8009f0a <_fflush_r+0x1a>
 8009f06:	f7fd ffcd 	bl	8007ea4 <__sinit>
 8009f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f3      	beq.n	8009efa <_fflush_r+0xa>
 8009f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f14:	07d0      	lsls	r0, r2, #31
 8009f16:	d404      	bmi.n	8009f22 <_fflush_r+0x32>
 8009f18:	0599      	lsls	r1, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_fflush_r+0x32>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f1e:	f7fe f9f2 	bl	8008306 <__retarget_lock_acquire_recursive>
 8009f22:	4628      	mov	r0, r5
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7ff ff5f 	bl	8009de8 <__sflush_r>
 8009f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f2c:	07da      	lsls	r2, r3, #31
 8009f2e:	4605      	mov	r5, r0
 8009f30:	d4e4      	bmi.n	8009efc <_fflush_r+0xc>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	059b      	lsls	r3, r3, #22
 8009f36:	d4e1      	bmi.n	8009efc <_fflush_r+0xc>
 8009f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f3a:	f7fe f9e5 	bl	8008308 <__retarget_lock_release_recursive>
 8009f3e:	e7dd      	b.n	8009efc <_fflush_r+0xc>

08009f40 <__swhatbuf_r>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	460c      	mov	r4, r1
 8009f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	b096      	sub	sp, #88	@ 0x58
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	461e      	mov	r6, r3
 8009f50:	da0d      	bge.n	8009f6e <__swhatbuf_r+0x2e>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f58:	f04f 0100 	mov.w	r1, #0
 8009f5c:	bf14      	ite	ne
 8009f5e:	2340      	movne	r3, #64	@ 0x40
 8009f60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f64:	2000      	movs	r0, #0
 8009f66:	6031      	str	r1, [r6, #0]
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	b016      	add	sp, #88	@ 0x58
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	466a      	mov	r2, sp
 8009f70:	f000 f862 	bl	800a038 <_fstat_r>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	dbec      	blt.n	8009f52 <__swhatbuf_r+0x12>
 8009f78:	9901      	ldr	r1, [sp, #4]
 8009f7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f82:	4259      	negs	r1, r3
 8009f84:	4159      	adcs	r1, r3
 8009f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f8a:	e7eb      	b.n	8009f64 <__swhatbuf_r+0x24>

08009f8c <__smakebuf_r>:
 8009f8c:	898b      	ldrh	r3, [r1, #12]
 8009f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f90:	079d      	lsls	r5, r3, #30
 8009f92:	4606      	mov	r6, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	d507      	bpl.n	8009fa8 <__smakebuf_r+0x1c>
 8009f98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	6163      	str	r3, [r4, #20]
 8009fa4:	b003      	add	sp, #12
 8009fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa8:	ab01      	add	r3, sp, #4
 8009faa:	466a      	mov	r2, sp
 8009fac:	f7ff ffc8 	bl	8009f40 <__swhatbuf_r>
 8009fb0:	9f00      	ldr	r7, [sp, #0]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f7ff f876 	bl	80090a8 <_malloc_r>
 8009fbc:	b948      	cbnz	r0, 8009fd2 <__smakebuf_r+0x46>
 8009fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc2:	059a      	lsls	r2, r3, #22
 8009fc4:	d4ee      	bmi.n	8009fa4 <__smakebuf_r+0x18>
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0302 	orr.w	r3, r3, #2
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	e7e2      	b.n	8009f98 <__smakebuf_r+0xc>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	6020      	str	r0, [r4, #0]
 8009fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fe2:	b15b      	cbz	r3, 8009ffc <__smakebuf_r+0x70>
 8009fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f837 	bl	800a05c <_isatty_r>
 8009fee:	b128      	cbz	r0, 8009ffc <__smakebuf_r+0x70>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	431d      	orrs	r5, r3
 800a000:	81a5      	strh	r5, [r4, #12]
 800a002:	e7cf      	b.n	8009fa4 <__smakebuf_r+0x18>

0800a004 <memmove>:
 800a004:	4288      	cmp	r0, r1
 800a006:	b510      	push	{r4, lr}
 800a008:	eb01 0402 	add.w	r4, r1, r2
 800a00c:	d902      	bls.n	800a014 <memmove+0x10>
 800a00e:	4284      	cmp	r4, r0
 800a010:	4623      	mov	r3, r4
 800a012:	d807      	bhi.n	800a024 <memmove+0x20>
 800a014:	1e43      	subs	r3, r0, #1
 800a016:	42a1      	cmp	r1, r4
 800a018:	d008      	beq.n	800a02c <memmove+0x28>
 800a01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a022:	e7f8      	b.n	800a016 <memmove+0x12>
 800a024:	4402      	add	r2, r0
 800a026:	4601      	mov	r1, r0
 800a028:	428a      	cmp	r2, r1
 800a02a:	d100      	bne.n	800a02e <memmove+0x2a>
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a036:	e7f7      	b.n	800a028 <memmove+0x24>

0800a038 <_fstat_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	@ (800a058 <_fstat_r+0x20>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f7f8 f88b 	bl	8002160 <_fstat>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_fstat_r+0x1c>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b103      	cbz	r3, 800a054 <_fstat_r+0x1c>
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	2000093c 	.word	0x2000093c

0800a05c <_isatty_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d06      	ldr	r5, [pc, #24]	@ (800a078 <_isatty_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	f7f8 f88a 	bl	8002180 <_isatty>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_isatty_r+0x1a>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_isatty_r+0x1a>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	2000093c 	.word	0x2000093c

0800a07c <_sbrk_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	@ (800a098 <_sbrk_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f8 f892 	bl	80021b0 <_sbrk>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_sbrk_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_sbrk_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	2000093c 	.word	0x2000093c

0800a09c <memcpy>:
 800a09c:	440a      	add	r2, r1
 800a09e:	4291      	cmp	r1, r2
 800a0a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0a4:	d100      	bne.n	800a0a8 <memcpy+0xc>
 800a0a6:	4770      	bx	lr
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0b2:	4291      	cmp	r1, r2
 800a0b4:	d1f9      	bne.n	800a0aa <memcpy+0xe>
 800a0b6:	bd10      	pop	{r4, pc}

0800a0b8 <__assert_func>:
 800a0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b09      	ldr	r3, [pc, #36]	@ (800a0e4 <__assert_func+0x2c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	68d8      	ldr	r0, [r3, #12]
 800a0c6:	b14c      	cbz	r4, 800a0dc <__assert_func+0x24>
 800a0c8:	4b07      	ldr	r3, [pc, #28]	@ (800a0e8 <__assert_func+0x30>)
 800a0ca:	9100      	str	r1, [sp, #0]
 800a0cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d0:	4906      	ldr	r1, [pc, #24]	@ (800a0ec <__assert_func+0x34>)
 800a0d2:	462b      	mov	r3, r5
 800a0d4:	f000 f870 	bl	800a1b8 <fiprintf>
 800a0d8:	f000 f880 	bl	800a1dc <abort>
 800a0dc:	4b04      	ldr	r3, [pc, #16]	@ (800a0f0 <__assert_func+0x38>)
 800a0de:	461c      	mov	r4, r3
 800a0e0:	e7f3      	b.n	800a0ca <__assert_func+0x12>
 800a0e2:	bf00      	nop
 800a0e4:	20000018 	.word	0x20000018
 800a0e8:	0800ae81 	.word	0x0800ae81
 800a0ec:	0800ae8e 	.word	0x0800ae8e
 800a0f0:	0800aebc 	.word	0x0800aebc

0800a0f4 <_calloc_r>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a0fa:	b934      	cbnz	r4, 800a10a <_calloc_r+0x16>
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7fe ffd3 	bl	80090a8 <_malloc_r>
 800a102:	4606      	mov	r6, r0
 800a104:	b928      	cbnz	r0, 800a112 <_calloc_r+0x1e>
 800a106:	4630      	mov	r0, r6
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	220c      	movs	r2, #12
 800a10c:	6002      	str	r2, [r0, #0]
 800a10e:	2600      	movs	r6, #0
 800a110:	e7f9      	b.n	800a106 <_calloc_r+0x12>
 800a112:	462a      	mov	r2, r5
 800a114:	4621      	mov	r1, r4
 800a116:	f7fe f879 	bl	800820c <memset>
 800a11a:	e7f4      	b.n	800a106 <_calloc_r+0x12>

0800a11c <__ascii_mbtowc>:
 800a11c:	b082      	sub	sp, #8
 800a11e:	b901      	cbnz	r1, 800a122 <__ascii_mbtowc+0x6>
 800a120:	a901      	add	r1, sp, #4
 800a122:	b142      	cbz	r2, 800a136 <__ascii_mbtowc+0x1a>
 800a124:	b14b      	cbz	r3, 800a13a <__ascii_mbtowc+0x1e>
 800a126:	7813      	ldrb	r3, [r2, #0]
 800a128:	600b      	str	r3, [r1, #0]
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	1e10      	subs	r0, r2, #0
 800a12e:	bf18      	it	ne
 800a130:	2001      	movne	r0, #1
 800a132:	b002      	add	sp, #8
 800a134:	4770      	bx	lr
 800a136:	4610      	mov	r0, r2
 800a138:	e7fb      	b.n	800a132 <__ascii_mbtowc+0x16>
 800a13a:	f06f 0001 	mvn.w	r0, #1
 800a13e:	e7f8      	b.n	800a132 <__ascii_mbtowc+0x16>

0800a140 <_realloc_r>:
 800a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a144:	4607      	mov	r7, r0
 800a146:	4614      	mov	r4, r2
 800a148:	460d      	mov	r5, r1
 800a14a:	b921      	cbnz	r1, 800a156 <_realloc_r+0x16>
 800a14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a150:	4611      	mov	r1, r2
 800a152:	f7fe bfa9 	b.w	80090a8 <_malloc_r>
 800a156:	b92a      	cbnz	r2, 800a164 <_realloc_r+0x24>
 800a158:	f7fe ff32 	bl	8008fc0 <_free_r>
 800a15c:	4625      	mov	r5, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a164:	f000 f841 	bl	800a1ea <_malloc_usable_size_r>
 800a168:	4284      	cmp	r4, r0
 800a16a:	4606      	mov	r6, r0
 800a16c:	d802      	bhi.n	800a174 <_realloc_r+0x34>
 800a16e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a172:	d8f4      	bhi.n	800a15e <_realloc_r+0x1e>
 800a174:	4621      	mov	r1, r4
 800a176:	4638      	mov	r0, r7
 800a178:	f7fe ff96 	bl	80090a8 <_malloc_r>
 800a17c:	4680      	mov	r8, r0
 800a17e:	b908      	cbnz	r0, 800a184 <_realloc_r+0x44>
 800a180:	4645      	mov	r5, r8
 800a182:	e7ec      	b.n	800a15e <_realloc_r+0x1e>
 800a184:	42b4      	cmp	r4, r6
 800a186:	4622      	mov	r2, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	bf28      	it	cs
 800a18c:	4632      	movcs	r2, r6
 800a18e:	f7ff ff85 	bl	800a09c <memcpy>
 800a192:	4629      	mov	r1, r5
 800a194:	4638      	mov	r0, r7
 800a196:	f7fe ff13 	bl	8008fc0 <_free_r>
 800a19a:	e7f1      	b.n	800a180 <_realloc_r+0x40>

0800a19c <__ascii_wctomb>:
 800a19c:	4603      	mov	r3, r0
 800a19e:	4608      	mov	r0, r1
 800a1a0:	b141      	cbz	r1, 800a1b4 <__ascii_wctomb+0x18>
 800a1a2:	2aff      	cmp	r2, #255	@ 0xff
 800a1a4:	d904      	bls.n	800a1b0 <__ascii_wctomb+0x14>
 800a1a6:	228a      	movs	r2, #138	@ 0x8a
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	4770      	bx	lr
 800a1b0:	700a      	strb	r2, [r1, #0]
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <fiprintf>:
 800a1b8:	b40e      	push	{r1, r2, r3}
 800a1ba:	b503      	push	{r0, r1, lr}
 800a1bc:	4601      	mov	r1, r0
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <fiprintf+0x20>)
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	6800      	ldr	r0, [r0, #0]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f7ff fcf5 	bl	8009bb8 <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	4770      	bx	lr
 800a1d8:	20000018 	.word	0x20000018

0800a1dc <abort>:
 800a1dc:	b508      	push	{r3, lr}
 800a1de:	2006      	movs	r0, #6
 800a1e0:	f000 f834 	bl	800a24c <raise>
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f7f7 ff6b 	bl	80020c0 <_exit>

0800a1ea <_malloc_usable_size_r>:
 800a1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ee:	1f18      	subs	r0, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bfbc      	itt	lt
 800a1f4:	580b      	ldrlt	r3, [r1, r0]
 800a1f6:	18c0      	addlt	r0, r0, r3
 800a1f8:	4770      	bx	lr

0800a1fa <_raise_r>:
 800a1fa:	291f      	cmp	r1, #31
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4605      	mov	r5, r0
 800a200:	460c      	mov	r4, r1
 800a202:	d904      	bls.n	800a20e <_raise_r+0x14>
 800a204:	2316      	movs	r3, #22
 800a206:	6003      	str	r3, [r0, #0]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	bd38      	pop	{r3, r4, r5, pc}
 800a20e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a210:	b112      	cbz	r2, 800a218 <_raise_r+0x1e>
 800a212:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a216:	b94b      	cbnz	r3, 800a22c <_raise_r+0x32>
 800a218:	4628      	mov	r0, r5
 800a21a:	f000 f831 	bl	800a280 <_getpid_r>
 800a21e:	4622      	mov	r2, r4
 800a220:	4601      	mov	r1, r0
 800a222:	4628      	mov	r0, r5
 800a224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a228:	f000 b818 	b.w	800a25c <_kill_r>
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d00a      	beq.n	800a246 <_raise_r+0x4c>
 800a230:	1c59      	adds	r1, r3, #1
 800a232:	d103      	bne.n	800a23c <_raise_r+0x42>
 800a234:	2316      	movs	r3, #22
 800a236:	6003      	str	r3, [r0, #0]
 800a238:	2001      	movs	r0, #1
 800a23a:	e7e7      	b.n	800a20c <_raise_r+0x12>
 800a23c:	2100      	movs	r1, #0
 800a23e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a242:	4620      	mov	r0, r4
 800a244:	4798      	blx	r3
 800a246:	2000      	movs	r0, #0
 800a248:	e7e0      	b.n	800a20c <_raise_r+0x12>
	...

0800a24c <raise>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	@ (800a258 <raise+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f7ff bfd2 	b.w	800a1fa <_raise_r>
 800a256:	bf00      	nop
 800a258:	20000018 	.word	0x20000018

0800a25c <_kill_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	@ (800a27c <_kill_r+0x20>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	4611      	mov	r1, r2
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	f7f7 ff19 	bl	80020a0 <_kill>
 800a26e:	1c43      	adds	r3, r0, #1
 800a270:	d102      	bne.n	800a278 <_kill_r+0x1c>
 800a272:	682b      	ldr	r3, [r5, #0]
 800a274:	b103      	cbz	r3, 800a278 <_kill_r+0x1c>
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	bd38      	pop	{r3, r4, r5, pc}
 800a27a:	bf00      	nop
 800a27c:	2000093c 	.word	0x2000093c

0800a280 <_getpid_r>:
 800a280:	f7f7 bf06 	b.w	8002090 <_getpid>

0800a284 <_init>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	bf00      	nop
 800a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28a:	bc08      	pop	{r3}
 800a28c:	469e      	mov	lr, r3
 800a28e:	4770      	bx	lr

0800a290 <_fini>:
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	bf00      	nop
 800a294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a296:	bc08      	pop	{r3}
 800a298:	469e      	mov	lr, r3
 800a29a:	4770      	bx	lr
