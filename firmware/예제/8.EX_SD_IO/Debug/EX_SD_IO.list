
EX_SD_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d40c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d64  0800d5f0  0800d5f0  0000e5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e354  0800e354  000101ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e354  0800e354  0000f354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e35c  0800e35c  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e35c  0800e35c  0000f35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e360  0800e360  0000f360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e364  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  200001ec  0800e550  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028ac  0800e550  000108ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e21  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003509  00000000  00000000  0002503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00028548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5d  00000000  00000000  000296c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209b2  00000000  00000000  0002a425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195bb  00000000  00000000  0004add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bcb89  00000000  00000000  00064392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  00120f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00126790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5d4 	.word	0x0800d5d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800d5d4 	.word	0x0800d5d4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <MX_DMA_Init+0x60>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	f001 fd4b 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	f001 fd62 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200c      	movs	r0, #12
 8000fd0:	f001 fd43 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fd4:	200c      	movs	r0, #12
 8000fd6:	f001 fd5a 	bl	8002a8e <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <SELECT>:
 * SPI 함수들 ( SPI 신호 동작관련 )
 **************************************/

/* 슬레이브 선택! */
static void SELECT(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);  // CS를 LOW로
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f002 f986 	bl	8003304 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f001 fc31 	bl	8002860 <HAL_Delay>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <DESELECT>:

/* 슬레이브 선택 해제! */
static void DESELECT(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);    // CS를 HIGH로
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f002 f979 	bl	8003304 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // 1ms 대기 (안정화)
 8001012:	2001      	movs	r0, #1
 8001014:	f001 fc24 	bl	8002860 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <SPI_TxByte>:

/* SPI 데이터 송신! */
static void SPI_TxByte(uint8_t data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE)); // TX 버퍼 비울 때까지 대기
 8001026:	bf00      	nop
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <SPI_TxByte+0x30>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d1f8      	bne.n	8001028 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT); // 1바이트 전송
 8001036:	1df9      	adds	r1, r7, #7
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <SPI_TxByte+0x30>)
 800103e:	f003 f9f6 	bl	800442e <HAL_SPI_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20002364 	.word	0x20002364

08001050 <SPI_TxBuffer>:

/* SPI 전송 버퍼! */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800105c:	bf00      	nop
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b02      	cmp	r3, #2
 800106a:	d1f8      	bne.n	800105e <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001074:	f003 f9db 	bl	800442e <HAL_SPI_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20002364 	.word	0x20002364

08001084 <SPI_RxByte>:

/* SPI 데이터 수신! */
static uint8_t SPI_RxByte(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF; // SD카드는 0xFF를 보내야 응답함
 800108a:	23ff      	movs	r3, #255	@ 0xff
 800108c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800108e:	bf00      	nop
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <SPI_RxByte+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d1f8      	bne.n	8001090 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800109e:	1dba      	adds	r2, r7, #6
 80010a0:	1df9      	adds	r1, r7, #7
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <SPI_RxByte+0x34>)
 80010aa:	f003 fb36 	bl	800471a <HAL_SPI_TransmitReceive>

    return data;
 80010ae:	79bb      	ldrb	r3, [r7, #6]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20002364 	.word	0x20002364

080010bc <SPI_RxBytePtr>:

/* 포인터를 통한 SPI 수신 데이터  */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 80010c4:	f7ff ffde 	bl	8001084 <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SD_ReadyWait>:
 * SD 함수
 **************************************/

/*  SD카드 준비 상태 확인 */
static uint8_t SD_ReadyWait(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 타임아웃 설정 */
    Timer2 = 500;
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SD_ReadyWait+0x30>)
 80010e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010e4:	801a      	strh	r2, [r3, #0]
		0x00: 바쁨 (busy)
		기타값: 에러 또는 처리중
     */

    do {
        res = SPI_RxByte();
 80010e6:	f7ff ffcd 	bl	8001084 <SPI_RxByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2bff      	cmp	r3, #255	@ 0xff
 80010f2:	d004      	beq.n	80010fe <SD_ReadyWait+0x26>
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SD_ReadyWait+0x30>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f3      	bne.n	80010e6 <SD_ReadyWait+0xe>

    return res;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000020a 	.word	0x2000020a

0800110c <SD_PowerOn>:

/* 전원 제어 */
static void SD_PowerOn(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // 약 8000번 시도
 8001112:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001116:	60fb      	str	r3, [r7, #12]

    /* 1단계: 웨이크업 시퀀스 */
    DESELECT(); // 슬레이브 선택 해제!
 8001118:	f7ff ff73 	bl	8001002 <DESELECT>
    for(int i = 0; i < 10; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e005      	b.n	800112e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF); // 80클럭 펄스 생성 (10바이트 × 8비트)
 8001122:	20ff      	movs	r0, #255	@ 0xff
 8001124:	f7ff ff7a 	bl	800101c <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b09      	cmp	r3, #9
 8001132:	ddf6      	ble.n	8001122 <SD_PowerOn+0x16>
    }

    /* 슬레이브 선택! */
    SELECT();
 8001134:	f7ff ff58 	bl	8000fe8 <SELECT>

    /* 2단계: 카드 선택 및 IDLE 명령 */
    args[0] = CMD0;     // 명령어: GO_IDLE_STATE
 8001138:	2340      	movs	r3, #64	@ 0x40
 800113a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;        // 인수 [31:24] = 0
 800113c:	2300      	movs	r3, #0
 800113e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;        // 인수 [23:16] = 0
 8001140:	2300      	movs	r3, #0
 8001142:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;        // 인수 [15:8] = 0
 8001144:	2300      	movs	r3, #0
 8001146:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;        // 인수 [7:0] = 0
 8001148:	2300      	movs	r3, #0
 800114a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     // CRC (CMD0용 고정값)
 800114c:	2395      	movs	r3, #149	@ 0x95
 800114e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args)); // 6바이트 전송
 8001150:	463b      	mov	r3, r7
 8001152:	2106      	movs	r1, #6
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff7b 	bl	8001050 <SPI_TxBuffer>

    /* 3단계: 응답 대기 (R1 응답 = 0x01 기대) */
    while ((SPI_RxByte() != 0x01) && cnt)
 800115a:	e002      	b.n	8001162 <SD_PowerOn+0x56>
    {
        cnt--; // 타임아웃 카운터
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3b01      	subs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8001162:	f7ff ff8f 	bl	8001084 <SPI_RxByte>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <SD_PowerOn+0x66>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f4      	bne.n	800115c <SD_PowerOn+0x50>
    }

    DESELECT(); // 명령 완료 후 비활성화
 8001172:	f7ff ff46 	bl	8001002 <DESELECT>
    SPI_TxByte(0XFF); // 추가 클럭 제공
 8001176:	20ff      	movs	r0, #255	@ 0xff
 8001178:	f7ff ff50 	bl	800101c <SPI_TxByte>

    PowerFlag = 1; // 전원 상태 플래그 설정
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <SD_PowerOn+0x80>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000020d 	.word	0x2000020d

08001190 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <SD_PowerOff+0x14>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	2000020d 	.word	0x2000020d

080011a8 <SD_CheckPower>:

/* Power Flag 체크용 함수! */
static uint8_t SD_CheckPower(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    return PowerFlag;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <SD_CheckPower+0x14>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000020d 	.word	0x2000020d

080011c0 <SD_RxDataBlock>:

/* 데이터 블록 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 200ms 타임아웃 */
    Timer1 = 200;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <SD_RxDataBlock+0x5c>)
 80011cc:	22c8      	movs	r2, #200	@ 0xc8
 80011ce:	801a      	strh	r2, [r3, #0]

    /* 응답을 받을때 까지 or 타임아웃 시간까지 루프를 돕니다. */
    // 1단계: 데이터 토큰 대기
    do {
        token = SPI_RxByte();
 80011d0:	f7ff ff58 	bl	8001084 <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	d104      	bne.n	80011e8 <SD_RxDataBlock+0x28>
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <SD_RxDataBlock+0x5c>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <SD_RxDataBlock+0x10>

    // 2단계: 토큰 검증
    if(token != 0xFE) return FALSE;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ec:	d007      	beq.n	80011fe <SD_RxDataBlock+0x3e>
 80011ee:	2300      	movs	r3, #0
 80011f0:	e00f      	b.n	8001212 <SD_RxDataBlock+0x52>

    // 3단계: 실제 데이터 수신
    while(len--) {
        SPI_RxBytePtr(buff++);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <SPI_RxBytePtr>
    while(len--) {
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	603a      	str	r2, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f4      	bne.n	80011f2 <SD_RxDataBlock+0x32>
    }

    // 4단계: CRC 무시 (사용 안 함)
    SPI_RxByte();
 8001208:	f7ff ff3c 	bl	8001084 <SPI_RxByte>
    SPI_RxByte();
 800120c:	f7ff ff3a 	bl	8001084 <SPI_RxByte>

    return TRUE;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000208 	.word	0x20000208

08001220 <SD_TxDataBlock>:


/* 데이터 블록 전송 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 800122c:	23ff      	movs	r3, #255	@ 0xff
 800122e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	73bb      	strb	r3, [r7, #14]

    // 1단계: 카드 준비 상태 확인
    if (SD_ReadyWait() != 0xFF) return FALSE;
 8001234:	f7ff ff50 	bl	80010d8 <SD_ReadyWait>
 8001238:	4603      	mov	r3, r0
 800123a:	2bff      	cmp	r3, #255	@ 0xff
 800123c:	d001      	beq.n	8001242 <SD_TxDataBlock+0x22>
 800123e:	2300      	movs	r3, #0
 8001240:	e037      	b.n	80012b2 <SD_TxDataBlock+0x92>

    // 2단계: 토큰 전송
    SPI_TxByte(token); // 0xFE(단일블록) 또는 0xFC(다중블록)
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fee9 	bl	800101c <SPI_TxByte>

    // 3단계: 데이터 전송 (STOP 토큰이 아닌 경우만)
    if (token != 0xFD) // 0xFD = STOP_TRANSMISSION 토큰
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	2bfd      	cmp	r3, #253	@ 0xfd
 800124e:	d028      	beq.n	80012a2 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);  // 512바이트 데이터
 8001250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fefb 	bl	8001050 <SPI_TxBuffer>

        SPI_RxByte();  // 더미 CRC 상위
 800125a:	f7ff ff13 	bl	8001084 <SPI_RxByte>
        SPI_RxByte();  // 더미 CRC 하위
 800125e:	f7ff ff11 	bl	8001084 <SPI_RxByte>

        // 4단계: 데이터 응답 토큰 수신
        while (i <= 64)
 8001262:	e00b      	b.n	800127c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8001264:	f7ff ff0e 	bl	8001084 <SPI_RxByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]

            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2b05      	cmp	r3, #5
 8001274:	d006      	beq.n	8001284 <SD_TxDataBlock+0x64>
            i++;
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b40      	cmp	r3, #64	@ 0x40
 8001280:	d9f0      	bls.n	8001264 <SD_TxDataBlock+0x44>
 8001282:	e000      	b.n	8001286 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break; // 0x05 = 데이터 수락됨
 8001284:	bf00      	nop
        }

        // 5단계: 바쁨 상태 대기
        Timer1 = 200; // 200ms 타임아웃
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <SD_TxDataBlock+0x9c>)
 8001288:	22c8      	movs	r2, #200	@ 0xc8
 800128a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 800128c:	bf00      	nop
 800128e:	f7ff fef9 	bl	8001084 <SPI_RxByte>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <SD_TxDataBlock+0x82>
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <SD_TxDataBlock+0x9c>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f5      	bne.n	800128e <SD_TxDataBlock+0x6e>
    }
    if ((resp & 0x1F) == 0x05) return TRUE;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d101      	bne.n	80012b0 <SD_TxDataBlock+0x90>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <SD_TxDataBlock+0x92>

    return FALSE;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000208 	.word	0x20000208

080012c0 <SD_SendCmd>:
#endif /* _USE_WRITE */


/* 명령어 전송 함수!*/
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    // 1단계: 카드 준비 대기
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012cc:	f7ff ff04 	bl	80010d8 <SD_ReadyWait>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2bff      	cmp	r3, #255	@ 0xff
 80012d4:	d001      	beq.n	80012da <SD_SendCmd+0x1a>
 80012d6:	23ff      	movs	r3, #255	@ 0xff
 80012d8:	e042      	b.n	8001360 <SD_SendCmd+0xa0>

    // 2단계: 명령어 패킷 전송 (6바이트)
    SPI_TxByte(cmd);                    // 명령어 바이트
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe9d 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   // 인수 [31:24]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0e1b      	lsrs	r3, r3, #24
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe97 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   // 인수 [23:16]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe91 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    // 인수 [15:8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe8b 	bl	800101c <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           // 인수 [7:0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe86 	bl	800101c <SPI_TxByte>

    // 3단계: CRC 계산 및 전송
    if(cmd == CMD0) crc = 0x95;         // CMD0은 항상 0x95
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b40      	cmp	r3, #64	@ 0x40
 8001314:	d102      	bne.n	800131c <SD_SendCmd+0x5c>
 8001316:	2395      	movs	r3, #149	@ 0x95
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e007      	b.n	800132c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    // CMD8(0x1AA)는 0x87
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b48      	cmp	r3, #72	@ 0x48
 8001320:	d102      	bne.n	8001328 <SD_SendCmd+0x68>
 8001322:	2387      	movs	r3, #135	@ 0x87
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e001      	b.n	800132c <SD_SendCmd+0x6c>
    else crc = 1;                       // 나머지는 더미 CRC
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]

    SPI_TxByte(crc);
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe74 	bl	800101c <SPI_TxByte>

    // 4단계: CMD12 특수 처리
    if (cmd == CMD12) SPI_RxByte();     // STOP_TRANSMISSION 후 더미바이트
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b4c      	cmp	r3, #76	@ 0x4c
 8001338:	d101      	bne.n	800133e <SD_SendCmd+0x7e>
 800133a:	f7ff fea3 	bl	8001084 <SPI_RxByte>

    // 5단계: R1 응답 수신 (최대 10번 시도)
    uint8_t n = 10;
 800133e:	230a      	movs	r3, #10
 8001340:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8001342:	f7ff fe9f 	bl	8001084 <SPI_RxByte>
 8001346:	4603      	mov	r3, r0
 8001348:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);      // MSB가 0이 될 때까지
 800134a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da05      	bge.n	800135e <SD_SendCmd+0x9e>
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	3b01      	subs	r3, #1
 8001356:	73bb      	strb	r3, [r7, #14]
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f1      	bne.n	8001342 <SD_SendCmd+0x82>

    return res;
 800135e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <SD_disk_initialize>:
 * 사용자 정의 diskio.c 함수!
 **************************************/

/* SD 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    // 1단계: 드라이브 번호 확인 (0만 지원)
    if(drv) return STA_NOINIT;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_initialize+0x14>
 8001378:	2301      	movs	r3, #1
 800137a:	e0d6      	b.n	800152a <SD_disk_initialize+0x1c2>

    // 2단계: 물리적 디스크 존재 확인
    if(Stat & STA_NODISK) return Stat;
 800137c:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <SD_disk_initialize+0x2a>
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	e0cb      	b.n	800152a <SD_disk_initialize+0x1c2>

    // 3단계: 전원 켜기
    SD_PowerOn();
 8001392:	f7ff febb 	bl	800110c <SD_PowerOn>

    // 4단계: 카드 선택
    SELECT();
 8001396:	f7ff fe27 	bl	8000fe8 <SELECT>

    type = 0;  // 카드 타입 초기화
 800139a:	2300      	movs	r3, #0
 800139c:	73bb      	strb	r3, [r7, #14]

    // 5단계: IDLE 상태 확인
    if (SD_SendCmd(CMD0, 0) == 1)  // R1 = 0x01 (IDLE 상태) 기대
 800139e:	2100      	movs	r1, #0
 80013a0:	2040      	movs	r0, #64	@ 0x40
 80013a2:	f7ff ff8d 	bl	80012c0 <SD_SendCmd>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 80a6 	bne.w	80014fa <SD_disk_initialize+0x192>
    {
        Timer1 = 1000;  // 1초 타임아웃
 80013ae:	4b62      	ldr	r3, [pc, #392]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80013b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013b4:	801a      	strh	r2, [r3, #0]

        // 6단계: SD v2+ 확인 (CMD8 지원 여부)
        if (SD_SendCmd(CMD8, 0x1AA) == 1)  // 0x1AA = 2.7-3.6V, 0xAA 체크패턴
 80013b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013ba:	2048      	movs	r0, #72	@ 0x48
 80013bc:	f7ff ff80 	bl	80012c0 <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d158      	bne.n	8001478 <SD_disk_initialize+0x110>
        {
            // OCR(Operation Conditions Register) 수신
            for (n = 0; n < 4; n++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e00c      	b.n	80013e6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 80013cc:	7bfc      	ldrb	r4, [r7, #15]
 80013ce:	f7ff fe59 	bl	8001084 <SPI_RxByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	f104 0310 	add.w	r3, r4, #16
 80013da:	443b      	add	r3, r7
 80013dc:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d9ef      	bls.n	80013cc <SD_disk_initialize+0x64>
            }

            // 전압 범위 및 체크 패턴 확인
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)  // 지원 전압 + 체크패턴
 80013ec:	7abb      	ldrb	r3, [r7, #10]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 8083 	bne.w	80014fa <SD_disk_initialize+0x192>
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	2baa      	cmp	r3, #170	@ 0xaa
 80013f8:	d17f      	bne.n	80014fa <SD_disk_initialize+0x192>
            {
                // ACMD41로 초기화 (HCS 비트 설정)
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 80013fa:	2100      	movs	r1, #0
 80013fc:	2077      	movs	r0, #119	@ 0x77
 80013fe:	f7ff ff5f 	bl	80012c0 <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d807      	bhi.n	8001418 <SD_disk_initialize+0xb0>
                        SD_SendCmd(CMD41, 1UL << 30) == 0) // HCS=1 (고용량 지원)
 8001408:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800140c:	2069      	movs	r0, #105	@ 0x69
 800140e:	f7ff ff57 	bl	80012c0 <SD_SendCmd>
 8001412:	4603      	mov	r3, r0
                    if (SD_SendCmd(CMD55, 0) <= 1 &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <SD_disk_initialize+0xbc>
                        break;
                } while (Timer1);
 8001418:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <SD_disk_initialize+0x1d0>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1eb      	bne.n	80013fa <SD_disk_initialize+0x92>
 8001422:	e000      	b.n	8001426 <SD_disk_initialize+0xbe>
                        break;
 8001424:	bf00      	nop

                // 초기화 완료 후 OCR 읽기
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <SD_disk_initialize+0x1d0>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d064      	beq.n	80014fa <SD_disk_initialize+0x192>
 8001430:	2100      	movs	r1, #0
 8001432:	207a      	movs	r0, #122	@ 0x7a
 8001434:	f7ff ff44 	bl	80012c0 <SD_SendCmd>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d15d      	bne.n	80014fa <SD_disk_initialize+0x192>
                {
                    for (n = 0; n < 4; n++)
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e00c      	b.n	800145e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8001444:	7bfc      	ldrb	r4, [r7, #15]
 8001446:	f7ff fe1d 	bl	8001084 <SPI_RxByte>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	f104 0310 	add.w	r3, r4, #16
 8001452:	443b      	add	r3, r7
 8001454:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d9ef      	bls.n	8001444 <SD_disk_initialize+0xdc>
                    }

                    // CCS 비트 확인 (카드 용량 구조)
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001464:	7a3b      	ldrb	r3, [r7, #8]
 8001466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_initialize+0x10a>
 800146e:	230c      	movs	r3, #12
 8001470:	e000      	b.n	8001474 <SD_disk_initialize+0x10c>
 8001472:	2304      	movs	r3, #4
 8001474:	73bb      	strb	r3, [r7, #14]
 8001476:	e040      	b.n	80014fa <SD_disk_initialize+0x192>
            }
        }
        else
        {
            // SD v1 또는 MMC 카드
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1)
 8001478:	2100      	movs	r1, #0
 800147a:	2077      	movs	r0, #119	@ 0x77
 800147c:	f7ff ff20 	bl	80012c0 <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d808      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001486:	2100      	movs	r1, #0
 8001488:	2069      	movs	r0, #105	@ 0x69
 800148a:	f7ff ff19 	bl	80012c0 <SD_SendCmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d801      	bhi.n	8001498 <SD_disk_initialize+0x130>
 8001494:	2302      	movs	r3, #2
 8001496:	e000      	b.n	800149a <SD_disk_initialize+0x132>
 8001498:	2301      	movs	r3, #1
 800149a:	73bb      	strb	r3, [r7, #14]
                   ? CT_SD1 : CT_MMC;

            do
            {
                if (type == CT_SD1)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d10e      	bne.n	80014c0 <SD_disk_initialize+0x158>
                {
                    // SD v1: ACMD41
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014a2:	2100      	movs	r1, #0
 80014a4:	2077      	movs	r0, #119	@ 0x77
 80014a6:	f7ff ff0b 	bl	80012c0 <SD_SendCmd>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d80e      	bhi.n	80014ce <SD_disk_initialize+0x166>
 80014b0:	2100      	movs	r1, #0
 80014b2:	2069      	movs	r0, #105	@ 0x69
 80014b4:	f7ff ff04 	bl	80012c0 <SD_SendCmd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <SD_disk_initialize+0x166>
                        break;
 80014be:	e00d      	b.n	80014dc <SD_disk_initialize+0x174>
                }
                else
                {
                    // MMC: CMD1
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 80014c0:	2100      	movs	r1, #0
 80014c2:	2041      	movs	r0, #65	@ 0x41
 80014c4:	f7ff fefc 	bl	80012c0 <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <SD_disk_initialize+0x172>
                }
            } while (Timer1);
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e1      	bne.n	800149c <SD_disk_initialize+0x134>
 80014d8:	e000      	b.n	80014dc <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break;
 80014da:	bf00      	nop

            // 블록 크기 설정 (512바이트)
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <SD_disk_initialize+0x1d0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SD_disk_initialize+0x18e>
 80014e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ea:	2050      	movs	r0, #80	@ 0x50
 80014ec:	f7ff fee8 	bl	80012c0 <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_initialize+0x192>
                type = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;  // 감지된 카드 타입 저장
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <SD_disk_initialize+0x1d4>)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	7013      	strb	r3, [r2, #0]

    DESELECT();      // 카드 비활성화
 8001500:	f7ff fd7f 	bl	8001002 <DESELECT>
    SPI_RxByte();    // 추가 클럭
 8001504:	f7ff fdbe 	bl	8001084 <SPI_RxByte>

    // 상태 업데이트
    if (type)
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;  // 초기화 완료 플래그 제거
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <SD_disk_initialize+0x1cc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SD_disk_initialize+0x1cc>)
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e001      	b.n	8001524 <SD_disk_initialize+0x1bc>
    }
    else
    {
        SD_PowerOff();        // 초기화 실패 시 전원 끄기
 8001520:	f7ff fe36 	bl	8001190 <SD_PowerOff>
    }

    return Stat;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <SD_disk_initialize+0x1cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000
 8001538:	20000208 	.word	0x20000208
 800153c:	2000020c 	.word	0x2000020c

08001540 <SD_disk_status>:

/* SD 상태 리턴함수! */
DSTATUS SD_disk_status(BYTE drv)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SD_disk_status+0x14>
 8001550:	2301      	movs	r3, #1
 8001552:	e002      	b.n	800155a <SD_disk_status+0x1a>
    return Stat;
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SD_disk_status+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <SD_disk_read>:

/* 섹터 읽기 함수! */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x1c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_read+0x20>
 8001588:	2304      	movs	r3, #4
 800158a:	e051      	b.n	8001630 <SD_disk_read+0xc4>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <SD_disk_read+0xcc>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SD_disk_read+0x32>
 800159a:	2303      	movs	r3, #3
 800159c:	e048      	b.n	8001630 <SD_disk_read+0xc4>

    // 3단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <SD_disk_read+0xd0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <SD_disk_read+0x44>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	607b      	str	r3, [r7, #4]

    SELECT();
 80015b0:	f7ff fd1a 	bl	8000fe8 <SELECT>

    if (count == 1)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d111      	bne.n	80015de <SD_disk_read+0x72>
    {
        // 단일 블록 읽기
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2051      	movs	r0, #81	@ 0x51
 80015be:	f7ff fe7f 	bl	80012c0 <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d129      	bne.n	800161c <SD_disk_read+0xb0>
 80015c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fdf7 	bl	80011c0 <SD_RxDataBlock>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <SD_disk_read+0xb0>
            count = 0;  // 성공 시 count를 0으로
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e01e      	b.n	800161c <SD_disk_read+0xb0>
    }
    else
    {
        // 다중 블록 읽기
        if (SD_SendCmd(CMD18, sector) == 0)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2052      	movs	r0, #82	@ 0x52
 80015e2:	f7ff fe6d 	bl	80012c0 <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 80015ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fde5 	bl	80011c0 <SD_RxDataBlock>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <SD_disk_read+0xa6>
                buff += 512;  // 다음 블록 버퍼 위치
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001602:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <SD_disk_read+0x80>
 8001610:	e000      	b.n	8001614 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 8001612:	bf00      	nop

            SD_SendCmd(CMD12, 0);  // 전송 중지 명령
 8001614:	2100      	movs	r1, #0
 8001616:	204c      	movs	r0, #76	@ 0x4c
 8001618:	f7ff fe52 	bl	80012c0 <SD_SendCmd>
        }
    }

    DESELECT();
 800161c:	f7ff fcf1 	bl	8001002 <DESELECT>
    SPI_RxByte();
 8001620:	f7ff fd30 	bl	8001084 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	2000020c 	.word	0x2000020c

08001640 <SD_disk_write>:
/* 섹터 쓰기 함수! */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    // 1단계: 매개변수 검증
    if (pdrv || !count) return RES_PARERR;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <SD_disk_write+0x1c>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <SD_disk_write+0x20>
 800165c:	2304      	movs	r3, #4
 800165e:	e06b      	b.n	8001738 <SD_disk_write+0xf8>

    // 2단계: 초기화 상태 확인
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001660:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <SD_disk_write+0x100>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SD_disk_write+0x32>
 800166e:	2303      	movs	r3, #3
 8001670:	e062      	b.n	8001738 <SD_disk_write+0xf8>

    // 3단계: 쓰기 보호 확인
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8001672:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <SD_disk_write+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SD_disk_write+0x44>
 8001680:	2302      	movs	r3, #2
 8001682:	e059      	b.n	8001738 <SD_disk_write+0xf8>

    // 4단계: 주소 변환 (바이트 주소 카드의 경우)
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <SD_disk_write+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <SD_disk_write+0x56>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	607b      	str	r3, [r7, #4]

    SELECT();
 8001696:	f7ff fca7 	bl	8000fe8 <SELECT>

    if (count == 1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d110      	bne.n	80016c2 <SD_disk_write+0x82>
    {
        // 단일 블록 쓰기
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2058      	movs	r0, #88	@ 0x58
 80016a4:	f7ff fe0c 	bl	80012c0 <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13a      	bne.n	8001724 <SD_disk_write+0xe4>
 80016ae:	21fe      	movs	r1, #254	@ 0xfe
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f7ff fdb5 	bl	8001220 <SD_TxDataBlock>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <SD_disk_write+0xe4>
            count = 0;  // 성공 시 count를 0으로
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	e030      	b.n	8001724 <SD_disk_write+0xe4>
    }
    else
    {
        // 다중 블록 쓰기
        if (CardType & CT_SD1)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <SD_disk_write+0x104>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2077      	movs	r0, #119	@ 0x77
 80016d2:	f7ff fdf5 	bl	80012c0 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2057      	movs	r0, #87	@ 0x57
 80016da:	f7ff fdf1 	bl	80012c0 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2059      	movs	r0, #89	@ 0x59
 80016e2:	f7ff fded 	bl	80012c0 <SD_SendCmd>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016ec:	21fc      	movs	r1, #252	@ 0xfc
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fd96 	bl	8001220 <SD_TxDataBlock>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <SD_disk_write+0xd0>
                buff += 512;  // 다음 블록 버퍼 위치
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001700:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <SD_disk_write+0xac>
 800170e:	e000      	b.n	8001712 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001710:	bf00      	nop

            /* STOP_TRAN 토큰 */
            if(!SD_TxDataBlock(0, 0xFD))
 8001712:	21fd      	movs	r1, #253	@ 0xfd
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fd83 	bl	8001220 <SD_TxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0xe4>
            {
                count = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 8001724:	f7ff fc6d 	bl	8001002 <DESELECT>
    SPI_RxByte();
 8001728:	f7ff fcac 	bl	8001084 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;  // count가 0이면 성공
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	2000020c 	.word	0x2000020c

08001748 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	@ 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	603a      	str	r2, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	623b      	str	r3, [r7, #32]

    if (drv) return RES_PARERR;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SD_disk_ioctl+0x1e>
 8001762:	2304      	movs	r3, #4
 8001764:	e0ad      	b.n	80018c2 <SD_disk_ioctl+0x17a>
    res = RES_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)  // 전원 제어
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d124      	bne.n	80017bc <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d012      	beq.n	80017a0 <SD_disk_ioctl+0x58>
 800177a:	2b02      	cmp	r3, #2
 800177c:	dc1a      	bgt.n	80017b4 <SD_disk_ioctl+0x6c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SD_disk_ioctl+0x40>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d006      	beq.n	8001794 <SD_disk_ioctl+0x4c>
 8001786:	e015      	b.n	80017b4 <SD_disk_ioctl+0x6c>
        {
        case 0: SD_PowerOff(); res = RES_OK; break;      // 전원 끄기
 8001788:	f7ff fd02 	bl	8001190 <SD_PowerOff>
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001792:	e094      	b.n	80018be <SD_disk_ioctl+0x176>
        case 1: SD_PowerOn(); res = RES_OK; break;       // 전원 켜기
 8001794:	f7ff fcba 	bl	800110c <SD_PowerOn>
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800179e:	e08e      	b.n	80018be <SD_disk_ioctl+0x176>
        case 2: *(ptr + 1) = SD_CheckPower(); res = RES_OK; break; // 전원 상태 확인
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	1c5c      	adds	r4, r3, #1
 80017a4:	f7ff fd00 	bl	80011a8 <SD_CheckPower>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017b2:	e084      	b.n	80018be <SD_disk_ioctl+0x176>
        default: res = RES_PARERR;
 80017b4:	2304      	movs	r3, #4
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ba:	e080      	b.n	80018be <SD_disk_ioctl+0x176>
        }
    }
    else
    {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017bc:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <SD_disk_ioctl+0x184>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SD_disk_ioctl+0x86>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e079      	b.n	80018c2 <SD_disk_ioctl+0x17a>

        SELECT();
 80017ce:	f7ff fc0b 	bl	8000fe8 <SELECT>

        switch (ctrl)
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d05a      	beq.n	800188e <SD_disk_ioctl+0x146>
 80017d8:	2b02      	cmp	r3, #2
 80017da:	dc6c      	bgt.n	80018b6 <SD_disk_ioctl+0x16e>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d05e      	beq.n	800189e <SD_disk_ioctl+0x156>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d168      	bne.n	80018b6 <SD_disk_ioctl+0x16e>
        {
        case GET_SECTOR_COUNT:  // 총 섹터 수 얻기
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017e4:	2100      	movs	r1, #0
 80017e6:	2049      	movs	r0, #73	@ 0x49
 80017e8:	f7ff fd6a 	bl	80012c0 <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d15e      	bne.n	80018b0 <SD_disk_ioctl+0x168>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2110      	movs	r1, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fce1 	bl	80011c0 <SD_RxDataBlock>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d055      	beq.n	80018b0 <SD_disk_ioctl+0x168>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 8001804:	7a3b      	ldrb	r3, [r7, #8]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10f      	bne.n	800182e <SD_disk_ioctl+0xe6>
                {
                    // FIX 5: SDv2 CSD 파싱 수정
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8001816:	7c3b      	ldrb	r3, [r7, #16]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4313      	orrs	r3, r2
 800181c:	7c7a      	ldrb	r2, [r7, #17]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;  // (C_SIZE+1) * 1024
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	3301      	adds	r3, #1
 8001826:	029a      	lsls	r2, r3, #10
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e02b      	b.n	8001886 <SD_disk_ioctl+0x13e>
                }
                else /* MMC or SDC V1 */
                {
                    // 복잡한 CSD v1 계산
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	b2da      	uxtb	r2, r3
 8001836:	7cbb      	ldrb	r3, [r7, #18]
 8001838:	09db      	lsrs	r3, r3, #7
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b2da      	uxtb	r2, r3
 8001840:	7c7b      	ldrb	r3, [r7, #17]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0306 	and.w	r3, r3, #6
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3302      	adds	r3, #2
 8001852:	77fb      	strb	r3, [r7, #31]
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001854:	7c3b      	ldrb	r3, [r7, #16]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29a      	uxth	r2, r3
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	b29b      	uxth	r3, r3
 800186c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	83bb      	strh	r3, [r7, #28]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 800187a:	8bba      	ldrh	r2, [r7, #28]
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	3b09      	subs	r3, #9
 8001880:	409a      	lsls	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800188c:	e010      	b.n	80018b0 <SD_disk_ioctl+0x168>

        case GET_SECTOR_SIZE:   // 섹터 크기 (항상 512)
            *(WORD*) buff = 512;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001894:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800189c:	e00b      	b.n	80018b6 <SD_disk_ioctl+0x16e>

        case CTRL_SYNC:         // 동기화 (쓰기 완료 대기)
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800189e:	f7ff fc1b 	bl	80010d8 <SD_ReadyWait>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2bff      	cmp	r3, #255	@ 0xff
 80018a6:	d105      	bne.n	80018b4 <SD_disk_ioctl+0x16c>
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80018ae:	e001      	b.n	80018b4 <SD_disk_ioctl+0x16c>
            break;
 80018b0:	bf00      	nop
 80018b2:	e000      	b.n	80018b6 <SD_disk_ioctl+0x16e>
            break;
 80018b4:	bf00      	nop

        // 추가 정보들...
        }

        DESELECT();
 80018b6:	f7ff fba4 	bl	8001002 <DESELECT>
        SPI_RxByte();
 80018ba:	f7ff fbe3 	bl	8001084 <SPI_RxByte>
    }

    return res;
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	372c      	adds	r7, #44	@ 0x2c
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	4a27      	ldr	r2, [pc, #156]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f2:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MX_GPIO_Init+0xb8>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_GPIO_Init+0xb8>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a1b      	ldr	r2, [pc, #108]	@ (8001988 <MX_GPIO_Init+0xb8>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <MX_GPIO_Init+0xb8>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2110      	movs	r1, #16
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f001 fce5 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CD_GPIO_Port, SD_CD_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2110      	movs	r1, #16
 800193e:	4813      	ldr	r0, [pc, #76]	@ (800198c <MX_GPIO_Init+0xbc>)
 8001940:	f001 fce0 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001944:	2310      	movs	r3, #16
 8001946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195e:	f001 fb37 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001962:	2310      	movs	r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4804      	ldr	r0, [pc, #16]	@ (800198c <MX_GPIO_Init+0xbc>)
 800197a:	f001 fb29 	bl	8002fd0 <HAL_GPIO_Init>

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	48000400 	.word	0x48000400

08001990 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001998:	1d39      	adds	r1, r7, #4
 800199a:	2364      	movs	r3, #100	@ 0x64
 800199c:	2201      	movs	r2, #1
 800199e:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <__io_putchar+0x20>)
 80019a0:	f003 fa8e 	bl	8004ec0 <HAL_UART_Transmit>
	return ch;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000248c 	.word	0x2000248c

080019b4 <SD_IsCardDetected>:

/* SD카드 감지 함수 */
uint8_t SD_IsCardDetected(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	// CD 핀이 LOW면 카드 삽입됨
	return (HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin) == GPIO_PIN_RESET);
 80019b8:	2110      	movs	r1, #16
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <SD_IsCardDetected+0x1c>)
 80019bc:	f001 fc8a 	bl	80032d4 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf0c      	ite	eq
 80019c6:	2301      	moveq	r3, #1
 80019c8:	2300      	movne	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	48000400 	.word	0x48000400

080019d4 <SDMount>:

/* SD카드 마운트 함수 */
void SDMount(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	fres = f_mount(&fs, "", 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <SDMount+0x38>)
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <SDMount+0x3c>)
 80019de:	f007 fd87 	bl	80094f0 <f_mount>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <SDMount+0x40>)
 80019e8:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <SDMount+0x40>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <SDMount+0x26>
		printf("SD Card mounted Successfully!\r\n");
 80019f2:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <SDMount+0x44>)
 80019f4:	f009 fca0 	bl	800b338 <puts>
	} else if (fres != FR_OK) {
		printf("SD Card mount error!!\r\n");
	}
}
 80019f8:	e006      	b.n	8001a08 <SDMount+0x34>
	} else if (fres != FR_OK) {
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <SDMount+0x40>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <SDMount+0x34>
		printf("SD Card mount error!!\r\n");
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <SDMount+0x48>)
 8001a04:	f009 fc98 	bl	800b338 <puts>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800d5f0 	.word	0x0800d5f0
 8001a10:	20000210 	.word	0x20000210
 8001a14:	2000227c 	.word	0x2000227c
 8001a18:	0800d5f4 	.word	0x0800d5f4
 8001a1c:	0800d614 	.word	0x0800d614

08001a20 <SDUnmount>:
/* SD카드 마운트 해제 함수 */
void SDUnmount(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	fres = f_mount(NULL, "", 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <SDUnmount+0x38>)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f007 fd61 	bl	80094f0 <f_mount>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <SDUnmount+0x3c>)
 8001a34:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <SDUnmount+0x3c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <SDUnmount+0x26>
		printf("SD Card Un-mounted Successfully!\r\n");
 8001a3e:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <SDUnmount+0x40>)
 8001a40:	f009 fc7a 	bl	800b338 <puts>
	} else if (fres != FR_OK) {
		printf("SD Card Un-mount error!!\r\n");
	}
}
 8001a44:	e006      	b.n	8001a54 <SDUnmount+0x34>
	} else if (fres != FR_OK) {
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <SDUnmount+0x3c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <SDUnmount+0x34>
		printf("SD Card Un-mount error!!\r\n");
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <SDUnmount+0x44>)
 8001a50:	f009 fc72 	bl	800b338 <puts>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800d5f0 	.word	0x0800d5f0
 8001a5c:	2000227c 	.word	0x2000227c
 8001a60:	0800d62c 	.word	0x0800d62c
 8001a64:	0800d650 	.word	0x0800d650

08001a68 <OpenFile>:

void OpenFile(char* fileName)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    if(closeFlag == 0)
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <OpenFile+0x84>)
 8001a72:	f993 3000 	ldrsb.w	r3, [r3]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <OpenFile+0x1a>
    {
        printf("File already open! Close it first.\r\n");
 8001a7a:	481d      	ldr	r0, [pc, #116]	@ (8001af0 <OpenFile+0x88>)
 8001a7c:	f009 fc5c 	bl	800b338 <puts>
        return;
 8001a80:	e030      	b.n	8001ae4 <OpenFile+0x7c>
    }

    // 파일이 있으면 열고, 없으면 생성하여 append 모드로 사용
    fres = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001a82:	2213      	movs	r2, #19
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	481b      	ldr	r0, [pc, #108]	@ (8001af4 <OpenFile+0x8c>)
 8001a88:	f007 fd78 	bl	800957c <f_open>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <OpenFile+0x90>)
 8001a92:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK)
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <OpenFile+0x90>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d118      	bne.n	8001ace <OpenFile+0x66>
    {
        // 파일 끝으로 이동 (기존 내용 보존하며 append)
        f_lseek(&fil, f_size(&fil));
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <OpenFile+0x8c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <OpenFile+0x8c>)
 8001aa4:	f008 facd 	bl	800a042 <f_lseek>

        printf("File '%s' ready for writing!\r\n", fileName);
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4814      	ldr	r0, [pc, #80]	@ (8001afc <OpenFile+0x94>)
 8001aac:	f009 fbdc 	bl	800b268 <iprintf>
        if(f_size(&fil) > 0)
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <OpenFile+0x8c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <OpenFile+0x5e>
        {
            printf("File size: %lu bytes\r\n", f_size(&fil));
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <OpenFile+0x8c>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <OpenFile+0x98>)
 8001ac0:	f009 fbd2 	bl	800b268 <iprintf>
 8001ac4:	e00b      	b.n	8001ade <OpenFile+0x76>
        }
        else
        {
            printf("New file created.\r\n");
 8001ac6:	480f      	ldr	r0, [pc, #60]	@ (8001b04 <OpenFile+0x9c>)
 8001ac8:	f009 fc36 	bl	800b338 <puts>
 8001acc:	e007      	b.n	8001ade <OpenFile+0x76>
        }
    }
    else
    {
        printf("Failed to open/create file '%s'. Error: %d\r\n", fileName, fres);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <OpenFile+0x90>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <OpenFile+0xa0>)
 8001ad8:	f009 fbc6 	bl	800b268 <iprintf>
        return;
 8001adc:	e002      	b.n	8001ae4 <OpenFile+0x7c>
    }

    closeFlag = 0;
 8001ade:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <OpenFile+0x84>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
}
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000001 	.word	0x20000001
 8001af0:	0800d66c 	.word	0x0800d66c
 8001af4:	2000124c 	.word	0x2000124c
 8001af8:	2000227c 	.word	0x2000227c
 8001afc:	0800d690 	.word	0x0800d690
 8001b00:	0800d6b0 	.word	0x0800d6b0
 8001b04:	0800d6c8 	.word	0x0800d6c8
 8001b08:	0800d6dc 	.word	0x0800d6dc

08001b0c <CloseFile>:

void CloseFile(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	fres = f_close(&fil);
 8001b10:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <CloseFile+0x3c>)
 8001b12:	f008 fa6c 	bl	8009fee <f_close>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <CloseFile+0x40>)
 8001b1c:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <CloseFile+0x40>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <CloseFile+0x22>
		printf("File Closed !\r\n");
 8001b26:	480a      	ldr	r0, [pc, #40]	@ (8001b50 <CloseFile+0x44>)
 8001b28:	f009 fc06 	bl	800b338 <puts>
 8001b2c:	e006      	b.n	8001b3c <CloseFile+0x30>
	} else if (fres != FR_OK) {
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <CloseFile+0x40>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <CloseFile+0x30>
		printf("File Close Failed... \r\n");
 8001b36:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <CloseFile+0x48>)
 8001b38:	f009 fbfe 	bl	800b338 <puts>
	}
	closeFlag = 1;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <CloseFile+0x4c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000124c 	.word	0x2000124c
 8001b4c:	2000227c 	.word	0x2000227c
 8001b50:	0800d70c 	.word	0x0800d70c
 8001b54:	0800d71c 	.word	0x0800d71c
 8001b58:	20000001 	.word	0x20000001

08001b5c <CheckSize>:

void CheckSize(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	@ 0x68
 8001b60:	af00      	add	r7, sp, #0

	fres = f_getfree("", &fre_clust, &pfs);
 8001b62:	4a2e      	ldr	r2, [pc, #184]	@ (8001c1c <CheckSize+0xc0>)
 8001b64:	492e      	ldr	r1, [pc, #184]	@ (8001c20 <CheckSize+0xc4>)
 8001b66:	482f      	ldr	r0, [pc, #188]	@ (8001c24 <CheckSize+0xc8>)
 8001b68:	f008 fc8f 	bl	800a48a <f_getfree>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <CheckSize+0xcc>)
 8001b72:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001b74:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <CheckSize+0xc0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	3b02      	subs	r3, #2
 8001b7c:	4a27      	ldr	r2, [pc, #156]	@ (8001c1c <CheckSize+0xc0>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	8952      	ldrh	r2, [r2, #10]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcf4 	bl	8000574 <__aeabi_ui2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <CheckSize+0xd0>)
 8001b92:	f7fe fd69 	bl	8000668 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f83b 	bl	8000c18 <__aeabi_d2uiz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <CheckSize+0xd4>)
 8001ba6:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) ((fre_clust * pfs->csize * 0.5));
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <CheckSize+0xc0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	895b      	ldrh	r3, [r3, #10]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <CheckSize+0xc4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcdb 	bl	8000574 <__aeabi_ui2d>
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <CheckSize+0xd0>)
 8001bc4:	f7fe fd50 	bl	8000668 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff f822 	bl	8000c18 <__aeabi_d2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <CheckSize+0xd8>)
 8001bd8:	6013      	str	r3, [r2, #0]
	char mSize[100];
	sprintf(mSize, "%lu", freeSpace);
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <CheckSize+0xd8>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4915      	ldr	r1, [pc, #84]	@ (8001c38 <CheckSize+0xdc>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f009 fbb0 	bl	800b348 <siprintf>
	if (fres == FR_OK) {
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <CheckSize+0xcc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <CheckSize+0xaa>
		printf("The free Space is : ");
 8001bf0:	4812      	ldr	r0, [pc, #72]	@ (8001c3c <CheckSize+0xe0>)
 8001bf2:	f009 fb39 	bl	800b268 <iprintf>
		printf(mSize);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f009 fb35 	bl	800b268 <iprintf>
		printf("\r\n");
 8001bfe:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <CheckSize+0xe4>)
 8001c00:	f009 fb9a 	bl	800b338 <puts>
	} else if (fres != FR_OK) {
		printf("The free Space could not be determined!\r\n");
	}
}
 8001c04:	e006      	b.n	8001c14 <CheckSize+0xb8>
	} else if (fres != FR_OK) {
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <CheckSize+0xcc>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <CheckSize+0xb8>
		printf("The free Space could not be determined!\r\n");
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <CheckSize+0xe8>)
 8001c10:	f009 fb92 	bl	800b338 <puts>
}
 8001c14:	bf00      	nop
 8001c16:	3768      	adds	r7, #104	@ 0x68
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20001248 	.word	0x20001248
 8001c20:	20002280 	.word	0x20002280
 8001c24:	0800d5f0 	.word	0x0800d5f0
 8001c28:	2000227c 	.word	0x2000227c
 8001c2c:	3fe00000 	.word	0x3fe00000
 8001c30:	20002284 	.word	0x20002284
 8001c34:	20002288 	.word	0x20002288
 8001c38:	0800d734 	.word	0x0800d734
 8001c3c:	0800d738 	.word	0x0800d738
 8001c40:	0800d750 	.word	0x0800d750
 8001c44:	0800d754 	.word	0x0800d754

08001c48 <WriteFile>:

void WriteFile(char* text)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    if (closeFlag)
 8001c50:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <WriteFile+0x8c>)
 8001c52:	f993 3000 	ldrsb.w	r3, [r3]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <WriteFile+0x1a>
    {
        printf("No file is open! Use 'open <filename>' first.\r\n");
 8001c5a:	481f      	ldr	r0, [pc, #124]	@ (8001cd8 <WriteFile+0x90>)
 8001c5c:	f009 fb6c 	bl	800b338 <puts>
        return;
 8001c60:	e034      	b.n	8001ccc <WriteFile+0x84>
    }

    // 파일 끝으로 이동 (append)
    fres = f_lseek(&fil, f_size(&fil));
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <WriteFile+0x94>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4619      	mov	r1, r3
 8001c68:	481c      	ldr	r0, [pc, #112]	@ (8001cdc <WriteFile+0x94>)
 8001c6a:	f008 f9ea 	bl	800a042 <f_lseek>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <WriteFile+0x98>)
 8001c74:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK)
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <WriteFile+0x98>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <WriteFile+0x3e>
    {
        printf("Can't move to end of file\r\n");
 8001c7e:	4819      	ldr	r0, [pc, #100]	@ (8001ce4 <WriteFile+0x9c>)
 8001c80:	f009 fb5a 	bl	800b338 <puts>
        return;
 8001c84:	e022      	b.n	8001ccc <WriteFile+0x84>
    }

    sprintf(buffer, "%s\r\n", text);
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4917      	ldr	r1, [pc, #92]	@ (8001ce8 <WriteFile+0xa0>)
 8001c8a:	4818      	ldr	r0, [pc, #96]	@ (8001cec <WriteFile+0xa4>)
 8001c8c:	f009 fb5c 	bl	800b348 <siprintf>
    fres = f_write(&fil, buffer, strlen(buffer), &bw);
 8001c90:	4816      	ldr	r0, [pc, #88]	@ (8001cec <WriteFile+0xa4>)
 8001c92:	f7fe fb25 	bl	80002e0 <strlen>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <WriteFile+0xa8>)
 8001c9a:	4914      	ldr	r1, [pc, #80]	@ (8001cec <WriteFile+0xa4>)
 8001c9c:	480f      	ldr	r0, [pc, #60]	@ (8001cdc <WriteFile+0x94>)
 8001c9e:	f007 ff94 	bl	8009bca <f_write>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <WriteFile+0x98>)
 8001ca8:	701a      	strb	r2, [r3, #0]

    if(fres == FR_OK)
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <WriteFile+0x98>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <WriteFile+0x7e>
    {
        printf("Writing Complete! %lu bytes written.\r\n", bw);
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <WriteFile+0xa8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480e      	ldr	r0, [pc, #56]	@ (8001cf4 <WriteFile+0xac>)
 8001cba:	f009 fad5 	bl	800b268 <iprintf>
        f_sync(&fil);  // 즉시 저장
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <WriteFile+0x94>)
 8001cc0:	f008 f917 	bl	8009ef2 <f_sync>
 8001cc4:	e002      	b.n	8001ccc <WriteFile+0x84>
    }
    else
    {
        printf("Writing Failed\r\n");
 8001cc6:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <WriteFile+0xb0>)
 8001cc8:	f009 fb36 	bl	800b338 <puts>
    }
}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000001 	.word	0x20000001
 8001cd8:	0800d780 	.word	0x0800d780
 8001cdc:	2000124c 	.word	0x2000124c
 8001ce0:	2000227c 	.word	0x2000227c
 8001ce4:	0800d7b0 	.word	0x0800d7b0
 8001ce8:	0800d7cc 	.word	0x0800d7cc
 8001cec:	2000228c 	.word	0x2000228c
 8001cf0:	200022f4 	.word	0x200022f4
 8001cf4:	0800d7d4 	.word	0x0800d7d4
 8001cf8:	0800d7fc 	.word	0x0800d7fc

08001cfc <ReadFile>:

void ReadFile(char* fileName)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    // 현재 열린 파일이 있으면 닫기
    if (closeFlag == 0)
 8001d04:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <ReadFile+0xc0>)
 8001d06:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <ReadFile+0x16>
        CloseFile();
 8001d0e:	f7ff fefd 	bl	8001b0c <CloseFile>

    fres = f_open(&fil, fileName, FA_READ);
 8001d12:	2201      	movs	r2, #1
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	482a      	ldr	r0, [pc, #168]	@ (8001dc0 <ReadFile+0xc4>)
 8001d18:	f007 fc30 	bl	800957c <f_open>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <ReadFile+0xc8>)
 8001d22:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK)
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <ReadFile+0xc8>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d117      	bne.n	8001d5c <ReadFile+0x60>
    {
        printf("File '%s' opened for reading.\r\n", fileName);
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4826      	ldr	r0, [pc, #152]	@ (8001dc8 <ReadFile+0xcc>)
 8001d30:	f009 fa9a 	bl	800b268 <iprintf>
        printf("Failed to open file '%s' for reading!\r\n", fileName);
        return;
    }

    // 파일 전체 읽기
    memset(buffer, 0, sizeof(buffer));
 8001d34:	2264      	movs	r2, #100	@ 0x64
 8001d36:	2100      	movs	r1, #0
 8001d38:	4824      	ldr	r0, [pc, #144]	@ (8001dcc <ReadFile+0xd0>)
 8001d3a:	f009 fbff 	bl	800b53c <memset>
    fres = f_read(&fil, buffer, sizeof(buffer)-1, &br);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <ReadFile+0xd4>)
 8001d40:	2263      	movs	r2, #99	@ 0x63
 8001d42:	4922      	ldr	r1, [pc, #136]	@ (8001dcc <ReadFile+0xd0>)
 8001d44:	481e      	ldr	r0, [pc, #120]	@ (8001dc0 <ReadFile+0xc4>)
 8001d46:	f007 fde1 	bl	800990c <f_read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <ReadFile+0xc8>)
 8001d50:	701a      	strb	r2, [r3, #0]

    if (fres == FR_OK && br > 0)
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <ReadFile+0xc8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d126      	bne.n	8001da8 <ReadFile+0xac>
 8001d5a:	e004      	b.n	8001d66 <ReadFile+0x6a>
        printf("Failed to open file '%s' for reading!\r\n", fileName);
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	481d      	ldr	r0, [pc, #116]	@ (8001dd4 <ReadFile+0xd8>)
 8001d60:	f009 fa82 	bl	800b268 <iprintf>
        return;
 8001d64:	e026      	b.n	8001db4 <ReadFile+0xb8>
    if (fres == FR_OK && br > 0)
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <ReadFile+0xd4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01c      	beq.n	8001da8 <ReadFile+0xac>
    {
        printf("-----------FILE CONTENT----------\r\n");
 8001d6e:	481a      	ldr	r0, [pc, #104]	@ (8001dd8 <ReadFile+0xdc>)
 8001d70:	f009 fae2 	bl	800b338 <puts>
        printf("%s", buffer);
 8001d74:	4915      	ldr	r1, [pc, #84]	@ (8001dcc <ReadFile+0xd0>)
 8001d76:	4819      	ldr	r0, [pc, #100]	@ (8001ddc <ReadFile+0xe0>)
 8001d78:	f009 fa76 	bl	800b268 <iprintf>
        if (buffer[strlen(buffer)-1] != '\n')
 8001d7c:	4813      	ldr	r0, [pc, #76]	@ (8001dcc <ReadFile+0xd0>)
 8001d7e:	f7fe faaf 	bl	80002e0 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	3b01      	subs	r3, #1
 8001d86:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <ReadFile+0xd0>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	d002      	beq.n	8001d94 <ReadFile+0x98>
            printf("\r\n");
 8001d8e:	4814      	ldr	r0, [pc, #80]	@ (8001de0 <ReadFile+0xe4>)
 8001d90:	f009 fad2 	bl	800b338 <puts>
        printf("-----------END OF FILE-----------\r\n");
 8001d94:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <ReadFile+0xe8>)
 8001d96:	f009 facf 	bl	800b338 <puts>
        printf("%lu bytes read.\r\n", br);
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <ReadFile+0xd4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4811      	ldr	r0, [pc, #68]	@ (8001de8 <ReadFile+0xec>)
 8001da2:	f009 fa61 	bl	800b268 <iprintf>
 8001da6:	e002      	b.n	8001dae <ReadFile+0xb2>
    }
    else
    {
        printf("File is empty or read failed!\r\n");
 8001da8:	4810      	ldr	r0, [pc, #64]	@ (8001dec <ReadFile+0xf0>)
 8001daa:	f009 fac5 	bl	800b338 <puts>
    }

    f_close(&fil);  // 읽기 후 파일 닫기
 8001dae:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <ReadFile+0xc4>)
 8001db0:	f008 f91d 	bl	8009fee <f_close>
}
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000001 	.word	0x20000001
 8001dc0:	2000124c 	.word	0x2000124c
 8001dc4:	2000227c 	.word	0x2000227c
 8001dc8:	0800d80c 	.word	0x0800d80c
 8001dcc:	2000228c 	.word	0x2000228c
 8001dd0:	200022f8 	.word	0x200022f8
 8001dd4:	0800d82c 	.word	0x0800d82c
 8001dd8:	0800d854 	.word	0x0800d854
 8001ddc:	0800d878 	.word	0x0800d878
 8001de0:	0800d750 	.word	0x0800d750
 8001de4:	0800d87c 	.word	0x0800d87c
 8001de8:	0800d8a0 	.word	0x0800d8a0
 8001dec:	0800d8b4 	.word	0x0800d8b4

08001df0 <ProcessCommand>:

// ========== 인터페이스 함수 =================

// 명령어 처리 함수
void ProcessCommand(char *command) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	printf("Command received: %s\r\n", command);
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4836      	ldr	r0, [pc, #216]	@ (8001ed4 <ProcessCommand+0xe4>)
 8001dfc:	f009 fa34 	bl	800b268 <iprintf>

	if (strcmp(command, "mount") == 0) {
 8001e00:	4935      	ldr	r1, [pc, #212]	@ (8001ed8 <ProcessCommand+0xe8>)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fa0c 	bl	8000220 <strcmp>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <ProcessCommand+0x24>
		SDMount();
 8001e0e:	f7ff fde1 	bl	80019d4 <SDMount>
		ShowHelp();
	} else {
		printf("Unknown command: %s\r\n", command);
		printf("Type 'help' for available commands.\r\n");
	}
}
 8001e12:	e05b      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strcmp(command, "unmount") == 0) {
 8001e14:	4931      	ldr	r1, [pc, #196]	@ (8001edc <ProcessCommand+0xec>)
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fa02 	bl	8000220 <strcmp>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <ProcessCommand+0x38>
		SDUnmount();
 8001e22:	f7ff fdfd 	bl	8001a20 <SDUnmount>
}
 8001e26:	e051      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strncmp(command, "open ", 5) == 0) {
 8001e28:	2205      	movs	r2, #5
 8001e2a:	492d      	ldr	r1, [pc, #180]	@ (8001ee0 <ProcessCommand+0xf0>)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f009 fb8d 	bl	800b54c <strncmp>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <ProcessCommand+0x56>
		char *filename = command + 5;  // "open " 다음 부분
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3305      	adds	r3, #5
 8001e3c:	60fb      	str	r3, [r7, #12]
		OpenFile(filename);
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fe12 	bl	8001a68 <OpenFile>
}
 8001e44:	e042      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strcmp(command, "close") == 0) {
 8001e46:	4927      	ldr	r1, [pc, #156]	@ (8001ee4 <ProcessCommand+0xf4>)
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7fe f9e9 	bl	8000220 <strcmp>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <ProcessCommand+0x6a>
		CloseFile();
 8001e54:	f7ff fe5a 	bl	8001b0c <CloseFile>
}
 8001e58:	e038      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strncmp(command, "write ", 6) == 0) {
 8001e5a:	2206      	movs	r2, #6
 8001e5c:	4922      	ldr	r1, [pc, #136]	@ (8001ee8 <ProcessCommand+0xf8>)
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f009 fb74 	bl	800b54c <strncmp>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <ProcessCommand+0x88>
		char *text = command + 6;  // "write " 다음 부분
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3306      	adds	r3, #6
 8001e6e:	613b      	str	r3, [r7, #16]
		WriteFile(text);
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f7ff fee9 	bl	8001c48 <WriteFile>
}
 8001e76:	e029      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strncmp(command, "read ", 5) == 0) {
 8001e78:	2205      	movs	r2, #5
 8001e7a:	491c      	ldr	r1, [pc, #112]	@ (8001eec <ProcessCommand+0xfc>)
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f009 fb65 	bl	800b54c <strncmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <ProcessCommand+0xa6>
		char *filename = command + 5;  // "read " 다음 부분
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3305      	adds	r3, #5
 8001e8c:	617b      	str	r3, [r7, #20]
		ReadFile(filename);
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff34 	bl	8001cfc <ReadFile>
}
 8001e94:	e01a      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strcmp(command, "size") == 0) {
 8001e96:	4916      	ldr	r1, [pc, #88]	@ (8001ef0 <ProcessCommand+0x100>)
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe f9c1 	bl	8000220 <strcmp>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <ProcessCommand+0xba>
		CheckSize();
 8001ea4:	f7ff fe5a 	bl	8001b5c <CheckSize>
}
 8001ea8:	e010      	b.n	8001ecc <ProcessCommand+0xdc>
	} else if (strcmp(command, "help") == 0) {
 8001eaa:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <ProcessCommand+0x104>)
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe f9b7 	bl	8000220 <strcmp>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <ProcessCommand+0xce>
		ShowHelp();
 8001eb8:	f000 f822 	bl	8001f00 <ShowHelp>
}
 8001ebc:	e006      	b.n	8001ecc <ProcessCommand+0xdc>
		printf("Unknown command: %s\r\n", command);
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <ProcessCommand+0x108>)
 8001ec2:	f009 f9d1 	bl	800b268 <iprintf>
		printf("Type 'help' for available commands.\r\n");
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <ProcessCommand+0x10c>)
 8001ec8:	f009 fa36 	bl	800b338 <puts>
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800d8d4 	.word	0x0800d8d4
 8001ed8:	0800d8ec 	.word	0x0800d8ec
 8001edc:	0800d8f4 	.word	0x0800d8f4
 8001ee0:	0800d8fc 	.word	0x0800d8fc
 8001ee4:	0800d904 	.word	0x0800d904
 8001ee8:	0800d90c 	.word	0x0800d90c
 8001eec:	0800d914 	.word	0x0800d914
 8001ef0:	0800d91c 	.word	0x0800d91c
 8001ef4:	0800d924 	.word	0x0800d924
 8001ef8:	0800d92c 	.word	0x0800d92c
 8001efc:	0800d944 	.word	0x0800d944

08001f00 <ShowHelp>:

// 도움말 함수
void ShowHelp(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	printf("\r\n=== Available Commands ===\r\n");
 8001f04:	480f      	ldr	r0, [pc, #60]	@ (8001f44 <ShowHelp+0x44>)
 8001f06:	f009 fa17 	bl	800b338 <puts>
	printf("mount              - Mount SD card\r\n");
 8001f0a:	480f      	ldr	r0, [pc, #60]	@ (8001f48 <ShowHelp+0x48>)
 8001f0c:	f009 fa14 	bl	800b338 <puts>
	printf("unmount            - Unmount SD card\r\n");
 8001f10:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <ShowHelp+0x4c>)
 8001f12:	f009 fa11 	bl	800b338 <puts>
	printf("open <filename>    - Open file\r\n");
 8001f16:	480e      	ldr	r0, [pc, #56]	@ (8001f50 <ShowHelp+0x50>)
 8001f18:	f009 fa0e 	bl	800b338 <puts>
	printf("close              - Close current file\r\n");
 8001f1c:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <ShowHelp+0x54>)
 8001f1e:	f009 fa0b 	bl	800b338 <puts>
	printf("write <text>       - Write text to file\r\n");
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <ShowHelp+0x58>)
 8001f24:	f009 fa08 	bl	800b338 <puts>
	printf("read <filename>    - Read file content\r\n");
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <ShowHelp+0x5c>)
 8001f2a:	f009 fa05 	bl	800b338 <puts>
	printf("size               - Check SD card free space\r\n");
 8001f2e:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <ShowHelp+0x60>)
 8001f30:	f009 fa02 	bl	800b338 <puts>
	printf("help               - Show this help\r\n");
 8001f34:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <ShowHelp+0x64>)
 8001f36:	f009 f9ff 	bl	800b338 <puts>
	printf("==========================\r\n");
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <ShowHelp+0x68>)
 8001f3c:	f009 f9fc 	bl	800b338 <puts>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800d96c 	.word	0x0800d96c
 8001f48:	0800d98c 	.word	0x0800d98c
 8001f4c:	0800d9b0 	.word	0x0800d9b0
 8001f50:	0800d9d8 	.word	0x0800d9d8
 8001f54:	0800d9f8 	.word	0x0800d9f8
 8001f58:	0800da24 	.word	0x0800da24
 8001f5c:	0800da50 	.word	0x0800da50
 8001f60:	0800da78 	.word	0x0800da78
 8001f64:	0800daa8 	.word	0x0800daa8
 8001f68:	0800dad0 	.word	0x0800dad0

08001f6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f72:	f000 fc04 	bl	800277e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f76:	f000 f85d 	bl	8002034 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f7a:	f7ff fca9 	bl	80018d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001f7e:	f7ff f801 	bl	8000f84 <MX_DMA_Init>
	MX_SPI1_Init();
 8001f82:	f000 f8e9 	bl	8002158 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001f86:	f000 fb25 	bl	80025d4 <MX_USART1_UART_Init>
	if (MX_FATFS_Init() != APP_OK) {
 8001f8a:	f005 f863 	bl	8007054 <MX_FATFS_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <main+0x2c>
		Error_Handler();
 8001f94:	f000 f8da 	bl	800214c <Error_Handler>
	}
	/* USER CODE BEGIN 2 */

	static uint8_t rxData;
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <main+0xa8>)
 8001f9c:	481e      	ldr	r0, [pc, #120]	@ (8002018 <main+0xac>)
 8001f9e:	f003 f81d 	bl	8004fdc <HAL_UART_Receive_IT>

	printf("\r\n=== SD Card Control System ===\r\n");
 8001fa2:	481e      	ldr	r0, [pc, #120]	@ (800201c <main+0xb0>)
 8001fa4:	f009 f9c8 	bl	800b338 <puts>
	printf("Type 'help' for available commands.\r\n");
 8001fa8:	481d      	ldr	r0, [pc, #116]	@ (8002020 <main+0xb4>)
 8001faa:	f009 f9c5 	bl	800b338 <puts>
	printf("Ready> ");
 8001fae:	481d      	ldr	r0, [pc, #116]	@ (8002024 <main+0xb8>)
 8001fb0:	f009 f95a 	bl	800b268 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		uint8_t currentCardState = SD_IsCardDetected();
 8001fb4:	f7ff fcfe 	bl	80019b4 <SD_IsCardDetected>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]

		if (currentCardState && !previousCardState) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <main+0x6c>
 8001fc2:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <main+0xbc>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <main+0x6c>
			// 카드 삽입 감지
			HAL_Delay(500); // 디바운싱
 8001fca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fce:	f000 fc47 	bl	8002860 <HAL_Delay>
			SDMount();
 8001fd2:	f7ff fcff 	bl	80019d4 <SDMount>
 8001fd6:	e008      	b.n	8001fea <main+0x7e>
		} else if (!currentCardState && previousCardState) {
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <main+0x7e>
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <main+0xbc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <main+0x7e>
			// 카드 제거 감지
			SDUnmount();
 8001fe6:	f7ff fd1b 	bl	8001a20 <SDUnmount>
		}

		previousCardState = currentCardState;
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <main+0xbc>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	7013      	strb	r3, [r2, #0]

		// 명령어 처리
		if (commandReady) {
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <main+0xc0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <main+0x9e>
			ProcessCommand(rxBuffer);
 8001ff8:	480d      	ldr	r0, [pc, #52]	@ (8002030 <main+0xc4>)
 8001ffa:	f7ff fef9 	bl	8001df0 <ProcessCommand>
			commandReady = 0;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <main+0xc0>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
			printf("Ready> ");
 8002004:	4807      	ldr	r0, [pc, #28]	@ (8002024 <main+0xb8>)
 8002006:	f009 f92f 	bl	800b268 <iprintf>
		}

		HAL_Delay(100);
 800200a:	2064      	movs	r0, #100	@ 0x64
 800200c:	f000 fc28 	bl	8002860 <HAL_Delay>
	while (1) {
 8002010:	e7d0      	b.n	8001fb4 <main+0x48>
 8002012:	bf00      	nop
 8002014:	20002362 	.word	0x20002362
 8002018:	2000248c 	.word	0x2000248c
 800201c:	0800daec 	.word	0x0800daec
 8002020:	0800d944 	.word	0x0800d944
 8002024:	0800db10 	.word	0x0800db10
 8002028:	200022f0 	.word	0x200022f0
 800202c:	20002361 	.word	0x20002361
 8002030:	200022fc 	.word	0x200022fc

08002034 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b094      	sub	sp, #80	@ 0x50
 8002038:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	2238      	movs	r2, #56	@ 0x38
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f009 fa7a 	bl	800b53c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002056:	2000      	movs	r0, #0
 8002058:	f001 f96c 	bl	8003334 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800205c:	2301      	movs	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002064:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002066:	2302      	movs	r3, #2
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206a:	2303      	movs	r3, #3
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800206e:	2301      	movs	r3, #1
 8002070:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002072:	2328      	movs	r3, #40	@ 0x28
 8002074:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002076:	2302      	movs	r3, #2
 8002078:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800207a:	2302      	movs	r3, #2
 800207c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800207e:	2302      	movs	r3, #2
 8002080:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002082:	f107 0318 	add.w	r3, r7, #24
 8002086:	4618      	mov	r0, r3
 8002088:	f001 fa08 	bl	800349c <HAL_RCC_OscConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <SystemClock_Config+0x62>
		Error_Handler();
 8002092:	f000 f85b 	bl	800214c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002096:	230f      	movs	r3, #15
 8002098:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209a:	2303      	movs	r3, #3
 800209c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2104      	movs	r1, #4
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fd06 	bl	8003ac0 <HAL_RCC_ClockConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x8a>
		Error_Handler();
 80020ba:	f000 f847 	bl	800214c <Error_Handler>
	}
}
 80020be:	bf00      	nop
 80020c0:	3750      	adds	r7, #80	@ 0x50
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_UART_RxCpltCallback+0x6c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d128      	bne.n	800212c <HAL_UART_RxCpltCallback+0x64>
		static uint8_t rxData;

		if (rxData == '\r' || rxData == '\n')  // Enter 키 감지
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_UART_RxCpltCallback+0x70>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b0d      	cmp	r3, #13
 80020e0:	d003      	beq.n	80020ea <HAL_UART_RxCpltCallback+0x22>
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_UART_RxCpltCallback+0x70>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d10c      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x3c>
				{
			rxBuffer[rxIndex] = '\0';  // 문자열 종료
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_UART_RxCpltCallback+0x74>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_UART_RxCpltCallback+0x78>)
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
			commandReady = 1;
 80020f6:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_UART_RxCpltCallback+0x7c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
			rxIndex = 0;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_UART_RxCpltCallback+0x74>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e00e      	b.n	8002122 <HAL_UART_RxCpltCallback+0x5a>
		} else if (rxIndex < sizeof(rxBuffer) - 1) {
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_UART_RxCpltCallback+0x74>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b62      	cmp	r3, #98	@ 0x62
 800210a:	d80a      	bhi.n	8002122 <HAL_UART_RxCpltCallback+0x5a>
			rxBuffer[rxIndex++] = rxData;
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_UART_RxCpltCallback+0x74>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	b2d1      	uxtb	r1, r2
 8002114:	4a09      	ldr	r2, [pc, #36]	@ (800213c <HAL_UART_RxCpltCallback+0x74>)
 8002116:	7011      	strb	r1, [r2, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_UART_RxCpltCallback+0x70>)
 800211c:	7819      	ldrb	r1, [r3, #0]
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_UART_RxCpltCallback+0x78>)
 8002120:	5499      	strb	r1, [r3, r2]
		}

		// 다음 문자 수신 대기
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8002122:	2201      	movs	r2, #1
 8002124:	4904      	ldr	r1, [pc, #16]	@ (8002138 <HAL_UART_RxCpltCallback+0x70>)
 8002126:	4808      	ldr	r0, [pc, #32]	@ (8002148 <HAL_UART_RxCpltCallback+0x80>)
 8002128:	f002 ff58 	bl	8004fdc <HAL_UART_Receive_IT>
	}
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40013800 	.word	0x40013800
 8002138:	20002363 	.word	0x20002363
 800213c:	20002360 	.word	0x20002360
 8002140:	200022fc 	.word	0x200022fc
 8002144:	20002361 	.word	0x20002361
 8002148:	2000248c 	.word	0x2000248c

0800214c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <Error_Handler+0x8>

08002158 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <MX_SPI1_Init+0x74>)
 800215e:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <MX_SPI1_Init+0x78>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_SPI1_Init+0x74>)
 8002164:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800216a:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_SPI1_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_SPI1_Init+0x74>)
 8002172:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002176:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_SPI1_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <MX_SPI1_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_SPI1_Init+0x74>)
 8002186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_SPI1_Init+0x74>)
 800218e:	2210      	movs	r2, #16
 8002190:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_SPI1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_SPI1_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_SPI1_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_SPI1_Init+0x74>)
 80021a6:	2207      	movs	r2, #7
 80021a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_SPI1_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_SPI1_Init+0x74>)
 80021b2:	2208      	movs	r2, #8
 80021b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_SPI1_Init+0x74>)
 80021b8:	f002 f88e 	bl	80042d8 <HAL_SPI_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021c2:	f7ff ffc3 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20002364 	.word	0x20002364
 80021d0:	40013000 	.word	0x40013000

080021d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HAL_SPI_MspInit+0x120>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d17a      	bne.n	80022ec <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f6:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	4a3f      	ldr	r2, [pc, #252]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 80021fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002200:	6613      	str	r3, [r2, #96]	@ 0x60
 8002202:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b3a      	ldr	r3, [pc, #232]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a39      	ldr	r2, [pc, #228]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221a:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <HAL_SPI_MspInit+0x124>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_CLK_Pin|SPI1_MISO_SD_DAT0_Pin|SPI1_MOSI_SD_CMD_Pin;
 8002226:	23e0      	movs	r3, #224	@ 0xe0
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002236:	2305      	movs	r3, #5
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002244:	f000 fec4 	bl	8002fd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 800224a:	4a2d      	ldr	r2, [pc, #180]	@ (8002300 <HAL_SPI_MspInit+0x12c>)
 800224c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002250:	220a      	movs	r2, #10
 8002252:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225a:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002260:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002266:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002278:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 800227a:	2200      	movs	r2, #0
 800227c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800227e:	481f      	ldr	r0, [pc, #124]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002280:	f000 fc2c 	bl	8002adc <HAL_DMA_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800228a:	f7ff ff5f 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002292:	659a      	str	r2, [r3, #88]	@ 0x58
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_SPI_MspInit+0x128>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 800229a:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 800229c:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <HAL_SPI_MspInit+0x134>)
 800229e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022a2:	220b      	movs	r2, #11
 80022a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022a8:	2210      	movs	r2, #16
 80022aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022c6:	2220      	movs	r2, #32
 80022c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022d2:	f000 fc03 	bl	8002adc <HAL_DMA_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80022dc:	f7ff ff36 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80022e6:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <HAL_SPI_MspInit+0x130>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	@ 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40013000 	.word	0x40013000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	200023c8 	.word	0x200023c8
 8002300:	40020008 	.word	0x40020008
 8002304:	20002428 	.word	0x20002428
 8002308:	4002001c 	.word	0x4002001c

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <HAL_MspInit+0x44>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002316:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <HAL_MspInit+0x44>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6613      	str	r3, [r2, #96]	@ 0x60
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <HAL_MspInit+0x44>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <HAL_MspInit+0x44>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	4a08      	ldr	r2, [pc, #32]	@ (8002350 <HAL_MspInit+0x44>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	@ 0x58
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_MspInit+0x44>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002342:	f001 f89b 	bl	800347c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <NMI_Handler+0x4>

0800235c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <MemManage_Handler+0x4>

0800236c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <UsageFault_Handler+0x4>

0800237c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <SysTick_Handler+0x38>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <SysTick_Handler+0x18>
		Timer1--;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <SysTick_Handler+0x38>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <SysTick_Handler+0x38>)
 80023be:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <SysTick_Handler+0x3c>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <SysTick_Handler+0x2c>
		Timer2--;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <SysTick_Handler+0x3c>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Handler+0x3c>)
 80023d2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d4:	f000 fa26 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80023d8:	f000 fb73 	bl	8002ac2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000208 	.word	0x20000208
 80023e4:	2000020a 	.word	0x2000020a

080023e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023ec:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <DMA1_Channel1_IRQHandler+0x10>)
 80023ee:	f000 fcdd 	bl	8002dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200023c8 	.word	0x200023c8

080023fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <DMA1_Channel2_IRQHandler+0x10>)
 8002402:	f000 fcd3 	bl	8002dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20002428 	.word	0x20002428

08002410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <USART1_IRQHandler+0x10>)
 8002416:	f002 fe2d 	bl	8005074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000248c 	.word	0x2000248c

08002424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_kill>:

int _kill(int pid, int sig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800243e:	f009 f8e1 	bl	800b604 <__errno>
 8002442:	4603      	mov	r3, r0
 8002444:	2216      	movs	r2, #22
 8002446:	601a      	str	r2, [r3, #0]
  return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_exit>:

void _exit (int status)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ffe7 	bl	8002434 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <_exit+0x12>

0800246a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e00a      	b.n	8002492 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800247c:	f3af 8000 	nop.w
 8002480:	4601      	mov	r1, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60ba      	str	r2, [r7, #8]
 8002488:	b2ca      	uxtb	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	dbf0      	blt.n	800247c <_read+0x12>
  }

  return len;
 800249a:	687b      	ldr	r3, [r7, #4]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e009      	b.n	80024ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa66 	bl	8001990 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbf1      	blt.n	80024b6 <_write+0x12>
  }
  return len;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_close>:

int _close(int file)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002504:	605a      	str	r2, [r3, #4]
  return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_isatty>:

int _isatty(int file)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254c:	4a14      	ldr	r2, [pc, #80]	@ (80025a0 <_sbrk+0x5c>)
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <_sbrk+0x60>)
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002558:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <_sbrk+0x64>)
 8002562:	4a12      	ldr	r2, [pc, #72]	@ (80025ac <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002574:	f009 f846 	bl	800b604 <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	e009      	b.n	8002598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <_sbrk+0x64>)
 8002594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20008000 	.word	0x20008000
 80025a4:	00000400 	.word	0x00000400
 80025a8:	20002488 	.word	0x20002488
 80025ac:	200028b0 	.word	0x200028b0

080025b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	@ (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025da:	4a23      	ldr	r2, [pc, #140]	@ (8002668 <MX_USART1_UART_Init+0x94>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800261c:	4811      	ldr	r0, [pc, #68]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 800261e:	f002 fbff 	bl	8004e20 <HAL_UART_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002628:	f7ff fd90 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800262c:	2100      	movs	r1, #0
 800262e:	480d      	ldr	r0, [pc, #52]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002630:	f004 fc45 	bl	8006ebe <HAL_UARTEx_SetTxFifoThreshold>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800263a:	f7ff fd87 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	4808      	ldr	r0, [pc, #32]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002642:	f004 fc7a 	bl	8006f3a <HAL_UARTEx_SetRxFifoThreshold>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800264c:	f7ff fd7e 	bl	800214c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002650:	4804      	ldr	r0, [pc, #16]	@ (8002664 <MX_USART1_UART_Init+0x90>)
 8002652:	f004 fbfb 	bl	8006e4c <HAL_UARTEx_DisableFifoMode>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800265c:	f7ff fd76 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000248c 	.word	0x2000248c
 8002668:	40013800 	.word	0x40013800

0800266c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b09a      	sub	sp, #104	@ 0x68
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2244      	movs	r2, #68	@ 0x44
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f008 ff55 	bl	800b53c <memset>
  if(uartHandle->Instance==USART1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_UART_MspInit+0xb4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d13d      	bne.n	8002718 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fc25 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026b4:	f7ff fd4a 	bl	800214c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_UART_MspInit+0xb8>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e8:	23c0      	movs	r3, #192	@ 0xc0
 80026ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f8:	2307      	movs	r3, #7
 80026fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002700:	4619      	mov	r1, r3
 8002702:	4809      	ldr	r0, [pc, #36]	@ (8002728 <HAL_UART_MspInit+0xbc>)
 8002704:	f000 fc64 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2025      	movs	r0, #37	@ 0x25
 800270e:	f000 f9a4 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002712:	2025      	movs	r0, #37	@ 0x25
 8002714:	f000 f9bb 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002718:	bf00      	nop
 800271a:	3768      	adds	r7, #104	@ 0x68
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40013800 	.word	0x40013800
 8002724:	40021000 	.word	0x40021000
 8002728:	48000400 	.word	0x48000400

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800272c:	480d      	ldr	r0, [pc, #52]	@ (8002764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800272e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff ff3e 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	@ (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800275a:	f008 ff59 	bl	800b610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff fc05 	bl	8001f6c <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   r0, =_estack
 8002764:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002770:	0800e364 	.word	0x0800e364
  ldr r2, =_sbss
 8002774:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002778:	200028ac 	.word	0x200028ac

0800277c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_2_IRQHandler>

0800277e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 f95b 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800278e:	200f      	movs	r0, #15
 8002790:	f000 f80e 	bl	80027b0 <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e001      	b.n	80027a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a0:	f7ff fdb4 	bl	800230c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a4:	79fb      	ldrb	r3, [r7, #7]

}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027bc:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_InitTick+0x68>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d022      	beq.n	800280a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_InitTick+0x6c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <HAL_InitTick+0x68>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f966 	bl	8002aaa <HAL_SYSTICK_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10f      	bne.n	8002804 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	d809      	bhi.n	80027fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ea:	2200      	movs	r2, #0
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	f04f 30ff 	mov.w	r0, #4294967295
 80027f2:	f000 f932 	bl	8002a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_InitTick+0x70>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e007      	b.n	800280e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e004      	b.n	800280e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e001      	b.n	800280e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000000c 	.word	0x2000000c
 800281c:	20000004 	.word	0x20000004
 8002820:	20000008 	.word	0x20000008

08002824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_IncTick+0x1c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_IncTick+0x20>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4413      	add	r3, r2
 8002832:	4a03      	ldr	r2, [pc, #12]	@ (8002840 <HAL_IncTick+0x1c>)
 8002834:	6013      	str	r3, [r2, #0]
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	20002520 	.word	0x20002520
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20002520 	.word	0x20002520

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d004      	beq.n	8002884 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_Delay+0x40>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002884:	bf00      	nop
 8002886:	f7ff ffdf 	bl	8002848 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	429a      	cmp	r2, r3
 8002894:	d8f7      	bhi.n	8002886 <HAL_Delay+0x26>
  {
  }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000000c 	.word	0x2000000c

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	@ (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	@ (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	@ (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	@ 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff40 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff90 	bl	8002998 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5f 	bl	8002944 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff33 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffa4 	bl	8002a00 <SysTick_Config>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002ac6:	f000 f802 	bl	8002ace <HAL_SYSTICK_Callback>
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e08d      	b.n	8002c0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_DMA_Init+0x138>)
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d80f      	bhi.n	8002b1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <HAL_DMA_Init+0x13c>)
 8002b02:	4413      	add	r3, r2
 8002b04:	4a45      	ldr	r2, [pc, #276]	@ (8002c1c <HAL_DMA_Init+0x140>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	009a      	lsls	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a42      	ldr	r2, [pc, #264]	@ (8002c20 <HAL_DMA_Init+0x144>)
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b18:	e00e      	b.n	8002b38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b40      	ldr	r3, [pc, #256]	@ (8002c24 <HAL_DMA_Init+0x148>)
 8002b22:	4413      	add	r3, r2
 8002b24:	4a3d      	ldr	r2, [pc, #244]	@ (8002c1c <HAL_DMA_Init+0x140>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a3c      	ldr	r2, [pc, #240]	@ (8002c28 <HAL_DMA_Init+0x14c>)
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9be 	bl	8002f0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b98:	d102      	bne.n	8002ba0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_DMA_Init+0x104>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d80c      	bhi.n	8002be0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9de 	bl	8002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e008      	b.n	8002bf2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40020407 	.word	0x40020407
 8002c18:	bffdfff8 	.word	0xbffdfff8
 8002c1c:	cccccccd 	.word	0xcccccccd
 8002c20:	40020000 	.word	0x40020000
 8002c24:	bffdfbf8 	.word	0xbffdfbf8
 8002c28:	40020400 	.word	0x40020400

08002c2c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d005      	beq.n	8002c50 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2204      	movs	r2, #4
 8002c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e037      	b.n	8002cc0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020e 	bic.w	r2, r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c6e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c9c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cb4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cbe:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d00d      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e047      	b.n	8002da2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 020e 	bic.w	r2, r2, #14
 8002d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f003 021f 	and.w	r2, r3, #31
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
    }
  }
  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d026      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x7a>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d021      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0204 	bic.w	r2, r2, #4
 8002dfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d071      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e24:	e06c      	b.n	8002f00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2202      	movs	r2, #2
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02e      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d029      	beq.n	8002e98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 020a 	bic.w	r2, r2, #10
 8002e60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2102      	movs	r1, #2
 8002e78:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d038      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e96:	e033      	b.n	8002f00 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02a      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d025      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 020e 	bic.w	r2, r2, #14
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f003 021f 	and.w	r2, r3, #31
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
}
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d802      	bhi.n	8002f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f20:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e001      	b.n	8002f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f28:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3b08      	subs	r3, #8
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	@ (8002f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40020407 	.word	0x40020407
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020820 	.word	0x40020820
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	40020880 	.word	0x40020880

08002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002faa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	1000823f 	.word	0x1000823f
 8002fcc:	40020940 	.word	0x40020940

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fde:	e15a      	b.n	8003296 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 814c 	beq.w	8003290 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d005      	beq.n	8003010 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800300c:	2b02      	cmp	r3, #2
 800300e:	d130      	bne.n	8003072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003046:	2201      	movs	r2, #1
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0201 	and.w	r2, r3, #1
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b03      	cmp	r3, #3
 800307c:	d017      	beq.n	80030ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d123      	bne.n	8003102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a6 	beq.w	8003290 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003144:	4b5b      	ldr	r3, [pc, #364]	@ (80032b4 <HAL_GPIO_Init+0x2e4>)
 8003146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003148:	4a5a      	ldr	r2, [pc, #360]	@ (80032b4 <HAL_GPIO_Init+0x2e4>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003150:	4b58      	ldr	r3, [pc, #352]	@ (80032b4 <HAL_GPIO_Init+0x2e4>)
 8003152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315c:	4a56      	ldr	r2, [pc, #344]	@ (80032b8 <HAL_GPIO_Init+0x2e8>)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	220f      	movs	r2, #15
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003186:	d01f      	beq.n	80031c8 <HAL_GPIO_Init+0x1f8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a4c      	ldr	r2, [pc, #304]	@ (80032bc <HAL_GPIO_Init+0x2ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d019      	beq.n	80031c4 <HAL_GPIO_Init+0x1f4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a4b      	ldr	r2, [pc, #300]	@ (80032c0 <HAL_GPIO_Init+0x2f0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_GPIO_Init+0x1f0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a4a      	ldr	r2, [pc, #296]	@ (80032c4 <HAL_GPIO_Init+0x2f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00d      	beq.n	80031bc <HAL_GPIO_Init+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a49      	ldr	r2, [pc, #292]	@ (80032c8 <HAL_GPIO_Init+0x2f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <HAL_GPIO_Init+0x1e8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a48      	ldr	r2, [pc, #288]	@ (80032cc <HAL_GPIO_Init+0x2fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_GPIO_Init+0x1e4>
 80031b0:	2305      	movs	r3, #5
 80031b2:	e00a      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031b4:	2306      	movs	r3, #6
 80031b6:	e008      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031b8:	2304      	movs	r3, #4
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031bc:	2303      	movs	r3, #3
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031c8:	2300      	movs	r3, #0
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031da:	4937      	ldr	r1, [pc, #220]	@ (80032b8 <HAL_GPIO_Init+0x2e8>)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031e8:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800320c:	4a30      	ldr	r2, [pc, #192]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003236:	4a26      	ldr	r2, [pc, #152]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800323c:	4b24      	ldr	r3, [pc, #144]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003260:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800328a:	4a11      	ldr	r2, [pc, #68]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3301      	adds	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f ae9d 	bne.w	8002fe0 <HAL_GPIO_Init+0x10>
  }
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	48000400 	.word	0x48000400
 80032c0:	48000800 	.word	0x48000800
 80032c4:	48000c00 	.word	0x48000c00
 80032c8:	48001000 	.word	0x48001000
 80032cc:	48001400 	.word	0x48001400
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d141      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003342:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334e:	d131      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003350:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003356:	4a46      	ldr	r2, [pc, #280]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800335c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003360:	4b43      	ldr	r3, [pc, #268]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003368:	4a41      	ldr	r2, [pc, #260]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003370:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2232      	movs	r2, #50	@ 0x32
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a3f      	ldr	r2, [pc, #252]	@ (8003478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	0c9b      	lsrs	r3, r3, #18
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003386:	e002      	b.n	800338e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b01      	subs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338e:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339a:	d102      	bne.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f2      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a2:	4b33      	ldr	r3, [pc, #204]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ae:	d158      	bne.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e057      	b.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033c4:	e04d      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033cc:	d141      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ce:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d131      	bne.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e2:	4a23      	ldr	r2, [pc, #140]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ec:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2232      	movs	r2, #50	@ 0x32
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003412:	e002      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341a:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d102      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f2      	bne.n	8003414 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343a:	d112      	bne.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e011      	b.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003446:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003450:	e007      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003452:	4b07      	ldr	r3, [pc, #28]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800345a:	4a05      	ldr	r2, [pc, #20]	@ (8003470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003460:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40007000 	.word	0x40007000
 8003474:	20000004 	.word	0x20000004
 8003478:	431bde83 	.word	0x431bde83

0800347c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800348a:	6093      	str	r3, [r2, #8]
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40007000 	.word	0x40007000

0800349c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e2fe      	b.n	8003aac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d075      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4b97      	ldr	r3, [pc, #604]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	4b94      	ldr	r3, [pc, #592]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d102      	bne.n	80034da <HAL_RCC_OscConfig+0x3e>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_OscConfig+0x44>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e2d9      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x74>
 8003502:	4b85      	ldr	r3, [pc, #532]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a84      	ldr	r2, [pc, #528]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x98>
 800351a:	4b7f      	ldr	r3, [pc, #508]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7e      	ldr	r2, [pc, #504]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b7c      	ldr	r3, [pc, #496]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7b      	ldr	r2, [pc, #492]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003534:	4b78      	ldr	r3, [pc, #480]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a77      	ldr	r2, [pc, #476]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b75      	ldr	r3, [pc, #468]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a74      	ldr	r2, [pc, #464]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7ff f978 	bl	8002848 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7ff f974 	bl	8002848 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e29e      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356e:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xc0>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7ff f964 	bl	8002848 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff f960 	bl	8002848 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e28a      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003596:	4b60      	ldr	r3, [pc, #384]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0xe8>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d075      	beq.n	800369e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b2:	4b59      	ldr	r3, [pc, #356]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035bc:	4b56      	ldr	r3, [pc, #344]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0x136>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_OscConfig+0x13c>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11f      	bne.n	8003618 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x154>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e25d      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	4946      	ldr	r1, [pc, #280]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <HAL_RCC_OscConfig+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f8d1 	bl	80027b0 <HAL_InitTick>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d043      	beq.n	800369c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e249      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d023      	beq.n	8003668 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b3d      	ldr	r3, [pc, #244]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3c      	ldr	r2, [pc, #240]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7ff f90c 	bl	8002848 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003634:	f7ff f908 	bl	8002848 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e232      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	492d      	ldr	r1, [pc, #180]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
 8003666:	e01a      	b.n	800369e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003668:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 800366e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7ff f8e8 	bl	8002848 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367c:	f7ff f8e4 	bl	8002848 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e20e      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368e:	4b22      	ldr	r3, [pc, #136]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x1e0>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d041      	beq.n	800372e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01c      	beq.n	80036ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80036b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7ff f8c1 	bl	8002848 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ca:	f7ff f8bd 	bl	8002848 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1e7      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <HAL_RCC_OscConfig+0x22e>
 80036ea:	e020      	b.n	800372e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f2:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7ff f8a4 	bl	8002848 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003702:	e00d      	b.n	8003720 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003704:	f7ff f8a0 	bl	8002848 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d906      	bls.n	8003720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1ca      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	4b8c      	ldr	r3, [pc, #560]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ea      	bne.n	8003704 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a6 	beq.w	8003888 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003740:	4b84      	ldr	r3, [pc, #528]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_OscConfig+0x2b4>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x2b6>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b7f      	ldr	r3, [pc, #508]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	4a7e      	ldr	r2, [pc, #504]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003760:	6593      	str	r3, [r2, #88]	@ 0x58
 8003762:	4b7c      	ldr	r3, [pc, #496]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003772:	4b79      	ldr	r3, [pc, #484]	@ (8003958 <HAL_RCC_OscConfig+0x4bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377e:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCC_OscConfig+0x4bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a75      	ldr	r2, [pc, #468]	@ (8003958 <HAL_RCC_OscConfig+0x4bc>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7ff f85d 	bl	8002848 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7ff f859 	bl	8002848 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e183      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003958 <HAL_RCC_OscConfig+0x4bc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <HAL_RCC_OscConfig+0x32e>
 80037b8:	4b66      	ldr	r3, [pc, #408]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a65      	ldr	r2, [pc, #404]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c8:	e024      	b.n	8003814 <HAL_RCC_OscConfig+0x378>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d110      	bne.n	80037f4 <HAL_RCC_OscConfig+0x358>
 80037d2:	4b60      	ldr	r3, [pc, #384]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d8:	4a5e      	ldr	r2, [pc, #376]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f2:	e00f      	b.n	8003814 <HAL_RCC_OscConfig+0x378>
 80037f4:	4b57      	ldr	r3, [pc, #348]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a56      	ldr	r2, [pc, #344]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7ff f814 	bl	8002848 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7ff f810 	bl	8002848 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e138      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383a:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ed      	beq.n	8003824 <HAL_RCC_OscConfig+0x388>
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe fffd 	bl	8002848 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fff9 	bl	8002848 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e121      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003868:	4b3a      	ldr	r3, [pc, #232]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ed      	bne.n	8003852 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b35      	ldr	r3, [pc, #212]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	4a34      	ldr	r2, [pc, #208]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d03c      	beq.n	800390e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800389c:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800389e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fe ffcc 	bl	8002848 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b4:	f7fe ffc8 	bl	8002848 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0f2      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ef      	beq.n	80038b4 <HAL_RCC_OscConfig+0x418>
 80038d4:	e01b      	b.n	800390e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe ffaf 	bl	8002848 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ee:	f7fe ffab 	bl	8002848 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0d5      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003900:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ef      	bne.n	80038ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80c9 	beq.w	8003aaa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003918:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b0c      	cmp	r3, #12
 8003922:	f000 8083 	beq.w	8003a2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d15e      	bne.n	80039ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <HAL_RCC_OscConfig+0x4b8>)
 8003934:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fe ff85 	bl	8002848 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	e00c      	b.n	800395c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe ff81 	bl	8002848 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d905      	bls.n	800395c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0ab      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395c:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ec      	bne.n	8003942 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003968:	4b52      	ldr	r3, [pc, #328]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <HAL_RCC_OscConfig+0x61c>)
 800396e:	4013      	ands	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6a11      	ldr	r1, [r2, #32]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003978:	3a01      	subs	r2, #1
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003982:	0212      	lsls	r2, r2, #8
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	0552      	lsls	r2, r2, #21
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003996:	0852      	lsrs	r2, r2, #1
 8003998:	3a01      	subs	r2, #1
 800399a:	0652      	lsls	r2, r2, #25
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039a2:	06d2      	lsls	r2, r2, #27
 80039a4:	430a      	orrs	r2, r1
 80039a6:	4943      	ldr	r1, [pc, #268]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ac:	4b41      	ldr	r3, [pc, #260]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a40      	ldr	r2, [pc, #256]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe ff40 	bl	8002848 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe ff3c 	bl	8002848 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e066      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x530>
 80039ea:	e05e      	b.n	8003aaa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a30      	ldr	r2, [pc, #192]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe ff26 	bl	8002848 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe ff22 	bl	8002848 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e04c      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a12:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a1e:	4b25      	ldr	r3, [pc, #148]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4924      	ldr	r1, [pc, #144]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 8003a24:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <HAL_RCC_OscConfig+0x620>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
 8003a2a:	e03e      	b.n	8003aaa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e039      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a38:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_RCC_OscConfig+0x618>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0203 	and.w	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d12c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	3b01      	subs	r3, #1
 8003a58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d123      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d11b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d113      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	019f800c 	.word	0x019f800c
 8003abc:	feeefffc 	.word	0xfeeefffc

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e11e      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b91      	ldr	r3, [pc, #580]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d910      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 020f 	bic.w	r2, r3, #15
 8003aee:	498c      	ldr	r1, [pc, #560]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b8a      	ldr	r3, [pc, #552]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e106      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d073      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d129      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1c:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0f4      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b2c:	f000 f99e 	bl	8003e6c <RCC_GetSysClockFreqFromPLLSource>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4a7c      	ldr	r2, [pc, #496]	@ (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d93f      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d033      	beq.n	8003bba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12f      	bne.n	8003bba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5a:	4b72      	ldr	r3, [pc, #456]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b62:	4a70      	ldr	r2, [pc, #448]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e024      	b.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4b6a      	ldr	r3, [pc, #424]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0c6      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b66      	ldr	r3, [pc, #408]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0be      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b98:	f000 f8ce 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4a61      	ldr	r2, [pc, #388]	@ (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d909      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bae:	4a5d      	ldr	r2, [pc, #372]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bb6:	2380      	movs	r3, #128	@ 0x80
 8003bb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b5a      	ldr	r3, [pc, #360]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4957      	ldr	r1, [pc, #348]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fe3c 	bl	8002848 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fe fe38 	bl	8002848 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e095      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b4e      	ldr	r3, [pc, #312]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d023      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a42      	ldr	r2, [pc, #264]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c34:	4a3b      	ldr	r2, [pc, #236]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4936      	ldr	r1, [pc, #216]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b80      	cmp	r3, #128	@ 0x80
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c56:	4b33      	ldr	r3, [pc, #204]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a32      	ldr	r2, [pc, #200]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d21d      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c70:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 020f 	bic.w	r2, r3, #15
 8003c78:	4929      	ldr	r1, [pc, #164]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fde2 	bl	8002848 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fe fdde 	bl	8002848 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e03b      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1ed      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4917      	ldr	r1, [pc, #92]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490f      	ldr	r1, [pc, #60]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cea:	f000 f825 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490c      	ldr	r1, [pc, #48]	@ (8003d2c <HAL_RCC_ClockConfig+0x26c>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <HAL_RCC_ClockConfig+0x270>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d34 <HAL_RCC_ClockConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fd4e 	bl	80027b0 <HAL_InitTick>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	04c4b400 	.word	0x04c4b400
 8003d2c:	0800db60 	.word	0x0800db60
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000008 	.word	0x20000008

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e047      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d50:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d5c:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e03e      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d136      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b20      	ldr	r3, [pc, #128]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	4a16      	ldr	r2, [pc, #88]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	68d2      	ldr	r2, [r2, #12]
 8003d98:	0a12      	lsrs	r2, r2, #8
 8003d9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	617b      	str	r3, [r7, #20]
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da6:	4a13      	ldr	r2, [pc, #76]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	0a12      	lsrs	r2, r2, #8
 8003db4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e001      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003de0:	693b      	ldr	r3, [r7, #16]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000004 	.word	0x20000004

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e18:	f7ff fff0 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	@ (8003e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	0800db70 	.word	0x0800db70

08003e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e44:	f7ff ffda 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	0adb      	lsrs	r3, r3, #11
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	4904      	ldr	r1, [pc, #16]	@ (8003e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	0800db70 	.word	0x0800db70

08003e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d10c      	bne.n	8003eaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e90:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	4a14      	ldr	r2, [pc, #80]	@ (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9a:	68d2      	ldr	r2, [r2, #12]
 8003e9c:	0a12      	lsrs	r2, r2, #8
 8003e9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
    break;
 8003ea8:	e00c      	b.n	8003ec4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0a12      	lsrs	r2, r2, #8
 8003eb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    break;
 8003ec2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0e5b      	lsrs	r3, r3, #25
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	007a1200 	.word	0x007a1200
 8003ef4:	00f42400 	.word	0x00f42400

08003ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f00:	2300      	movs	r3, #0
 8003f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f04:	2300      	movs	r3, #0
 8003f06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8098 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b43      	ldr	r3, [pc, #268]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a39      	ldr	r2, [pc, #228]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4e:	f7fe fc7b 	bl	8002848 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f54:	e009      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f56:	f7fe fc77 	bl	8002848 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	74fb      	strb	r3, [r7, #19]
        break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6a:	4b30      	ldr	r3, [pc, #192]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ef      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d159      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01e      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d019      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f98:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	4a1f      	ldr	r2, [pc, #124]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fc37 	bl	8002848 <HAL_GetTick>
 8003fda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	e00b      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fc33 	bl	8002848 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d902      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ec      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400a:	4b07      	ldr	r3, [pc, #28]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	4903      	ldr	r1, [pc, #12]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	74bb      	strb	r3, [r7, #18]
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004034:	7c7b      	ldrb	r3, [r7, #17]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4ba6      	ldr	r3, [pc, #664]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	4aa5      	ldr	r2, [pc, #660]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004052:	4ba0      	ldr	r3, [pc, #640]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	499c      	ldr	r1, [pc, #624]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004074:	4b97      	ldr	r3, [pc, #604]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 020c 	bic.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4994      	ldr	r1, [pc, #592]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004096:	4b8f      	ldr	r3, [pc, #572]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	498b      	ldr	r1, [pc, #556]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040b8:	4b86      	ldr	r3, [pc, #536]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4983      	ldr	r1, [pc, #524]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040da:	4b7e      	ldr	r3, [pc, #504]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	497a      	ldr	r1, [pc, #488]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fc:	4b75      	ldr	r3, [pc, #468]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004102:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	4972      	ldr	r1, [pc, #456]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411e:	4b6d      	ldr	r3, [pc, #436]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4969      	ldr	r1, [pc, #420]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004140:	4b64      	ldr	r3, [pc, #400]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4961      	ldr	r1, [pc, #388]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004162:	4b5c      	ldr	r3, [pc, #368]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	4958      	ldr	r1, [pc, #352]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004184:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	4950      	ldr	r1, [pc, #320]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4942      	ldr	r1, [pc, #264]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041dc:	4b3d      	ldr	r3, [pc, #244]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041f4:	4b37      	ldr	r3, [pc, #220]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4934      	ldr	r1, [pc, #208]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b2f      	ldr	r3, [pc, #188]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a2e      	ldr	r2, [pc, #184]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422c:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423a:	4926      	ldr	r1, [pc, #152]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a20      	ldr	r2, [pc, #128]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004256:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	4918      	ldr	r1, [pc, #96]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004284:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800428e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800429c:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042aa:	490a      	ldr	r1, [pc, #40]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ba:	d105      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a04      	ldr	r2, [pc, #16]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e09d      	b.n	8004426 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e005      	b.n	8004310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd ff52 	bl	80021d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004346:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004350:	d902      	bls.n	8004358 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e002      	b.n	800435e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004366:	d007      	beq.n	8004378 <HAL_SPI_Init+0xa0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 0204 	and.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b088      	sub	sp, #32
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443e:	f7fe fa03 	bl	8002848 <HAL_GetTick>
 8004442:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
 8004456:	e15c      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Transmit+0x36>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e154      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Transmit+0x48>
 8004472:	2302      	movs	r3, #2
 8004474:	e14d      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2203      	movs	r2, #3
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c8:	d10f      	bne.n	80044ea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d007      	beq.n	8004508 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004510:	d952      	bls.n	80045b8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0xf2>
 800451a:	8b7b      	ldrh	r3, [r7, #26]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d145      	bne.n	80045ac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	1c9a      	adds	r2, r3, #2
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004544:	e032      	b.n	80045ac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d112      	bne.n	800457a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004578:	e018      	b.n	80045ac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457a:	f7fe f965 	bl	8002848 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d803      	bhi.n	8004592 <HAL_SPI_Transmit+0x164>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d102      	bne.n	8004598 <HAL_SPI_Transmit+0x16a>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0b2      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1c7      	bne.n	8004546 <HAL_SPI_Transmit+0x118>
 80045b6:	e083      	b.n	80046c0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_SPI_Transmit+0x198>
 80045c0:	8b7b      	ldrh	r3, [r7, #26]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d177      	bne.n	80046b6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d912      	bls.n	80045f6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b02      	subs	r3, #2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f4:	e05f      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800461c:	e04b      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d12b      	bne.n	8004684 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d912      	bls.n	800465c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b02      	subs	r3, #2
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800465a:	e02c      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004682:	e018      	b.n	80046b6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004684:	f7fe f8e0 	bl	8002848 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d803      	bhi.n	800469c <HAL_SPI_Transmit+0x26e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d102      	bne.n	80046a2 <HAL_SPI_Transmit+0x274>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e02d      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ae      	bne.n	800461e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fb65 	bl	8004d94 <SPI_EndRxTxTransaction>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004710:	2300      	movs	r3, #0
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08a      	sub	sp, #40	@ 0x28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800472c:	f7fe f88c 	bl	8002848 <HAL_GetTick>
 8004730:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004738:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d00c      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x4e>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004754:	d106      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x4a>
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d001      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
 8004766:	e1f3      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_SPI_TransmitReceive+0x60>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_SPI_TransmitReceive+0x60>
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1e8      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_SPI_TransmitReceive+0x72>
 8004788:	2302      	movs	r3, #2
 800478a:	e1e1      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b04      	cmp	r3, #4
 800479e:	d003      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2205      	movs	r2, #5
 80047a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047ea:	d802      	bhi.n	80047f2 <HAL_SPI_TransmitReceive+0xd8>
 80047ec:	8abb      	ldrh	r3, [r7, #20]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d908      	bls.n	8004804 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e007      	b.n	8004814 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004812:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d007      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800483a:	f240 8083 	bls.w	8004944 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_TransmitReceive+0x132>
 8004846:	8afb      	ldrh	r3, [r7, #22]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d16f      	bne.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	e05c      	b.n	800492c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11b      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d113      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d11c      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x1e6>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	b292      	uxth	r2, r2
 80048de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048fc:	2301      	movs	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004900:	f7fd ffa2 	bl	8002848 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490c:	429a      	cmp	r2, r3
 800490e:	d80d      	bhi.n	800492c <HAL_SPI_TransmitReceive+0x212>
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d009      	beq.n	800492c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e111      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d19d      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x158>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d197      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x158>
 8004942:	e0e5      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x23a>
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	2b01      	cmp	r3, #1
 8004950:	f040 80d1 	bne.w	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d912      	bls.n	8004984 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b02      	subs	r3, #2
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004982:	e0b8      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049aa:	e0a4      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d134      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02f      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d12c      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d912      	bls.n	80049fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b02      	subs	r3, #2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049f8:	e012      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d148      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d042      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d923      	bls.n	8004a92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	b292      	uxth	r2, r2
 8004a56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b02      	subs	r3, #2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d81f      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e016      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f103 020c 	add.w	r2, r3, #12
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ac4:	f7fd fec0 	bl	8002848 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d803      	bhi.n	8004adc <HAL_SPI_TransmitReceive+0x3c2>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d102      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x3c8>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e02c      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f af55 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f47f af4e 	bne.w	80049ac <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f93d 	bl	8004d94 <SPI_EndRxTxTransaction>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e00e      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	@ 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b68:	f7fd fe6e 	bl	8002848 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b78:	f7fd fe66 	bl	8002848 <HAL_GetTick>
 8004b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7e:	4b39      	ldr	r3, [pc, #228]	@ (8004c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	015b      	lsls	r3, r3, #5
 8004b84:	0d1b      	lsrs	r3, r3, #20
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8e:	e054      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d050      	beq.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b98:	f7fd fe56 	bl	8002848 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d902      	bls.n	8004bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d13d      	bne.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc6:	d111      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd0:	d004      	beq.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	d107      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf4:	d10f      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e017      	b.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d19b      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000004 	.word	0x20000004

08004c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c7a:	f7fd fde5 	bl	8002848 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c8a:	f7fd fddd 	bl	8002848 <HAL_GetTick>
 8004c8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c98:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00da      	lsls	r2, r3, #3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	0d1b      	lsrs	r3, r3, #20
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cb0:	e060      	b.n	8004d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cb8:	d107      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x62>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d050      	beq.n	8004d74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd2:	f7fd fdb9 	bl	8002848 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d902      	bls.n	8004ce8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d13d      	bne.n	8004d64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d00:	d111      	bne.n	8004d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d0a:	d004      	beq.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d14:	d107      	bne.n	8004d26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2e:	d10f      	bne.n	8004d50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e010      	b.n	8004d86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d196      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3728      	adds	r7, #40	@ 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000004 	.word	0x20000004

08004d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff5b 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e027      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2180      	movs	r1, #128	@ 0x80
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff fec0 	bl	8004b58 <SPI_WaitFlagStateUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e014      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff ff34 	bl	8004c68 <SPI_WaitFifoStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e000      	b.n	8004e18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e042      	b.n	8004eb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fd fc11 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2224      	movs	r2, #36	@ 0x24
 8004e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ff30 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fc61 	bl	8005738 <UART_SetConfig>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e01b      	b.n	8004eb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 ffaf 	bl	8005e14 <UART_CheckIdleState>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	@ 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d17b      	bne.n	8004fd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_Transmit+0x26>
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e074      	b.n	8004fd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2221      	movs	r2, #33	@ 0x21
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efa:	f7fd fca5 	bl	8002848 <HAL_GetTick>
 8004efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f18:	d108      	bne.n	8004f2c <HAL_UART_Transmit+0x6c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e003      	b.n	8004f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f34:	e030      	b.n	8004f98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2180      	movs	r1, #128	@ 0x80
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f001 f811 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e03d      	b.n	8004fd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3302      	adds	r3, #2
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e007      	b.n	8004f86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1c8      	bne.n	8004f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2140      	movs	r1, #64	@ 0x40
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 ffda 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e006      	b.n	8004fd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	@ 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d137      	bne.n	8005064 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Receive_IT+0x24>
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e030      	b.n	8005066 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_UART_Receive_IT+0x94>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01f      	beq.n	8005054 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	61bb      	str	r3, [r7, #24]
   return(result);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	461a      	mov	r2, r3
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fff2 	bl	8006044 <UART_Start_Receive_IT>
 8005060:	4603      	mov	r3, r0
 8005062:	e000      	b.n	8005066 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3728      	adds	r7, #40	@ 0x28
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40008000 	.word	0x40008000

08005074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0ba      	sub	sp, #232	@ 0xe8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800509a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800509e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80050a2:	4013      	ands	r3, r2
 80050a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80050a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11b      	bne.n	80050e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8300 	beq.w	80056de <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
      }
      return;
 80050e6:	e2fa      	b.n	80056de <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8123 	beq.w	8005338 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050f6:	4b8d      	ldr	r3, [pc, #564]	@ (800532c <HAL_UART_IRQHandler+0x2b8>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005102:	4b8b      	ldr	r3, [pc, #556]	@ (8005330 <HAL_UART_IRQHandler+0x2bc>)
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8116 	beq.w	8005338 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <HAL_UART_IRQHandler+0xc8>
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800511c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d011      	beq.n	800516c <HAL_UART_IRQHandler+0xf8>
 8005148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2202      	movs	r2, #2
 800515a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <HAL_UART_IRQHandler+0x128>
 8005178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2204      	movs	r2, #4
 800518a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005192:	f043 0202 	orr.w	r2, r3, #2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d017      	beq.n	80051d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80051b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80051b8:	4b5c      	ldr	r3, [pc, #368]	@ (800532c <HAL_UART_IRQHandler+0x2b8>)
 80051ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2208      	movs	r2, #8
 80051c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f043 0208 	orr.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d012      	beq.n	800520a <HAL_UART_IRQHandler+0x196>
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00c      	beq.n	800520a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8266 	beq.w	80056e2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d013      	beq.n	800524a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525e:	2b40      	cmp	r3, #64	@ 0x40
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005266:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800526a:	2b00      	cmp	r3, #0
 800526c:	d054      	beq.n	8005318 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 f80a 	bl	8006288 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d146      	bne.n	8005310 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800529c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1d9      	bne.n	8005282 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d017      	beq.n	8005308 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052de:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <HAL_UART_IRQHandler+0x2c0>)
 80052e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fd fcf8 	bl	8002cde <HAL_DMA_Abort_IT>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005306:	e00f      	b.n	8005328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9ff 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530e:	e00b      	b.n	8005328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f9fb 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005316:	e007      	b.n	8005328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f9f7 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005326:	e1dc      	b.n	80056e2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	bf00      	nop
    return;
 800532a:	e1da      	b.n	80056e2 <HAL_UART_IRQHandler+0x66e>
 800532c:	10000001 	.word	0x10000001
 8005330:	04000120 	.word	0x04000120
 8005334:	08006355 	.word	0x08006355

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533c:	2b01      	cmp	r3, #1
 800533e:	f040 8170 	bne.w	8005622 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8169 	beq.w	8005622 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8162 	beq.w	8005622 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	f040 80d8 	bne.w	8005526 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80af 	beq.w	80054ec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005394:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005398:	429a      	cmp	r2, r3
 800539a:	f080 80a7 	bcs.w	80054ec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 8087 	bne.w	80054ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1da      	bne.n	80053bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800542a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800542e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800543c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e1      	bne.n	8005406 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005468:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800546c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e3      	bne.n	8005442 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005498:	f023 0310 	bic.w	r3, r3, #16
 800549c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e4      	bne.n	8005488 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd fbb1 	bl	8002c2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f91b 	bl	8005720 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80054ea:	e0fc      	b.n	80056e6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054f6:	429a      	cmp	r2, r3
 80054f8:	f040 80f5 	bne.w	80056e6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	f040 80eb 	bne.w	80056e6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8fe 	bl	8005720 <HAL_UARTEx_RxEventCallback>
      return;
 8005524:	e0df      	b.n	80056e6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005532:	b29b      	uxth	r3, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80d1 	beq.w	80056ea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80cc 	beq.w	80056ea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005566:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005574:	647b      	str	r3, [r7, #68]	@ 0x44
 8005576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e4      	bne.n	8005552 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	623b      	str	r3, [r7, #32]
   return(result);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e1      	bne.n	8005588 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 0310 	bic.w	r3, r3, #16
 80055ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69b9      	ldr	r1, [r7, #24]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	617b      	str	r3, [r7, #20]
   return(result);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e4      	bne.n	80055d8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f880 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005620:	e063      	b.n	80056ea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <HAL_UART_IRQHandler+0x5d8>
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fbe3 	bl	8006e10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800564a:	e051      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005654:	2b00      	cmp	r3, #0
 8005656:	d014      	beq.n	8005682 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03a      	beq.n	80056ee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
    }
    return;
 8005680:	e035      	b.n	80056ee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_UART_IRQHandler+0x62e>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fe6c 	bl	8006378 <UART_EndTransmit_IT>
    return;
 80056a0:	e026      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_UART_IRQHandler+0x64e>
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 fbbc 	bl	8006e38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056c0:	e016      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d010      	beq.n	80056f0 <HAL_UART_IRQHandler+0x67c>
 80056ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da0c      	bge.n	80056f0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fba4 	bl	8006e24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056dc:	e008      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80056de:	bf00      	nop
 80056e0:	e006      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80056e2:	bf00      	nop
 80056e4:	e004      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80056ee:	bf00      	nop
  }
}
 80056f0:	37e8      	adds	r7, #232	@ 0xe8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop

080056f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800573c:	b08c      	sub	sp, #48	@ 0x30
 800573e:	af00      	add	r7, sp, #0
 8005740:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	431a      	orrs	r2, r3
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	431a      	orrs	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	4313      	orrs	r3, r2
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4bab      	ldr	r3, [pc, #684]	@ (8005a14 <UART_SetConfig+0x2dc>)
 8005768:	4013      	ands	r3, r2
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005770:	430b      	orrs	r3, r1
 8005772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4aa0      	ldr	r2, [pc, #640]	@ (8005a18 <UART_SetConfig+0x2e0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	4313      	orrs	r3, r2
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80057ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	f023 010f 	bic.w	r1, r3, #15
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a91      	ldr	r2, [pc, #580]	@ (8005a1c <UART_SetConfig+0x2e4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d125      	bne.n	8005828 <UART_SetConfig+0xf0>
 80057dc:	4b90      	ldr	r3, [pc, #576]	@ (8005a20 <UART_SetConfig+0x2e8>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d81a      	bhi.n	8005820 <UART_SetConfig+0xe8>
 80057ea:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <UART_SetConfig+0xb8>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005801 	.word	0x08005801
 80057f4:	08005811 	.word	0x08005811
 80057f8:	08005809 	.word	0x08005809
 80057fc:	08005819 	.word	0x08005819
 8005800:	2301      	movs	r3, #1
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005806:	e0d6      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005808:	2302      	movs	r3, #2
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e0d2      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005810:	2304      	movs	r3, #4
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e0ce      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005818:	2308      	movs	r3, #8
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e0ca      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005820:	2310      	movs	r3, #16
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005826:	e0c6      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a24 <UART_SetConfig+0x2ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d138      	bne.n	80058a4 <UART_SetConfig+0x16c>
 8005832:	4b7b      	ldr	r3, [pc, #492]	@ (8005a20 <UART_SetConfig+0x2e8>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d82d      	bhi.n	800589c <UART_SetConfig+0x164>
 8005840:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <UART_SetConfig+0x110>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	0800587d 	.word	0x0800587d
 800584c:	0800589d 	.word	0x0800589d
 8005850:	0800589d 	.word	0x0800589d
 8005854:	0800589d 	.word	0x0800589d
 8005858:	0800588d 	.word	0x0800588d
 800585c:	0800589d 	.word	0x0800589d
 8005860:	0800589d 	.word	0x0800589d
 8005864:	0800589d 	.word	0x0800589d
 8005868:	08005885 	.word	0x08005885
 800586c:	0800589d 	.word	0x0800589d
 8005870:	0800589d 	.word	0x0800589d
 8005874:	0800589d 	.word	0x0800589d
 8005878:	08005895 	.word	0x08005895
 800587c:	2300      	movs	r3, #0
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005882:	e098      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005884:	2302      	movs	r3, #2
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588a:	e094      	b.n	80059b6 <UART_SetConfig+0x27e>
 800588c:	2304      	movs	r3, #4
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005892:	e090      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005894:	2308      	movs	r3, #8
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589a:	e08c      	b.n	80059b6 <UART_SetConfig+0x27e>
 800589c:	2310      	movs	r3, #16
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a2:	e088      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a28 <UART_SetConfig+0x2f0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d125      	bne.n	80058fa <UART_SetConfig+0x1c2>
 80058ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005a20 <UART_SetConfig+0x2e8>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058b8:	2b30      	cmp	r3, #48	@ 0x30
 80058ba:	d016      	beq.n	80058ea <UART_SetConfig+0x1b2>
 80058bc:	2b30      	cmp	r3, #48	@ 0x30
 80058be:	d818      	bhi.n	80058f2 <UART_SetConfig+0x1ba>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d00a      	beq.n	80058da <UART_SetConfig+0x1a2>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d814      	bhi.n	80058f2 <UART_SetConfig+0x1ba>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <UART_SetConfig+0x19a>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d008      	beq.n	80058e2 <UART_SetConfig+0x1aa>
 80058d0:	e00f      	b.n	80058f2 <UART_SetConfig+0x1ba>
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d8:	e06d      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058da:	2302      	movs	r3, #2
 80058dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e0:	e069      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058e2:	2304      	movs	r3, #4
 80058e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e8:	e065      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058ea:	2308      	movs	r3, #8
 80058ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f0:	e061      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058f2:	2310      	movs	r3, #16
 80058f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f8:	e05d      	b.n	80059b6 <UART_SetConfig+0x27e>
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a4b      	ldr	r2, [pc, #300]	@ (8005a2c <UART_SetConfig+0x2f4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d125      	bne.n	8005950 <UART_SetConfig+0x218>
 8005904:	4b46      	ldr	r3, [pc, #280]	@ (8005a20 <UART_SetConfig+0x2e8>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800590e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005910:	d016      	beq.n	8005940 <UART_SetConfig+0x208>
 8005912:	2bc0      	cmp	r3, #192	@ 0xc0
 8005914:	d818      	bhi.n	8005948 <UART_SetConfig+0x210>
 8005916:	2b80      	cmp	r3, #128	@ 0x80
 8005918:	d00a      	beq.n	8005930 <UART_SetConfig+0x1f8>
 800591a:	2b80      	cmp	r3, #128	@ 0x80
 800591c:	d814      	bhi.n	8005948 <UART_SetConfig+0x210>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <UART_SetConfig+0x1f0>
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	d008      	beq.n	8005938 <UART_SetConfig+0x200>
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x210>
 8005928:	2300      	movs	r3, #0
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592e:	e042      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005936:	e03e      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593e:	e03a      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005946:	e036      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594e:	e032      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a30      	ldr	r2, [pc, #192]	@ (8005a18 <UART_SetConfig+0x2e0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d12a      	bne.n	80059b0 <UART_SetConfig+0x278>
 800595a:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <UART_SetConfig+0x2e8>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005968:	d01a      	beq.n	80059a0 <UART_SetConfig+0x268>
 800596a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800596e:	d81b      	bhi.n	80059a8 <UART_SetConfig+0x270>
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005974:	d00c      	beq.n	8005990 <UART_SetConfig+0x258>
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597a:	d815      	bhi.n	80059a8 <UART_SetConfig+0x270>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <UART_SetConfig+0x250>
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005984:	d008      	beq.n	8005998 <UART_SetConfig+0x260>
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x270>
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e012      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e00e      	b.n	80059b6 <UART_SetConfig+0x27e>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e00a      	b.n	80059b6 <UART_SetConfig+0x27e>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e006      	b.n	80059b6 <UART_SetConfig+0x27e>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x27e>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <UART_SetConfig+0x2e0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	f040 80a8 	bne.w	8005b12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d834      	bhi.n	8005a34 <UART_SetConfig+0x2fc>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x298>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	08005a35 	.word	0x08005a35
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a03 	.word	0x08005a03
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	08005a35 	.word	0x08005a35
 80059ec:	08005a35 	.word	0x08005a35
 80059f0:	08005a0b 	.word	0x08005a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe fa0e 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80059f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059fa:	e021      	b.n	8005a40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <UART_SetConfig+0x2f8>)
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a00:	e01e      	b.n	8005a40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a02:	f7fe f999 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8005a06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a08:	e01a      	b.n	8005a40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a10:	e016      	b.n	8005a40 <UART_SetConfig+0x308>
 8005a12:	bf00      	nop
 8005a14:	cfff69f3 	.word	0xcfff69f3
 8005a18:	40008000 	.word	0x40008000
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40004400 	.word	0x40004400
 8005a28:	40004800 	.word	0x40004800
 8005a2c:	40004c00 	.word	0x40004c00
 8005a30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 812a 	beq.w	8005c9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	4a9e      	ldr	r2, [pc, #632]	@ (8005cc8 <UART_SetConfig+0x590>)
 8005a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d305      	bcc.n	8005a78 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d903      	bls.n	8005a80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a7e:	e10d      	b.n	8005c9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2200      	movs	r2, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	60fa      	str	r2, [r7, #12]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8005cc8 <UART_SetConfig+0x590>)
 8005a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2200      	movs	r2, #0
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aa2:	f7fb f8d9 	bl	8000c58 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	020b      	lsls	r3, r1, #8
 8005ab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005abc:	0202      	lsls	r2, r0, #8
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	6849      	ldr	r1, [r1, #4]
 8005ac2:	0849      	lsrs	r1, r1, #1
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4605      	mov	r5, r0
 8005aca:	eb12 0804 	adds.w	r8, r2, r4
 8005ace:	eb43 0905 	adc.w	r9, r3, r5
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	469a      	mov	sl, r3
 8005ada:	4693      	mov	fp, r2
 8005adc:	4652      	mov	r2, sl
 8005ade:	465b      	mov	r3, fp
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fb f8b8 	bl	8000c58 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4613      	mov	r3, r2
 8005aee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af6:	d308      	bcc.n	8005b0a <UART_SetConfig+0x3d2>
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d204      	bcs.n	8005b0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e0c8      	b.n	8005c9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b10:	e0c4      	b.n	8005c9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1a:	d167      	bne.n	8005bec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d828      	bhi.n	8005b76 <UART_SetConfig+0x43e>
 8005b24:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <UART_SetConfig+0x3f4>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	08005b77 	.word	0x08005b77
 8005b3c:	08005b67 	.word	0x08005b67
 8005b40:	08005b77 	.word	0x08005b77
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7fe f960 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8005b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b56:	e014      	b.n	8005b82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7fe f972 	bl	8003e40 <HAL_RCC_GetPCLK2Freq>
 8005b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b5e:	e010      	b.n	8005b82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b5a      	ldr	r3, [pc, #360]	@ (8005ccc <UART_SetConfig+0x594>)
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b64:	e00d      	b.n	8005b82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7fe f8e7 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8005b6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b6c:	e009      	b.n	8005b82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b74:	e005      	b.n	8005b82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8089 	beq.w	8005c9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8005cc8 <UART_SetConfig+0x590>)
 8005b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b9c:	005a      	lsls	r2, r3, #1
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	441a      	add	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	d916      	bls.n	8005be4 <UART_SetConfig+0x4ac>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d212      	bcs.n	8005be4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f023 030f 	bic.w	r3, r3, #15
 8005bc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	8bfb      	ldrh	r3, [r7, #30]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	8bfa      	ldrh	r2, [r7, #30]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	e05b      	b.n	8005c9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bea:	e057      	b.n	8005c9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d828      	bhi.n	8005c46 <UART_SetConfig+0x50e>
 8005bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <UART_SetConfig+0x4c4>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	08005c31 	.word	0x08005c31
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c37 	.word	0x08005c37
 8005c10:	08005c47 	.word	0x08005c47
 8005c14:	08005c47 	.word	0x08005c47
 8005c18:	08005c47 	.word	0x08005c47
 8005c1c:	08005c3f 	.word	0x08005c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7fe f8f8 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8005c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c26:	e014      	b.n	8005c52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c28:	f7fe f90a 	bl	8003e40 <HAL_RCC_GetPCLK2Freq>
 8005c2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c30:	4b26      	ldr	r3, [pc, #152]	@ (8005ccc <UART_SetConfig+0x594>)
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fe f87f 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8005c3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c3c:	e009      	b.n	8005c52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c50:	bf00      	nop
    }

    if (pclk != 0U)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d021      	beq.n	8005c9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc8 <UART_SetConfig+0x590>)
 8005c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	441a      	add	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d909      	bls.n	8005c96 <UART_SetConfig+0x55e>
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c88:	d205      	bcs.n	8005c96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e002      	b.n	8005c9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3730      	adds	r7, #48	@ 0x30
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop
 8005cc8:	0800db78 	.word	0x0800db78
 8005ccc:	00f42400 	.word	0x00f42400

08005cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dce:	d10a      	bne.n	8005de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b098      	sub	sp, #96	@ 0x60
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e24:	f7fc fd10 	bl	8002848 <HAL_GetTick>
 8005e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d12f      	bne.n	8005e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f88e 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d022      	beq.n	8005e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e6      	bne.n	8005e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e063      	b.n	8005f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d149      	bne.n	8005f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f857 	bl	8005f68 <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d03c      	beq.n	8005f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e6      	bne.n	8005ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f12:	61fa      	str	r2, [r7, #28]
 8005f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	69b9      	ldr	r1, [r7, #24]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e012      	b.n	8005f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3758      	adds	r7, #88	@ 0x58
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f78:	e04f      	b.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d04b      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f82:	f7fc fc61 	bl	8002848 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e04e      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d037      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b80      	cmp	r3, #128	@ 0x80
 8005fae:	d034      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b40      	cmp	r3, #64	@ 0x40
 8005fb4:	d031      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d110      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f95b 	bl	8006288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e029      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff4:	d111      	bne.n	800601a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f941 	bl	8006288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00f      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	bf0c      	ite	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	2300      	movne	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	429a      	cmp	r2, r3
 8006036:	d0a0      	beq.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006044:	b480      	push	{r7}
 8006046:	b0a3      	sub	sp, #140	@ 0x8c
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006076:	d10e      	bne.n	8006096 <UART_Start_Receive_IT+0x52>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <UART_Start_Receive_IT+0x48>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800608a:	e02d      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	22ff      	movs	r2, #255	@ 0xff
 8006090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006094:	e028      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <UART_Start_Receive_IT+0x76>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <UART_Start_Receive_IT+0x6c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	@ 0xff
 80060aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060ae:	e01b      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	227f      	movs	r2, #127	@ 0x7f
 80060b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060b8:	e016      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c2:	d10d      	bne.n	80060e0 <UART_Start_Receive_IT+0x9c>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <UART_Start_Receive_IT+0x92>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	227f      	movs	r2, #127	@ 0x7f
 80060d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060d4:	e008      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	223f      	movs	r2, #63	@ 0x3f
 80060da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060de:	e003      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2222      	movs	r2, #34	@ 0x22
 80060f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3308      	adds	r3, #8
 80060fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800611c:	673a      	str	r2, [r7, #112]	@ 0x70
 800611e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006122:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800612a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e3      	bne.n	80060f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006138:	d14f      	bne.n	80061da <UART_Start_Receive_IT+0x196>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	429a      	cmp	r2, r3
 8006144:	d349      	bcc.n	80061da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614e:	d107      	bne.n	8006160 <UART_Start_Receive_IT+0x11c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a47      	ldr	r2, [pc, #284]	@ (8006278 <UART_Start_Receive_IT+0x234>)
 800615c:	675a      	str	r2, [r3, #116]	@ 0x74
 800615e:	e002      	b.n	8006166 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a46      	ldr	r2, [pc, #280]	@ (800627c <UART_Start_Receive_IT+0x238>)
 8006164:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01a      	beq.n	80061a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006192:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006196:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800619e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e4      	bne.n	800616e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80061c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80061d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_Start_Receive_IT+0x160>
 80061d8:	e046      	b.n	8006268 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e2:	d107      	bne.n	80061f4 <UART_Start_Receive_IT+0x1b0>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a24      	ldr	r2, [pc, #144]	@ (8006280 <UART_Start_Receive_IT+0x23c>)
 80061f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80061f2:	e002      	b.n	80061fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a23      	ldr	r2, [pc, #140]	@ (8006284 <UART_Start_Receive_IT+0x240>)
 80061f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d019      	beq.n	8006236 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006216:	677b      	str	r3, [r7, #116]	@ 0x74
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
 8006222:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800622e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_Start_Receive_IT+0x1be>
 8006234:	e018      	b.n	8006268 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f043 0320 	orr.w	r3, r3, #32
 800624a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	61bb      	str	r3, [r7, #24]
   return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	378c      	adds	r7, #140	@ 0x8c
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	08006aa5 	.word	0x08006aa5
 800627c:	08006741 	.word	0x08006741
 8006280:	08006589 	.word	0x08006589
 8006284:	080063d1 	.word	0x080063d1

08006288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b095      	sub	sp, #84	@ 0x54
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80062b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e6      	bne.n	8006290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e3      	bne.n	80062c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d118      	bne.n	8006334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	647b      	str	r3, [r7, #68]	@ 0x44
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6979      	ldr	r1, [r7, #20]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	613b      	str	r3, [r7, #16]
   return(result);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006348:	bf00      	nop
 800634a:	3754      	adds	r7, #84	@ 0x54
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff f9ce 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	60bb      	str	r3, [r7, #8]
   return(result);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	613b      	str	r3, [r7, #16]
   return(result);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff f999 	bl	80056f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c6:	bf00      	nop
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b09c      	sub	sp, #112	@ 0x70
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e8:	2b22      	cmp	r3, #34	@ 0x22
 80063ea:	f040 80be 	bne.w	800656a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006402:	b2da      	uxtb	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	400a      	ands	r2, r1
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 80a1 	bne.w	800657a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800644c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006456:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800645c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800647a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	667b      	str	r3, [r7, #100]	@ 0x64
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800648a:	647a      	str	r2, [r7, #68]	@ 0x44
 800648c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a33      	ldr	r2, [pc, #204]	@ (8006584 <UART_RxISR_8BIT+0x1b4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01f      	beq.n	80064fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d018      	beq.n	80064fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	623b      	str	r3, [r7, #32]
   return(result);
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064de:	663b      	str	r3, [r7, #96]	@ 0x60
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d12e      	bne.n	8006562 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60fb      	str	r3, [r7, #12]
   return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	617b      	str	r3, [r7, #20]
   return(result);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e6      	bne.n	800650a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b10      	cmp	r3, #16
 8006548:	d103      	bne.n	8006552 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2210      	movs	r2, #16
 8006550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff f8e0 	bl	8005720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006560:	e00b      	b.n	800657a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb fdb0 	bl	80020c8 <HAL_UART_RxCpltCallback>
}
 8006568:	e007      	b.n	800657a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	619a      	str	r2, [r3, #24]
}
 800657a:	bf00      	nop
 800657c:	3770      	adds	r7, #112	@ 0x70
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40008000 	.word	0x40008000

08006588 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b09c      	sub	sp, #112	@ 0x70
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006596:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a0:	2b22      	cmp	r3, #34	@ 0x22
 80065a2:	f040 80be 	bne.w	8006722 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80065b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80065ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065be:	4013      	ands	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 80a1 	bne.w	8006732 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006604:	667b      	str	r3, [r7, #100]	@ 0x64
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800660e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006610:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800661c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	663b      	str	r3, [r7, #96]	@ 0x60
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006642:	643a      	str	r2, [r7, #64]	@ 0x40
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a33      	ldr	r2, [pc, #204]	@ (800673c <UART_RxISR_16BIT+0x1b4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d01f      	beq.n	80066b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d12e      	bne.n	800671a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0310 	bic.w	r3, r3, #16
 80066d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6979      	ldr	r1, [r7, #20]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	613b      	str	r3, [r7, #16]
   return(result);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e6      	bne.n	80066c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0310 	and.w	r3, r3, #16
 80066fe:	2b10      	cmp	r3, #16
 8006700:	d103      	bne.n	800670a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2210      	movs	r2, #16
 8006708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff f804 	bl	8005720 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006718:	e00b      	b.n	8006732 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb fcd4 	bl	80020c8 <HAL_UART_RxCpltCallback>
}
 8006720:	e007      	b.n	8006732 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0208 	orr.w	r2, r2, #8
 8006730:	619a      	str	r2, [r3, #24]
}
 8006732:	bf00      	nop
 8006734:	3770      	adds	r7, #112	@ 0x70
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40008000 	.word	0x40008000

08006740 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b0ac      	sub	sp, #176	@ 0xb0
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800674e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006776:	2b22      	cmp	r3, #34	@ 0x22
 8006778:	f040 8183 	bne.w	8006a82 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006782:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006786:	e126      	b.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006792:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006796:	b2d9      	uxtb	r1, r3
 8006798:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800679c:	b2da      	uxtb	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	400a      	ands	r2, r1
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80067ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d053      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <UART_RxISR_8BIT_FIFOEN+0xca>
 80067e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006800:	f043 0201 	orr.w	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d011      	beq.n	800683a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2202      	movs	r2, #2
 8006828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006830:	f043 0204 	orr.w	r2, r3, #4
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d011      	beq.n	800686a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2204      	movs	r2, #4
 8006858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f043 0202 	orr.w	r2, r3, #2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006870:	2b00      	cmp	r3, #0
 8006872:	d006      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fe ff49 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 80a3 	bne.w	80069d6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800689e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80068b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80068c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e4      	bne.n	8006890 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80068d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068ee:	66ba      	str	r2, [r7, #104]	@ 0x68
 80068f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80068f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80068fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e1      	bne.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a60      	ldr	r2, [pc, #384]	@ (8006a9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d021      	beq.n	8006964 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800693c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800693e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006950:	657b      	str	r3, [r7, #84]	@ 0x54
 8006952:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006956:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800695e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e4      	bne.n	800692e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d130      	bne.n	80069ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	f023 0310 	bic.w	r3, r3, #16
 8006986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006994:	643b      	str	r3, [r7, #64]	@ 0x40
 8006996:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800699a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e4      	bne.n	8006972 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d103      	bne.n	80069be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2210      	movs	r2, #16
 80069bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fe feaa 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80069cc:	e00e      	b.n	80069ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fb fb7a 	bl	80020c8 <HAL_UART_RxCpltCallback>
        break;
 80069d4:	e00a      	b.n	80069ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80069de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f47f aece 	bne.w	8006788 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d049      	beq.n	8006a92 <UART_RxISR_8BIT_FIFOEN+0x352>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a04:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d242      	bcs.n	8006a92 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e3      	bne.n	8006a0c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a16      	ldr	r2, [pc, #88]	@ (8006aa0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006a48:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f043 0320 	orr.w	r3, r3, #32
 8006a5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6979      	ldr	r1, [r7, #20]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a80:	e007      	b.n	8006a92 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0208 	orr.w	r2, r2, #8
 8006a90:	619a      	str	r2, [r3, #24]
}
 8006a92:	bf00      	nop
 8006a94:	37b0      	adds	r7, #176	@ 0xb0
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40008000 	.word	0x40008000
 8006aa0:	080063d1 	.word	0x080063d1

08006aa4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b0ae      	sub	sp, #184	@ 0xb8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ab2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ada:	2b22      	cmp	r3, #34	@ 0x22
 8006adc:	f040 8187 	bne.w	8006dee <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ae6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006aea:	e12a      	b.n	8006d42 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006afe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006b02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006b06:	4013      	ands	r3, r2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	1c9a      	adds	r2, r3, #2
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d053      	beq.n	8006bea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d011      	beq.n	8006b72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b68:	f043 0201 	orr.w	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d011      	beq.n	8006ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b98:	f043 0204 	orr.w	r2, r3, #4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d011      	beq.n	8006bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc8:	f043 0202 	orr.w	r2, r3, #2
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe fd95 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 80a5 	bne.w	8006d42 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e2      	bne.n	8006bf8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e1      	bne.n	8006c32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a60      	ldr	r2, [pc, #384]	@ (8006e08 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d021      	beq.n	8006cd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01a      	beq.n	8006cd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d130      	bne.n	8006d3a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e4      	bne.n	8006cde <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d103      	bne.n	8006d2a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2210      	movs	r2, #16
 8006d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fe fcf4 	bl	8005720 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006d38:	e00e      	b.n	8006d58 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fb f9c4 	bl	80020c8 <HAL_UART_RxCpltCallback>
        break;
 8006d40:	e00a      	b.n	8006d58 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d42:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f47f aeca 	bne.w	8006aec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d5e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d049      	beq.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d70:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d242      	bcs.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	623b      	str	r3, [r7, #32]
   return(result);
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e3      	bne.n	8006d78 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a16      	ldr	r2, [pc, #88]	@ (8006e0c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006db4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f043 0320 	orr.w	r3, r3, #32
 8006dca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006dd8:	61fb      	str	r3, [r7, #28]
 8006dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	69b9      	ldr	r1, [r7, #24]
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	617b      	str	r3, [r7, #20]
   return(result);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e4      	bne.n	8006db6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dec:	e007      	b.n	8006dfe <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0208 	orr.w	r2, r2, #8
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	37b8      	adds	r7, #184	@ 0xb8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40008000 	.word	0x40008000
 8006e0c:	08006589 	.word	0x08006589

08006e10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e027      	b.n	8006eb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2224      	movs	r2, #36	@ 0x24
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0201 	bic.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e02d      	b.n	8006f32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2224      	movs	r2, #36	@ 0x24
 8006ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f850 	bl	8006fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e02d      	b.n	8006fae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2224      	movs	r2, #36	@ 0x24
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0201 	bic.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f812 	bl	8006fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d108      	bne.n	8006fda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fd8:	e031      	b.n	800703e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fda:	2308      	movs	r3, #8
 8006fdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fde:	2308      	movs	r3, #8
 8006fe0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	0e5b      	lsrs	r3, r3, #25
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	0f5b      	lsrs	r3, r3, #29
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	7b3a      	ldrb	r2, [r7, #12]
 8007006:	4911      	ldr	r1, [pc, #68]	@ (800704c <UARTEx_SetNbDataToProcess+0x94>)
 8007008:	5c8a      	ldrb	r2, [r1, r2]
 800700a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800700e:	7b3a      	ldrb	r2, [r7, #12]
 8007010:	490f      	ldr	r1, [pc, #60]	@ (8007050 <UARTEx_SetNbDataToProcess+0x98>)
 8007012:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007014:	fb93 f3f2 	sdiv	r3, r3, r2
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	7b7a      	ldrb	r2, [r7, #13]
 8007024:	4909      	ldr	r1, [pc, #36]	@ (800704c <UARTEx_SetNbDataToProcess+0x94>)
 8007026:	5c8a      	ldrb	r2, [r1, r2]
 8007028:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800702c:	7b7a      	ldrb	r2, [r7, #13]
 800702e:	4908      	ldr	r1, [pc, #32]	@ (8007050 <UARTEx_SetNbDataToProcess+0x98>)
 8007030:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007032:	fb93 f3f2 	sdiv	r3, r3, r2
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	0800db90 	.word	0x0800db90
 8007050:	0800db98 	.word	0x0800db98

08007054 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007058:	4907      	ldr	r1, [pc, #28]	@ (8007078 <MX_FATFS_Init+0x24>)
 800705a:	4808      	ldr	r0, [pc, #32]	@ (800707c <MX_FATFS_Init+0x28>)
 800705c:	f003 fb16 	bl	800a68c <FATFS_LinkDriver>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	e003      	b.n	8007074 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800706c:	4b04      	ldr	r3, [pc, #16]	@ (8007080 <MX_FATFS_Init+0x2c>)
 800706e:	2201      	movs	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007072:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007074:	4618      	mov	r0, r3
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20002524 	.word	0x20002524
 800707c:	20000010 	.word	0x20000010
 8007080:	20002528 	.word	0x20002528

08007084 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007088:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800708a:	4618      	mov	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fa f961 	bl	8001368 <SD_disk_initialize>
 80070a6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fa fa3f 	bl	8001540 <SD_disk_status>
 80070c2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80070dc:	7bf8      	ldrb	r0, [r7, #15]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	f7fa fa42 	bl	800156c <SD_disk_read>
 80070e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007102:	7bf8      	ldrb	r0, [r7, #15]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	f7fa fa99 	bl	8001640 <SD_disk_write>
 800710e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	603a      	str	r2, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
 8007124:	460b      	mov	r3, r1
 8007126:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007128:	79b9      	ldrb	r1, [r7, #6]
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa fb0a 	bl	8001748 <SD_disk_ioctl>
 8007134:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4a08      	ldr	r2, [pc, #32]	@ (8007170 <disk_status+0x30>)
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	79fa      	ldrb	r2, [r7, #7]
 8007158:	4905      	ldr	r1, [pc, #20]	@ (8007170 <disk_status+0x30>)
 800715a:	440a      	add	r2, r1
 800715c:	7a12      	ldrb	r2, [r2, #8]
 800715e:	4610      	mov	r0, r2
 8007160:	4798      	blx	r3
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20002754 	.word	0x20002754

08007174 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	4a0d      	ldr	r2, [pc, #52]	@ (80071bc <disk_initialize+0x48>)
 8007186:	5cd3      	ldrb	r3, [r2, r3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d111      	bne.n	80071b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	4a0b      	ldr	r2, [pc, #44]	@ (80071bc <disk_initialize+0x48>)
 8007190:	2101      	movs	r1, #1
 8007192:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	4a09      	ldr	r2, [pc, #36]	@ (80071bc <disk_initialize+0x48>)
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	4906      	ldr	r1, [pc, #24]	@ (80071bc <disk_initialize+0x48>)
 80071a4:	440a      	add	r2, r1
 80071a6:	7a12      	ldrb	r2, [r2, #8]
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20002754 	.word	0x20002754

080071c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	4a0a      	ldr	r2, [pc, #40]	@ (80071fc <disk_read+0x3c>)
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	689c      	ldr	r4, [r3, #8]
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	4a07      	ldr	r2, [pc, #28]	@ (80071fc <disk_read+0x3c>)
 80071e0:	4413      	add	r3, r2
 80071e2:	7a18      	ldrb	r0, [r3, #8]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	47a0      	blx	r4
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20002754 	.word	0x20002754

08007200 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	4a0a      	ldr	r2, [pc, #40]	@ (800723c <disk_write+0x3c>)
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68dc      	ldr	r4, [r3, #12]
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4a07      	ldr	r2, [pc, #28]	@ (800723c <disk_write+0x3c>)
 8007220:	4413      	add	r3, r2
 8007222:	7a18      	ldrb	r0, [r3, #8]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	47a0      	blx	r4
 800722c:	4603      	mov	r3, r0
 800722e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	bd90      	pop	{r4, r7, pc}
 800723a:	bf00      	nop
 800723c:	20002754 	.word	0x20002754

08007240 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	603a      	str	r2, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
 800724c:	460b      	mov	r3, r1
 800724e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	4a09      	ldr	r2, [pc, #36]	@ (8007278 <disk_ioctl+0x38>)
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	79fa      	ldrb	r2, [r7, #7]
 800725e:	4906      	ldr	r1, [pc, #24]	@ (8007278 <disk_ioctl+0x38>)
 8007260:	440a      	add	r2, r1
 8007262:	7a10      	ldrb	r0, [r2, #8]
 8007264:	79b9      	ldrb	r1, [r7, #6]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4798      	blx	r3
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]
  return res;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20002754 	.word	0x20002754

0800727c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3301      	adds	r3, #1
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800728c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	b21a      	sxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	b21b      	sxth	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b21b      	sxth	r3, r3
 800729e:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072a0:	89fb      	ldrh	r3, [r7, #14]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3303      	adds	r3, #3
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	3202      	adds	r2, #2
 80072c6:	7812      	ldrb	r2, [r2, #0]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	3201      	adds	r2, #1
 80072d4:	7812      	ldrb	r2, [r2, #0]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
	return rv;
 80072e6:	68fb      	ldr	r3, [r7, #12]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	887a      	ldrh	r2, [r7, #2]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	887a      	ldrh	r2, [r7, #2]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	1c53      	adds	r3, r2, #1
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	1c59      	adds	r1, r3, #1
 80073a6:	6179      	str	r1, [r7, #20]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f1      	bne.n	800739c <mem_cpy+0x1a>
	}
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	617a      	str	r2, [r7, #20]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f3      	bne.n	80073d4 <mem_set+0x10>
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80073fa:	b480      	push	{r7}
 80073fc:	b089      	sub	sp, #36	@ 0x24
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	61fa      	str	r2, [r7, #28]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	61ba      	str	r2, [r7, #24]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	1acb      	subs	r3, r1, r3
 8007426:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3b01      	subs	r3, #1
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <mem_cmp+0x40>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0eb      	beq.n	8007412 <mem_cmp+0x18>

	return r;
 800743a:	697b      	ldr	r3, [r7, #20]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3724      	adds	r7, #36	@ 0x24
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007452:	e002      	b.n	800745a <chk_chr+0x12>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3301      	adds	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <chk_chr+0x26>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	4293      	cmp	r3, r2
 800746c:	d1f2      	bne.n	8007454 <chk_chr+0xc>
	return *str;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800748a:	2300      	movs	r3, #0
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e029      	b.n	80074e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007494:	4a27      	ldr	r2, [pc, #156]	@ (8007534 <chk_lock+0xb4>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4413      	add	r3, r2
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01d      	beq.n	80074de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074a2:	4a24      	ldr	r2, [pc, #144]	@ (8007534 <chk_lock+0xb4>)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	4413      	add	r3, r2
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d116      	bne.n	80074e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007534 <chk_lock+0xb4>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	4413      	add	r3, r2
 80074bc:	3304      	adds	r3, #4
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d10c      	bne.n	80074e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007534 <chk_lock+0xb4>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	4413      	add	r3, r2
 80074d0:	3308      	adds	r3, #8
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074d8:	429a      	cmp	r2, r3
 80074da:	d102      	bne.n	80074e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074dc:	e007      	b.n	80074ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074de:	2301      	movs	r3, #1
 80074e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d9d2      	bls.n	8007494 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d109      	bne.n	8007508 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <chk_lock+0x80>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d101      	bne.n	8007504 <chk_lock+0x84>
 8007500:	2300      	movs	r3, #0
 8007502:	e010      	b.n	8007526 <chk_lock+0xa6>
 8007504:	2312      	movs	r3, #18
 8007506:	e00e      	b.n	8007526 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <chk_lock+0xa0>
 800750e:	4a09      	ldr	r2, [pc, #36]	@ (8007534 <chk_lock+0xb4>)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	4413      	add	r3, r2
 8007516:	330c      	adds	r3, #12
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d101      	bne.n	8007524 <chk_lock+0xa4>
 8007520:	2310      	movs	r3, #16
 8007522:	e000      	b.n	8007526 <chk_lock+0xa6>
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20002534 	.word	0x20002534

08007538 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800753e:	2300      	movs	r3, #0
 8007540:	607b      	str	r3, [r7, #4]
 8007542:	e002      	b.n	800754a <enq_lock+0x12>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3301      	adds	r3, #1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d806      	bhi.n	800755e <enq_lock+0x26>
 8007550:	4a09      	ldr	r2, [pc, #36]	@ (8007578 <enq_lock+0x40>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	4413      	add	r3, r2
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f2      	bne.n	8007544 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b02      	cmp	r3, #2
 8007562:	bf14      	ite	ne
 8007564:	2301      	movne	r3, #1
 8007566:	2300      	moveq	r3, #0
 8007568:	b2db      	uxtb	r3, r3
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20002534 	.word	0x20002534

0800757c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e01f      	b.n	80075cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800758c:	4a41      	ldr	r2, [pc, #260]	@ (8007694 <inc_lock+0x118>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d113      	bne.n	80075c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800759e:	4a3d      	ldr	r2, [pc, #244]	@ (8007694 <inc_lock+0x118>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	3304      	adds	r3, #4
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d109      	bne.n	80075c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075b2:	4a38      	ldr	r2, [pc, #224]	@ (8007694 <inc_lock+0x118>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	4413      	add	r3, r2
 80075ba:	3308      	adds	r3, #8
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d006      	beq.n	80075d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d9dc      	bls.n	800758c <inc_lock+0x10>
 80075d2:	e000      	b.n	80075d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d132      	bne.n	8007642 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e002      	b.n	80075e8 <inc_lock+0x6c>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d806      	bhi.n	80075fc <inc_lock+0x80>
 80075ee:	4a29      	ldr	r2, [pc, #164]	@ (8007694 <inc_lock+0x118>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	4413      	add	r3, r2
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f2      	bne.n	80075e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d101      	bne.n	8007606 <inc_lock+0x8a>
 8007602:	2300      	movs	r3, #0
 8007604:	e040      	b.n	8007688 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4922      	ldr	r1, [pc, #136]	@ (8007694 <inc_lock+0x118>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	440b      	add	r3, r1
 8007612:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	491e      	ldr	r1, [pc, #120]	@ (8007694 <inc_lock+0x118>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	440b      	add	r3, r1
 8007620:	3304      	adds	r3, #4
 8007622:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	491a      	ldr	r1, [pc, #104]	@ (8007694 <inc_lock+0x118>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	440b      	add	r3, r1
 8007630:	3308      	adds	r3, #8
 8007632:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007634:	4a17      	ldr	r2, [pc, #92]	@ (8007694 <inc_lock+0x118>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	4413      	add	r3, r2
 800763c:	330c      	adds	r3, #12
 800763e:	2200      	movs	r2, #0
 8007640:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <inc_lock+0xe0>
 8007648:	4a12      	ldr	r2, [pc, #72]	@ (8007694 <inc_lock+0x118>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	4413      	add	r3, r2
 8007650:	330c      	adds	r3, #12
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <inc_lock+0xe0>
 8007658:	2300      	movs	r3, #0
 800765a:	e015      	b.n	8007688 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d108      	bne.n	8007674 <inc_lock+0xf8>
 8007662:	4a0c      	ldr	r2, [pc, #48]	@ (8007694 <inc_lock+0x118>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	4413      	add	r3, r2
 800766a:	330c      	adds	r3, #12
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	e001      	b.n	8007678 <inc_lock+0xfc>
 8007674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007678:	4906      	ldr	r1, [pc, #24]	@ (8007694 <inc_lock+0x118>)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	440b      	add	r3, r1
 8007680:	330c      	adds	r3, #12
 8007682:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20002534 	.word	0x20002534

08007698 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d825      	bhi.n	80076f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80076ac:	4a17      	ldr	r2, [pc, #92]	@ (800770c <dec_lock+0x74>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	4413      	add	r3, r2
 80076b4:	330c      	adds	r3, #12
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076ba:	89fb      	ldrh	r3, [r7, #14]
 80076bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c0:	d101      	bne.n	80076c6 <dec_lock+0x2e>
 80076c2:	2300      	movs	r3, #0
 80076c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076c6:	89fb      	ldrh	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <dec_lock+0x3a>
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076d2:	4a0e      	ldr	r2, [pc, #56]	@ (800770c <dec_lock+0x74>)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	4413      	add	r3, r2
 80076da:	330c      	adds	r3, #12
 80076dc:	89fa      	ldrh	r2, [r7, #14]
 80076de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <dec_lock+0x5a>
 80076e6:	4a09      	ldr	r2, [pc, #36]	@ (800770c <dec_lock+0x74>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	737b      	strb	r3, [r7, #13]
 80076f6:	e001      	b.n	80076fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076f8:	2302      	movs	r3, #2
 80076fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20002534 	.word	0x20002534

08007710 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e010      	b.n	8007740 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800771e:	4a0d      	ldr	r2, [pc, #52]	@ (8007754 <clear_lock+0x44>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	4413      	add	r3, r2
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	429a      	cmp	r2, r3
 800772c:	d105      	bne.n	800773a <clear_lock+0x2a>
 800772e:	4a09      	ldr	r2, [pc, #36]	@ (8007754 <clear_lock+0x44>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	4413      	add	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d9eb      	bls.n	800771e <clear_lock+0xe>
	}
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	20002534 	.word	0x20002534

08007758 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	78db      	ldrb	r3, [r3, #3]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d034      	beq.n	80077d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007770:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7858      	ldrb	r0, [r3, #1]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800777c:	2301      	movs	r3, #1
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	f7ff fd3e 	bl	8007200 <disk_write>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <sync_window+0x38>
			res = FR_DISK_ERR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
 800778e:	e022      	b.n	80077d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	1ad2      	subs	r2, r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d217      	bcs.n	80077d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	789b      	ldrb	r3, [r3, #2]
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e010      	b.n	80077d0 <sync_window+0x78>
					wsect += fs->fsize;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4413      	add	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7858      	ldrb	r0, [r3, #1]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80077c2:	2301      	movs	r3, #1
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	f7ff fd1b 	bl	8007200 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d8eb      	bhi.n	80077ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d01b      	beq.n	8007830 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ffad 	bl	8007758 <sync_window>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d113      	bne.n	8007830 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	7858      	ldrb	r0, [r3, #1]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007812:	2301      	movs	r3, #1
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	f7ff fcd3 	bl	80071c0 <disk_read>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007820:	f04f 33ff 	mov.w	r3, #4294967295
 8007824:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007826:	2301      	movs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ff87 	bl	8007758 <sync_window>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d159      	bne.n	8007908 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d149      	bne.n	80078f0 <sync_fs+0xb4>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	791b      	ldrb	r3, [r3, #4]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d145      	bne.n	80078f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	899b      	ldrh	r3, [r3, #12]
 800786e:	461a      	mov	r2, r3
 8007870:	2100      	movs	r1, #0
 8007872:	f7ff fda7 	bl	80073c4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3338      	adds	r3, #56	@ 0x38
 800787a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800787e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff fd36 	bl	80072f4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3338      	adds	r3, #56	@ 0x38
 800788c:	4921      	ldr	r1, [pc, #132]	@ (8007914 <sync_fs+0xd8>)
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fd4b 	bl	800732a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3338      	adds	r3, #56	@ 0x38
 8007898:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800789c:	491e      	ldr	r1, [pc, #120]	@ (8007918 <sync_fs+0xdc>)
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fd43 	bl	800732a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3338      	adds	r3, #56	@ 0x38
 80078a8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7ff fd39 	bl	800732a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3338      	adds	r3, #56	@ 0x38
 80078bc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7ff fd2f 	bl	800732a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7858      	ldrb	r0, [r3, #1]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e4:	2301      	movs	r3, #1
 80078e6:	f7ff fc8b 	bl	8007200 <disk_write>
			fs->fsi_flag = 0;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fca1 	bl	8007240 <disk_ioctl>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <sync_fs+0xcc>
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	41615252 	.word	0x41615252
 8007918:	61417272 	.word	0x61417272

0800791c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3b02      	subs	r3, #2
 800792a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	3b02      	subs	r3, #2
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d301      	bcc.n	800793c <clust2sect+0x20>
 8007938:	2300      	movs	r3, #0
 800793a:	e008      	b.n	800794e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	895b      	ldrh	r3, [r3, #10]
 8007940:	461a      	mov	r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	fb03 f202 	mul.w	r2, r3, r2
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794c:	4413      	add	r3, r2
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d904      	bls.n	800797a <get_fat+0x20>
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d302      	bcc.n	8007980 <get_fat+0x26>
		val = 1;	/* Internal error */
 800797a:	2301      	movs	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	e0ba      	b.n	8007af6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007980:	f04f 33ff 	mov.w	r3, #4294967295
 8007984:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b03      	cmp	r3, #3
 800798c:	f000 8082 	beq.w	8007a94 <get_fat+0x13a>
 8007990:	2b03      	cmp	r3, #3
 8007992:	f300 80a6 	bgt.w	8007ae2 <get_fat+0x188>
 8007996:	2b01      	cmp	r3, #1
 8007998:	d002      	beq.n	80079a0 <get_fat+0x46>
 800799a:	2b02      	cmp	r3, #2
 800799c:	d055      	beq.n	8007a4a <get_fat+0xf0>
 800799e:	e0a0      	b.n	8007ae2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	899b      	ldrh	r3, [r3, #12]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80079be:	4413      	add	r3, r2
 80079c0:	4619      	mov	r1, r3
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f7ff ff0c 	bl	80077e0 <move_window>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 808c 	bne.w	8007ae8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	60fa      	str	r2, [r7, #12]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	8992      	ldrh	r2, [r2, #12]
 80079da:	fbb3 f1f2 	udiv	r1, r3, r2
 80079de:	fb01 f202 	mul.w	r2, r1, r2
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4413      	add	r3, r2
 80079e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	899b      	ldrh	r3, [r3, #12]
 80079f6:	4619      	mov	r1, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80079fe:	4413      	add	r3, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	6938      	ldr	r0, [r7, #16]
 8007a04:	f7ff feec 	bl	80077e0 <move_window>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d16e      	bne.n	8007aec <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	899b      	ldrh	r3, [r3, #12]
 8007a12:	461a      	mov	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a1a:	fb01 f202 	mul.w	r2, r1, r2
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <get_fat+0xe6>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	e002      	b.n	8007a46 <get_fat+0xec>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a46:	617b      	str	r3, [r7, #20]
			break;
 8007a48:	e055      	b.n	8007af6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	899b      	ldrh	r3, [r3, #12]
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a5e:	4413      	add	r3, r2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6938      	ldr	r0, [r7, #16]
 8007a64:	f7ff febc 	bl	80077e0 <move_window>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d140      	bne.n	8007af0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	8992      	ldrh	r2, [r2, #12]
 8007a7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a80:	fb00 f202 	mul.w	r2, r0, r2
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	440b      	add	r3, r1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fbf7 	bl	800727c <ld_word>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	617b      	str	r3, [r7, #20]
			break;
 8007a92:	e030      	b.n	8007af6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	899b      	ldrh	r3, [r3, #12]
 8007a9c:	089b      	lsrs	r3, r3, #2
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6938      	ldr	r0, [r7, #16]
 8007aae:	f7ff fe97 	bl	80077e0 <move_window>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11d      	bne.n	8007af4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	8992      	ldrh	r2, [r2, #12]
 8007ac6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aca:	fb00 f202 	mul.w	r2, r0, r2
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff fbeb 	bl	80072ae <ld_dword>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ade:	617b      	str	r3, [r7, #20]
			break;
 8007ae0:	e009      	b.n	8007af6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	e006      	b.n	8007af6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ae8:	bf00      	nop
 8007aea:	e004      	b.n	8007af6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007aec:	bf00      	nop
 8007aee:	e002      	b.n	8007af6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007af4:	bf00      	nop
		}
	}

	return val;
 8007af6:	697b      	ldr	r3, [r7, #20]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b089      	sub	sp, #36	@ 0x24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	f240 8109 	bls.w	8007d2a <put_fat+0x22a>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	f080 8103 	bcs.w	8007d2a <put_fat+0x22a>
		switch (fs->fs_type) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	f000 80b6 	beq.w	8007c9a <put_fat+0x19a>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f300 80fb 	bgt.w	8007d2a <put_fat+0x22a>
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d003      	beq.n	8007b40 <put_fat+0x40>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	f000 8083 	beq.w	8007c44 <put_fat+0x144>
 8007b3e:	e0f4      	b.n	8007d2a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	899b      	ldrh	r3, [r3, #12]
 8007b56:	4619      	mov	r1, r3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b5e:	4413      	add	r3, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7ff fe3c 	bl	80077e0 <move_window>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b6c:	7ffb      	ldrb	r3, [r7, #31]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 80d4 	bne.w	8007d1c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	61ba      	str	r2, [r7, #24]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	8992      	ldrh	r2, [r2, #12]
 8007b84:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b88:	fb00 f202 	mul.w	r2, r0, r2
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	440b      	add	r3, r1
 8007b90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <put_fat+0xb8>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	b25a      	sxtb	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	b25b      	sxtb	r3, r3
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e001      	b.n	8007bbc <put_fat+0xbc>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	899b      	ldrh	r3, [r3, #12]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bd6:	4413      	add	r3, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fe00 	bl	80077e0 <move_window>
 8007be0:	4603      	mov	r3, r0
 8007be2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007be4:	7ffb      	ldrb	r3, [r7, #31]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 809a 	bne.w	8007d20 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	899b      	ldrh	r3, [r3, #12]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bfe:	fb00 f202 	mul.w	r2, r0, r2
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	440b      	add	r3, r1
 8007c06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <put_fat+0x11a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	091b      	lsrs	r3, r3, #4
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	e00e      	b.n	8007c38 <put_fat+0x138>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	f023 030f 	bic.w	r3, r3, #15
 8007c24:	b25a      	sxtb	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	70da      	strb	r2, [r3, #3]
			break;
 8007c42:	e072      	b.n	8007d2a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	899b      	ldrh	r3, [r3, #12]
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4619      	mov	r1, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c58:	4413      	add	r3, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff fdbf 	bl	80077e0 <move_window>
 8007c62:	4603      	mov	r3, r0
 8007c64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c66:	7ffb      	ldrb	r3, [r7, #31]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d15b      	bne.n	8007d24 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	8992      	ldrh	r2, [r2, #12]
 8007c7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c7e:	fb00 f202 	mul.w	r2, r0, r2
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	440b      	add	r3, r1
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fb31 	bl	80072f4 <st_word>
			fs->wflag = 1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	70da      	strb	r2, [r3, #3]
			break;
 8007c98:	e047      	b.n	8007d2a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cae:	4413      	add	r3, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff fd94 	bl	80077e0 <move_window>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cbc:	7ffb      	ldrb	r3, [r7, #31]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d132      	bne.n	8007d28 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	8992      	ldrh	r2, [r2, #12]
 8007cd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cda:	fb00 f202 	mul.w	r2, r0, r2
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fae3 	bl	80072ae <ld_dword>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007cee:	4323      	orrs	r3, r4
 8007cf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	8992      	ldrh	r2, [r2, #12]
 8007d00:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d04:	fb00 f202 	mul.w	r2, r0, r2
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff fb0b 	bl	800732a <st_dword>
			fs->wflag = 1;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	70da      	strb	r2, [r3, #3]
			break;
 8007d1a:	e006      	b.n	8007d2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d1c:	bf00      	nop
 8007d1e:	e004      	b.n	8007d2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d20:	bf00      	nop
 8007d22:	e002      	b.n	8007d2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d24:	bf00      	nop
 8007d26:	e000      	b.n	8007d2a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007d28:	bf00      	nop
		}
	}
	return res;
 8007d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3724      	adds	r7, #36	@ 0x24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd90      	pop	{r4, r7, pc}

08007d34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d904      	bls.n	8007d5a <remove_chain+0x26>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d301      	bcc.n	8007d5e <remove_chain+0x2a>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e04b      	b.n	8007df6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00c      	beq.n	8007d7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	69b8      	ldr	r0, [r7, #24]
 8007d6c:	f7ff fec8 	bl	8007b00 <put_fat>
 8007d70:	4603      	mov	r3, r0
 8007d72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d74:	7ffb      	ldrb	r3, [r7, #31]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <remove_chain+0x4a>
 8007d7a:	7ffb      	ldrb	r3, [r7, #31]
 8007d7c:	e03b      	b.n	8007df6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fdea 	bl	800795a <get_fat>
 8007d86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d031      	beq.n	8007df2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <remove_chain+0x64>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e02e      	b.n	8007df6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d101      	bne.n	8007da4 <remove_chain+0x70>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e028      	b.n	8007df6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007da4:	2200      	movs	r2, #0
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	69b8      	ldr	r0, [r7, #24]
 8007daa:	f7ff fea9 	bl	8007b00 <put_fat>
 8007dae:	4603      	mov	r3, r0
 8007db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007db2:	7ffb      	ldrb	r3, [r7, #31]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <remove_chain+0x88>
 8007db8:	7ffb      	ldrb	r3, [r7, #31]
 8007dba:	e01c      	b.n	8007df6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	3b02      	subs	r3, #2
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d20b      	bcs.n	8007de2 <remove_chain+0xae>
			fs->free_clst++;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	791b      	ldrb	r3, [r3, #4]
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d3c6      	bcc.n	8007d7e <remove_chain+0x4a>
 8007df0:	e000      	b.n	8007df4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007df2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b088      	sub	sp, #32
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10d      	bne.n	8007e30 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <create_chain+0x2c>
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d31b      	bcc.n	8007e62 <create_chain+0x64>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e018      	b.n	8007e62 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fd91 	bl	800795a <get_fat>
 8007e38:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d801      	bhi.n	8007e44 <create_chain+0x46>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e070      	b.n	8007f26 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d101      	bne.n	8007e50 <create_chain+0x52>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	e06a      	b.n	8007f26 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d201      	bcs.n	8007e5e <create_chain+0x60>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	e063      	b.n	8007f26 <create_chain+0x128>
		scl = clst;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d307      	bcc.n	8007e86 <create_chain+0x88>
				ncl = 2;
 8007e76:	2302      	movs	r3, #2
 8007e78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d901      	bls.n	8007e86 <create_chain+0x88>
 8007e82:	2300      	movs	r3, #0
 8007e84:	e04f      	b.n	8007f26 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e86:	69f9      	ldr	r1, [r7, #28]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff fd66 	bl	800795a <get_fat>
 8007e8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d003      	beq.n	8007ea4 <create_chain+0xa6>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea2:	d101      	bne.n	8007ea8 <create_chain+0xaa>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	e03e      	b.n	8007f26 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d1da      	bne.n	8007e66 <create_chain+0x68>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e038      	b.n	8007f26 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007eb4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eba:	69f9      	ldr	r1, [r7, #28]
 8007ebc:	6938      	ldr	r0, [r7, #16]
 8007ebe:	f7ff fe1f 	bl	8007b00 <put_fat>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <create_chain+0xe2>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d006      	beq.n	8007ee0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f7ff fe12 	bl	8007b00 <put_fat>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d116      	bne.n	8007f14 <create_chain+0x116>
		fs->last_clst = ncl;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	3b02      	subs	r3, #2
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d804      	bhi.n	8007f04 <create_chain+0x106>
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	1e5a      	subs	r2, r3, #1
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	791b      	ldrb	r3, [r3, #4]
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	711a      	strb	r2, [r3, #4]
 8007f12:	e007      	b.n	8007f24 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d102      	bne.n	8007f20 <create_chain+0x122>
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1e:	e000      	b.n	8007f22 <create_chain+0x124>
 8007f20:	2301      	movs	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f24:	69fb      	ldr	r3, [r7, #28]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b087      	sub	sp, #28
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	3304      	adds	r3, #4
 8007f44:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	899b      	ldrh	r3, [r3, #12]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	8952      	ldrh	r2, [r2, #10]
 8007f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1d1a      	adds	r2, r3, #4
 8007f60:	613a      	str	r2, [r7, #16]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <clmt_clust+0x42>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e010      	b.n	8007f92 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d307      	bcc.n	8007f88 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	3304      	adds	r3, #4
 8007f84:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f86:	e7e9      	b.n	8007f5c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007f88:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fb4:	d204      	bcs.n	8007fc0 <dir_sdi+0x22>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e071      	b.n	80080a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <dir_sdi+0x46>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d902      	bls.n	8007fe4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10c      	bne.n	8008004 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	8912      	ldrh	r2, [r2, #8]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d301      	bcc.n	8007ffa <dir_sdi+0x5c>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e056      	b.n	80080a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	61da      	str	r2, [r3, #28]
 8008002:	e02d      	b.n	8008060 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	895b      	ldrh	r3, [r3, #10]
 8008008:	461a      	mov	r2, r3
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	899b      	ldrh	r3, [r3, #12]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008014:	e019      	b.n	800804a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fc9d 	bl	800795a <get_fat>
 8008020:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d101      	bne.n	800802e <dir_sdi+0x90>
 800802a:	2301      	movs	r3, #1
 800802c:	e03c      	b.n	80080a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d904      	bls.n	800803e <dir_sdi+0xa0>
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	429a      	cmp	r2, r3
 800803c:	d301      	bcc.n	8008042 <dir_sdi+0xa4>
 800803e:	2302      	movs	r3, #2
 8008040:	e032      	b.n	80080a8 <dir_sdi+0x10a>
			ofs -= csz;
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	429a      	cmp	r2, r3
 8008050:	d2e1      	bcs.n	8008016 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008052:	6979      	ldr	r1, [r7, #20]
 8008054:	6938      	ldr	r0, [r7, #16]
 8008056:	f7ff fc61 	bl	800791c <clust2sect>
 800805a:	4602      	mov	r2, r0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <dir_sdi+0xd4>
 800806e:	2302      	movs	r3, #2
 8008070:	e01a      	b.n	80080a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	899b      	ldrh	r3, [r3, #12]
 800807a:	4619      	mov	r1, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008082:	441a      	add	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	899b      	ldrh	r3, [r3, #12]
 8008092:	461a      	mov	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	fbb3 f0f2 	udiv	r0, r3, r2
 800809a:	fb00 f202 	mul.w	r2, r0, r2
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	18ca      	adds	r2, r1, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	3320      	adds	r3, #32
 80080c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <dir_next+0x28>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080d6:	d301      	bcc.n	80080dc <dir_next+0x2c>
 80080d8:	2304      	movs	r3, #4
 80080da:	e0bb      	b.n	8008254 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	899b      	ldrh	r3, [r3, #12]
 80080e0:	461a      	mov	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e8:	fb01 f202 	mul.w	r2, r1, r2
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 809d 	bne.w	800822e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	8912      	ldrh	r2, [r2, #8]
 800810e:	4293      	cmp	r3, r2
 8008110:	f0c0 808d 	bcc.w	800822e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	61da      	str	r2, [r3, #28]
 800811a:	2304      	movs	r3, #4
 800811c:	e09a      	b.n	8008254 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	899b      	ldrh	r3, [r3, #12]
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	fbb3 f3f2 	udiv	r3, r3, r2
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	8952      	ldrh	r2, [r2, #10]
 800812e:	3a01      	subs	r2, #1
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d17b      	bne.n	800822e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7ff fc0b 	bl	800795a <get_fat>
 8008144:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d801      	bhi.n	8008150 <dir_next+0xa0>
 800814c:	2302      	movs	r3, #2
 800814e:	e081      	b.n	8008254 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d101      	bne.n	800815c <dir_next+0xac>
 8008158:	2301      	movs	r3, #1
 800815a:	e07b      	b.n	8008254 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	429a      	cmp	r2, r3
 8008164:	d359      	bcc.n	800821a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	61da      	str	r2, [r3, #28]
 8008172:	2304      	movs	r3, #4
 8008174:	e06e      	b.n	8008254 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f7ff fe3d 	bl	8007dfe <create_chain>
 8008184:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <dir_next+0xe0>
 800818c:	2307      	movs	r3, #7
 800818e:	e061      	b.n	8008254 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <dir_next+0xea>
 8008196:	2302      	movs	r3, #2
 8008198:	e05c      	b.n	8008254 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d101      	bne.n	80081a6 <dir_next+0xf6>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e056      	b.n	8008254 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff fad6 	bl	8007758 <sync_window>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <dir_next+0x106>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e04e      	b.n	8008254 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	899b      	ldrh	r3, [r3, #12]
 80081c0:	461a      	mov	r2, r3
 80081c2:	2100      	movs	r1, #0
 80081c4:	f7ff f8fe 	bl	80073c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	6979      	ldr	r1, [r7, #20]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff fba4 	bl	800791c <clust2sect>
 80081d4:	4602      	mov	r2, r0
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80081da:	e012      	b.n	8008202 <dir_next+0x152>
						fs->wflag = 1;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff fab8 	bl	8007758 <sync_window>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <dir_next+0x142>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e030      	b.n	8008254 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3301      	adds	r3, #1
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	635a      	str	r2, [r3, #52]	@ 0x34
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	895b      	ldrh	r3, [r3, #10]
 8008206:	461a      	mov	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4293      	cmp	r3, r2
 800820c:	d3e6      	bcc.n	80081dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad2      	subs	r2, r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008220:	6979      	ldr	r1, [r7, #20]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff fb7a 	bl	800791c <clust2sect>
 8008228:	4602      	mov	r2, r0
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	899b      	ldrh	r3, [r3, #12]
 800823e:	461a      	mov	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	fbb3 f0f2 	udiv	r0, r3, r2
 8008246:	fb00 f202 	mul.w	r2, r0, r2
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	18ca      	adds	r2, r1, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fe95 	bl	8007f9e <dir_sdi>
 8008274:	4603      	mov	r3, r0
 8008276:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d12b      	bne.n	80082d6 <dir_alloc+0x7a>
		n = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff faa9 	bl	80077e0 <move_window>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11d      	bne.n	80082d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2be5      	cmp	r3, #229	@ 0xe5
 80082a0:	d004      	beq.n	80082ac <dir_alloc+0x50>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d107      	bne.n	80082bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	3301      	adds	r3, #1
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d102      	bne.n	80082c0 <dir_alloc+0x64>
 80082ba:	e00c      	b.n	80082d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082c0:	2101      	movs	r1, #1
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fef4 	bl	80080b0 <dir_next>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0d7      	beq.n	8008282 <dir_alloc+0x26>
 80082d2:	e000      	b.n	80082d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80082d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d101      	bne.n	80082e0 <dir_alloc+0x84>
 80082dc:	2307      	movs	r3, #7
 80082de:	75fb      	strb	r3, [r7, #23]
	return res;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	331a      	adds	r3, #26
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe ffbf 	bl	800727c <ld_word>
 80082fe:	4603      	mov	r3, r0
 8008300:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b03      	cmp	r3, #3
 8008308:	d109      	bne.n	800831e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe ffb4 	bl	800727c <ld_word>
 8008314:	4603      	mov	r3, r0
 8008316:	041b      	lsls	r3, r3, #16
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800831e:	68fb      	ldr	r3, [r7, #12]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	331a      	adds	r3, #26
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	b292      	uxth	r2, r2
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe ffd8 	bl	80072f4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d109      	bne.n	8008360 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f103 0214 	add.w	r2, r3, #20
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	b29b      	uxth	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f7fe ffca 	bl	80072f4 <st_word>
	}
}
 8008360:	bf00      	nop
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	331a      	adds	r3, #26
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe ff80 	bl	800727c <ld_word>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <cmp_lfn+0x1e>
 8008382:	2300      	movs	r3, #0
 8008384:	e059      	b.n	800843a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	4613      	mov	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800839c:	2301      	movs	r3, #1
 800839e:	81fb      	strh	r3, [r7, #14]
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	e033      	b.n	800840e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80083a6:	4a27      	ldr	r2, [pc, #156]	@ (8008444 <cmp_lfn+0xdc>)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	4413      	add	r3, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe ff61 	bl	800727c <ld_word>
 80083ba:	4603      	mov	r3, r0
 80083bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80083be:	89fb      	ldrh	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01a      	beq.n	80083fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80083c8:	d812      	bhi.n	80083f0 <cmp_lfn+0x88>
 80083ca:	89bb      	ldrh	r3, [r7, #12]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 f9a9 	bl	800a724 <ff_wtoupper>
 80083d2:	4603      	mov	r3, r0
 80083d4:	461c      	mov	r4, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	617a      	str	r2, [r7, #20]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f002 f99d 	bl	800a724 <ff_wtoupper>
 80083ea:	4603      	mov	r3, r0
 80083ec:	429c      	cmp	r4, r3
 80083ee:	d001      	beq.n	80083f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80083f0:	2300      	movs	r3, #0
 80083f2:	e022      	b.n	800843a <cmp_lfn+0xd2>
			}
			wc = uc;
 80083f4:	89bb      	ldrh	r3, [r7, #12]
 80083f6:	81fb      	strh	r3, [r7, #14]
 80083f8:	e006      	b.n	8008408 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80083fa:	89bb      	ldrh	r3, [r7, #12]
 80083fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008400:	4293      	cmp	r3, r2
 8008402:	d001      	beq.n	8008408 <cmp_lfn+0xa0>
 8008404:	2300      	movs	r3, #0
 8008406:	e018      	b.n	800843a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3301      	adds	r3, #1
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b0c      	cmp	r3, #12
 8008412:	d9c8      	bls.n	80083a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <cmp_lfn+0xd0>
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <cmp_lfn+0xd0>
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <cmp_lfn+0xd0>
 8008434:	2300      	movs	r3, #0
 8008436:	e000      	b.n	800843a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008438:	2301      	movs	r3, #1
}
 800843a:	4618      	mov	r0, r3
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	bd90      	pop	{r4, r7, pc}
 8008442:	bf00      	nop
 8008444:	0800dc20 	.word	0x0800dc20

08008448 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4611      	mov	r1, r2
 8008454:	461a      	mov	r2, r3
 8008456:	460b      	mov	r3, r1
 8008458:	71fb      	strb	r3, [r7, #7]
 800845a:	4613      	mov	r3, r2
 800845c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	330d      	adds	r3, #13
 8008462:	79ba      	ldrb	r2, [r7, #6]
 8008464:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	330b      	adds	r3, #11
 800846a:	220f      	movs	r2, #15
 800846c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	330c      	adds	r3, #12
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	331a      	adds	r3, #26
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe ff39 	bl	80072f4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	1e5a      	subs	r2, r3, #1
 8008486:	4613      	mov	r3, r2
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	82fb      	strh	r3, [r7, #22]
 8008496:	2300      	movs	r3, #0
 8008498:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800849a:	8afb      	ldrh	r3, [r7, #22]
 800849c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <put_lfn+0x6c>
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	61fa      	str	r2, [r7, #28]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80084b4:	4a17      	ldr	r2, [pc, #92]	@ (8008514 <put_lfn+0xcc>)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	4413      	add	r3, r2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	8afa      	ldrh	r2, [r7, #22]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff14 	bl	80072f4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80084cc:	8afb      	ldrh	r3, [r7, #22]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d102      	bne.n	80084d8 <put_lfn+0x90>
 80084d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	3301      	adds	r3, #1
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b0c      	cmp	r3, #12
 80084e2:	d9da      	bls.n	800849a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80084e4:	8afb      	ldrh	r3, [r7, #22]
 80084e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d006      	beq.n	80084fc <put_lfn+0xb4>
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <put_lfn+0xbc>
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008502:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	79fa      	ldrb	r2, [r7, #7]
 8008508:	701a      	strb	r2, [r3, #0]
}
 800850a:	bf00      	nop
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	0800dc20 	.word	0x0800dc20

08008518 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08c      	sub	sp, #48	@ 0x30
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008526:	220b      	movs	r2, #11
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7fe ff29 	bl	8007382 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b05      	cmp	r3, #5
 8008534:	d92b      	bls.n	800858e <gen_numname+0x76>
		sr = seq;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800853a:	e022      	b.n	8008582 <gen_numname+0x6a>
			wc = *lfn++;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1c9a      	adds	r2, r3, #2
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008546:	2300      	movs	r3, #0
 8008548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800854a:	e017      	b.n	800857c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	005a      	lsls	r2, r3, #1
 8008550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	4413      	add	r3, r2
 8008558:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800855a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <gen_numname+0x5e>
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008570:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008574:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	3301      	adds	r3, #1
 800857a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2b0f      	cmp	r3, #15
 8008580:	d9e4      	bls.n	800854c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1d8      	bne.n	800853c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800858e:	2307      	movs	r3, #7
 8008590:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	b2db      	uxtb	r3, r3
 800859c:	3330      	adds	r3, #48	@ 0x30
 800859e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80085a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085a6:	2b39      	cmp	r3, #57	@ 0x39
 80085a8:	d904      	bls.n	80085b4 <gen_numname+0x9c>
 80085aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ae:	3307      	adds	r3, #7
 80085b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	1e5a      	subs	r2, r3, #1
 80085b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085ba:	3330      	adds	r3, #48	@ 0x30
 80085bc:	443b      	add	r3, r7
 80085be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80085c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	091b      	lsrs	r3, r3, #4
 80085ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1df      	bne.n	8008592 <gen_numname+0x7a>
	ns[i] = '~';
 80085d2:	f107 0214 	add.w	r2, r7, #20
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	4413      	add	r3, r2
 80085da:	227e      	movs	r2, #126	@ 0x7e
 80085dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80085de:	2300      	movs	r3, #0
 80085e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e2:	e002      	b.n	80085ea <gen_numname+0xd2>
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	3301      	adds	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d205      	bcs.n	80085fe <gen_numname+0xe6>
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	4413      	add	r3, r2
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d1f2      	bne.n	80085e4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	2b07      	cmp	r3, #7
 8008602:	d807      	bhi.n	8008614 <gen_numname+0xfc>
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	62ba      	str	r2, [r7, #40]	@ 0x28
 800860a:	3330      	adds	r3, #48	@ 0x30
 800860c:	443b      	add	r3, r7
 800860e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008612:	e000      	b.n	8008616 <gen_numname+0xfe>
 8008614:	2120      	movs	r1, #32
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	627a      	str	r2, [r7, #36]	@ 0x24
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	460a      	mov	r2, r1
 8008622:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	2b07      	cmp	r3, #7
 8008628:	d9e9      	bls.n	80085fe <gen_numname+0xe6>
}
 800862a:	bf00      	nop
 800862c:	bf00      	nop
 800862e:	3730      	adds	r7, #48	@ 0x30
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008640:	230b      	movs	r3, #11
 8008642:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	0852      	lsrs	r2, r2, #1
 800864a:	01db      	lsls	r3, r3, #7
 800864c:	4313      	orrs	r3, r2
 800864e:	b2da      	uxtb	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	1c59      	adds	r1, r3, #1
 8008654:	6079      	str	r1, [r7, #4]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	4413      	add	r3, r2
 800865a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3b01      	subs	r3, #1
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1ed      	bne.n	8008644 <sum_sfn+0x10>
	return sum;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff fc89 	bl	8007f9e <dir_sdi>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <dir_find+0x24>
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	e0a9      	b.n	80087ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800869a:	23ff      	movs	r3, #255	@ 0xff
 800869c:	753b      	strb	r3, [r7, #20]
 800869e:	7d3b      	ldrb	r3, [r7, #20]
 80086a0:	757b      	strb	r3, [r7, #21]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6938      	ldr	r0, [r7, #16]
 80086b2:	f7ff f895 	bl	80077e0 <move_window>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 8090 	bne.w	80087e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086ca:	7dbb      	ldrb	r3, [r7, #22]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <dir_find+0x60>
 80086d0:	2304      	movs	r3, #4
 80086d2:	75fb      	strb	r3, [r7, #23]
 80086d4:	e08a      	b.n	80087ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	330b      	adds	r3, #11
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7bfa      	ldrb	r2, [r7, #15]
 80086e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086ea:	7dbb      	ldrb	r3, [r7, #22]
 80086ec:	2be5      	cmp	r3, #229	@ 0xe5
 80086ee:	d007      	beq.n	8008700 <dir_find+0x8a>
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <dir_find+0x98>
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d006      	beq.n	800870e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008700:	23ff      	movs	r3, #255	@ 0xff
 8008702:	757b      	strb	r3, [r7, #21]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30
 800870c:	e05e      	b.n	80087cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b0f      	cmp	r3, #15
 8008712:	d136      	bne.n	8008782 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800871a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d154      	bne.n	80087cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00d      	beq.n	8008748 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	7b5b      	ldrb	r3, [r3, #13]
 8008732:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873a:	75bb      	strb	r3, [r7, #22]
 800873c:	7dbb      	ldrb	r3, [r7, #22]
 800873e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008748:	7dba      	ldrb	r2, [r7, #22]
 800874a:	7d7b      	ldrb	r3, [r7, #21]
 800874c:	429a      	cmp	r2, r3
 800874e:	d115      	bne.n	800877c <dir_find+0x106>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	330d      	adds	r3, #13
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	7d3a      	ldrb	r2, [r7, #20]
 800875a:	429a      	cmp	r2, r3
 800875c:	d10e      	bne.n	800877c <dir_find+0x106>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7ff fdfd 	bl	8008368 <cmp_lfn>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <dir_find+0x106>
 8008774:	7d7b      	ldrb	r3, [r7, #21]
 8008776:	3b01      	subs	r3, #1
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e000      	b.n	800877e <dir_find+0x108>
 800877c:	23ff      	movs	r3, #255	@ 0xff
 800877e:	757b      	strb	r3, [r7, #21]
 8008780:	e024      	b.n	80087cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008782:	7d7b      	ldrb	r3, [r7, #21]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <dir_find+0x126>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff ff51 	bl	8008634 <sum_sfn>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	7d3b      	ldrb	r3, [r7, #20]
 8008798:	4293      	cmp	r3, r2
 800879a:	d024      	beq.n	80087e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <dir_find+0x14a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a18      	ldr	r0, [r3, #32]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3324      	adds	r3, #36	@ 0x24
 80087b2:	220b      	movs	r2, #11
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7fe fe20 	bl	80073fa <mem_cmp>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d014      	beq.n	80087ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087c0:	23ff      	movs	r3, #255	@ 0xff
 80087c2:	757b      	strb	r3, [r7, #21]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087cc:	2100      	movs	r1, #0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff fc6e 	bl	80080b0 <dir_next>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f43f af65 	beq.w	80086aa <dir_find+0x34>
 80087e0:	e004      	b.n	80087ec <dir_find+0x176>
		if (res != FR_OK) break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087ea:	bf00      	nop

	return res;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	@ 0x30
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800880c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <dir_register+0x20>
 8008814:	2306      	movs	r3, #6
 8008816:	e0e0      	b.n	80089da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008818:	2300      	movs	r3, #0
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
 800881c:	e002      	b.n	8008824 <dir_register+0x2c>
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	3301      	adds	r3, #1
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	4413      	add	r3, r2
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f4      	bne.n	800881e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	220c      	movs	r2, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fd9e 	bl	8007382 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d032      	beq.n	80088b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2240      	movs	r2, #64	@ 0x40
 8008854:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008858:	2301      	movs	r3, #1
 800885a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800885c:	e016      	b.n	800888c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	f107 010c 	add.w	r1, r7, #12
 800886c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886e:	f7ff fe53 	bl	8008518 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff feff 	bl	8008676 <dir_find>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800887e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	3301      	adds	r3, #1
 800888a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800888c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888e:	2b63      	cmp	r3, #99	@ 0x63
 8008890:	d9e5      	bls.n	800885e <dir_register+0x66>
 8008892:	e000      	b.n	8008896 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008894:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	2b64      	cmp	r3, #100	@ 0x64
 800889a:	d101      	bne.n	80088a0 <dir_register+0xa8>
 800889c:	2307      	movs	r3, #7
 800889e:	e09c      	b.n	80089da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80088a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d002      	beq.n	80088ae <dir_register+0xb6>
 80088a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088ac:	e095      	b.n	80089da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088ae:	7dfa      	ldrb	r2, [r7, #23]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <dir_register+0xd8>
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	330c      	adds	r3, #12
 80088c4:	4a47      	ldr	r2, [pc, #284]	@ (80089e4 <dir_register+0x1ec>)
 80088c6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ca:	089b      	lsrs	r3, r3, #2
 80088cc:	3301      	adds	r3, #1
 80088ce:	e000      	b.n	80088d2 <dir_register+0xda>
 80088d0:	2301      	movs	r3, #1
 80088d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088d4:	6a39      	ldr	r1, [r7, #32]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fcc0 	bl	800825c <dir_alloc>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80088e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d148      	bne.n	800897c <dir_register+0x184>
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d042      	beq.n	800897c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	015b      	lsls	r3, r3, #5
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fb4b 	bl	8007f9e <dir_sdi>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800890e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008912:	2b00      	cmp	r3, #0
 8008914:	d132      	bne.n	800897c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3324      	adds	r3, #36	@ 0x24
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fe8a 	bl	8008634 <sum_sfn>
 8008920:	4603      	mov	r3, r0
 8008922:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	4619      	mov	r1, r3
 800892a:	69f8      	ldr	r0, [r7, #28]
 800892c:	f7fe ff58 	bl	80077e0 <move_window>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800893a:	2b00      	cmp	r3, #0
 800893c:	d11d      	bne.n	800897a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	6918      	ldr	r0, [r3, #16]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a19      	ldr	r1, [r3, #32]
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	b2da      	uxtb	r2, r3
 800894a:	7efb      	ldrb	r3, [r7, #27]
 800894c:	f7ff fd7c 	bl	8008448 <put_lfn>
				fs->wflag = 1;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2201      	movs	r2, #1
 8008954:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008956:	2100      	movs	r1, #0
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fba9 	bl	80080b0 <dir_next>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <dir_register+0x184>
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	3b01      	subs	r3, #1
 8008970:	623b      	str	r3, [r7, #32]
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1d5      	bne.n	8008924 <dir_register+0x12c>
 8008978:	e000      	b.n	800897c <dir_register+0x184>
				if (res != FR_OK) break;
 800897a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800897c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008980:	2b00      	cmp	r3, #0
 8008982:	d128      	bne.n	80089d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4619      	mov	r1, r3
 800898a:	69f8      	ldr	r0, [r7, #28]
 800898c:	f7fe ff28 	bl	80077e0 <move_window>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d11b      	bne.n	80089d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	2220      	movs	r2, #32
 80089a4:	2100      	movs	r1, #0
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fd0c 	bl	80073c4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a18      	ldr	r0, [r3, #32]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3324      	adds	r3, #36	@ 0x24
 80089b4:	220b      	movs	r2, #11
 80089b6:	4619      	mov	r1, r3
 80089b8:	f7fe fce3 	bl	8007382 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	330c      	adds	r3, #12
 80089c8:	f002 0218 	and.w	r2, r2, #24
 80089cc:	b2d2      	uxtb	r2, r2
 80089ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	2201      	movs	r2, #1
 80089d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3730      	adds	r7, #48	@ 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	4ec4ec4f 	.word	0x4ec4ec4f

080089e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	@ 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	61ba      	str	r2, [r7, #24]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a18:	2b1f      	cmp	r3, #31
 8008a1a:	d940      	bls.n	8008a9e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008a1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a20:	d006      	beq.n	8008a30 <create_name+0x48>
 8008a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a24:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a26:	d110      	bne.n	8008a4a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a28:	e002      	b.n	8008a30 <create_name+0x48>
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a3a:	d0f6      	beq.n	8008a2a <create_name+0x42>
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a46:	d0f0      	beq.n	8008a2a <create_name+0x42>
			break;
 8008a48:	e02a      	b.n	8008aa0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2bfe      	cmp	r3, #254	@ 0xfe
 8008a4e:	d901      	bls.n	8008a54 <create_name+0x6c>
 8008a50:	2306      	movs	r3, #6
 8008a52:	e17d      	b.n	8008d50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 fe24 	bl	800a6ac <ff_convert>
 8008a64:	4603      	mov	r3, r0
 8008a66:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <create_name+0x8a>
 8008a6e:	2306      	movs	r3, #6
 8008a70:	e16e      	b.n	8008d50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008a72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a76:	d809      	bhi.n	8008a8c <create_name+0xa4>
 8008a78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	488d      	ldr	r0, [pc, #564]	@ (8008cb4 <create_name+0x2cc>)
 8008a7e:	f7fe fce3 	bl	8007448 <chk_chr>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <create_name+0xa4>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	e161      	b.n	8008d50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	617a      	str	r2, [r7, #20]
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a9c:	e7b4      	b.n	8008a08 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aac:	2b1f      	cmp	r3, #31
 8008aae:	d801      	bhi.n	8008ab4 <create_name+0xcc>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	e000      	b.n	8008ab6 <create_name+0xce>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008aba:	e011      	b.n	8008ae0 <create_name+0xf8>
		w = lfn[di - 1];
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d002      	beq.n	8008ada <create_name+0xf2>
 8008ad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ad8:	d106      	bne.n	8008ae8 <create_name+0x100>
		di--;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1ea      	bne.n	8008abc <create_name+0xd4>
 8008ae6:	e000      	b.n	8008aea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008ae8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <create_name+0x118>
 8008afc:	2306      	movs	r3, #6
 8008afe:	e127      	b.n	8008d50 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3324      	adds	r3, #36	@ 0x24
 8008b04:	220b      	movs	r2, #11
 8008b06:	2120      	movs	r1, #32
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe fc5b 	bl	80073c4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	e002      	b.n	8008b1a <create_name+0x132>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	3301      	adds	r3, #1
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d0f5      	beq.n	8008b14 <create_name+0x12c>
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b34:	d0ee      	beq.n	8008b14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <create_name+0x168>
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b40:	f043 0303 	orr.w	r3, r3, #3
 8008b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008b48:	e002      	b.n	8008b50 <create_name+0x168>
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <create_name+0x182>
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	4413      	add	r3, r2
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b68:	d1ef      	bne.n	8008b4a <create_name+0x162>

	i = b = 0; ni = 8;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b70:	2300      	movs	r3, #0
 8008b72:	623b      	str	r3, [r7, #32]
 8008b74:	2308      	movs	r3, #8
 8008b76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	61ba      	str	r2, [r7, #24]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8090 	beq.w	8008cb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008b90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d006      	beq.n	8008ba4 <create_name+0x1bc>
 8008b96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b9a:	d10a      	bne.n	8008bb2 <create_name+0x1ca>
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d006      	beq.n	8008bb2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ba8:	f043 0303 	orr.w	r3, r3, #3
 8008bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bb0:	e07d      	b.n	8008cae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008bb2:	6a3a      	ldr	r2, [r7, #32]
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d203      	bcs.n	8008bc2 <create_name+0x1da>
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d123      	bne.n	8008c0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b0b      	cmp	r3, #11
 8008bc6:	d106      	bne.n	8008bd6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bcc:	f043 0303 	orr.w	r3, r3, #3
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bd4:	e075      	b.n	8008cc2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d005      	beq.n	8008bea <create_name+0x202>
 8008bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be2:	f043 0303 	orr.w	r3, r3, #3
 8008be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d866      	bhi.n	8008cc0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	623b      	str	r3, [r7, #32]
 8008bfa:	230b      	movs	r3, #11
 8008bfc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c08:	e051      	b.n	8008cae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c0e:	d914      	bls.n	8008c3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fd49 	bl	800a6ac <ff_convert>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <create_name+0x246>
 8008c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c26:	3b80      	subs	r3, #128	@ 0x80
 8008c28:	4a23      	ldr	r2, [pc, #140]	@ (8008cb8 <create_name+0x2d0>)
 8008c2a:	5cd3      	ldrb	r3, [r2, r3]
 8008c2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c32:	f043 0302 	orr.w	r3, r3, #2
 8008c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <create_name+0x268>
 8008c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c42:	4619      	mov	r1, r3
 8008c44:	481d      	ldr	r0, [pc, #116]	@ (8008cbc <create_name+0x2d4>)
 8008c46:	f7fe fbff 	bl	8007448 <chk_chr>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008c50:	235f      	movs	r3, #95	@ 0x5f
 8008c52:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c58:	f043 0303 	orr.w	r3, r3, #3
 8008c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c60:	e01b      	b.n	8008c9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c64:	2b40      	cmp	r3, #64	@ 0x40
 8008c66:	d909      	bls.n	8008c7c <create_name+0x294>
 8008c68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c6a:	2b5a      	cmp	r3, #90	@ 0x5a
 8008c6c:	d806      	bhi.n	8008c7c <create_name+0x294>
					b |= 2;
 8008c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c72:	f043 0302 	orr.w	r3, r3, #2
 8008c76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c7a:	e00e      	b.n	8008c9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c7e:	2b60      	cmp	r3, #96	@ 0x60
 8008c80:	d90b      	bls.n	8008c9a <create_name+0x2b2>
 8008c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c84:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c86:	d808      	bhi.n	8008c9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008c88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c96:	3b20      	subs	r3, #32
 8008c98:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	623a      	str	r2, [r7, #32]
 8008ca0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ca2:	b2d1      	uxtb	r1, r2
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	460a      	mov	r2, r1
 8008caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008cae:	e763      	b.n	8008b78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008cb0:	bf00      	nop
 8008cb2:	e006      	b.n	8008cc2 <create_name+0x2da>
 8008cb4:	0800db18 	.word	0x0800db18
 8008cb8:	0800dba0 	.word	0x0800dba0
 8008cbc:	0800db24 	.word	0x0800db24
			if (si > di) break;			/* No extension */
 8008cc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008cc8:	2be5      	cmp	r3, #229	@ 0xe5
 8008cca:	d103      	bne.n	8008cd4 <create_name+0x2ec>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2205      	movs	r2, #5
 8008cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d104      	bne.n	8008ce4 <create_name+0x2fc>
 8008cda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ce8:	f003 030c 	and.w	r3, r3, #12
 8008cec:	2b0c      	cmp	r3, #12
 8008cee:	d005      	beq.n	8008cfc <create_name+0x314>
 8008cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d105      	bne.n	8008d08 <create_name+0x320>
 8008cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d117      	bne.n	8008d44 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d105      	bne.n	8008d2c <create_name+0x344>
 8008d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d24:	f043 0310 	orr.w	r3, r3, #16
 8008d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d30:	f003 030c 	and.w	r3, r3, #12
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d105      	bne.n	8008d44 <create_name+0x35c>
 8008d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d3c:	f043 0308 	orr.w	r3, r3, #8
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d4a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008d4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3728      	adds	r7, #40	@ 0x28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d6c:	e002      	b.n	8008d74 <follow_path+0x1c>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d7a:	d0f8      	beq.n	8008d6e <follow_path+0x16>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d82:	d0f4      	beq.n	8008d6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2200      	movs	r2, #0
 8008d88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b1f      	cmp	r3, #31
 8008d90:	d80a      	bhi.n	8008da8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2280      	movs	r2, #128	@ 0x80
 8008d96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff f8fe 	bl	8007f9e <dir_sdi>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
 8008da6:	e048      	b.n	8008e3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008da8:	463b      	mov	r3, r7
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fe1b 	bl	80089e8 <create_name>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d139      	bne.n	8008e30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fc5a 	bl	8008676 <dir_find>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008dcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d12c      	bne.n	8008e34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d127      	bne.n	8008e34 <follow_path+0xdc>
 8008de4:	2305      	movs	r3, #5
 8008de6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008de8:	e024      	b.n	8008e34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d121      	bne.n	8008e38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	799b      	ldrb	r3, [r3, #6]
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e00:	2305      	movs	r3, #5
 8008e02:	75fb      	strb	r3, [r7, #23]
 8008e04:	e019      	b.n	8008e3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	8992      	ldrh	r2, [r2, #12]
 8008e14:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e18:	fb00 f202 	mul.w	r2, r0, r2
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	440b      	add	r3, r1
 8008e20:	4619      	mov	r1, r3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff fa61 	bl	80082ea <ld_clust>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e2e:	e7bb      	b.n	8008da8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008e30:	bf00      	nop
 8008e32:	e002      	b.n	8008e3a <follow_path+0xe2>
				break;
 8008e34:	bf00      	nop
 8008e36:	e000      	b.n	8008e3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e38:	bf00      	nop
			}
		}
	}

	return res;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d031      	beq.n	8008ebe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e002      	b.n	8008e68 <get_ldnumber+0x24>
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	3301      	adds	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b1f      	cmp	r3, #31
 8008e6e:	d903      	bls.n	8008e78 <get_ldnumber+0x34>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e76:	d1f4      	bne.n	8008e62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e7e:	d11c      	bne.n	8008eba <get_ldnumber+0x76>
			tp = *path;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	60fa      	str	r2, [r7, #12]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	3b30      	subs	r3, #48	@ 0x30
 8008e90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b09      	cmp	r3, #9
 8008e96:	d80e      	bhi.n	8008eb6 <get_ldnumber+0x72>
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d10a      	bne.n	8008eb6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d107      	bne.n	8008eb6 <get_ldnumber+0x72>
					vol = (int)i;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	3301      	adds	r3, #1
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	e002      	b.n	8008ec0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ebe:	693b      	ldr	r3, [r7, #16]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	70da      	strb	r2, [r3, #3]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fe fc7a 	bl	80077e0 <move_window>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <check_fs+0x2a>
 8008ef2:	2304      	movs	r3, #4
 8008ef4:	e038      	b.n	8008f68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3338      	adds	r3, #56	@ 0x38
 8008efa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f9bc 	bl	800727c <ld_word>
 8008f04:	4603      	mov	r3, r0
 8008f06:	461a      	mov	r2, r3
 8008f08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d001      	beq.n	8008f14 <check_fs+0x48>
 8008f10:	2303      	movs	r3, #3
 8008f12:	e029      	b.n	8008f68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f1a:	2be9      	cmp	r3, #233	@ 0xe9
 8008f1c:	d009      	beq.n	8008f32 <check_fs+0x66>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f24:	2beb      	cmp	r3, #235	@ 0xeb
 8008f26:	d11e      	bne.n	8008f66 <check_fs+0x9a>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008f2e:	2b90      	cmp	r3, #144	@ 0x90
 8008f30:	d119      	bne.n	8008f66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3338      	adds	r3, #56	@ 0x38
 8008f36:	3336      	adds	r3, #54	@ 0x36
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe f9b8 	bl	80072ae <ld_dword>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008f44:	4a0a      	ldr	r2, [pc, #40]	@ (8008f70 <check_fs+0xa4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d101      	bne.n	8008f4e <check_fs+0x82>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e00c      	b.n	8008f68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3338      	adds	r3, #56	@ 0x38
 8008f52:	3352      	adds	r3, #82	@ 0x52
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe f9aa 	bl	80072ae <ld_dword>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4a05      	ldr	r2, [pc, #20]	@ (8008f74 <check_fs+0xa8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d101      	bne.n	8008f66 <check_fs+0x9a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f66:	2302      	movs	r3, #2
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	00544146 	.word	0x00544146
 8008f74:	33544146 	.word	0x33544146

08008f78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b096      	sub	sp, #88	@ 0x58
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f7ff ff59 	bl	8008e44 <get_ldnumber>
 8008f92:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da01      	bge.n	8008f9e <find_volume+0x26>
 8008f9a:	230b      	movs	r3, #11
 8008f9c:	e265      	b.n	800946a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f9e:	4a9f      	ldr	r2, [pc, #636]	@ (800921c <find_volume+0x2a4>)
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <find_volume+0x3a>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	e25b      	b.n	800946a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01a      	beq.n	8008ffe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe f8b7 	bl	8007140 <disk_status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <find_volume+0x82>
 8008fea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	e237      	b.n	800946a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e235      	b.n	800946a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009006:	b2da      	uxtb	r2, r3
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe f8af 	bl	8007174 <disk_initialize>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800901c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009028:	2303      	movs	r3, #3
 800902a:	e21e      	b.n	800946a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <find_volume+0xca>
 8009032:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800903e:	230a      	movs	r3, #10
 8009040:	e213      	b.n	800946a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009044:	7858      	ldrb	r0, [r3, #1]
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	330c      	adds	r3, #12
 800904a:	461a      	mov	r2, r3
 800904c:	2102      	movs	r1, #2
 800904e:	f7fe f8f7 	bl	8007240 <disk_ioctl>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <find_volume+0xe4>
 8009058:	2301      	movs	r3, #1
 800905a:	e206      	b.n	800946a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	899b      	ldrh	r3, [r3, #12]
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009064:	d80d      	bhi.n	8009082 <find_volume+0x10a>
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	899b      	ldrh	r3, [r3, #12]
 800906a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800906e:	d308      	bcc.n	8009082 <find_volume+0x10a>
 8009070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009072:	899b      	ldrh	r3, [r3, #12]
 8009074:	461a      	mov	r2, r3
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009078:	899b      	ldrh	r3, [r3, #12]
 800907a:	3b01      	subs	r3, #1
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <find_volume+0x10e>
 8009082:	2301      	movs	r3, #1
 8009084:	e1f1      	b.n	800946a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800908a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800908c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800908e:	f7ff ff1d 	bl	8008ecc <check_fs>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009098:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800909c:	2b02      	cmp	r3, #2
 800909e:	d149      	bne.n	8009134 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090a0:	2300      	movs	r3, #0
 80090a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a4:	e01e      	b.n	80090e4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090b4:	4413      	add	r3, r2
 80090b6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	3304      	adds	r3, #4
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d006      	beq.n	80090d0 <find_volume+0x158>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	3308      	adds	r3, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe f8f1 	bl	80072ae <ld_dword>
 80090cc:	4602      	mov	r2, r0
 80090ce:	e000      	b.n	80090d2 <find_volume+0x15a>
 80090d0:	2200      	movs	r2, #0
 80090d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	3358      	adds	r3, #88	@ 0x58
 80090d8:	443b      	add	r3, r7
 80090da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e0:	3301      	adds	r3, #1
 80090e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d9dd      	bls.n	80090a6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80090ea:	2300      	movs	r3, #0
 80090ec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80090ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <find_volume+0x182>
 80090f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f6:	3b01      	subs	r3, #1
 80090f8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80090fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	3358      	adds	r3, #88	@ 0x58
 8009100:	443b      	add	r3, r7
 8009102:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009106:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <find_volume+0x1a2>
 800910e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009110:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009112:	f7ff fedb 	bl	8008ecc <check_fs>
 8009116:	4603      	mov	r3, r0
 8009118:	e000      	b.n	800911c <find_volume+0x1a4>
 800911a:	2303      	movs	r3, #3
 800911c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009124:	2b01      	cmp	r3, #1
 8009126:	d905      	bls.n	8009134 <find_volume+0x1bc>
 8009128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912a:	3301      	adds	r3, #1
 800912c:	643b      	str	r3, [r7, #64]	@ 0x40
 800912e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009130:	2b03      	cmp	r3, #3
 8009132:	d9e2      	bls.n	80090fa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009134:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009138:	2b04      	cmp	r3, #4
 800913a:	d101      	bne.n	8009140 <find_volume+0x1c8>
 800913c:	2301      	movs	r3, #1
 800913e:	e194      	b.n	800946a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009140:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009144:	2b01      	cmp	r3, #1
 8009146:	d901      	bls.n	800914c <find_volume+0x1d4>
 8009148:	230d      	movs	r3, #13
 800914a:	e18e      	b.n	800946a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800914c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914e:	3338      	adds	r3, #56	@ 0x38
 8009150:	330b      	adds	r3, #11
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f892 	bl	800727c <ld_word>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	899b      	ldrh	r3, [r3, #12]
 8009160:	429a      	cmp	r2, r3
 8009162:	d001      	beq.n	8009168 <find_volume+0x1f0>
 8009164:	230d      	movs	r3, #13
 8009166:	e180      	b.n	800946a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916a:	3338      	adds	r3, #56	@ 0x38
 800916c:	3316      	adds	r3, #22
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe f884 	bl	800727c <ld_word>
 8009174:	4603      	mov	r3, r0
 8009176:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <find_volume+0x214>
 800917e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009180:	3338      	adds	r3, #56	@ 0x38
 8009182:	3324      	adds	r3, #36	@ 0x24
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe f892 	bl	80072ae <ld_dword>
 800918a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009190:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	789b      	ldrb	r3, [r3, #2]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d005      	beq.n	80091b0 <find_volume+0x238>
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	789b      	ldrb	r3, [r3, #2]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d001      	beq.n	80091b0 <find_volume+0x238>
 80091ac:	230d      	movs	r3, #13
 80091ae:	e15c      	b.n	800946a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	789b      	ldrb	r3, [r3, #2]
 80091b4:	461a      	mov	r2, r3
 80091b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
 80091bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091c4:	461a      	mov	r2, r3
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d008      	beq.n	80091e4 <find_volume+0x26c>
 80091d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d4:	895b      	ldrh	r3, [r3, #10]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	895b      	ldrh	r3, [r3, #10]
 80091dc:	3b01      	subs	r3, #1
 80091de:	4013      	ands	r3, r2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <find_volume+0x270>
 80091e4:	230d      	movs	r3, #13
 80091e6:	e140      	b.n	800946a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	3338      	adds	r3, #56	@ 0x38
 80091ec:	3311      	adds	r3, #17
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe f844 	bl	800727c <ld_word>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80091fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009202:	8992      	ldrh	r2, [r2, #12]
 8009204:	0952      	lsrs	r2, r2, #5
 8009206:	b292      	uxth	r2, r2
 8009208:	fbb3 f1f2 	udiv	r1, r3, r2
 800920c:	fb01 f202 	mul.w	r2, r1, r2
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <find_volume+0x2a8>
 8009218:	230d      	movs	r3, #13
 800921a:	e126      	b.n	800946a <find_volume+0x4f2>
 800921c:	2000252c 	.word	0x2000252c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009222:	3338      	adds	r3, #56	@ 0x38
 8009224:	3313      	adds	r3, #19
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe f828 	bl	800727c <ld_word>
 800922c:	4603      	mov	r3, r0
 800922e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <find_volume+0x2cc>
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	3338      	adds	r3, #56	@ 0x38
 800923a:	3320      	adds	r3, #32
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe f836 	bl	80072ae <ld_dword>
 8009242:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	3338      	adds	r3, #56	@ 0x38
 8009248:	330e      	adds	r3, #14
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe f816 	bl	800727c <ld_word>
 8009250:	4603      	mov	r3, r0
 8009252:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009254:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <find_volume+0x2e6>
 800925a:	230d      	movs	r3, #13
 800925c:	e105      	b.n	800946a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800925e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009262:	4413      	add	r3, r2
 8009264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009266:	8911      	ldrh	r1, [r2, #8]
 8009268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800926a:	8992      	ldrh	r2, [r2, #12]
 800926c:	0952      	lsrs	r2, r2, #5
 800926e:	b292      	uxth	r2, r2
 8009270:	fbb1 f2f2 	udiv	r2, r1, r2
 8009274:	b292      	uxth	r2, r2
 8009276:	4413      	add	r3, r2
 8009278:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800927a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	429a      	cmp	r2, r3
 8009280:	d201      	bcs.n	8009286 <find_volume+0x30e>
 8009282:	230d      	movs	r3, #13
 8009284:	e0f1      	b.n	800946a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800928e:	8952      	ldrh	r2, [r2, #10]
 8009290:	fbb3 f3f2 	udiv	r3, r3, r2
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <find_volume+0x328>
 800929c:	230d      	movs	r3, #13
 800929e:	e0e4      	b.n	800946a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80092a0:	2303      	movs	r3, #3
 80092a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d802      	bhi.n	80092b6 <find_volume+0x33e>
 80092b0:	2302      	movs	r3, #2
 80092b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80092bc:	4293      	cmp	r3, r2
 80092be:	d802      	bhi.n	80092c6 <find_volume+0x34e>
 80092c0:	2301      	movs	r3, #1
 80092c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	1c9a      	adds	r2, r3, #2
 80092ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092cc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80092ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092d2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80092d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80092d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092d8:	441a      	add	r2, r3
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80092de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	441a      	add	r2, r3
 80092e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80092e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d11e      	bne.n	800932e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80092f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f2:	3338      	adds	r3, #56	@ 0x38
 80092f4:	332a      	adds	r3, #42	@ 0x2a
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fd ffc0 	bl	800727c <ld_word>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <find_volume+0x38e>
 8009302:	230d      	movs	r3, #13
 8009304:	e0b1      	b.n	800946a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	891b      	ldrh	r3, [r3, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <find_volume+0x39a>
 800930e:	230d      	movs	r3, #13
 8009310:	e0ab      	b.n	800946a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	3338      	adds	r3, #56	@ 0x38
 8009316:	332c      	adds	r3, #44	@ 0x2c
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd ffc8 	bl	80072ae <ld_dword>
 800931e:	4602      	mov	r2, r0
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	647b      	str	r3, [r7, #68]	@ 0x44
 800932c:	e01f      	b.n	800936e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	891b      	ldrh	r3, [r3, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <find_volume+0x3c2>
 8009336:	230d      	movs	r3, #13
 8009338:	e097      	b.n	800946a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800933e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009340:	441a      	add	r2, r3
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009346:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800934a:	2b02      	cmp	r3, #2
 800934c:	d103      	bne.n	8009356 <find_volume+0x3de>
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	e00a      	b.n	800936c <find_volume+0x3f4>
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	4613      	mov	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4413      	add	r3, r2
 8009360:	085a      	lsrs	r2, r3, #1
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800936c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	6a1a      	ldr	r2, [r3, #32]
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	899b      	ldrh	r3, [r3, #12]
 8009376:	4619      	mov	r1, r3
 8009378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800937a:	440b      	add	r3, r1
 800937c:	3b01      	subs	r3, #1
 800937e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009380:	8989      	ldrh	r1, [r1, #12]
 8009382:	fbb3 f3f1 	udiv	r3, r3, r1
 8009386:	429a      	cmp	r2, r3
 8009388:	d201      	bcs.n	800938e <find_volume+0x416>
 800938a:	230d      	movs	r3, #13
 800938c:	e06d      	b.n	800946a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	619a      	str	r2, [r3, #24]
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800939e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a0:	2280      	movs	r2, #128	@ 0x80
 80093a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d149      	bne.n	8009440 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	3338      	adds	r3, #56	@ 0x38
 80093b0:	3330      	adds	r3, #48	@ 0x30
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fd ff62 	bl	800727c <ld_word>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d140      	bne.n	8009440 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c0:	3301      	adds	r3, #1
 80093c2:	4619      	mov	r1, r3
 80093c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093c6:	f7fe fa0b 	bl	80077e0 <move_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d137      	bne.n	8009440 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80093d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d2:	2200      	movs	r2, #0
 80093d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	3338      	adds	r3, #56	@ 0x38
 80093da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd ff4c 	bl	800727c <ld_word>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d127      	bne.n	8009440 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	3338      	adds	r3, #56	@ 0x38
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fd ff5a 	bl	80072ae <ld_dword>
 80093fa:	4603      	mov	r3, r0
 80093fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009474 <find_volume+0x4fc>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d11e      	bne.n	8009440 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009404:	3338      	adds	r3, #56	@ 0x38
 8009406:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800940a:	4618      	mov	r0, r3
 800940c:	f7fd ff4f 	bl	80072ae <ld_dword>
 8009410:	4603      	mov	r3, r0
 8009412:	4a19      	ldr	r2, [pc, #100]	@ (8009478 <find_volume+0x500>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d113      	bne.n	8009440 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	3338      	adds	r3, #56	@ 0x38
 800941c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd ff44 	bl	80072ae <ld_dword>
 8009426:	4602      	mov	r2, r0
 8009428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	3338      	adds	r3, #56	@ 0x38
 8009430:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd ff3a 	bl	80072ae <ld_dword>
 800943a:	4602      	mov	r2, r0
 800943c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009442:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009446:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009448:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <find_volume+0x504>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <find_volume+0x504>)
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	4b09      	ldr	r3, [pc, #36]	@ (800947c <find_volume+0x504>)
 8009456:	881a      	ldrh	r2, [r3, #0]
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	4a08      	ldr	r2, [pc, #32]	@ (8009480 <find_volume+0x508>)
 8009460:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009462:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009464:	f7fe f954 	bl	8007710 <clear_lock>
#endif
	return FR_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3758      	adds	r7, #88	@ 0x58
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	41615252 	.word	0x41615252
 8009478:	61417272 	.word	0x61417272
 800947c:	20002530 	.word	0x20002530
 8009480:	20002554 	.word	0x20002554

08009484 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800948e:	2309      	movs	r3, #9
 8009490:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01c      	beq.n	80094d2 <validate+0x4e>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d018      	beq.n	80094d2 <validate+0x4e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <validate+0x4e>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	889a      	ldrh	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d10c      	bne.n	80094d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fe3e 	bl	8007140 <disk_status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <validate+0x4e>
			res = FR_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <validate+0x5a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	e000      	b.n	80094e0 <validate+0x5c>
 80094de:	2300      	movs	r3, #0
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	6013      	str	r3, [r2, #0]
	return res;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009502:	f107 0310 	add.w	r3, r7, #16
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fc9c 	bl	8008e44 <get_ldnumber>
 800950c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	da01      	bge.n	8009518 <f_mount+0x28>
 8009514:	230b      	movs	r3, #11
 8009516:	e02b      	b.n	8009570 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009518:	4a17      	ldr	r2, [pc, #92]	@ (8009578 <f_mount+0x88>)
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009520:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009528:	69b8      	ldr	r0, [r7, #24]
 800952a:	f7fe f8f1 	bl	8007710 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2200      	movs	r2, #0
 8009532:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	490d      	ldr	r1, [pc, #52]	@ (8009578 <f_mount+0x88>)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <f_mount+0x66>
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d001      	beq.n	800955a <f_mount+0x6a>
 8009556:	2300      	movs	r3, #0
 8009558:	e00a      	b.n	8009570 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800955a:	f107 010c 	add.w	r1, r7, #12
 800955e:	f107 0308 	add.w	r3, r7, #8
 8009562:	2200      	movs	r2, #0
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fd07 	bl	8008f78 <find_volume>
 800956a:	4603      	mov	r3, r0
 800956c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800956e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3720      	adds	r7, #32
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	2000252c 	.word	0x2000252c

0800957c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b09a      	sub	sp, #104	@ 0x68
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <f_open+0x18>
 8009590:	2309      	movs	r3, #9
 8009592:	e1b7      	b.n	8009904 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800959a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800959c:	79fa      	ldrb	r2, [r7, #7]
 800959e:	f107 0114 	add.w	r1, r7, #20
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fce6 	bl	8008f78 <find_volume>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80095b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 819b 	bne.w	80098f2 <f_open+0x376>
		dj.obj.fs = fs;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	f107 0318 	add.w	r3, r7, #24
 80095c6:	4611      	mov	r1, r2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff fbc5 	bl	8008d58 <follow_path>
 80095ce:	4603      	mov	r3, r0
 80095d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80095d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d118      	bne.n	800960e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80095dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da03      	bge.n	80095ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80095e6:	2306      	movs	r3, #6
 80095e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80095ec:	e00f      	b.n	800960e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	bf8c      	ite	hi
 80095f4:	2301      	movhi	r3, #1
 80095f6:	2300      	movls	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	461a      	mov	r2, r3
 80095fc:	f107 0318 	add.w	r3, r7, #24
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7fd ff3c 	bl	8007480 <chk_lock>
 8009608:	4603      	mov	r3, r0
 800960a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	f003 031c 	and.w	r3, r3, #28
 8009614:	2b00      	cmp	r3, #0
 8009616:	d07f      	beq.n	8009718 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800961c:	2b00      	cmp	r3, #0
 800961e:	d017      	beq.n	8009650 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009620:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009624:	2b04      	cmp	r3, #4
 8009626:	d10e      	bne.n	8009646 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009628:	f7fd ff86 	bl	8007538 <enq_lock>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <f_open+0xc4>
 8009632:	f107 0318 	add.w	r3, r7, #24
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff f8de 	bl	80087f8 <dir_register>
 800963c:	4603      	mov	r3, r0
 800963e:	e000      	b.n	8009642 <f_open+0xc6>
 8009640:	2312      	movs	r3, #18
 8009642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	f043 0308 	orr.w	r3, r3, #8
 800964c:	71fb      	strb	r3, [r7, #7]
 800964e:	e010      	b.n	8009672 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009650:	7fbb      	ldrb	r3, [r7, #30]
 8009652:	f003 0311 	and.w	r3, r3, #17
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <f_open+0xe6>
					res = FR_DENIED;
 800965a:	2307      	movs	r3, #7
 800965c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009660:	e007      	b.n	8009672 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <f_open+0xf6>
 800966c:	2308      	movs	r3, #8
 800966e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009672:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009676:	2b00      	cmp	r3, #0
 8009678:	d168      	bne.n	800974c <f_open+0x1d0>
 800967a:	79fb      	ldrb	r3, [r7, #7]
 800967c:	f003 0308 	and.w	r3, r3, #8
 8009680:	2b00      	cmp	r3, #0
 8009682:	d063      	beq.n	800974c <f_open+0x1d0>
				dw = GET_FATTIME();
 8009684:	f7fd fcfe 	bl	8007084 <get_fattime>
 8009688:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	330e      	adds	r3, #14
 800968e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd fe4a 	bl	800732a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	3316      	adds	r3, #22
 800969a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd fe44 	bl	800732a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	330b      	adds	r3, #11
 80096a6:	2220      	movs	r2, #32
 80096a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe fe1a 	bl	80082ea <ld_clust>
 80096b6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096bc:	2200      	movs	r2, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fe32 	bl	8008328 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	331c      	adds	r3, #28
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fd fe2d 	bl	800732a <st_dword>
					fs->wflag = 1;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2201      	movs	r2, #1
 80096d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80096d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d037      	beq.n	800974c <f_open+0x1d0>
						dw = fs->winsect;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80096e2:	f107 0318 	add.w	r3, r7, #24
 80096e6:	2200      	movs	r2, #0
 80096e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fb22 	bl	8007d34 <remove_chain>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80096f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d126      	bne.n	800974c <f_open+0x1d0>
							res = move_window(fs, dw);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe f86c 	bl	80077e0 <move_window>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009712:	3a01      	subs	r2, #1
 8009714:	615a      	str	r2, [r3, #20]
 8009716:	e019      	b.n	800974c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009718:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800971c:	2b00      	cmp	r3, #0
 800971e:	d115      	bne.n	800974c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009720:	7fbb      	ldrb	r3, [r7, #30]
 8009722:	f003 0310 	and.w	r3, r3, #16
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <f_open+0x1b6>
					res = FR_NO_FILE;
 800972a:	2304      	movs	r3, #4
 800972c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009730:	e00c      	b.n	800974c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <f_open+0x1d0>
 800973c:	7fbb      	ldrb	r3, [r7, #30]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <f_open+0x1d0>
						res = FR_DENIED;
 8009746:	2307      	movs	r3, #7
 8009748:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800974c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009750:	2b00      	cmp	r3, #0
 8009752:	d126      	bne.n	80097a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009764:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800976e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b01      	cmp	r3, #1
 8009778:	bf8c      	ite	hi
 800977a:	2301      	movhi	r3, #1
 800977c:	2300      	movls	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	f107 0318 	add.w	r3, r7, #24
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f7fd fef7 	bl	800757c <inc_lock>
 800978e:	4602      	mov	r2, r0
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <f_open+0x226>
 800979c:	2302      	movs	r3, #2
 800979e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 80a3 	bne.w	80098f2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fd99 	bl	80082ea <ld_clust>
 80097b8:	4602      	mov	r2, r0
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	331c      	adds	r3, #28
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd fd73 	bl	80072ae <ld_dword>
 80097c8:	4602      	mov	r2, r0
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	88da      	ldrh	r2, [r3, #6]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	79fa      	ldrb	r2, [r7, #7]
 80097e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3330      	adds	r3, #48	@ 0x30
 80097fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd fddd 	bl	80073c4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	d06e      	beq.n	80098f2 <f_open+0x376>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d06a      	beq.n	80098f2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	895b      	ldrh	r3, [r3, #10]
 8009828:	461a      	mov	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	899b      	ldrh	r3, [r3, #12]
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009840:	e016      	b.n	8009870 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe f887 	bl	800795a <get_fat>
 800984c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800984e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009850:	2b01      	cmp	r3, #1
 8009852:	d802      	bhi.n	800985a <f_open+0x2de>
 8009854:	2302      	movs	r3, #2
 8009856:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800985a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d102      	bne.n	8009868 <f_open+0x2ec>
 8009862:	2301      	movs	r3, #1
 8009864:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009868:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800986a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009870:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009874:	2b00      	cmp	r3, #0
 8009876:	d103      	bne.n	8009880 <f_open+0x304>
 8009878:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800987a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800987c:	429a      	cmp	r2, r3
 800987e:	d8e0      	bhi.n	8009842 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009886:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800988a:	2b00      	cmp	r3, #0
 800988c:	d131      	bne.n	80098f2 <f_open+0x376>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	899b      	ldrh	r3, [r3, #12]
 8009892:	461a      	mov	r2, r3
 8009894:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009896:	fbb3 f1f2 	udiv	r1, r3, r2
 800989a:	fb01 f202 	mul.w	r2, r1, r2
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d026      	beq.n	80098f2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fe f837 	bl	800791c <clust2sect>
 80098ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80098b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <f_open+0x342>
						res = FR_INT_ERR;
 80098b6:	2302      	movs	r3, #2
 80098b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80098bc:	e019      	b.n	80098f2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	461a      	mov	r2, r3
 80098c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80098ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098cc:	441a      	add	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	7858      	ldrb	r0, [r3, #1]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1a      	ldr	r2, [r3, #32]
 80098e0:	2301      	movs	r3, #1
 80098e2:	f7fd fc6d 	bl	80071c0 <disk_read>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <f_open+0x376>
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80098f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <f_open+0x384>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009900:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009904:	4618      	mov	r0, r3
 8009906:	3768      	adds	r7, #104	@ 0x68
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08e      	sub	sp, #56	@ 0x38
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f107 0214 	add.w	r2, r7, #20
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff fda9 	bl	8009484 <validate>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009938:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800993c:	2b00      	cmp	r3, #0
 800993e:	d107      	bne.n	8009950 <f_read+0x44>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	7d5b      	ldrb	r3, [r3, #21]
 8009944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009948:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <f_read+0x4a>
 8009950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009954:	e135      	b.n	8009bc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	7d1b      	ldrb	r3, [r3, #20]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <f_read+0x5a>
 8009962:	2307      	movs	r3, #7
 8009964:	e12d      	b.n	8009bc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	429a      	cmp	r2, r3
 8009978:	f240 811e 	bls.w	8009bb8 <f_read+0x2ac>
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009980:	e11a      	b.n	8009bb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	8992      	ldrh	r2, [r2, #12]
 800998a:	fbb3 f1f2 	udiv	r1, r3, r2
 800998e:	fb01 f202 	mul.w	r2, r1, r2
 8009992:	1a9b      	subs	r3, r3, r2
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 80d5 	bne.w	8009b44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	8992      	ldrh	r2, [r2, #12]
 80099a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	8952      	ldrh	r2, [r2, #10]
 80099aa:	3a01      	subs	r2, #1
 80099ac:	4013      	ands	r3, r2
 80099ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d12f      	bne.n	8009a16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c4:	e013      	b.n	80099ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d007      	beq.n	80099de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	4619      	mov	r1, r3
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7fe faaa 	bl	8007f2e <clmt_clust>
 80099da:	6338      	str	r0, [r7, #48]	@ 0x30
 80099dc:	e007      	b.n	80099ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f7fd ffb7 	bl	800795a <get_fat>
 80099ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d804      	bhi.n	80099fe <f_read+0xf2>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	755a      	strb	r2, [r3, #21]
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0e1      	b.n	8009bc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d104      	bne.n	8009a10 <f_read+0x104>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	755a      	strb	r2, [r3, #21]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e0d8      	b.n	8009bc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fd ff7c 	bl	800791c <clust2sect>
 8009a24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <f_read+0x12a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	755a      	strb	r2, [r3, #21]
 8009a32:	2302      	movs	r3, #2
 8009a34:	e0c5      	b.n	8009bc2 <f_read+0x2b6>
			sect += csect;
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	899b      	ldrh	r3, [r3, #12]
 8009a42:	461a      	mov	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d041      	beq.n	8009ad6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	4413      	add	r3, r2
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	8952      	ldrh	r2, [r2, #10]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d905      	bls.n	8009a6c <f_read+0x160>
					cc = fs->csize - csect;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	895b      	ldrh	r3, [r3, #10]
 8009a64:	461a      	mov	r2, r3
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	7858      	ldrb	r0, [r3, #1]
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a76:	f7fd fba3 	bl	80071c0 <disk_read>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <f_read+0x17e>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	755a      	strb	r2, [r3, #21]
 8009a86:	2301      	movs	r3, #1
 8009a88:	e09b      	b.n	8009bc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	7d1b      	ldrb	r3, [r3, #20]
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da18      	bge.n	8009ac6 <f_read+0x1ba>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1a      	ldr	r2, [r3, #32]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d911      	bls.n	8009ac6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	8992      	ldrh	r2, [r2, #12]
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ab4:	18d0      	adds	r0, r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f7fd fc5e 	bl	8007382 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	899b      	ldrh	r3, [r3, #12]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	fb02 f303 	mul.w	r3, r2, r3
 8009ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009ad4:	e05c      	b.n	8009b90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d02e      	beq.n	8009b3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7d1b      	ldrb	r3, [r3, #20]
 8009ae4:	b25b      	sxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da18      	bge.n	8009b1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	7858      	ldrb	r0, [r3, #1]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	2301      	movs	r3, #1
 8009afa:	f7fd fb81 	bl	8007200 <disk_write>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <f_read+0x202>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	755a      	strb	r2, [r3, #21]
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e059      	b.n	8009bc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	7d1b      	ldrb	r3, [r3, #20]
 8009b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	7858      	ldrb	r0, [r3, #1]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b26:	2301      	movs	r3, #1
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	f7fd fb49 	bl	80071c0 <disk_read>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <f_read+0x232>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	755a      	strb	r2, [r3, #21]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e041      	b.n	8009bc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	899b      	ldrh	r3, [r3, #12]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	8992      	ldrh	r2, [r2, #12]
 8009b52:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b56:	fb01 f202 	mul.w	r2, r1, r2
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	1ac3      	subs	r3, r0, r3
 8009b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d901      	bls.n	8009b6c <f_read+0x260>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	8992      	ldrh	r2, [r2, #12]
 8009b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b7e:	fb00 f202 	mul.w	r2, r0, r2
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	440b      	add	r3, r1
 8009b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b8c:	f7fd fbf9 	bl	8007382 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b94:	4413      	add	r3, r2
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	699a      	ldr	r2, [r3, #24]
 8009b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9e:	441a      	add	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	619a      	str	r2, [r3, #24]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009baa:	441a      	add	r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f47f aee1 	bne.w	8009982 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3738      	adds	r7, #56	@ 0x38
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b08c      	sub	sp, #48	@ 0x30
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f107 0210 	add.w	r2, r7, #16
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff fc4a 	bl	8009484 <validate>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d107      	bne.n	8009c0e <f_write+0x44>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	7d5b      	ldrb	r3, [r3, #21]
 8009c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <f_write+0x4a>
 8009c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c12:	e16a      	b.n	8009eea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	7d1b      	ldrb	r3, [r3, #20]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <f_write+0x5a>
 8009c20:	2307      	movs	r3, #7
 8009c22:	e162      	b.n	8009eea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	441a      	add	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	f080 814c 	bcs.w	8009ece <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	43db      	mvns	r3, r3
 8009c3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009c3e:	e146      	b.n	8009ece <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	8992      	ldrh	r2, [r2, #12]
 8009c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c4c:	fb01 f202 	mul.w	r2, r1, r2
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 80f1 	bne.w	8009e3a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	8992      	ldrh	r2, [r2, #12]
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	8952      	ldrh	r2, [r2, #10]
 8009c68:	3a01      	subs	r2, #1
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d143      	bne.n	8009cfc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d11a      	bne.n	8009cbe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe f8b6 	bl	8007dfe <create_chain>
 8009c92:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009c94:	e013      	b.n	8009cbe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7fe f942 	bl	8007f2e <clmt_clust>
 8009caa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009cac:	e007      	b.n	8009cbe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fe f8a1 	bl	8007dfe <create_chain>
 8009cbc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8109 	beq.w	8009ed8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d104      	bne.n	8009cd6 <f_write+0x10c>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	755a      	strb	r2, [r3, #21]
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e109      	b.n	8009eea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d104      	bne.n	8009ce8 <f_write+0x11e>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	755a      	strb	r2, [r3, #21]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e100      	b.n	8009eea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d102      	bne.n	8009cfc <f_write+0x132>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	7d1b      	ldrb	r3, [r3, #20]
 8009d00:	b25b      	sxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da18      	bge.n	8009d38 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	7858      	ldrb	r0, [r3, #1]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a1a      	ldr	r2, [r3, #32]
 8009d14:	2301      	movs	r3, #1
 8009d16:	f7fd fa73 	bl	8007200 <disk_write>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <f_write+0x160>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	755a      	strb	r2, [r3, #21]
 8009d26:	2301      	movs	r3, #1
 8009d28:	e0df      	b.n	8009eea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	7d1b      	ldrb	r3, [r3, #20]
 8009d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7fd fdeb 	bl	800791c <clust2sect>
 8009d46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d104      	bne.n	8009d58 <f_write+0x18e>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2202      	movs	r2, #2
 8009d52:	755a      	strb	r2, [r3, #21]
 8009d54:	2302      	movs	r3, #2
 8009d56:	e0c8      	b.n	8009eea <f_write+0x320>
			sect += csect;
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	899b      	ldrh	r3, [r3, #12]
 8009d64:	461a      	mov	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d043      	beq.n	8009dfc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	4413      	add	r3, r2
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	8952      	ldrh	r2, [r2, #10]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d905      	bls.n	8009d8e <f_write+0x1c4>
					cc = fs->csize - csect;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	895b      	ldrh	r3, [r3, #10]
 8009d86:	461a      	mov	r2, r3
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	7858      	ldrb	r0, [r3, #1]
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	69f9      	ldr	r1, [r7, #28]
 8009d98:	f7fd fa32 	bl	8007200 <disk_write>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <f_write+0x1e2>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	755a      	strb	r2, [r3, #21]
 8009da8:	2301      	movs	r3, #1
 8009daa:	e09e      	b.n	8009eea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a1a      	ldr	r2, [r3, #32]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	6a3a      	ldr	r2, [r7, #32]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d918      	bls.n	8009dec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	8992      	ldrh	r2, [r2, #12]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	69fa      	ldr	r2, [r7, #28]
 8009dd2:	18d1      	adds	r1, r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	899b      	ldrh	r3, [r3, #12]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f7fd fad2 	bl	8007382 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	7d1b      	ldrb	r3, [r3, #20]
 8009de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	fb02 f303 	mul.w	r3, r2, r3
 8009df8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009dfa:	e04b      	b.n	8009e94 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d016      	beq.n	8009e34 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d210      	bcs.n	8009e34 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	7858      	ldrb	r0, [r3, #1]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	f7fd f9ce 	bl	80071c0 <disk_read>
 8009e24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	755a      	strb	r2, [r3, #21]
 8009e30:	2301      	movs	r3, #1
 8009e32:	e05a      	b.n	8009eea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	8992      	ldrh	r2, [r2, #12]
 8009e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e4c:	fb01 f202 	mul.w	r2, r1, r2
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	1ac3      	subs	r3, r0, r3
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d901      	bls.n	8009e62 <f_write+0x298>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	8992      	ldrh	r2, [r2, #12]
 8009e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e74:	fb00 f202 	mul.w	r2, r0, r2
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e7e:	69f9      	ldr	r1, [r7, #28]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fd fa7e 	bl	8007382 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7d1b      	ldrb	r3, [r3, #20]
 8009e8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	4413      	add	r3, r2
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699a      	ldr	r2, [r3, #24]
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	619a      	str	r2, [r3, #24]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bf38      	it	cc
 8009eb4:	461a      	movcc	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	441a      	add	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f47f aeb5 	bne.w	8009c40 <f_write+0x76>
 8009ed6:	e000      	b.n	8009eda <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ed8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
 8009ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3730      	adds	r7, #48	@ 0x30
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f107 0208 	add.w	r2, r7, #8
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff fabe 	bl	8009484 <validate>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d168      	bne.n	8009fe4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7d1b      	ldrb	r3, [r3, #20]
 8009f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d062      	beq.n	8009fe4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7d1b      	ldrb	r3, [r3, #20]
 8009f22:	b25b      	sxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	da15      	bge.n	8009f54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	7858      	ldrb	r0, [r3, #1]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1a      	ldr	r2, [r3, #32]
 8009f36:	2301      	movs	r3, #1
 8009f38:	f7fd f962 	bl	8007200 <disk_write>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <f_sync+0x54>
 8009f42:	2301      	movs	r3, #1
 8009f44:	e04f      	b.n	8009fe6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009f54:	f7fd f896 	bl	8007084 <get_fattime>
 8009f58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fd fc3c 	bl	80077e0 <move_window>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d138      	bne.n	8009fe4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	330b      	adds	r3, #11
 8009f7c:	781a      	ldrb	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	330b      	adds	r3, #11
 8009f82:	f042 0220 	orr.w	r2, r2, #32
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	461a      	mov	r2, r3
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	f7fe f9c7 	bl	8008328 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f103 021c 	add.w	r2, r3, #28
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fd f9bf 	bl	800732a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3316      	adds	r3, #22
 8009fb0:	6939      	ldr	r1, [r7, #16]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd f9b9 	bl	800732a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3312      	adds	r3, #18
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd f998 	bl	80072f4 <st_word>
					fs->wflag = 1;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fd fc35 	bl	800783c <sync_fs>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7d1b      	ldrb	r3, [r3, #20]
 8009fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ff7b 	bl	8009ef2 <f_sync>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d118      	bne.n	800a038 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f107 0208 	add.w	r2, r7, #8
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fa38 	bl	8009484 <validate>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10c      	bne.n	800a038 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	4618      	mov	r0, r3
 800a024:	f7fd fb38 	bl	8007698 <dec_lock>
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b090      	sub	sp, #64	@ 0x40
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f107 0208 	add.w	r2, r7, #8
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff fa15 	bl	8009484 <validate>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a060:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <f_lseek+0x2e>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7d5b      	ldrb	r3, [r3, #21]
 800a06c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <f_lseek+0x3c>
 800a078:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a07c:	e201      	b.n	800a482 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80d9 	beq.w	800a23a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d15a      	bne.n	800a146 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a094:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d03a      	beq.n	800a126 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	60fb      	str	r3, [r7, #12]
 800a0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd fc44 	bl	800795a <get_fat>
 800a0d2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d804      	bhi.n	800a0e4 <f_lseek+0xa2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	755a      	strb	r2, [r3, #21]
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e1ce      	b.n	800a482 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ea:	d104      	bne.n	800a0f6 <f_lseek+0xb4>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	755a      	strb	r2, [r3, #21]
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e1c5      	b.n	800a482 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d0de      	beq.n	800a0be <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	429a      	cmp	r2, r3
 800a106:	d809      	bhi.n	800a11c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	627a      	str	r2, [r7, #36]	@ 0x24
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a122:	429a      	cmp	r2, r3
 800a124:	d3c4      	bcc.n	800a0b0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a12c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	429a      	cmp	r2, r3
 800a134:	d803      	bhi.n	800a13e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	e19f      	b.n	800a47e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a13e:	2311      	movs	r3, #17
 800a140:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a144:	e19b      	b.n	800a47e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d902      	bls.n	800a156 <f_lseek+0x114>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 818d 	beq.w	800a47e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	3b01      	subs	r3, #1
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fd fedf 	bl	8007f2e <clmt_clust>
 800a170:	4602      	mov	r2, r0
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f7fd fbcc 	bl	800791c <clust2sect>
 800a184:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <f_lseek+0x154>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	755a      	strb	r2, [r3, #21]
 800a192:	2302      	movs	r3, #2
 800a194:	e175      	b.n	800a482 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	3b01      	subs	r3, #1
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	8992      	ldrh	r2, [r2, #12]
 800a19e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	8952      	ldrh	r2, [r2, #10]
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	8992      	ldrh	r2, [r2, #12]
 800a1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1bc:	fb01 f202 	mul.w	r2, r1, r2
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 815b 	beq.w	800a47e <f_lseek+0x43c>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	f000 8155 	beq.w	800a47e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7d1b      	ldrb	r3, [r3, #20]
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da18      	bge.n	800a210 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	7858      	ldrb	r0, [r3, #1]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a1a      	ldr	r2, [r3, #32]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f7fd f807 	bl	8007200 <disk_write>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <f_lseek+0x1c0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	755a      	strb	r2, [r3, #21]
 800a1fe:	2301      	movs	r3, #1
 800a200:	e13f      	b.n	800a482 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7d1b      	ldrb	r3, [r3, #20]
 800a206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	7858      	ldrb	r0, [r3, #1]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a21a:	2301      	movs	r3, #1
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	f7fc ffcf 	bl	80071c0 <disk_read>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <f_lseek+0x1f0>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	755a      	strb	r2, [r3, #21]
 800a22e:	2301      	movs	r3, #1
 800a230:	e127      	b.n	800a482 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	621a      	str	r2, [r3, #32]
 800a238:	e121      	b.n	800a47e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d908      	bls.n	800a256 <f_lseek+0x214>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	7d1b      	ldrb	r3, [r3, #20]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a264:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 80b5 	beq.w	800a3d8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	895b      	ldrh	r3, [r3, #10]
 800a272:	461a      	mov	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	899b      	ldrh	r3, [r3, #12]
 800a278:	fb02 f303 	mul.w	r3, r2, r3
 800a27c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01b      	beq.n	800a2bc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	1e5a      	subs	r2, r3, #1
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	1e59      	subs	r1, r3, #1
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a298:	429a      	cmp	r2, r3
 800a29a:	d30f      	bcc.n	800a2bc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	1e5a      	subs	r2, r3, #1
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	425b      	negs	r3, r3
 800a2a4:	401a      	ands	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2ba:	e022      	b.n	800a302 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d119      	bne.n	800a2fc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fd fd96 	bl	8007dfe <create_chain>
 800a2d2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d104      	bne.n	800a2e4 <f_lseek+0x2a2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	755a      	strb	r2, [r3, #21]
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e0ce      	b.n	800a482 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d104      	bne.n	800a2f6 <f_lseek+0x2b4>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	755a      	strb	r2, [r3, #21]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e0c5      	b.n	800a482 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2fa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a300:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a304:	2b00      	cmp	r3, #0
 800a306:	d067      	beq.n	800a3d8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a308:	e03a      	b.n	800a380 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	603b      	str	r3, [r7, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	441a      	add	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	7d1b      	ldrb	r3, [r3, #20]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00b      	beq.n	800a342 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd fd65 	bl	8007dfe <create_chain>
 800a334:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d108      	bne.n	800a34e <f_lseek+0x30c>
							ofs = 0; break;
 800a33c:	2300      	movs	r3, #0
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	e022      	b.n	800a388 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fb07 	bl	800795a <get_fat>
 800a34c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d104      	bne.n	800a360 <f_lseek+0x31e>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	755a      	strb	r2, [r3, #21]
 800a35c:	2301      	movs	r3, #1
 800a35e:	e090      	b.n	800a482 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	2b01      	cmp	r3, #1
 800a364:	d904      	bls.n	800a370 <f_lseek+0x32e>
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d304      	bcc.n	800a37a <f_lseek+0x338>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	755a      	strb	r2, [r3, #21]
 800a376:	2302      	movs	r3, #2
 800a378:	e083      	b.n	800a482 <f_lseek+0x440>
					fp->clust = clst;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a37e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	429a      	cmp	r2, r3
 800a386:	d8c0      	bhi.n	800a30a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	699a      	ldr	r2, [r3, #24]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	441a      	add	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	899b      	ldrh	r3, [r3, #12]
 800a398:	461a      	mov	r2, r3
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3a0:	fb01 f202 	mul.w	r2, r1, r2
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d016      	beq.n	800a3d8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fd fab4 	bl	800791c <clust2sect>
 800a3b4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <f_lseek+0x384>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	755a      	strb	r2, [r3, #21]
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e05d      	b.n	800a482 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d4:	4413      	add	r3, r2
 800a3d6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699a      	ldr	r2, [r3, #24]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d90a      	bls.n	800a3fa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	699a      	ldr	r2, [r3, #24]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7d1b      	ldrb	r3, [r3, #20]
 800a3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	8992      	ldrh	r2, [r2, #12]
 800a402:	fbb3 f1f2 	udiv	r1, r3, r2
 800a406:	fb01 f202 	mul.w	r2, r1, r2
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d036      	beq.n	800a47e <f_lseek+0x43c>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a416:	429a      	cmp	r2, r3
 800a418:	d031      	beq.n	800a47e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	7d1b      	ldrb	r3, [r3, #20]
 800a41e:	b25b      	sxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	da18      	bge.n	800a456 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	7858      	ldrb	r0, [r3, #1]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	2301      	movs	r3, #1
 800a434:	f7fc fee4 	bl	8007200 <disk_write>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <f_lseek+0x406>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	755a      	strb	r2, [r3, #21]
 800a444:	2301      	movs	r3, #1
 800a446:	e01c      	b.n	800a482 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7d1b      	ldrb	r3, [r3, #20]
 800a44c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a450:	b2da      	uxtb	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	7858      	ldrb	r0, [r3, #1]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a460:	2301      	movs	r3, #1
 800a462:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a464:	f7fc feac 	bl	80071c0 <disk_read>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <f_lseek+0x436>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	755a      	strb	r2, [r3, #21]
 800a474:	2301      	movs	r3, #1
 800a476:	e004      	b.n	800a482 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a47c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a47e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a482:	4618      	mov	r0, r3
 800a484:	3740      	adds	r7, #64	@ 0x40
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b092      	sub	sp, #72	@ 0x48
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a496:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a49a:	f107 030c 	add.w	r3, r7, #12
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fd69 	bl	8008f78 <find_volume>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a4ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f040 8099 	bne.w	800a5e8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a4b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4be:	699a      	ldr	r2, [r3, #24]
 800a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	3b02      	subs	r3, #2
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d804      	bhi.n	800a4d4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	e089      	b.n	800a5e8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d128      	bne.n	800a532 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fd fa33 	bl	800795a <get_fat>
 800a4f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d103      	bne.n	800a506 <f_getfree+0x7c>
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a504:	e063      	b.n	800a5ce <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d103      	bne.n	800a514 <f_getfree+0x8a>
 800a50c:	2302      	movs	r3, #2
 800a50e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a512:	e05c      	b.n	800a5ce <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <f_getfree+0x96>
 800a51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a51c:	3301      	adds	r3, #1
 800a51e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a522:	3301      	adds	r3, #1
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d3db      	bcc.n	800a4e8 <f_getfree+0x5e>
 800a530:	e04d      	b.n	800a5ce <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
 800a542:	2300      	movs	r3, #0
 800a544:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d113      	bne.n	800a574 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a554:	4619      	mov	r1, r3
 800a556:	f7fd f943 	bl	80077e0 <move_window>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a560:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a564:	2b00      	cmp	r3, #0
 800a566:	d131      	bne.n	800a5cc <f_getfree+0x142>
							p = fs->win;
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	3338      	adds	r3, #56	@ 0x38
 800a56c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	899b      	ldrh	r3, [r3, #12]
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d10f      	bne.n	800a59c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a57c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a57e:	f7fc fe7d 	bl	800727c <ld_word>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <f_getfree+0x104>
 800a588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a58a:	3301      	adds	r3, #1
 800a58c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	3302      	adds	r3, #2
 800a592:	633b      	str	r3, [r7, #48]	@ 0x30
 800a594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a596:	3b02      	subs	r3, #2
 800a598:	637b      	str	r3, [r7, #52]	@ 0x34
 800a59a:	e010      	b.n	800a5be <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a59c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a59e:	f7fc fe86 	bl	80072ae <ld_dword>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <f_getfree+0x128>
 800a5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1bd      	bne.n	800a546 <f_getfree+0xbc>
 800a5ca:	e000      	b.n	800a5ce <f_getfree+0x144>
							if (res != FR_OK) break;
 800a5cc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5d2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5d8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5dc:	791a      	ldrb	r2, [r3, #4]
 800a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e0:	f042 0201 	orr.w	r2, r2, #1
 800a5e4:	b2d2      	uxtb	r2, r2
 800a5e6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3748      	adds	r7, #72	@ 0x48
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a60a:	4b1f      	ldr	r3, [pc, #124]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a60c:	7a5b      	ldrb	r3, [r3, #9]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d131      	bne.n	800a678 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a614:	4b1c      	ldr	r3, [pc, #112]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a616:	7a5b      	ldrb	r3, [r3, #9]
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	461a      	mov	r2, r3
 800a61c:	4b1a      	ldr	r3, [pc, #104]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a61e:	2100      	movs	r1, #0
 800a620:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a622:	4b19      	ldr	r3, [pc, #100]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a624:	7a5b      	ldrb	r3, [r3, #9]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4a17      	ldr	r2, [pc, #92]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a632:	4b15      	ldr	r3, [pc, #84]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a634:	7a5b      	ldrb	r3, [r3, #9]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	4b13      	ldr	r3, [pc, #76]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a63c:	4413      	add	r3, r2
 800a63e:	79fa      	ldrb	r2, [r7, #7]
 800a640:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a642:	4b11      	ldr	r3, [pc, #68]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a644:	7a5b      	ldrb	r3, [r3, #9]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	b2d1      	uxtb	r1, r2
 800a64c:	4a0e      	ldr	r2, [pc, #56]	@ (800a688 <FATFS_LinkDriverEx+0x94>)
 800a64e:	7251      	strb	r1, [r2, #9]
 800a650:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a652:	7dbb      	ldrb	r3, [r7, #22]
 800a654:	3330      	adds	r3, #48	@ 0x30
 800a656:	b2da      	uxtb	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	3301      	adds	r3, #1
 800a660:	223a      	movs	r2, #58	@ 0x3a
 800a662:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	3302      	adds	r3, #2
 800a668:	222f      	movs	r2, #47	@ 0x2f
 800a66a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	3303      	adds	r3, #3
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a678:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20002754 	.word	0x20002754

0800a68c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a696:	2200      	movs	r2, #0
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff ffaa 	bl	800a5f4 <FATFS_LinkDriverEx>
 800a6a0:	4603      	mov	r3, r0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6bc:	d802      	bhi.n	800a6c4 <ff_convert+0x18>
		c = chr;
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	81fb      	strh	r3, [r7, #14]
 800a6c2:	e025      	b.n	800a710 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00b      	beq.n	800a6e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	2bff      	cmp	r3, #255	@ 0xff
 800a6ce:	d805      	bhi.n	800a6dc <ff_convert+0x30>
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	3b80      	subs	r3, #128	@ 0x80
 800a6d4:	4a12      	ldr	r2, [pc, #72]	@ (800a720 <ff_convert+0x74>)
 800a6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6da:	e000      	b.n	800a6de <ff_convert+0x32>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	81fb      	strh	r3, [r7, #14]
 800a6e0:	e016      	b.n	800a710 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	81fb      	strh	r3, [r7, #14]
 800a6e6:	e009      	b.n	800a6fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a6e8:	89fb      	ldrh	r3, [r7, #14]
 800a6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800a720 <ff_convert+0x74>)
 800a6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6f0:	88fa      	ldrh	r2, [r7, #6]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d006      	beq.n	800a704 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a6f6:	89fb      	ldrh	r3, [r7, #14]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	81fb      	strh	r3, [r7, #14]
 800a6fc:	89fb      	ldrh	r3, [r7, #14]
 800a6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a700:	d9f2      	bls.n	800a6e8 <ff_convert+0x3c>
 800a702:	e000      	b.n	800a706 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a704:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	3380      	adds	r3, #128	@ 0x80
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a710:	89fb      	ldrh	r3, [r7, #14]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	0800dc30 	.word	0x0800dc30

0800a724 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a734:	d201      	bcs.n	800a73a <ff_wtoupper+0x16>
 800a736:	4b3e      	ldr	r3, [pc, #248]	@ (800a830 <ff_wtoupper+0x10c>)
 800a738:	e000      	b.n	800a73c <ff_wtoupper+0x18>
 800a73a:	4b3e      	ldr	r3, [pc, #248]	@ (800a834 <ff_wtoupper+0x110>)
 800a73c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	1c9a      	adds	r2, r3, #2
 800a742:	617a      	str	r2, [r7, #20]
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a748:	8a7b      	ldrh	r3, [r7, #18]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d068      	beq.n	800a820 <ff_wtoupper+0xfc>
 800a74e:	88fa      	ldrh	r2, [r7, #6]
 800a750:	8a7b      	ldrh	r3, [r7, #18]
 800a752:	429a      	cmp	r2, r3
 800a754:	d364      	bcc.n	800a820 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	1c9a      	adds	r2, r3, #2
 800a75a:	617a      	str	r2, [r7, #20]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	823b      	strh	r3, [r7, #16]
 800a760:	8a3b      	ldrh	r3, [r7, #16]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	81fb      	strh	r3, [r7, #14]
 800a766:	8a3b      	ldrh	r3, [r7, #16]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a76c:	88fa      	ldrh	r2, [r7, #6]
 800a76e:	8a79      	ldrh	r1, [r7, #18]
 800a770:	8a3b      	ldrh	r3, [r7, #16]
 800a772:	440b      	add	r3, r1
 800a774:	429a      	cmp	r2, r3
 800a776:	da49      	bge.n	800a80c <ff_wtoupper+0xe8>
			switch (cmd) {
 800a778:	89fb      	ldrh	r3, [r7, #14]
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	d84f      	bhi.n	800a81e <ff_wtoupper+0xfa>
 800a77e:	a201      	add	r2, pc, #4	@ (adr r2, 800a784 <ff_wtoupper+0x60>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7bb 	.word	0x0800a7bb
 800a78c:	0800a7d1 	.word	0x0800a7d1
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a7e1 	.word	0x0800a7e1
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a7f9 	.word	0x0800a7f9
 800a7a4:	0800a801 	.word	0x0800a801
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a7a8:	88fa      	ldrh	r2, [r7, #6]
 800a7aa:	8a7b      	ldrh	r3, [r7, #18]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	80fb      	strh	r3, [r7, #6]
 800a7b8:	e027      	b.n	800a80a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a7ba:	88fa      	ldrh	r2, [r7, #6]
 800a7bc:	8a7b      	ldrh	r3, [r7, #18]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	88fa      	ldrh	r2, [r7, #6]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	80fb      	strh	r3, [r7, #6]
 800a7ce:	e01c      	b.n	800a80a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a7d0:	88fb      	ldrh	r3, [r7, #6]
 800a7d2:	3b10      	subs	r3, #16
 800a7d4:	80fb      	strh	r3, [r7, #6]
 800a7d6:	e018      	b.n	800a80a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	3b20      	subs	r3, #32
 800a7dc:	80fb      	strh	r3, [r7, #6]
 800a7de:	e014      	b.n	800a80a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a7e0:	88fb      	ldrh	r3, [r7, #6]
 800a7e2:	3b30      	subs	r3, #48	@ 0x30
 800a7e4:	80fb      	strh	r3, [r7, #6]
 800a7e6:	e010      	b.n	800a80a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	3b1a      	subs	r3, #26
 800a7ec:	80fb      	strh	r3, [r7, #6]
 800a7ee:	e00c      	b.n	800a80a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a7f0:	88fb      	ldrh	r3, [r7, #6]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	80fb      	strh	r3, [r7, #6]
 800a7f6:	e008      	b.n	800a80a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a7f8:	88fb      	ldrh	r3, [r7, #6]
 800a7fa:	3b50      	subs	r3, #80	@ 0x50
 800a7fc:	80fb      	strh	r3, [r7, #6]
 800a7fe:	e004      	b.n	800a80a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a806:	80fb      	strh	r3, [r7, #6]
 800a808:	bf00      	nop
			}
			break;
 800a80a:	e008      	b.n	800a81e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a80c:	89fb      	ldrh	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d195      	bne.n	800a73e <ff_wtoupper+0x1a>
 800a812:	8a3b      	ldrh	r3, [r7, #16]
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	4413      	add	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a81c:	e78f      	b.n	800a73e <ff_wtoupper+0x1a>
			break;
 800a81e:	bf00      	nop
	}

	return chr;
 800a820:	88fb      	ldrh	r3, [r7, #6]
}
 800a822:	4618      	mov	r0, r3
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	0800dd30 	.word	0x0800dd30
 800a834:	0800df24 	.word	0x0800df24

0800a838 <__cvt>:
 800a838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	ec57 6b10 	vmov	r6, r7, d0
 800a840:	2f00      	cmp	r7, #0
 800a842:	460c      	mov	r4, r1
 800a844:	4619      	mov	r1, r3
 800a846:	463b      	mov	r3, r7
 800a848:	bfbb      	ittet	lt
 800a84a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a84e:	461f      	movlt	r7, r3
 800a850:	2300      	movge	r3, #0
 800a852:	232d      	movlt	r3, #45	@ 0x2d
 800a854:	700b      	strb	r3, [r1, #0]
 800a856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a858:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a85c:	4691      	mov	r9, r2
 800a85e:	f023 0820 	bic.w	r8, r3, #32
 800a862:	bfbc      	itt	lt
 800a864:	4632      	movlt	r2, r6
 800a866:	4616      	movlt	r6, r2
 800a868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a86c:	d005      	beq.n	800a87a <__cvt+0x42>
 800a86e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a872:	d100      	bne.n	800a876 <__cvt+0x3e>
 800a874:	3401      	adds	r4, #1
 800a876:	2102      	movs	r1, #2
 800a878:	e000      	b.n	800a87c <__cvt+0x44>
 800a87a:	2103      	movs	r1, #3
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	ab02      	add	r3, sp, #8
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	ec47 6b10 	vmov	d0, r6, r7
 800a888:	4653      	mov	r3, sl
 800a88a:	4622      	mov	r2, r4
 800a88c:	f000 ff70 	bl	800b770 <_dtoa_r>
 800a890:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a894:	4605      	mov	r5, r0
 800a896:	d119      	bne.n	800a8cc <__cvt+0x94>
 800a898:	f019 0f01 	tst.w	r9, #1
 800a89c:	d00e      	beq.n	800a8bc <__cvt+0x84>
 800a89e:	eb00 0904 	add.w	r9, r0, r4
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	4639      	mov	r1, r7
 800a8aa:	f7f6 f945 	bl	8000b38 <__aeabi_dcmpeq>
 800a8ae:	b108      	cbz	r0, 800a8b4 <__cvt+0x7c>
 800a8b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8b4:	2230      	movs	r2, #48	@ 0x30
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	454b      	cmp	r3, r9
 800a8ba:	d31e      	bcc.n	800a8fa <__cvt+0xc2>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c0:	1b5b      	subs	r3, r3, r5
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	b004      	add	sp, #16
 800a8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8d0:	eb00 0904 	add.w	r9, r0, r4
 800a8d4:	d1e5      	bne.n	800a8a2 <__cvt+0x6a>
 800a8d6:	7803      	ldrb	r3, [r0, #0]
 800a8d8:	2b30      	cmp	r3, #48	@ 0x30
 800a8da:	d10a      	bne.n	800a8f2 <__cvt+0xba>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f928 	bl	8000b38 <__aeabi_dcmpeq>
 800a8e8:	b918      	cbnz	r0, 800a8f2 <__cvt+0xba>
 800a8ea:	f1c4 0401 	rsb	r4, r4, #1
 800a8ee:	f8ca 4000 	str.w	r4, [sl]
 800a8f2:	f8da 3000 	ldr.w	r3, [sl]
 800a8f6:	4499      	add	r9, r3
 800a8f8:	e7d3      	b.n	800a8a2 <__cvt+0x6a>
 800a8fa:	1c59      	adds	r1, r3, #1
 800a8fc:	9103      	str	r1, [sp, #12]
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e7d9      	b.n	800a8b6 <__cvt+0x7e>

0800a902 <__exponent>:
 800a902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a904:	2900      	cmp	r1, #0
 800a906:	bfba      	itte	lt
 800a908:	4249      	neglt	r1, r1
 800a90a:	232d      	movlt	r3, #45	@ 0x2d
 800a90c:	232b      	movge	r3, #43	@ 0x2b
 800a90e:	2909      	cmp	r1, #9
 800a910:	7002      	strb	r2, [r0, #0]
 800a912:	7043      	strb	r3, [r0, #1]
 800a914:	dd29      	ble.n	800a96a <__exponent+0x68>
 800a916:	f10d 0307 	add.w	r3, sp, #7
 800a91a:	461d      	mov	r5, r3
 800a91c:	270a      	movs	r7, #10
 800a91e:	461a      	mov	r2, r3
 800a920:	fbb1 f6f7 	udiv	r6, r1, r7
 800a924:	fb07 1416 	mls	r4, r7, r6, r1
 800a928:	3430      	adds	r4, #48	@ 0x30
 800a92a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a92e:	460c      	mov	r4, r1
 800a930:	2c63      	cmp	r4, #99	@ 0x63
 800a932:	f103 33ff 	add.w	r3, r3, #4294967295
 800a936:	4631      	mov	r1, r6
 800a938:	dcf1      	bgt.n	800a91e <__exponent+0x1c>
 800a93a:	3130      	adds	r1, #48	@ 0x30
 800a93c:	1e94      	subs	r4, r2, #2
 800a93e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a942:	1c41      	adds	r1, r0, #1
 800a944:	4623      	mov	r3, r4
 800a946:	42ab      	cmp	r3, r5
 800a948:	d30a      	bcc.n	800a960 <__exponent+0x5e>
 800a94a:	f10d 0309 	add.w	r3, sp, #9
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	42ac      	cmp	r4, r5
 800a952:	bf88      	it	hi
 800a954:	2300      	movhi	r3, #0
 800a956:	3302      	adds	r3, #2
 800a958:	4403      	add	r3, r0
 800a95a:	1a18      	subs	r0, r3, r0
 800a95c:	b003      	add	sp, #12
 800a95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a960:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a964:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a968:	e7ed      	b.n	800a946 <__exponent+0x44>
 800a96a:	2330      	movs	r3, #48	@ 0x30
 800a96c:	3130      	adds	r1, #48	@ 0x30
 800a96e:	7083      	strb	r3, [r0, #2]
 800a970:	70c1      	strb	r1, [r0, #3]
 800a972:	1d03      	adds	r3, r0, #4
 800a974:	e7f1      	b.n	800a95a <__exponent+0x58>
	...

0800a978 <_printf_float>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	b08d      	sub	sp, #52	@ 0x34
 800a97e:	460c      	mov	r4, r1
 800a980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a984:	4616      	mov	r6, r2
 800a986:	461f      	mov	r7, r3
 800a988:	4605      	mov	r5, r0
 800a98a:	f000 fdf1 	bl	800b570 <_localeconv_r>
 800a98e:	6803      	ldr	r3, [r0, #0]
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	4618      	mov	r0, r3
 800a994:	f7f5 fca4 	bl	80002e0 <strlen>
 800a998:	2300      	movs	r3, #0
 800a99a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	9005      	str	r0, [sp, #20]
 800a9a2:	3307      	adds	r3, #7
 800a9a4:	f023 0307 	bic.w	r3, r3, #7
 800a9a8:	f103 0208 	add.w	r2, r3, #8
 800a9ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9b0:	f8d4 b000 	ldr.w	fp, [r4]
 800a9b4:	f8c8 2000 	str.w	r2, [r8]
 800a9b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9c0:	9307      	str	r3, [sp, #28]
 800a9c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9ce:	4b9c      	ldr	r3, [pc, #624]	@ (800ac40 <_printf_float+0x2c8>)
 800a9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d4:	f7f6 f8e2 	bl	8000b9c <__aeabi_dcmpun>
 800a9d8:	bb70      	cbnz	r0, 800aa38 <_printf_float+0xc0>
 800a9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9de:	4b98      	ldr	r3, [pc, #608]	@ (800ac40 <_printf_float+0x2c8>)
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	f7f6 f8bc 	bl	8000b60 <__aeabi_dcmple>
 800a9e8:	bb30      	cbnz	r0, 800aa38 <_printf_float+0xc0>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	f7f6 f8ab 	bl	8000b4c <__aeabi_dcmplt>
 800a9f6:	b110      	cbz	r0, 800a9fe <_printf_float+0x86>
 800a9f8:	232d      	movs	r3, #45	@ 0x2d
 800a9fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9fe:	4a91      	ldr	r2, [pc, #580]	@ (800ac44 <_printf_float+0x2cc>)
 800aa00:	4b91      	ldr	r3, [pc, #580]	@ (800ac48 <_printf_float+0x2d0>)
 800aa02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa06:	bf8c      	ite	hi
 800aa08:	4690      	movhi	r8, r2
 800aa0a:	4698      	movls	r8, r3
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	6123      	str	r3, [r4, #16]
 800aa10:	f02b 0304 	bic.w	r3, fp, #4
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	f04f 0900 	mov.w	r9, #0
 800aa1a:	9700      	str	r7, [sp, #0]
 800aa1c:	4633      	mov	r3, r6
 800aa1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa20:	4621      	mov	r1, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 f9d2 	bl	800adcc <_printf_common>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f040 808d 	bne.w	800ab48 <_printf_float+0x1d0>
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	b00d      	add	sp, #52	@ 0x34
 800aa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa38:	4642      	mov	r2, r8
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	4649      	mov	r1, r9
 800aa40:	f7f6 f8ac 	bl	8000b9c <__aeabi_dcmpun>
 800aa44:	b140      	cbz	r0, 800aa58 <_printf_float+0xe0>
 800aa46:	464b      	mov	r3, r9
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bfbc      	itt	lt
 800aa4c:	232d      	movlt	r3, #45	@ 0x2d
 800aa4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa52:	4a7e      	ldr	r2, [pc, #504]	@ (800ac4c <_printf_float+0x2d4>)
 800aa54:	4b7e      	ldr	r3, [pc, #504]	@ (800ac50 <_printf_float+0x2d8>)
 800aa56:	e7d4      	b.n	800aa02 <_printf_float+0x8a>
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa5e:	9206      	str	r2, [sp, #24]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	d13b      	bne.n	800aadc <_printf_float+0x164>
 800aa64:	2306      	movs	r3, #6
 800aa66:	6063      	str	r3, [r4, #4]
 800aa68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6022      	str	r2, [r4, #0]
 800aa70:	9303      	str	r3, [sp, #12]
 800aa72:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa74:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aa78:	ab09      	add	r3, sp, #36	@ 0x24
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	6861      	ldr	r1, [r4, #4]
 800aa7e:	ec49 8b10 	vmov	d0, r8, r9
 800aa82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa86:	4628      	mov	r0, r5
 800aa88:	f7ff fed6 	bl	800a838 <__cvt>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa90:	2b47      	cmp	r3, #71	@ 0x47
 800aa92:	4680      	mov	r8, r0
 800aa94:	d129      	bne.n	800aaea <_printf_float+0x172>
 800aa96:	1cc8      	adds	r0, r1, #3
 800aa98:	db02      	blt.n	800aaa0 <_printf_float+0x128>
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	dd41      	ble.n	800ab24 <_printf_float+0x1ac>
 800aaa0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aaa4:	fa5f fa8a 	uxtb.w	sl, sl
 800aaa8:	3901      	subs	r1, #1
 800aaaa:	4652      	mov	r2, sl
 800aaac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aab0:	9109      	str	r1, [sp, #36]	@ 0x24
 800aab2:	f7ff ff26 	bl	800a902 <__exponent>
 800aab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aab8:	1813      	adds	r3, r2, r0
 800aaba:	2a01      	cmp	r2, #1
 800aabc:	4681      	mov	r9, r0
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	dc02      	bgt.n	800aac8 <_printf_float+0x150>
 800aac2:	6822      	ldr	r2, [r4, #0]
 800aac4:	07d2      	lsls	r2, r2, #31
 800aac6:	d501      	bpl.n	800aacc <_printf_float+0x154>
 800aac8:	3301      	adds	r3, #1
 800aaca:	6123      	str	r3, [r4, #16]
 800aacc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0a2      	beq.n	800aa1a <_printf_float+0xa2>
 800aad4:	232d      	movs	r3, #45	@ 0x2d
 800aad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aada:	e79e      	b.n	800aa1a <_printf_float+0xa2>
 800aadc:	9a06      	ldr	r2, [sp, #24]
 800aade:	2a47      	cmp	r2, #71	@ 0x47
 800aae0:	d1c2      	bne.n	800aa68 <_printf_float+0xf0>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1c0      	bne.n	800aa68 <_printf_float+0xf0>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7bd      	b.n	800aa66 <_printf_float+0xee>
 800aaea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aaee:	d9db      	bls.n	800aaa8 <_printf_float+0x130>
 800aaf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aaf4:	d118      	bne.n	800ab28 <_printf_float+0x1b0>
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	dd0b      	ble.n	800ab14 <_printf_float+0x19c>
 800aafc:	6121      	str	r1, [r4, #16]
 800aafe:	b913      	cbnz	r3, 800ab06 <_printf_float+0x18e>
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	07d0      	lsls	r0, r2, #31
 800ab04:	d502      	bpl.n	800ab0c <_printf_float+0x194>
 800ab06:	3301      	adds	r3, #1
 800ab08:	440b      	add	r3, r1
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab0e:	f04f 0900 	mov.w	r9, #0
 800ab12:	e7db      	b.n	800aacc <_printf_float+0x154>
 800ab14:	b913      	cbnz	r3, 800ab1c <_printf_float+0x1a4>
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	07d2      	lsls	r2, r2, #31
 800ab1a:	d501      	bpl.n	800ab20 <_printf_float+0x1a8>
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	e7f4      	b.n	800ab0a <_printf_float+0x192>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e7f2      	b.n	800ab0a <_printf_float+0x192>
 800ab24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	db05      	blt.n	800ab3a <_printf_float+0x1c2>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	6121      	str	r1, [r4, #16]
 800ab32:	07d8      	lsls	r0, r3, #31
 800ab34:	d5ea      	bpl.n	800ab0c <_printf_float+0x194>
 800ab36:	1c4b      	adds	r3, r1, #1
 800ab38:	e7e7      	b.n	800ab0a <_printf_float+0x192>
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	bfd4      	ite	le
 800ab3e:	f1c1 0202 	rsble	r2, r1, #2
 800ab42:	2201      	movgt	r2, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	e7e0      	b.n	800ab0a <_printf_float+0x192>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	055a      	lsls	r2, r3, #21
 800ab4c:	d407      	bmi.n	800ab5e <_printf_float+0x1e6>
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	4642      	mov	r2, r8
 800ab52:	4631      	mov	r1, r6
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b8      	blx	r7
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d12b      	bne.n	800abb4 <_printf_float+0x23c>
 800ab5c:	e767      	b.n	800aa2e <_printf_float+0xb6>
 800ab5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab62:	f240 80dd 	bls.w	800ad20 <_printf_float+0x3a8>
 800ab66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f7f5 ffe3 	bl	8000b38 <__aeabi_dcmpeq>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d033      	beq.n	800abde <_printf_float+0x266>
 800ab76:	4a37      	ldr	r2, [pc, #220]	@ (800ac54 <_printf_float+0x2dc>)
 800ab78:	2301      	movs	r3, #1
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f af54 	beq.w	800aa2e <_printf_float+0xb6>
 800ab86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab8a:	4543      	cmp	r3, r8
 800ab8c:	db02      	blt.n	800ab94 <_printf_float+0x21c>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	07d8      	lsls	r0, r3, #31
 800ab92:	d50f      	bpl.n	800abb4 <_printf_float+0x23c>
 800ab94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	47b8      	blx	r7
 800ab9e:	3001      	adds	r0, #1
 800aba0:	f43f af45 	beq.w	800aa2e <_printf_float+0xb6>
 800aba4:	f04f 0900 	mov.w	r9, #0
 800aba8:	f108 38ff 	add.w	r8, r8, #4294967295
 800abac:	f104 0a1a 	add.w	sl, r4, #26
 800abb0:	45c8      	cmp	r8, r9
 800abb2:	dc09      	bgt.n	800abc8 <_printf_float+0x250>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	079b      	lsls	r3, r3, #30
 800abb8:	f100 8103 	bmi.w	800adc2 <_printf_float+0x44a>
 800abbc:	68e0      	ldr	r0, [r4, #12]
 800abbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abc0:	4298      	cmp	r0, r3
 800abc2:	bfb8      	it	lt
 800abc4:	4618      	movlt	r0, r3
 800abc6:	e734      	b.n	800aa32 <_printf_float+0xba>
 800abc8:	2301      	movs	r3, #1
 800abca:	4652      	mov	r2, sl
 800abcc:	4631      	mov	r1, r6
 800abce:	4628      	mov	r0, r5
 800abd0:	47b8      	blx	r7
 800abd2:	3001      	adds	r0, #1
 800abd4:	f43f af2b 	beq.w	800aa2e <_printf_float+0xb6>
 800abd8:	f109 0901 	add.w	r9, r9, #1
 800abdc:	e7e8      	b.n	800abb0 <_printf_float+0x238>
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dc39      	bgt.n	800ac58 <_printf_float+0x2e0>
 800abe4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac54 <_printf_float+0x2dc>)
 800abe6:	2301      	movs	r3, #1
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f af1d 	beq.w	800aa2e <_printf_float+0xb6>
 800abf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800abf8:	ea59 0303 	orrs.w	r3, r9, r3
 800abfc:	d102      	bne.n	800ac04 <_printf_float+0x28c>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	07d9      	lsls	r1, r3, #31
 800ac02:	d5d7      	bpl.n	800abb4 <_printf_float+0x23c>
 800ac04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b8      	blx	r7
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f43f af0d 	beq.w	800aa2e <_printf_float+0xb6>
 800ac14:	f04f 0a00 	mov.w	sl, #0
 800ac18:	f104 0b1a 	add.w	fp, r4, #26
 800ac1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1e:	425b      	negs	r3, r3
 800ac20:	4553      	cmp	r3, sl
 800ac22:	dc01      	bgt.n	800ac28 <_printf_float+0x2b0>
 800ac24:	464b      	mov	r3, r9
 800ac26:	e793      	b.n	800ab50 <_printf_float+0x1d8>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	465a      	mov	r2, fp
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b8      	blx	r7
 800ac32:	3001      	adds	r0, #1
 800ac34:	f43f aefb 	beq.w	800aa2e <_printf_float+0xb6>
 800ac38:	f10a 0a01 	add.w	sl, sl, #1
 800ac3c:	e7ee      	b.n	800ac1c <_printf_float+0x2a4>
 800ac3e:	bf00      	nop
 800ac40:	7fefffff 	.word	0x7fefffff
 800ac44:	0800dfe4 	.word	0x0800dfe4
 800ac48:	0800dfe0 	.word	0x0800dfe0
 800ac4c:	0800dfec 	.word	0x0800dfec
 800ac50:	0800dfe8 	.word	0x0800dfe8
 800ac54:	0800dff0 	.word	0x0800dff0
 800ac58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac5e:	4553      	cmp	r3, sl
 800ac60:	bfa8      	it	ge
 800ac62:	4653      	movge	r3, sl
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	4699      	mov	r9, r3
 800ac68:	dc36      	bgt.n	800acd8 <_printf_float+0x360>
 800ac6a:	f04f 0b00 	mov.w	fp, #0
 800ac6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac72:	f104 021a 	add.w	r2, r4, #26
 800ac76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac78:	9306      	str	r3, [sp, #24]
 800ac7a:	eba3 0309 	sub.w	r3, r3, r9
 800ac7e:	455b      	cmp	r3, fp
 800ac80:	dc31      	bgt.n	800ace6 <_printf_float+0x36e>
 800ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac84:	459a      	cmp	sl, r3
 800ac86:	dc3a      	bgt.n	800acfe <_printf_float+0x386>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	07da      	lsls	r2, r3, #31
 800ac8c:	d437      	bmi.n	800acfe <_printf_float+0x386>
 800ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac90:	ebaa 0903 	sub.w	r9, sl, r3
 800ac94:	9b06      	ldr	r3, [sp, #24]
 800ac96:	ebaa 0303 	sub.w	r3, sl, r3
 800ac9a:	4599      	cmp	r9, r3
 800ac9c:	bfa8      	it	ge
 800ac9e:	4699      	movge	r9, r3
 800aca0:	f1b9 0f00 	cmp.w	r9, #0
 800aca4:	dc33      	bgt.n	800ad0e <_printf_float+0x396>
 800aca6:	f04f 0800 	mov.w	r8, #0
 800acaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acae:	f104 0b1a 	add.w	fp, r4, #26
 800acb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb4:	ebaa 0303 	sub.w	r3, sl, r3
 800acb8:	eba3 0309 	sub.w	r3, r3, r9
 800acbc:	4543      	cmp	r3, r8
 800acbe:	f77f af79 	ble.w	800abb4 <_printf_float+0x23c>
 800acc2:	2301      	movs	r3, #1
 800acc4:	465a      	mov	r2, fp
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	47b8      	blx	r7
 800accc:	3001      	adds	r0, #1
 800acce:	f43f aeae 	beq.w	800aa2e <_printf_float+0xb6>
 800acd2:	f108 0801 	add.w	r8, r8, #1
 800acd6:	e7ec      	b.n	800acb2 <_printf_float+0x33a>
 800acd8:	4642      	mov	r2, r8
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	d1c2      	bne.n	800ac6a <_printf_float+0x2f2>
 800ace4:	e6a3      	b.n	800aa2e <_printf_float+0xb6>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4631      	mov	r1, r6
 800acea:	4628      	mov	r0, r5
 800acec:	9206      	str	r2, [sp, #24]
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	f43f ae9c 	beq.w	800aa2e <_printf_float+0xb6>
 800acf6:	9a06      	ldr	r2, [sp, #24]
 800acf8:	f10b 0b01 	add.w	fp, fp, #1
 800acfc:	e7bb      	b.n	800ac76 <_printf_float+0x2fe>
 800acfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d1c0      	bne.n	800ac8e <_printf_float+0x316>
 800ad0c:	e68f      	b.n	800aa2e <_printf_float+0xb6>
 800ad0e:	9a06      	ldr	r2, [sp, #24]
 800ad10:	464b      	mov	r3, r9
 800ad12:	4442      	add	r2, r8
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d1c3      	bne.n	800aca6 <_printf_float+0x32e>
 800ad1e:	e686      	b.n	800aa2e <_printf_float+0xb6>
 800ad20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad24:	f1ba 0f01 	cmp.w	sl, #1
 800ad28:	dc01      	bgt.n	800ad2e <_printf_float+0x3b6>
 800ad2a:	07db      	lsls	r3, r3, #31
 800ad2c:	d536      	bpl.n	800ad9c <_printf_float+0x424>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4642      	mov	r2, r8
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f ae78 	beq.w	800aa2e <_printf_float+0xb6>
 800ad3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f43f ae70 	beq.w	800aa2e <_printf_float+0xb6>
 800ad4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad52:	2200      	movs	r2, #0
 800ad54:	2300      	movs	r3, #0
 800ad56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad5a:	f7f5 feed 	bl	8000b38 <__aeabi_dcmpeq>
 800ad5e:	b9c0      	cbnz	r0, 800ad92 <_printf_float+0x41a>
 800ad60:	4653      	mov	r3, sl
 800ad62:	f108 0201 	add.w	r2, r8, #1
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d10c      	bne.n	800ad8a <_printf_float+0x412>
 800ad70:	e65d      	b.n	800aa2e <_printf_float+0xb6>
 800ad72:	2301      	movs	r3, #1
 800ad74:	465a      	mov	r2, fp
 800ad76:	4631      	mov	r1, r6
 800ad78:	4628      	mov	r0, r5
 800ad7a:	47b8      	blx	r7
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	f43f ae56 	beq.w	800aa2e <_printf_float+0xb6>
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	45d0      	cmp	r8, sl
 800ad88:	dbf3      	blt.n	800ad72 <_printf_float+0x3fa>
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad90:	e6df      	b.n	800ab52 <_printf_float+0x1da>
 800ad92:	f04f 0800 	mov.w	r8, #0
 800ad96:	f104 0b1a 	add.w	fp, r4, #26
 800ad9a:	e7f4      	b.n	800ad86 <_printf_float+0x40e>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	4642      	mov	r2, r8
 800ada0:	e7e1      	b.n	800ad66 <_printf_float+0x3ee>
 800ada2:	2301      	movs	r3, #1
 800ada4:	464a      	mov	r2, r9
 800ada6:	4631      	mov	r1, r6
 800ada8:	4628      	mov	r0, r5
 800adaa:	47b8      	blx	r7
 800adac:	3001      	adds	r0, #1
 800adae:	f43f ae3e 	beq.w	800aa2e <_printf_float+0xb6>
 800adb2:	f108 0801 	add.w	r8, r8, #1
 800adb6:	68e3      	ldr	r3, [r4, #12]
 800adb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adba:	1a5b      	subs	r3, r3, r1
 800adbc:	4543      	cmp	r3, r8
 800adbe:	dcf0      	bgt.n	800ada2 <_printf_float+0x42a>
 800adc0:	e6fc      	b.n	800abbc <_printf_float+0x244>
 800adc2:	f04f 0800 	mov.w	r8, #0
 800adc6:	f104 0919 	add.w	r9, r4, #25
 800adca:	e7f4      	b.n	800adb6 <_printf_float+0x43e>

0800adcc <_printf_common>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	4616      	mov	r6, r2
 800add2:	4698      	mov	r8, r3
 800add4:	688a      	ldr	r2, [r1, #8]
 800add6:	690b      	ldr	r3, [r1, #16]
 800add8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800addc:	4293      	cmp	r3, r2
 800adde:	bfb8      	it	lt
 800ade0:	4613      	movlt	r3, r2
 800ade2:	6033      	str	r3, [r6, #0]
 800ade4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ade8:	4607      	mov	r7, r0
 800adea:	460c      	mov	r4, r1
 800adec:	b10a      	cbz	r2, 800adf2 <_printf_common+0x26>
 800adee:	3301      	adds	r3, #1
 800adf0:	6033      	str	r3, [r6, #0]
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	0699      	lsls	r1, r3, #26
 800adf6:	bf42      	ittt	mi
 800adf8:	6833      	ldrmi	r3, [r6, #0]
 800adfa:	3302      	addmi	r3, #2
 800adfc:	6033      	strmi	r3, [r6, #0]
 800adfe:	6825      	ldr	r5, [r4, #0]
 800ae00:	f015 0506 	ands.w	r5, r5, #6
 800ae04:	d106      	bne.n	800ae14 <_printf_common+0x48>
 800ae06:	f104 0a19 	add.w	sl, r4, #25
 800ae0a:	68e3      	ldr	r3, [r4, #12]
 800ae0c:	6832      	ldr	r2, [r6, #0]
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	dc26      	bgt.n	800ae62 <_printf_common+0x96>
 800ae14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae18:	6822      	ldr	r2, [r4, #0]
 800ae1a:	3b00      	subs	r3, #0
 800ae1c:	bf18      	it	ne
 800ae1e:	2301      	movne	r3, #1
 800ae20:	0692      	lsls	r2, r2, #26
 800ae22:	d42b      	bmi.n	800ae7c <_printf_common+0xb0>
 800ae24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae28:	4641      	mov	r1, r8
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	47c8      	blx	r9
 800ae2e:	3001      	adds	r0, #1
 800ae30:	d01e      	beq.n	800ae70 <_printf_common+0xa4>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	f003 0306 	and.w	r3, r3, #6
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	bf02      	ittt	eq
 800ae3e:	68e5      	ldreq	r5, [r4, #12]
 800ae40:	6833      	ldreq	r3, [r6, #0]
 800ae42:	1aed      	subeq	r5, r5, r3
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	bf0c      	ite	eq
 800ae48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae4c:	2500      	movne	r5, #0
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	bfc4      	itt	gt
 800ae52:	1a9b      	subgt	r3, r3, r2
 800ae54:	18ed      	addgt	r5, r5, r3
 800ae56:	2600      	movs	r6, #0
 800ae58:	341a      	adds	r4, #26
 800ae5a:	42b5      	cmp	r5, r6
 800ae5c:	d11a      	bne.n	800ae94 <_printf_common+0xc8>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e008      	b.n	800ae74 <_printf_common+0xa8>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4652      	mov	r2, sl
 800ae66:	4641      	mov	r1, r8
 800ae68:	4638      	mov	r0, r7
 800ae6a:	47c8      	blx	r9
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d103      	bne.n	800ae78 <_printf_common+0xac>
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae78:	3501      	adds	r5, #1
 800ae7a:	e7c6      	b.n	800ae0a <_printf_common+0x3e>
 800ae7c:	18e1      	adds	r1, r4, r3
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	2030      	movs	r0, #48	@ 0x30
 800ae82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae86:	4422      	add	r2, r4
 800ae88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae90:	3302      	adds	r3, #2
 800ae92:	e7c7      	b.n	800ae24 <_printf_common+0x58>
 800ae94:	2301      	movs	r3, #1
 800ae96:	4622      	mov	r2, r4
 800ae98:	4641      	mov	r1, r8
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	47c8      	blx	r9
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d0e6      	beq.n	800ae70 <_printf_common+0xa4>
 800aea2:	3601      	adds	r6, #1
 800aea4:	e7d9      	b.n	800ae5a <_printf_common+0x8e>
	...

0800aea8 <_printf_i>:
 800aea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeac:	7e0f      	ldrb	r7, [r1, #24]
 800aeae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeb0:	2f78      	cmp	r7, #120	@ 0x78
 800aeb2:	4691      	mov	r9, r2
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	469a      	mov	sl, r3
 800aeba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aebe:	d807      	bhi.n	800aed0 <_printf_i+0x28>
 800aec0:	2f62      	cmp	r7, #98	@ 0x62
 800aec2:	d80a      	bhi.n	800aeda <_printf_i+0x32>
 800aec4:	2f00      	cmp	r7, #0
 800aec6:	f000 80d1 	beq.w	800b06c <_printf_i+0x1c4>
 800aeca:	2f58      	cmp	r7, #88	@ 0x58
 800aecc:	f000 80b8 	beq.w	800b040 <_printf_i+0x198>
 800aed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aed8:	e03a      	b.n	800af50 <_printf_i+0xa8>
 800aeda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aede:	2b15      	cmp	r3, #21
 800aee0:	d8f6      	bhi.n	800aed0 <_printf_i+0x28>
 800aee2:	a101      	add	r1, pc, #4	@ (adr r1, 800aee8 <_printf_i+0x40>)
 800aee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aee8:	0800af41 	.word	0x0800af41
 800aeec:	0800af55 	.word	0x0800af55
 800aef0:	0800aed1 	.word	0x0800aed1
 800aef4:	0800aed1 	.word	0x0800aed1
 800aef8:	0800aed1 	.word	0x0800aed1
 800aefc:	0800aed1 	.word	0x0800aed1
 800af00:	0800af55 	.word	0x0800af55
 800af04:	0800aed1 	.word	0x0800aed1
 800af08:	0800aed1 	.word	0x0800aed1
 800af0c:	0800aed1 	.word	0x0800aed1
 800af10:	0800aed1 	.word	0x0800aed1
 800af14:	0800b053 	.word	0x0800b053
 800af18:	0800af7f 	.word	0x0800af7f
 800af1c:	0800b00d 	.word	0x0800b00d
 800af20:	0800aed1 	.word	0x0800aed1
 800af24:	0800aed1 	.word	0x0800aed1
 800af28:	0800b075 	.word	0x0800b075
 800af2c:	0800aed1 	.word	0x0800aed1
 800af30:	0800af7f 	.word	0x0800af7f
 800af34:	0800aed1 	.word	0x0800aed1
 800af38:	0800aed1 	.word	0x0800aed1
 800af3c:	0800b015 	.word	0x0800b015
 800af40:	6833      	ldr	r3, [r6, #0]
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6032      	str	r2, [r6, #0]
 800af48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af50:	2301      	movs	r3, #1
 800af52:	e09c      	b.n	800b08e <_printf_i+0x1e6>
 800af54:	6833      	ldr	r3, [r6, #0]
 800af56:	6820      	ldr	r0, [r4, #0]
 800af58:	1d19      	adds	r1, r3, #4
 800af5a:	6031      	str	r1, [r6, #0]
 800af5c:	0606      	lsls	r6, r0, #24
 800af5e:	d501      	bpl.n	800af64 <_printf_i+0xbc>
 800af60:	681d      	ldr	r5, [r3, #0]
 800af62:	e003      	b.n	800af6c <_printf_i+0xc4>
 800af64:	0645      	lsls	r5, r0, #25
 800af66:	d5fb      	bpl.n	800af60 <_printf_i+0xb8>
 800af68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	da03      	bge.n	800af78 <_printf_i+0xd0>
 800af70:	232d      	movs	r3, #45	@ 0x2d
 800af72:	426d      	negs	r5, r5
 800af74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af78:	4858      	ldr	r0, [pc, #352]	@ (800b0dc <_printf_i+0x234>)
 800af7a:	230a      	movs	r3, #10
 800af7c:	e011      	b.n	800afa2 <_printf_i+0xfa>
 800af7e:	6821      	ldr	r1, [r4, #0]
 800af80:	6833      	ldr	r3, [r6, #0]
 800af82:	0608      	lsls	r0, r1, #24
 800af84:	f853 5b04 	ldr.w	r5, [r3], #4
 800af88:	d402      	bmi.n	800af90 <_printf_i+0xe8>
 800af8a:	0649      	lsls	r1, r1, #25
 800af8c:	bf48      	it	mi
 800af8e:	b2ad      	uxthmi	r5, r5
 800af90:	2f6f      	cmp	r7, #111	@ 0x6f
 800af92:	4852      	ldr	r0, [pc, #328]	@ (800b0dc <_printf_i+0x234>)
 800af94:	6033      	str	r3, [r6, #0]
 800af96:	bf14      	ite	ne
 800af98:	230a      	movne	r3, #10
 800af9a:	2308      	moveq	r3, #8
 800af9c:	2100      	movs	r1, #0
 800af9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afa2:	6866      	ldr	r6, [r4, #4]
 800afa4:	60a6      	str	r6, [r4, #8]
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	db05      	blt.n	800afb6 <_printf_i+0x10e>
 800afaa:	6821      	ldr	r1, [r4, #0]
 800afac:	432e      	orrs	r6, r5
 800afae:	f021 0104 	bic.w	r1, r1, #4
 800afb2:	6021      	str	r1, [r4, #0]
 800afb4:	d04b      	beq.n	800b04e <_printf_i+0x1a6>
 800afb6:	4616      	mov	r6, r2
 800afb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800afbc:	fb03 5711 	mls	r7, r3, r1, r5
 800afc0:	5dc7      	ldrb	r7, [r0, r7]
 800afc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afc6:	462f      	mov	r7, r5
 800afc8:	42bb      	cmp	r3, r7
 800afca:	460d      	mov	r5, r1
 800afcc:	d9f4      	bls.n	800afb8 <_printf_i+0x110>
 800afce:	2b08      	cmp	r3, #8
 800afd0:	d10b      	bne.n	800afea <_printf_i+0x142>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	07df      	lsls	r7, r3, #31
 800afd6:	d508      	bpl.n	800afea <_printf_i+0x142>
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	6861      	ldr	r1, [r4, #4]
 800afdc:	4299      	cmp	r1, r3
 800afde:	bfde      	ittt	le
 800afe0:	2330      	movle	r3, #48	@ 0x30
 800afe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afea:	1b92      	subs	r2, r2, r6
 800afec:	6122      	str	r2, [r4, #16]
 800afee:	f8cd a000 	str.w	sl, [sp]
 800aff2:	464b      	mov	r3, r9
 800aff4:	aa03      	add	r2, sp, #12
 800aff6:	4621      	mov	r1, r4
 800aff8:	4640      	mov	r0, r8
 800affa:	f7ff fee7 	bl	800adcc <_printf_common>
 800affe:	3001      	adds	r0, #1
 800b000:	d14a      	bne.n	800b098 <_printf_i+0x1f0>
 800b002:	f04f 30ff 	mov.w	r0, #4294967295
 800b006:	b004      	add	sp, #16
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	f043 0320 	orr.w	r3, r3, #32
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	4832      	ldr	r0, [pc, #200]	@ (800b0e0 <_printf_i+0x238>)
 800b016:	2778      	movs	r7, #120	@ 0x78
 800b018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	6831      	ldr	r1, [r6, #0]
 800b020:	061f      	lsls	r7, r3, #24
 800b022:	f851 5b04 	ldr.w	r5, [r1], #4
 800b026:	d402      	bmi.n	800b02e <_printf_i+0x186>
 800b028:	065f      	lsls	r7, r3, #25
 800b02a:	bf48      	it	mi
 800b02c:	b2ad      	uxthmi	r5, r5
 800b02e:	6031      	str	r1, [r6, #0]
 800b030:	07d9      	lsls	r1, r3, #31
 800b032:	bf44      	itt	mi
 800b034:	f043 0320 	orrmi.w	r3, r3, #32
 800b038:	6023      	strmi	r3, [r4, #0]
 800b03a:	b11d      	cbz	r5, 800b044 <_printf_i+0x19c>
 800b03c:	2310      	movs	r3, #16
 800b03e:	e7ad      	b.n	800af9c <_printf_i+0xf4>
 800b040:	4826      	ldr	r0, [pc, #152]	@ (800b0dc <_printf_i+0x234>)
 800b042:	e7e9      	b.n	800b018 <_printf_i+0x170>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	f023 0320 	bic.w	r3, r3, #32
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	e7f6      	b.n	800b03c <_printf_i+0x194>
 800b04e:	4616      	mov	r6, r2
 800b050:	e7bd      	b.n	800afce <_printf_i+0x126>
 800b052:	6833      	ldr	r3, [r6, #0]
 800b054:	6825      	ldr	r5, [r4, #0]
 800b056:	6961      	ldr	r1, [r4, #20]
 800b058:	1d18      	adds	r0, r3, #4
 800b05a:	6030      	str	r0, [r6, #0]
 800b05c:	062e      	lsls	r6, r5, #24
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	d501      	bpl.n	800b066 <_printf_i+0x1be>
 800b062:	6019      	str	r1, [r3, #0]
 800b064:	e002      	b.n	800b06c <_printf_i+0x1c4>
 800b066:	0668      	lsls	r0, r5, #25
 800b068:	d5fb      	bpl.n	800b062 <_printf_i+0x1ba>
 800b06a:	8019      	strh	r1, [r3, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	4616      	mov	r6, r2
 800b072:	e7bc      	b.n	800afee <_printf_i+0x146>
 800b074:	6833      	ldr	r3, [r6, #0]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	6032      	str	r2, [r6, #0]
 800b07a:	681e      	ldr	r6, [r3, #0]
 800b07c:	6862      	ldr	r2, [r4, #4]
 800b07e:	2100      	movs	r1, #0
 800b080:	4630      	mov	r0, r6
 800b082:	f7f5 f8dd 	bl	8000240 <memchr>
 800b086:	b108      	cbz	r0, 800b08c <_printf_i+0x1e4>
 800b088:	1b80      	subs	r0, r0, r6
 800b08a:	6060      	str	r0, [r4, #4]
 800b08c:	6863      	ldr	r3, [r4, #4]
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	2300      	movs	r3, #0
 800b092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b096:	e7aa      	b.n	800afee <_printf_i+0x146>
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	4632      	mov	r2, r6
 800b09c:	4649      	mov	r1, r9
 800b09e:	4640      	mov	r0, r8
 800b0a0:	47d0      	blx	sl
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d0ad      	beq.n	800b002 <_printf_i+0x15a>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	079b      	lsls	r3, r3, #30
 800b0aa:	d413      	bmi.n	800b0d4 <_printf_i+0x22c>
 800b0ac:	68e0      	ldr	r0, [r4, #12]
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	4298      	cmp	r0, r3
 800b0b2:	bfb8      	it	lt
 800b0b4:	4618      	movlt	r0, r3
 800b0b6:	e7a6      	b.n	800b006 <_printf_i+0x15e>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	4632      	mov	r2, r6
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4640      	mov	r0, r8
 800b0c0:	47d0      	blx	sl
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d09d      	beq.n	800b002 <_printf_i+0x15a>
 800b0c6:	3501      	adds	r5, #1
 800b0c8:	68e3      	ldr	r3, [r4, #12]
 800b0ca:	9903      	ldr	r1, [sp, #12]
 800b0cc:	1a5b      	subs	r3, r3, r1
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	dcf2      	bgt.n	800b0b8 <_printf_i+0x210>
 800b0d2:	e7eb      	b.n	800b0ac <_printf_i+0x204>
 800b0d4:	2500      	movs	r5, #0
 800b0d6:	f104 0619 	add.w	r6, r4, #25
 800b0da:	e7f5      	b.n	800b0c8 <_printf_i+0x220>
 800b0dc:	0800dff2 	.word	0x0800dff2
 800b0e0:	0800e003 	.word	0x0800e003

0800b0e4 <std>:
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	b510      	push	{r4, lr}
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0f2:	6083      	str	r3, [r0, #8]
 800b0f4:	8181      	strh	r1, [r0, #12]
 800b0f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0f8:	81c2      	strh	r2, [r0, #14]
 800b0fa:	6183      	str	r3, [r0, #24]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	2208      	movs	r2, #8
 800b100:	305c      	adds	r0, #92	@ 0x5c
 800b102:	f000 fa1b 	bl	800b53c <memset>
 800b106:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <std+0x58>)
 800b108:	6263      	str	r3, [r4, #36]	@ 0x24
 800b10a:	4b0d      	ldr	r3, [pc, #52]	@ (800b140 <std+0x5c>)
 800b10c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b10e:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <std+0x60>)
 800b110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b112:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <std+0x64>)
 800b114:	6323      	str	r3, [r4, #48]	@ 0x30
 800b116:	4b0d      	ldr	r3, [pc, #52]	@ (800b14c <std+0x68>)
 800b118:	6224      	str	r4, [r4, #32]
 800b11a:	429c      	cmp	r4, r3
 800b11c:	d006      	beq.n	800b12c <std+0x48>
 800b11e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b122:	4294      	cmp	r4, r2
 800b124:	d002      	beq.n	800b12c <std+0x48>
 800b126:	33d0      	adds	r3, #208	@ 0xd0
 800b128:	429c      	cmp	r4, r3
 800b12a:	d105      	bne.n	800b138 <std+0x54>
 800b12c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b134:	f000 ba90 	b.w	800b658 <__retarget_lock_init_recursive>
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b38d 	.word	0x0800b38d
 800b140:	0800b3af 	.word	0x0800b3af
 800b144:	0800b3e7 	.word	0x0800b3e7
 800b148:	0800b40b 	.word	0x0800b40b
 800b14c:	20002760 	.word	0x20002760

0800b150 <stdio_exit_handler>:
 800b150:	4a02      	ldr	r2, [pc, #8]	@ (800b15c <stdio_exit_handler+0xc>)
 800b152:	4903      	ldr	r1, [pc, #12]	@ (800b160 <stdio_exit_handler+0x10>)
 800b154:	4803      	ldr	r0, [pc, #12]	@ (800b164 <stdio_exit_handler+0x14>)
 800b156:	f000 b869 	b.w	800b22c <_fwalk_sglue>
 800b15a:	bf00      	nop
 800b15c:	20000024 	.word	0x20000024
 800b160:	0800d241 	.word	0x0800d241
 800b164:	20000034 	.word	0x20000034

0800b168 <cleanup_stdio>:
 800b168:	6841      	ldr	r1, [r0, #4]
 800b16a:	4b0c      	ldr	r3, [pc, #48]	@ (800b19c <cleanup_stdio+0x34>)
 800b16c:	4299      	cmp	r1, r3
 800b16e:	b510      	push	{r4, lr}
 800b170:	4604      	mov	r4, r0
 800b172:	d001      	beq.n	800b178 <cleanup_stdio+0x10>
 800b174:	f002 f864 	bl	800d240 <_fflush_r>
 800b178:	68a1      	ldr	r1, [r4, #8]
 800b17a:	4b09      	ldr	r3, [pc, #36]	@ (800b1a0 <cleanup_stdio+0x38>)
 800b17c:	4299      	cmp	r1, r3
 800b17e:	d002      	beq.n	800b186 <cleanup_stdio+0x1e>
 800b180:	4620      	mov	r0, r4
 800b182:	f002 f85d 	bl	800d240 <_fflush_r>
 800b186:	68e1      	ldr	r1, [r4, #12]
 800b188:	4b06      	ldr	r3, [pc, #24]	@ (800b1a4 <cleanup_stdio+0x3c>)
 800b18a:	4299      	cmp	r1, r3
 800b18c:	d004      	beq.n	800b198 <cleanup_stdio+0x30>
 800b18e:	4620      	mov	r0, r4
 800b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b194:	f002 b854 	b.w	800d240 <_fflush_r>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	bf00      	nop
 800b19c:	20002760 	.word	0x20002760
 800b1a0:	200027c8 	.word	0x200027c8
 800b1a4:	20002830 	.word	0x20002830

0800b1a8 <global_stdio_init.part.0>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d8 <global_stdio_init.part.0+0x30>)
 800b1ac:	4c0b      	ldr	r4, [pc, #44]	@ (800b1dc <global_stdio_init.part.0+0x34>)
 800b1ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b1e0 <global_stdio_init.part.0+0x38>)
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2104      	movs	r1, #4
 800b1b8:	f7ff ff94 	bl	800b0e4 <std>
 800b1bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	2109      	movs	r1, #9
 800b1c4:	f7ff ff8e 	bl	800b0e4 <std>
 800b1c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d2:	2112      	movs	r1, #18
 800b1d4:	f7ff bf86 	b.w	800b0e4 <std>
 800b1d8:	20002898 	.word	0x20002898
 800b1dc:	20002760 	.word	0x20002760
 800b1e0:	0800b151 	.word	0x0800b151

0800b1e4 <__sfp_lock_acquire>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	@ (800b1ec <__sfp_lock_acquire+0x8>)
 800b1e6:	f000 ba38 	b.w	800b65a <__retarget_lock_acquire_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200028a1 	.word	0x200028a1

0800b1f0 <__sfp_lock_release>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	@ (800b1f8 <__sfp_lock_release+0x8>)
 800b1f2:	f000 ba33 	b.w	800b65c <__retarget_lock_release_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	200028a1 	.word	0x200028a1

0800b1fc <__sinit>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4604      	mov	r4, r0
 800b200:	f7ff fff0 	bl	800b1e4 <__sfp_lock_acquire>
 800b204:	6a23      	ldr	r3, [r4, #32]
 800b206:	b11b      	cbz	r3, 800b210 <__sinit+0x14>
 800b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20c:	f7ff bff0 	b.w	800b1f0 <__sfp_lock_release>
 800b210:	4b04      	ldr	r3, [pc, #16]	@ (800b224 <__sinit+0x28>)
 800b212:	6223      	str	r3, [r4, #32]
 800b214:	4b04      	ldr	r3, [pc, #16]	@ (800b228 <__sinit+0x2c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f5      	bne.n	800b208 <__sinit+0xc>
 800b21c:	f7ff ffc4 	bl	800b1a8 <global_stdio_init.part.0>
 800b220:	e7f2      	b.n	800b208 <__sinit+0xc>
 800b222:	bf00      	nop
 800b224:	0800b169 	.word	0x0800b169
 800b228:	20002898 	.word	0x20002898

0800b22c <_fwalk_sglue>:
 800b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b230:	4607      	mov	r7, r0
 800b232:	4688      	mov	r8, r1
 800b234:	4614      	mov	r4, r2
 800b236:	2600      	movs	r6, #0
 800b238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b23c:	f1b9 0901 	subs.w	r9, r9, #1
 800b240:	d505      	bpl.n	800b24e <_fwalk_sglue+0x22>
 800b242:	6824      	ldr	r4, [r4, #0]
 800b244:	2c00      	cmp	r4, #0
 800b246:	d1f7      	bne.n	800b238 <_fwalk_sglue+0xc>
 800b248:	4630      	mov	r0, r6
 800b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d907      	bls.n	800b264 <_fwalk_sglue+0x38>
 800b254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b258:	3301      	adds	r3, #1
 800b25a:	d003      	beq.n	800b264 <_fwalk_sglue+0x38>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4638      	mov	r0, r7
 800b260:	47c0      	blx	r8
 800b262:	4306      	orrs	r6, r0
 800b264:	3568      	adds	r5, #104	@ 0x68
 800b266:	e7e9      	b.n	800b23c <_fwalk_sglue+0x10>

0800b268 <iprintf>:
 800b268:	b40f      	push	{r0, r1, r2, r3}
 800b26a:	b507      	push	{r0, r1, r2, lr}
 800b26c:	4906      	ldr	r1, [pc, #24]	@ (800b288 <iprintf+0x20>)
 800b26e:	ab04      	add	r3, sp, #16
 800b270:	6808      	ldr	r0, [r1, #0]
 800b272:	f853 2b04 	ldr.w	r2, [r3], #4
 800b276:	6881      	ldr	r1, [r0, #8]
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	f001 fe45 	bl	800cf08 <_vfiprintf_r>
 800b27e:	b003      	add	sp, #12
 800b280:	f85d eb04 	ldr.w	lr, [sp], #4
 800b284:	b004      	add	sp, #16
 800b286:	4770      	bx	lr
 800b288:	20000030 	.word	0x20000030

0800b28c <_puts_r>:
 800b28c:	6a03      	ldr	r3, [r0, #32]
 800b28e:	b570      	push	{r4, r5, r6, lr}
 800b290:	6884      	ldr	r4, [r0, #8]
 800b292:	4605      	mov	r5, r0
 800b294:	460e      	mov	r6, r1
 800b296:	b90b      	cbnz	r3, 800b29c <_puts_r+0x10>
 800b298:	f7ff ffb0 	bl	800b1fc <__sinit>
 800b29c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b29e:	07db      	lsls	r3, r3, #31
 800b2a0:	d405      	bmi.n	800b2ae <_puts_r+0x22>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	0598      	lsls	r0, r3, #22
 800b2a6:	d402      	bmi.n	800b2ae <_puts_r+0x22>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2aa:	f000 f9d6 	bl	800b65a <__retarget_lock_acquire_recursive>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	0719      	lsls	r1, r3, #28
 800b2b2:	d502      	bpl.n	800b2ba <_puts_r+0x2e>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d135      	bne.n	800b326 <_puts_r+0x9a>
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f8e7 	bl	800b490 <__swsetup_r>
 800b2c2:	b380      	cbz	r0, 800b326 <_puts_r+0x9a>
 800b2c4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ca:	07da      	lsls	r2, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_puts_r+0x4e>
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	059b      	lsls	r3, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_puts_r+0x4e>
 800b2d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2d6:	f000 f9c1 	bl	800b65c <__retarget_lock_release_recursive>
 800b2da:	4628      	mov	r0, r5
 800b2dc:	bd70      	pop	{r4, r5, r6, pc}
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da04      	bge.n	800b2ec <_puts_r+0x60>
 800b2e2:	69a2      	ldr	r2, [r4, #24]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	dc17      	bgt.n	800b318 <_puts_r+0x8c>
 800b2e8:	290a      	cmp	r1, #10
 800b2ea:	d015      	beq.n	800b318 <_puts_r+0x8c>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	6022      	str	r2, [r4, #0]
 800b2f2:	7019      	strb	r1, [r3, #0]
 800b2f4:	68a3      	ldr	r3, [r4, #8]
 800b2f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	60a3      	str	r3, [r4, #8]
 800b2fe:	2900      	cmp	r1, #0
 800b300:	d1ed      	bne.n	800b2de <_puts_r+0x52>
 800b302:	2b00      	cmp	r3, #0
 800b304:	da11      	bge.n	800b32a <_puts_r+0x9e>
 800b306:	4622      	mov	r2, r4
 800b308:	210a      	movs	r1, #10
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f881 	bl	800b412 <__swbuf_r>
 800b310:	3001      	adds	r0, #1
 800b312:	d0d7      	beq.n	800b2c4 <_puts_r+0x38>
 800b314:	250a      	movs	r5, #10
 800b316:	e7d7      	b.n	800b2c8 <_puts_r+0x3c>
 800b318:	4622      	mov	r2, r4
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 f879 	bl	800b412 <__swbuf_r>
 800b320:	3001      	adds	r0, #1
 800b322:	d1e7      	bne.n	800b2f4 <_puts_r+0x68>
 800b324:	e7ce      	b.n	800b2c4 <_puts_r+0x38>
 800b326:	3e01      	subs	r6, #1
 800b328:	e7e4      	b.n	800b2f4 <_puts_r+0x68>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	6022      	str	r2, [r4, #0]
 800b330:	220a      	movs	r2, #10
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	e7ee      	b.n	800b314 <_puts_r+0x88>
	...

0800b338 <puts>:
 800b338:	4b02      	ldr	r3, [pc, #8]	@ (800b344 <puts+0xc>)
 800b33a:	4601      	mov	r1, r0
 800b33c:	6818      	ldr	r0, [r3, #0]
 800b33e:	f7ff bfa5 	b.w	800b28c <_puts_r>
 800b342:	bf00      	nop
 800b344:	20000030 	.word	0x20000030

0800b348 <siprintf>:
 800b348:	b40e      	push	{r1, r2, r3}
 800b34a:	b510      	push	{r4, lr}
 800b34c:	b09d      	sub	sp, #116	@ 0x74
 800b34e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b350:	9002      	str	r0, [sp, #8]
 800b352:	9006      	str	r0, [sp, #24]
 800b354:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b358:	480a      	ldr	r0, [pc, #40]	@ (800b384 <siprintf+0x3c>)
 800b35a:	9107      	str	r1, [sp, #28]
 800b35c:	9104      	str	r1, [sp, #16]
 800b35e:	490a      	ldr	r1, [pc, #40]	@ (800b388 <siprintf+0x40>)
 800b360:	f853 2b04 	ldr.w	r2, [r3], #4
 800b364:	9105      	str	r1, [sp, #20]
 800b366:	2400      	movs	r4, #0
 800b368:	a902      	add	r1, sp, #8
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b370:	f001 fca4 	bl	800ccbc <_svfiprintf_r>
 800b374:	9b02      	ldr	r3, [sp, #8]
 800b376:	701c      	strb	r4, [r3, #0]
 800b378:	b01d      	add	sp, #116	@ 0x74
 800b37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b37e:	b003      	add	sp, #12
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20000030 	.word	0x20000030
 800b388:	ffff0208 	.word	0xffff0208

0800b38c <__sread>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b394:	f000 f912 	bl	800b5bc <_read_r>
 800b398:	2800      	cmp	r0, #0
 800b39a:	bfab      	itete	ge
 800b39c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b39e:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a0:	181b      	addge	r3, r3, r0
 800b3a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3a6:	bfac      	ite	ge
 800b3a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3aa:	81a3      	strhlt	r3, [r4, #12]
 800b3ac:	bd10      	pop	{r4, pc}

0800b3ae <__swrite>:
 800b3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	461f      	mov	r7, r3
 800b3b4:	898b      	ldrh	r3, [r1, #12]
 800b3b6:	05db      	lsls	r3, r3, #23
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	4616      	mov	r6, r2
 800b3be:	d505      	bpl.n	800b3cc <__swrite+0x1e>
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f000 f8e6 	bl	800b598 <_lseek_r>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	4632      	mov	r2, r6
 800b3da:	463b      	mov	r3, r7
 800b3dc:	4628      	mov	r0, r5
 800b3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	f000 b8fd 	b.w	800b5e0 <_write_r>

0800b3e6 <__sseek>:
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ee:	f000 f8d3 	bl	800b598 <_lseek_r>
 800b3f2:	1c43      	adds	r3, r0, #1
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	bf15      	itete	ne
 800b3f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b402:	81a3      	strheq	r3, [r4, #12]
 800b404:	bf18      	it	ne
 800b406:	81a3      	strhne	r3, [r4, #12]
 800b408:	bd10      	pop	{r4, pc}

0800b40a <__sclose>:
 800b40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40e:	f000 b8b3 	b.w	800b578 <_close_r>

0800b412 <__swbuf_r>:
 800b412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b414:	460e      	mov	r6, r1
 800b416:	4614      	mov	r4, r2
 800b418:	4605      	mov	r5, r0
 800b41a:	b118      	cbz	r0, 800b424 <__swbuf_r+0x12>
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b90b      	cbnz	r3, 800b424 <__swbuf_r+0x12>
 800b420:	f7ff feec 	bl	800b1fc <__sinit>
 800b424:	69a3      	ldr	r3, [r4, #24]
 800b426:	60a3      	str	r3, [r4, #8]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	071a      	lsls	r2, r3, #28
 800b42c:	d501      	bpl.n	800b432 <__swbuf_r+0x20>
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b943      	cbnz	r3, 800b444 <__swbuf_r+0x32>
 800b432:	4621      	mov	r1, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f000 f82b 	bl	800b490 <__swsetup_r>
 800b43a:	b118      	cbz	r0, 800b444 <__swbuf_r+0x32>
 800b43c:	f04f 37ff 	mov.w	r7, #4294967295
 800b440:	4638      	mov	r0, r7
 800b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	6922      	ldr	r2, [r4, #16]
 800b448:	1a98      	subs	r0, r3, r2
 800b44a:	6963      	ldr	r3, [r4, #20]
 800b44c:	b2f6      	uxtb	r6, r6
 800b44e:	4283      	cmp	r3, r0
 800b450:	4637      	mov	r7, r6
 800b452:	dc05      	bgt.n	800b460 <__swbuf_r+0x4e>
 800b454:	4621      	mov	r1, r4
 800b456:	4628      	mov	r0, r5
 800b458:	f001 fef2 	bl	800d240 <_fflush_r>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d1ed      	bne.n	800b43c <__swbuf_r+0x2a>
 800b460:	68a3      	ldr	r3, [r4, #8]
 800b462:	3b01      	subs	r3, #1
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	701e      	strb	r6, [r3, #0]
 800b46e:	6962      	ldr	r2, [r4, #20]
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	429a      	cmp	r2, r3
 800b474:	d004      	beq.n	800b480 <__swbuf_r+0x6e>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	07db      	lsls	r3, r3, #31
 800b47a:	d5e1      	bpl.n	800b440 <__swbuf_r+0x2e>
 800b47c:	2e0a      	cmp	r6, #10
 800b47e:	d1df      	bne.n	800b440 <__swbuf_r+0x2e>
 800b480:	4621      	mov	r1, r4
 800b482:	4628      	mov	r0, r5
 800b484:	f001 fedc 	bl	800d240 <_fflush_r>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d0d9      	beq.n	800b440 <__swbuf_r+0x2e>
 800b48c:	e7d6      	b.n	800b43c <__swbuf_r+0x2a>
	...

0800b490 <__swsetup_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4b29      	ldr	r3, [pc, #164]	@ (800b538 <__swsetup_r+0xa8>)
 800b494:	4605      	mov	r5, r0
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	460c      	mov	r4, r1
 800b49a:	b118      	cbz	r0, 800b4a4 <__swsetup_r+0x14>
 800b49c:	6a03      	ldr	r3, [r0, #32]
 800b49e:	b90b      	cbnz	r3, 800b4a4 <__swsetup_r+0x14>
 800b4a0:	f7ff feac 	bl	800b1fc <__sinit>
 800b4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a8:	0719      	lsls	r1, r3, #28
 800b4aa:	d422      	bmi.n	800b4f2 <__swsetup_r+0x62>
 800b4ac:	06da      	lsls	r2, r3, #27
 800b4ae:	d407      	bmi.n	800b4c0 <__swsetup_r+0x30>
 800b4b0:	2209      	movs	r2, #9
 800b4b2:	602a      	str	r2, [r5, #0]
 800b4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b4be:	e033      	b.n	800b528 <__swsetup_r+0x98>
 800b4c0:	0758      	lsls	r0, r3, #29
 800b4c2:	d512      	bpl.n	800b4ea <__swsetup_r+0x5a>
 800b4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4c6:	b141      	cbz	r1, 800b4da <__swsetup_r+0x4a>
 800b4c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4cc:	4299      	cmp	r1, r3
 800b4ce:	d002      	beq.n	800b4d6 <__swsetup_r+0x46>
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f000 ff1d 	bl	800c310 <_free_r>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	6063      	str	r3, [r4, #4]
 800b4e6:	6923      	ldr	r3, [r4, #16]
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	f043 0308 	orr.w	r3, r3, #8
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	b94b      	cbnz	r3, 800b50a <__swsetup_r+0x7a>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b500:	d003      	beq.n	800b50a <__swsetup_r+0x7a>
 800b502:	4621      	mov	r1, r4
 800b504:	4628      	mov	r0, r5
 800b506:	f001 fee9 	bl	800d2dc <__smakebuf_r>
 800b50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50e:	f013 0201 	ands.w	r2, r3, #1
 800b512:	d00a      	beq.n	800b52a <__swsetup_r+0x9a>
 800b514:	2200      	movs	r2, #0
 800b516:	60a2      	str	r2, [r4, #8]
 800b518:	6962      	ldr	r2, [r4, #20]
 800b51a:	4252      	negs	r2, r2
 800b51c:	61a2      	str	r2, [r4, #24]
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	b942      	cbnz	r2, 800b534 <__swsetup_r+0xa4>
 800b522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b526:	d1c5      	bne.n	800b4b4 <__swsetup_r+0x24>
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	0799      	lsls	r1, r3, #30
 800b52c:	bf58      	it	pl
 800b52e:	6962      	ldrpl	r2, [r4, #20]
 800b530:	60a2      	str	r2, [r4, #8]
 800b532:	e7f4      	b.n	800b51e <__swsetup_r+0x8e>
 800b534:	2000      	movs	r0, #0
 800b536:	e7f7      	b.n	800b528 <__swsetup_r+0x98>
 800b538:	20000030 	.word	0x20000030

0800b53c <memset>:
 800b53c:	4402      	add	r2, r0
 800b53e:	4603      	mov	r3, r0
 800b540:	4293      	cmp	r3, r2
 800b542:	d100      	bne.n	800b546 <memset+0xa>
 800b544:	4770      	bx	lr
 800b546:	f803 1b01 	strb.w	r1, [r3], #1
 800b54a:	e7f9      	b.n	800b540 <memset+0x4>

0800b54c <strncmp>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	b16a      	cbz	r2, 800b56c <strncmp+0x20>
 800b550:	3901      	subs	r1, #1
 800b552:	1884      	adds	r4, r0, r2
 800b554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b558:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d103      	bne.n	800b568 <strncmp+0x1c>
 800b560:	42a0      	cmp	r0, r4
 800b562:	d001      	beq.n	800b568 <strncmp+0x1c>
 800b564:	2a00      	cmp	r2, #0
 800b566:	d1f5      	bne.n	800b554 <strncmp+0x8>
 800b568:	1ad0      	subs	r0, r2, r3
 800b56a:	bd10      	pop	{r4, pc}
 800b56c:	4610      	mov	r0, r2
 800b56e:	e7fc      	b.n	800b56a <strncmp+0x1e>

0800b570 <_localeconv_r>:
 800b570:	4800      	ldr	r0, [pc, #0]	@ (800b574 <_localeconv_r+0x4>)
 800b572:	4770      	bx	lr
 800b574:	20000170 	.word	0x20000170

0800b578 <_close_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	@ (800b594 <_close_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f6 ffaa 	bl	80024dc <_close>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_close_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_close_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	2000289c 	.word	0x2000289c

0800b598 <_lseek_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	@ (800b5b8 <_lseek_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f6 ffbf 	bl	800252a <_lseek>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_lseek_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_lseek_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	2000289c 	.word	0x2000289c

0800b5bc <_read_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	@ (800b5dc <_read_r+0x20>)
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	602a      	str	r2, [r5, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f7f6 ff4d 	bl	800246a <_read>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_read_r+0x1e>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_read_r+0x1e>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	2000289c 	.word	0x2000289c

0800b5e0 <_write_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d07      	ldr	r5, [pc, #28]	@ (800b600 <_write_r+0x20>)
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	4608      	mov	r0, r1
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	602a      	str	r2, [r5, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f7f6 ff58 	bl	80024a4 <_write>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_write_r+0x1e>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_write_r+0x1e>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	2000289c 	.word	0x2000289c

0800b604 <__errno>:
 800b604:	4b01      	ldr	r3, [pc, #4]	@ (800b60c <__errno+0x8>)
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20000030 	.word	0x20000030

0800b610 <__libc_init_array>:
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	4d0d      	ldr	r5, [pc, #52]	@ (800b648 <__libc_init_array+0x38>)
 800b614:	4c0d      	ldr	r4, [pc, #52]	@ (800b64c <__libc_init_array+0x3c>)
 800b616:	1b64      	subs	r4, r4, r5
 800b618:	10a4      	asrs	r4, r4, #2
 800b61a:	2600      	movs	r6, #0
 800b61c:	42a6      	cmp	r6, r4
 800b61e:	d109      	bne.n	800b634 <__libc_init_array+0x24>
 800b620:	4d0b      	ldr	r5, [pc, #44]	@ (800b650 <__libc_init_array+0x40>)
 800b622:	4c0c      	ldr	r4, [pc, #48]	@ (800b654 <__libc_init_array+0x44>)
 800b624:	f001 ffd6 	bl	800d5d4 <_init>
 800b628:	1b64      	subs	r4, r4, r5
 800b62a:	10a4      	asrs	r4, r4, #2
 800b62c:	2600      	movs	r6, #0
 800b62e:	42a6      	cmp	r6, r4
 800b630:	d105      	bne.n	800b63e <__libc_init_array+0x2e>
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	f855 3b04 	ldr.w	r3, [r5], #4
 800b638:	4798      	blx	r3
 800b63a:	3601      	adds	r6, #1
 800b63c:	e7ee      	b.n	800b61c <__libc_init_array+0xc>
 800b63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b642:	4798      	blx	r3
 800b644:	3601      	adds	r6, #1
 800b646:	e7f2      	b.n	800b62e <__libc_init_array+0x1e>
 800b648:	0800e35c 	.word	0x0800e35c
 800b64c:	0800e35c 	.word	0x0800e35c
 800b650:	0800e35c 	.word	0x0800e35c
 800b654:	0800e360 	.word	0x0800e360

0800b658 <__retarget_lock_init_recursive>:
 800b658:	4770      	bx	lr

0800b65a <__retarget_lock_acquire_recursive>:
 800b65a:	4770      	bx	lr

0800b65c <__retarget_lock_release_recursive>:
 800b65c:	4770      	bx	lr

0800b65e <quorem>:
 800b65e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b662:	6903      	ldr	r3, [r0, #16]
 800b664:	690c      	ldr	r4, [r1, #16]
 800b666:	42a3      	cmp	r3, r4
 800b668:	4607      	mov	r7, r0
 800b66a:	db7e      	blt.n	800b76a <quorem+0x10c>
 800b66c:	3c01      	subs	r4, #1
 800b66e:	f101 0814 	add.w	r8, r1, #20
 800b672:	00a3      	lsls	r3, r4, #2
 800b674:	f100 0514 	add.w	r5, r0, #20
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b688:	3301      	adds	r3, #1
 800b68a:	429a      	cmp	r2, r3
 800b68c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b690:	fbb2 f6f3 	udiv	r6, r2, r3
 800b694:	d32e      	bcc.n	800b6f4 <quorem+0x96>
 800b696:	f04f 0a00 	mov.w	sl, #0
 800b69a:	46c4      	mov	ip, r8
 800b69c:	46ae      	mov	lr, r5
 800b69e:	46d3      	mov	fp, sl
 800b6a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6a4:	b298      	uxth	r0, r3
 800b6a6:	fb06 a000 	mla	r0, r6, r0, sl
 800b6aa:	0c02      	lsrs	r2, r0, #16
 800b6ac:	0c1b      	lsrs	r3, r3, #16
 800b6ae:	fb06 2303 	mla	r3, r6, r3, r2
 800b6b2:	f8de 2000 	ldr.w	r2, [lr]
 800b6b6:	b280      	uxth	r0, r0
 800b6b8:	b292      	uxth	r2, r2
 800b6ba:	1a12      	subs	r2, r2, r0
 800b6bc:	445a      	add	r2, fp
 800b6be:	f8de 0000 	ldr.w	r0, [lr]
 800b6c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6d6:	45e1      	cmp	r9, ip
 800b6d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b6dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6e0:	d2de      	bcs.n	800b6a0 <quorem+0x42>
 800b6e2:	9b00      	ldr	r3, [sp, #0]
 800b6e4:	58eb      	ldr	r3, [r5, r3]
 800b6e6:	b92b      	cbnz	r3, 800b6f4 <quorem+0x96>
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	3b04      	subs	r3, #4
 800b6ec:	429d      	cmp	r5, r3
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	d32f      	bcc.n	800b752 <quorem+0xf4>
 800b6f2:	613c      	str	r4, [r7, #16]
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f001 f97d 	bl	800c9f4 <__mcmp>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	db25      	blt.n	800b74a <quorem+0xec>
 800b6fe:	4629      	mov	r1, r5
 800b700:	2000      	movs	r0, #0
 800b702:	f858 2b04 	ldr.w	r2, [r8], #4
 800b706:	f8d1 c000 	ldr.w	ip, [r1]
 800b70a:	fa1f fe82 	uxth.w	lr, r2
 800b70e:	fa1f f38c 	uxth.w	r3, ip
 800b712:	eba3 030e 	sub.w	r3, r3, lr
 800b716:	4403      	add	r3, r0
 800b718:	0c12      	lsrs	r2, r2, #16
 800b71a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b71e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b722:	b29b      	uxth	r3, r3
 800b724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b728:	45c1      	cmp	r9, r8
 800b72a:	f841 3b04 	str.w	r3, [r1], #4
 800b72e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b732:	d2e6      	bcs.n	800b702 <quorem+0xa4>
 800b734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b73c:	b922      	cbnz	r2, 800b748 <quorem+0xea>
 800b73e:	3b04      	subs	r3, #4
 800b740:	429d      	cmp	r5, r3
 800b742:	461a      	mov	r2, r3
 800b744:	d30b      	bcc.n	800b75e <quorem+0x100>
 800b746:	613c      	str	r4, [r7, #16]
 800b748:	3601      	adds	r6, #1
 800b74a:	4630      	mov	r0, r6
 800b74c:	b003      	add	sp, #12
 800b74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	3b04      	subs	r3, #4
 800b756:	2a00      	cmp	r2, #0
 800b758:	d1cb      	bne.n	800b6f2 <quorem+0x94>
 800b75a:	3c01      	subs	r4, #1
 800b75c:	e7c6      	b.n	800b6ec <quorem+0x8e>
 800b75e:	6812      	ldr	r2, [r2, #0]
 800b760:	3b04      	subs	r3, #4
 800b762:	2a00      	cmp	r2, #0
 800b764:	d1ef      	bne.n	800b746 <quorem+0xe8>
 800b766:	3c01      	subs	r4, #1
 800b768:	e7ea      	b.n	800b740 <quorem+0xe2>
 800b76a:	2000      	movs	r0, #0
 800b76c:	e7ee      	b.n	800b74c <quorem+0xee>
	...

0800b770 <_dtoa_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	69c7      	ldr	r7, [r0, #28]
 800b776:	b097      	sub	sp, #92	@ 0x5c
 800b778:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b77c:	ec55 4b10 	vmov	r4, r5, d0
 800b780:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b782:	9107      	str	r1, [sp, #28]
 800b784:	4681      	mov	r9, r0
 800b786:	920c      	str	r2, [sp, #48]	@ 0x30
 800b788:	9311      	str	r3, [sp, #68]	@ 0x44
 800b78a:	b97f      	cbnz	r7, 800b7ac <_dtoa_r+0x3c>
 800b78c:	2010      	movs	r0, #16
 800b78e:	f000 fe09 	bl	800c3a4 <malloc>
 800b792:	4602      	mov	r2, r0
 800b794:	f8c9 001c 	str.w	r0, [r9, #28]
 800b798:	b920      	cbnz	r0, 800b7a4 <_dtoa_r+0x34>
 800b79a:	4ba9      	ldr	r3, [pc, #676]	@ (800ba40 <_dtoa_r+0x2d0>)
 800b79c:	21ef      	movs	r1, #239	@ 0xef
 800b79e:	48a9      	ldr	r0, [pc, #676]	@ (800ba44 <_dtoa_r+0x2d4>)
 800b7a0:	f001 fe32 	bl	800d408 <__assert_func>
 800b7a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7a8:	6007      	str	r7, [r0, #0]
 800b7aa:	60c7      	str	r7, [r0, #12]
 800b7ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	b159      	cbz	r1, 800b7cc <_dtoa_r+0x5c>
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	604a      	str	r2, [r1, #4]
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	4093      	lsls	r3, r2
 800b7bc:	608b      	str	r3, [r1, #8]
 800b7be:	4648      	mov	r0, r9
 800b7c0:	f000 fee6 	bl	800c590 <_Bfree>
 800b7c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	1e2b      	subs	r3, r5, #0
 800b7ce:	bfb9      	ittee	lt
 800b7d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7d4:	9305      	strlt	r3, [sp, #20]
 800b7d6:	2300      	movge	r3, #0
 800b7d8:	6033      	strge	r3, [r6, #0]
 800b7da:	9f05      	ldr	r7, [sp, #20]
 800b7dc:	4b9a      	ldr	r3, [pc, #616]	@ (800ba48 <_dtoa_r+0x2d8>)
 800b7de:	bfbc      	itt	lt
 800b7e0:	2201      	movlt	r2, #1
 800b7e2:	6032      	strlt	r2, [r6, #0]
 800b7e4:	43bb      	bics	r3, r7
 800b7e6:	d112      	bne.n	800b80e <_dtoa_r+0x9e>
 800b7e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7f4:	4323      	orrs	r3, r4
 800b7f6:	f000 855a 	beq.w	800c2ae <_dtoa_r+0xb3e>
 800b7fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ba5c <_dtoa_r+0x2ec>
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 855c 	beq.w	800c2be <_dtoa_r+0xb4e>
 800b806:	f10a 0303 	add.w	r3, sl, #3
 800b80a:	f000 bd56 	b.w	800c2ba <_dtoa_r+0xb4a>
 800b80e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b812:	2200      	movs	r2, #0
 800b814:	ec51 0b17 	vmov	r0, r1, d7
 800b818:	2300      	movs	r3, #0
 800b81a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b81e:	f7f5 f98b 	bl	8000b38 <__aeabi_dcmpeq>
 800b822:	4680      	mov	r8, r0
 800b824:	b158      	cbz	r0, 800b83e <_dtoa_r+0xce>
 800b826:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b828:	2301      	movs	r3, #1
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b82e:	b113      	cbz	r3, 800b836 <_dtoa_r+0xc6>
 800b830:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b832:	4b86      	ldr	r3, [pc, #536]	@ (800ba4c <_dtoa_r+0x2dc>)
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ba60 <_dtoa_r+0x2f0>
 800b83a:	f000 bd40 	b.w	800c2be <_dtoa_r+0xb4e>
 800b83e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b842:	aa14      	add	r2, sp, #80	@ 0x50
 800b844:	a915      	add	r1, sp, #84	@ 0x54
 800b846:	4648      	mov	r0, r9
 800b848:	f001 f984 	bl	800cb54 <__d2b>
 800b84c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b850:	9002      	str	r0, [sp, #8]
 800b852:	2e00      	cmp	r6, #0
 800b854:	d078      	beq.n	800b948 <_dtoa_r+0x1d8>
 800b856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b858:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b864:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b868:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b86c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b870:	4619      	mov	r1, r3
 800b872:	2200      	movs	r2, #0
 800b874:	4b76      	ldr	r3, [pc, #472]	@ (800ba50 <_dtoa_r+0x2e0>)
 800b876:	f7f4 fd3f 	bl	80002f8 <__aeabi_dsub>
 800b87a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ba28 <_dtoa_r+0x2b8>)
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	f7f4 fef2 	bl	8000668 <__aeabi_dmul>
 800b884:	a36a      	add	r3, pc, #424	@ (adr r3, 800ba30 <_dtoa_r+0x2c0>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f7f4 fd37 	bl	80002fc <__adddf3>
 800b88e:	4604      	mov	r4, r0
 800b890:	4630      	mov	r0, r6
 800b892:	460d      	mov	r5, r1
 800b894:	f7f4 fe7e 	bl	8000594 <__aeabi_i2d>
 800b898:	a367      	add	r3, pc, #412	@ (adr r3, 800ba38 <_dtoa_r+0x2c8>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 fee3 	bl	8000668 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7f4 fd27 	bl	80002fc <__adddf3>
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	f7f5 f989 	bl	8000bc8 <__aeabi_d2iz>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f7f5 f944 	bl	8000b4c <__aeabi_dcmplt>
 800b8c4:	b140      	cbz	r0, 800b8d8 <_dtoa_r+0x168>
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7f4 fe64 	bl	8000594 <__aeabi_i2d>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	f7f5 f932 	bl	8000b38 <__aeabi_dcmpeq>
 800b8d4:	b900      	cbnz	r0, 800b8d8 <_dtoa_r+0x168>
 800b8d6:	3f01      	subs	r7, #1
 800b8d8:	2f16      	cmp	r7, #22
 800b8da:	d852      	bhi.n	800b982 <_dtoa_r+0x212>
 800b8dc:	4b5d      	ldr	r3, [pc, #372]	@ (800ba54 <_dtoa_r+0x2e4>)
 800b8de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b8ea:	f7f5 f92f 	bl	8000b4c <__aeabi_dcmplt>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d049      	beq.n	800b986 <_dtoa_r+0x216>
 800b8f2:	3f01      	subs	r7, #1
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8fa:	1b9b      	subs	r3, r3, r6
 800b8fc:	1e5a      	subs	r2, r3, #1
 800b8fe:	bf45      	ittet	mi
 800b900:	f1c3 0301 	rsbmi	r3, r3, #1
 800b904:	9300      	strmi	r3, [sp, #0]
 800b906:	2300      	movpl	r3, #0
 800b908:	2300      	movmi	r3, #0
 800b90a:	9206      	str	r2, [sp, #24]
 800b90c:	bf54      	ite	pl
 800b90e:	9300      	strpl	r3, [sp, #0]
 800b910:	9306      	strmi	r3, [sp, #24]
 800b912:	2f00      	cmp	r7, #0
 800b914:	db39      	blt.n	800b98a <_dtoa_r+0x21a>
 800b916:	9b06      	ldr	r3, [sp, #24]
 800b918:	970d      	str	r7, [sp, #52]	@ 0x34
 800b91a:	443b      	add	r3, r7
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	2300      	movs	r3, #0
 800b920:	9308      	str	r3, [sp, #32]
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	2b09      	cmp	r3, #9
 800b926:	d863      	bhi.n	800b9f0 <_dtoa_r+0x280>
 800b928:	2b05      	cmp	r3, #5
 800b92a:	bfc4      	itt	gt
 800b92c:	3b04      	subgt	r3, #4
 800b92e:	9307      	strgt	r3, [sp, #28]
 800b930:	9b07      	ldr	r3, [sp, #28]
 800b932:	f1a3 0302 	sub.w	r3, r3, #2
 800b936:	bfcc      	ite	gt
 800b938:	2400      	movgt	r4, #0
 800b93a:	2401      	movle	r4, #1
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d863      	bhi.n	800ba08 <_dtoa_r+0x298>
 800b940:	e8df f003 	tbb	[pc, r3]
 800b944:	2b375452 	.word	0x2b375452
 800b948:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b94c:	441e      	add	r6, r3
 800b94e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b952:	2b20      	cmp	r3, #32
 800b954:	bfc1      	itttt	gt
 800b956:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b95a:	409f      	lslgt	r7, r3
 800b95c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b960:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b964:	bfd6      	itet	le
 800b966:	f1c3 0320 	rsble	r3, r3, #32
 800b96a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b96e:	fa04 f003 	lslle.w	r0, r4, r3
 800b972:	f7f4 fdff 	bl	8000574 <__aeabi_ui2d>
 800b976:	2201      	movs	r2, #1
 800b978:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b97c:	3e01      	subs	r6, #1
 800b97e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b980:	e776      	b.n	800b870 <_dtoa_r+0x100>
 800b982:	2301      	movs	r3, #1
 800b984:	e7b7      	b.n	800b8f6 <_dtoa_r+0x186>
 800b986:	9010      	str	r0, [sp, #64]	@ 0x40
 800b988:	e7b6      	b.n	800b8f8 <_dtoa_r+0x188>
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	1bdb      	subs	r3, r3, r7
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	427b      	negs	r3, r7
 800b992:	9308      	str	r3, [sp, #32]
 800b994:	2300      	movs	r3, #0
 800b996:	930d      	str	r3, [sp, #52]	@ 0x34
 800b998:	e7c3      	b.n	800b922 <_dtoa_r+0x1b2>
 800b99a:	2301      	movs	r3, #1
 800b99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9a0:	eb07 0b03 	add.w	fp, r7, r3
 800b9a4:	f10b 0301 	add.w	r3, fp, #1
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	9303      	str	r3, [sp, #12]
 800b9ac:	bfb8      	it	lt
 800b9ae:	2301      	movlt	r3, #1
 800b9b0:	e006      	b.n	800b9c0 <_dtoa_r+0x250>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dd28      	ble.n	800ba0e <_dtoa_r+0x29e>
 800b9bc:	469b      	mov	fp, r3
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	2204      	movs	r2, #4
 800b9c8:	f102 0514 	add.w	r5, r2, #20
 800b9cc:	429d      	cmp	r5, r3
 800b9ce:	d926      	bls.n	800ba1e <_dtoa_r+0x2ae>
 800b9d0:	6041      	str	r1, [r0, #4]
 800b9d2:	4648      	mov	r0, r9
 800b9d4:	f000 fd9c 	bl	800c510 <_Balloc>
 800b9d8:	4682      	mov	sl, r0
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d142      	bne.n	800ba64 <_dtoa_r+0x2f4>
 800b9de:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <_dtoa_r+0x2e8>)
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9e6:	e6da      	b.n	800b79e <_dtoa_r+0x2e>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	e7e3      	b.n	800b9b4 <_dtoa_r+0x244>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e7d5      	b.n	800b99c <_dtoa_r+0x22c>
 800b9f0:	2401      	movs	r4, #1
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9307      	str	r3, [sp, #28]
 800b9f6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b9f8:	f04f 3bff 	mov.w	fp, #4294967295
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba02:	2312      	movs	r3, #18
 800ba04:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba06:	e7db      	b.n	800b9c0 <_dtoa_r+0x250>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba0c:	e7f4      	b.n	800b9f8 <_dtoa_r+0x288>
 800ba0e:	f04f 0b01 	mov.w	fp, #1
 800ba12:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba16:	465b      	mov	r3, fp
 800ba18:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ba1c:	e7d0      	b.n	800b9c0 <_dtoa_r+0x250>
 800ba1e:	3101      	adds	r1, #1
 800ba20:	0052      	lsls	r2, r2, #1
 800ba22:	e7d1      	b.n	800b9c8 <_dtoa_r+0x258>
 800ba24:	f3af 8000 	nop.w
 800ba28:	636f4361 	.word	0x636f4361
 800ba2c:	3fd287a7 	.word	0x3fd287a7
 800ba30:	8b60c8b3 	.word	0x8b60c8b3
 800ba34:	3fc68a28 	.word	0x3fc68a28
 800ba38:	509f79fb 	.word	0x509f79fb
 800ba3c:	3fd34413 	.word	0x3fd34413
 800ba40:	0800e021 	.word	0x0800e021
 800ba44:	0800e038 	.word	0x0800e038
 800ba48:	7ff00000 	.word	0x7ff00000
 800ba4c:	0800dff1 	.word	0x0800dff1
 800ba50:	3ff80000 	.word	0x3ff80000
 800ba54:	0800e188 	.word	0x0800e188
 800ba58:	0800e090 	.word	0x0800e090
 800ba5c:	0800e01d 	.word	0x0800e01d
 800ba60:	0800dff0 	.word	0x0800dff0
 800ba64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba68:	6018      	str	r0, [r3, #0]
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	2b0e      	cmp	r3, #14
 800ba6e:	f200 80a1 	bhi.w	800bbb4 <_dtoa_r+0x444>
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	f000 809e 	beq.w	800bbb4 <_dtoa_r+0x444>
 800ba78:	2f00      	cmp	r7, #0
 800ba7a:	dd33      	ble.n	800bae4 <_dtoa_r+0x374>
 800ba7c:	4b9c      	ldr	r3, [pc, #624]	@ (800bcf0 <_dtoa_r+0x580>)
 800ba7e:	f007 020f 	and.w	r2, r7, #15
 800ba82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba86:	ed93 7b00 	vldr	d7, [r3]
 800ba8a:	05f8      	lsls	r0, r7, #23
 800ba8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ba90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba94:	d516      	bpl.n	800bac4 <_dtoa_r+0x354>
 800ba96:	4b97      	ldr	r3, [pc, #604]	@ (800bcf4 <_dtoa_r+0x584>)
 800ba98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800baa0:	f7f4 ff0c 	bl	80008bc <__aeabi_ddiv>
 800baa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baa8:	f004 040f 	and.w	r4, r4, #15
 800baac:	2603      	movs	r6, #3
 800baae:	4d91      	ldr	r5, [pc, #580]	@ (800bcf4 <_dtoa_r+0x584>)
 800bab0:	b954      	cbnz	r4, 800bac8 <_dtoa_r+0x358>
 800bab2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baba:	f7f4 feff 	bl	80008bc <__aeabi_ddiv>
 800babe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bac2:	e028      	b.n	800bb16 <_dtoa_r+0x3a6>
 800bac4:	2602      	movs	r6, #2
 800bac6:	e7f2      	b.n	800baae <_dtoa_r+0x33e>
 800bac8:	07e1      	lsls	r1, r4, #31
 800baca:	d508      	bpl.n	800bade <_dtoa_r+0x36e>
 800bacc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bad4:	f7f4 fdc8 	bl	8000668 <__aeabi_dmul>
 800bad8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800badc:	3601      	adds	r6, #1
 800bade:	1064      	asrs	r4, r4, #1
 800bae0:	3508      	adds	r5, #8
 800bae2:	e7e5      	b.n	800bab0 <_dtoa_r+0x340>
 800bae4:	f000 80af 	beq.w	800bc46 <_dtoa_r+0x4d6>
 800bae8:	427c      	negs	r4, r7
 800baea:	4b81      	ldr	r3, [pc, #516]	@ (800bcf0 <_dtoa_r+0x580>)
 800baec:	4d81      	ldr	r5, [pc, #516]	@ (800bcf4 <_dtoa_r+0x584>)
 800baee:	f004 020f 	and.w	r2, r4, #15
 800baf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bafe:	f7f4 fdb3 	bl	8000668 <__aeabi_dmul>
 800bb02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb06:	1124      	asrs	r4, r4, #4
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2602      	movs	r6, #2
 800bb0c:	2c00      	cmp	r4, #0
 800bb0e:	f040 808f 	bne.w	800bc30 <_dtoa_r+0x4c0>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1d3      	bne.n	800babe <_dtoa_r+0x34e>
 800bb16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 8094 	beq.w	800bc4a <_dtoa_r+0x4da>
 800bb22:	4b75      	ldr	r3, [pc, #468]	@ (800bcf8 <_dtoa_r+0x588>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f5 f80f 	bl	8000b4c <__aeabi_dcmplt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f000 808b 	beq.w	800bc4a <_dtoa_r+0x4da>
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8087 	beq.w	800bc4a <_dtoa_r+0x4da>
 800bb3c:	f1bb 0f00 	cmp.w	fp, #0
 800bb40:	dd34      	ble.n	800bbac <_dtoa_r+0x43c>
 800bb42:	4620      	mov	r0, r4
 800bb44:	4b6d      	ldr	r3, [pc, #436]	@ (800bcfc <_dtoa_r+0x58c>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7f4 fd8d 	bl	8000668 <__aeabi_dmul>
 800bb4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb52:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb56:	3601      	adds	r6, #1
 800bb58:	465c      	mov	r4, fp
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7f4 fd1a 	bl	8000594 <__aeabi_i2d>
 800bb60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb64:	f7f4 fd80 	bl	8000668 <__aeabi_dmul>
 800bb68:	4b65      	ldr	r3, [pc, #404]	@ (800bd00 <_dtoa_r+0x590>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fbc6 	bl	80002fc <__adddf3>
 800bb70:	4605      	mov	r5, r0
 800bb72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb76:	2c00      	cmp	r4, #0
 800bb78:	d16a      	bne.n	800bc50 <_dtoa_r+0x4e0>
 800bb7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb7e:	4b61      	ldr	r3, [pc, #388]	@ (800bd04 <_dtoa_r+0x594>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	f7f4 fbb9 	bl	80002f8 <__aeabi_dsub>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb8e:	462a      	mov	r2, r5
 800bb90:	4633      	mov	r3, r6
 800bb92:	f7f4 fff9 	bl	8000b88 <__aeabi_dcmpgt>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f040 8298 	bne.w	800c0cc <_dtoa_r+0x95c>
 800bb9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba0:	462a      	mov	r2, r5
 800bba2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bba6:	f7f4 ffd1 	bl	8000b4c <__aeabi_dcmplt>
 800bbaa:	bb38      	cbnz	r0, 800bbfc <_dtoa_r+0x48c>
 800bbac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bbb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bbb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f2c0 8157 	blt.w	800be6a <_dtoa_r+0x6fa>
 800bbbc:	2f0e      	cmp	r7, #14
 800bbbe:	f300 8154 	bgt.w	800be6a <_dtoa_r+0x6fa>
 800bbc2:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf0 <_dtoa_r+0x580>)
 800bbc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbc8:	ed93 7b00 	vldr	d7, [r3]
 800bbcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	ed8d 7b00 	vstr	d7, [sp]
 800bbd4:	f280 80e5 	bge.w	800bda2 <_dtoa_r+0x632>
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f300 80e1 	bgt.w	800bda2 <_dtoa_r+0x632>
 800bbe0:	d10c      	bne.n	800bbfc <_dtoa_r+0x48c>
 800bbe2:	4b48      	ldr	r3, [pc, #288]	@ (800bd04 <_dtoa_r+0x594>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	ec51 0b17 	vmov	r0, r1, d7
 800bbea:	f7f4 fd3d 	bl	8000668 <__aeabi_dmul>
 800bbee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbf2:	f7f4 ffbf 	bl	8000b74 <__aeabi_dcmpge>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	f000 8266 	beq.w	800c0c8 <_dtoa_r+0x958>
 800bbfc:	2400      	movs	r4, #0
 800bbfe:	4625      	mov	r5, r4
 800bc00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc02:	4656      	mov	r6, sl
 800bc04:	ea6f 0803 	mvn.w	r8, r3
 800bc08:	2700      	movs	r7, #0
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	f000 fcbf 	bl	800c590 <_Bfree>
 800bc12:	2d00      	cmp	r5, #0
 800bc14:	f000 80bd 	beq.w	800bd92 <_dtoa_r+0x622>
 800bc18:	b12f      	cbz	r7, 800bc26 <_dtoa_r+0x4b6>
 800bc1a:	42af      	cmp	r7, r5
 800bc1c:	d003      	beq.n	800bc26 <_dtoa_r+0x4b6>
 800bc1e:	4639      	mov	r1, r7
 800bc20:	4648      	mov	r0, r9
 800bc22:	f000 fcb5 	bl	800c590 <_Bfree>
 800bc26:	4629      	mov	r1, r5
 800bc28:	4648      	mov	r0, r9
 800bc2a:	f000 fcb1 	bl	800c590 <_Bfree>
 800bc2e:	e0b0      	b.n	800bd92 <_dtoa_r+0x622>
 800bc30:	07e2      	lsls	r2, r4, #31
 800bc32:	d505      	bpl.n	800bc40 <_dtoa_r+0x4d0>
 800bc34:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc38:	f7f4 fd16 	bl	8000668 <__aeabi_dmul>
 800bc3c:	3601      	adds	r6, #1
 800bc3e:	2301      	movs	r3, #1
 800bc40:	1064      	asrs	r4, r4, #1
 800bc42:	3508      	adds	r5, #8
 800bc44:	e762      	b.n	800bb0c <_dtoa_r+0x39c>
 800bc46:	2602      	movs	r6, #2
 800bc48:	e765      	b.n	800bb16 <_dtoa_r+0x3a6>
 800bc4a:	9c03      	ldr	r4, [sp, #12]
 800bc4c:	46b8      	mov	r8, r7
 800bc4e:	e784      	b.n	800bb5a <_dtoa_r+0x3ea>
 800bc50:	4b27      	ldr	r3, [pc, #156]	@ (800bcf0 <_dtoa_r+0x580>)
 800bc52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc5c:	4454      	add	r4, sl
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	d054      	beq.n	800bd0c <_dtoa_r+0x59c>
 800bc62:	4929      	ldr	r1, [pc, #164]	@ (800bd08 <_dtoa_r+0x598>)
 800bc64:	2000      	movs	r0, #0
 800bc66:	f7f4 fe29 	bl	80008bc <__aeabi_ddiv>
 800bc6a:	4633      	mov	r3, r6
 800bc6c:	462a      	mov	r2, r5
 800bc6e:	f7f4 fb43 	bl	80002f8 <__aeabi_dsub>
 800bc72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc76:	4656      	mov	r6, sl
 800bc78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7c:	f7f4 ffa4 	bl	8000bc8 <__aeabi_d2iz>
 800bc80:	4605      	mov	r5, r0
 800bc82:	f7f4 fc87 	bl	8000594 <__aeabi_i2d>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc8e:	f7f4 fb33 	bl	80002f8 <__aeabi_dsub>
 800bc92:	3530      	adds	r5, #48	@ 0x30
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc9c:	f806 5b01 	strb.w	r5, [r6], #1
 800bca0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bca4:	f7f4 ff52 	bl	8000b4c <__aeabi_dcmplt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d172      	bne.n	800bd92 <_dtoa_r+0x622>
 800bcac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb0:	4911      	ldr	r1, [pc, #68]	@ (800bcf8 <_dtoa_r+0x588>)
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	f7f4 fb20 	bl	80002f8 <__aeabi_dsub>
 800bcb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bcbc:	f7f4 ff46 	bl	8000b4c <__aeabi_dcmplt>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	f040 80b4 	bne.w	800be2e <_dtoa_r+0x6be>
 800bcc6:	42a6      	cmp	r6, r4
 800bcc8:	f43f af70 	beq.w	800bbac <_dtoa_r+0x43c>
 800bccc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bcfc <_dtoa_r+0x58c>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f7f4 fcc8 	bl	8000668 <__aeabi_dmul>
 800bcd8:	4b08      	ldr	r3, [pc, #32]	@ (800bcfc <_dtoa_r+0x58c>)
 800bcda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bcde:	2200      	movs	r2, #0
 800bce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bce4:	f7f4 fcc0 	bl	8000668 <__aeabi_dmul>
 800bce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcec:	e7c4      	b.n	800bc78 <_dtoa_r+0x508>
 800bcee:	bf00      	nop
 800bcf0:	0800e188 	.word	0x0800e188
 800bcf4:	0800e160 	.word	0x0800e160
 800bcf8:	3ff00000 	.word	0x3ff00000
 800bcfc:	40240000 	.word	0x40240000
 800bd00:	401c0000 	.word	0x401c0000
 800bd04:	40140000 	.word	0x40140000
 800bd08:	3fe00000 	.word	0x3fe00000
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7f4 fcaa 	bl	8000668 <__aeabi_dmul>
 800bd14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd18:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bd1a:	4656      	mov	r6, sl
 800bd1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd20:	f7f4 ff52 	bl	8000bc8 <__aeabi_d2iz>
 800bd24:	4605      	mov	r5, r0
 800bd26:	f7f4 fc35 	bl	8000594 <__aeabi_i2d>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd32:	f7f4 fae1 	bl	80002f8 <__aeabi_dsub>
 800bd36:	3530      	adds	r5, #48	@ 0x30
 800bd38:	f806 5b01 	strb.w	r5, [r6], #1
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	42a6      	cmp	r6, r4
 800bd42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd46:	f04f 0200 	mov.w	r2, #0
 800bd4a:	d124      	bne.n	800bd96 <_dtoa_r+0x626>
 800bd4c:	4baf      	ldr	r3, [pc, #700]	@ (800c00c <_dtoa_r+0x89c>)
 800bd4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd52:	f7f4 fad3 	bl	80002fc <__adddf3>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd5e:	f7f4 ff13 	bl	8000b88 <__aeabi_dcmpgt>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d163      	bne.n	800be2e <_dtoa_r+0x6be>
 800bd66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd6a:	49a8      	ldr	r1, [pc, #672]	@ (800c00c <_dtoa_r+0x89c>)
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	f7f4 fac3 	bl	80002f8 <__aeabi_dsub>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd7a:	f7f4 fee7 	bl	8000b4c <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f43f af14 	beq.w	800bbac <_dtoa_r+0x43c>
 800bd84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd86:	1e73      	subs	r3, r6, #1
 800bd88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd8e:	2b30      	cmp	r3, #48	@ 0x30
 800bd90:	d0f8      	beq.n	800bd84 <_dtoa_r+0x614>
 800bd92:	4647      	mov	r7, r8
 800bd94:	e03b      	b.n	800be0e <_dtoa_r+0x69e>
 800bd96:	4b9e      	ldr	r3, [pc, #632]	@ (800c010 <_dtoa_r+0x8a0>)
 800bd98:	f7f4 fc66 	bl	8000668 <__aeabi_dmul>
 800bd9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bda0:	e7bc      	b.n	800bd1c <_dtoa_r+0x5ac>
 800bda2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bda6:	4656      	mov	r6, sl
 800bda8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdac:	4620      	mov	r0, r4
 800bdae:	4629      	mov	r1, r5
 800bdb0:	f7f4 fd84 	bl	80008bc <__aeabi_ddiv>
 800bdb4:	f7f4 ff08 	bl	8000bc8 <__aeabi_d2iz>
 800bdb8:	4680      	mov	r8, r0
 800bdba:	f7f4 fbeb 	bl	8000594 <__aeabi_i2d>
 800bdbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc2:	f7f4 fc51 	bl	8000668 <__aeabi_dmul>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bdd2:	f7f4 fa91 	bl	80002f8 <__aeabi_dsub>
 800bdd6:	f806 4b01 	strb.w	r4, [r6], #1
 800bdda:	9d03      	ldr	r5, [sp, #12]
 800bddc:	eba6 040a 	sub.w	r4, r6, sl
 800bde0:	42a5      	cmp	r5, r4
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	d133      	bne.n	800be50 <_dtoa_r+0x6e0>
 800bde8:	f7f4 fa88 	bl	80002fc <__adddf3>
 800bdec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	f7f4 fec8 	bl	8000b88 <__aeabi_dcmpgt>
 800bdf8:	b9c0      	cbnz	r0, 800be2c <_dtoa_r+0x6bc>
 800bdfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fe99 	bl	8000b38 <__aeabi_dcmpeq>
 800be06:	b110      	cbz	r0, 800be0e <_dtoa_r+0x69e>
 800be08:	f018 0f01 	tst.w	r8, #1
 800be0c:	d10e      	bne.n	800be2c <_dtoa_r+0x6bc>
 800be0e:	9902      	ldr	r1, [sp, #8]
 800be10:	4648      	mov	r0, r9
 800be12:	f000 fbbd 	bl	800c590 <_Bfree>
 800be16:	2300      	movs	r3, #0
 800be18:	7033      	strb	r3, [r6, #0]
 800be1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be1c:	3701      	adds	r7, #1
 800be1e:	601f      	str	r7, [r3, #0]
 800be20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 824b 	beq.w	800c2be <_dtoa_r+0xb4e>
 800be28:	601e      	str	r6, [r3, #0]
 800be2a:	e248      	b.n	800c2be <_dtoa_r+0xb4e>
 800be2c:	46b8      	mov	r8, r7
 800be2e:	4633      	mov	r3, r6
 800be30:	461e      	mov	r6, r3
 800be32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be36:	2a39      	cmp	r2, #57	@ 0x39
 800be38:	d106      	bne.n	800be48 <_dtoa_r+0x6d8>
 800be3a:	459a      	cmp	sl, r3
 800be3c:	d1f8      	bne.n	800be30 <_dtoa_r+0x6c0>
 800be3e:	2230      	movs	r2, #48	@ 0x30
 800be40:	f108 0801 	add.w	r8, r8, #1
 800be44:	f88a 2000 	strb.w	r2, [sl]
 800be48:	781a      	ldrb	r2, [r3, #0]
 800be4a:	3201      	adds	r2, #1
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	e7a0      	b.n	800bd92 <_dtoa_r+0x622>
 800be50:	4b6f      	ldr	r3, [pc, #444]	@ (800c010 <_dtoa_r+0x8a0>)
 800be52:	2200      	movs	r2, #0
 800be54:	f7f4 fc08 	bl	8000668 <__aeabi_dmul>
 800be58:	2200      	movs	r2, #0
 800be5a:	2300      	movs	r3, #0
 800be5c:	4604      	mov	r4, r0
 800be5e:	460d      	mov	r5, r1
 800be60:	f7f4 fe6a 	bl	8000b38 <__aeabi_dcmpeq>
 800be64:	2800      	cmp	r0, #0
 800be66:	d09f      	beq.n	800bda8 <_dtoa_r+0x638>
 800be68:	e7d1      	b.n	800be0e <_dtoa_r+0x69e>
 800be6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	f000 80ea 	beq.w	800c046 <_dtoa_r+0x8d6>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	2a01      	cmp	r2, #1
 800be76:	f300 80cd 	bgt.w	800c014 <_dtoa_r+0x8a4>
 800be7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	f000 80c1 	beq.w	800c004 <_dtoa_r+0x894>
 800be82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be86:	9c08      	ldr	r4, [sp, #32]
 800be88:	9e00      	ldr	r6, [sp, #0]
 800be8a:	9a00      	ldr	r2, [sp, #0]
 800be8c:	441a      	add	r2, r3
 800be8e:	9200      	str	r2, [sp, #0]
 800be90:	9a06      	ldr	r2, [sp, #24]
 800be92:	2101      	movs	r1, #1
 800be94:	441a      	add	r2, r3
 800be96:	4648      	mov	r0, r9
 800be98:	9206      	str	r2, [sp, #24]
 800be9a:	f000 fc2d 	bl	800c6f8 <__i2b>
 800be9e:	4605      	mov	r5, r0
 800bea0:	b166      	cbz	r6, 800bebc <_dtoa_r+0x74c>
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	dd09      	ble.n	800bebc <_dtoa_r+0x74c>
 800bea8:	42b3      	cmp	r3, r6
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	bfa8      	it	ge
 800beae:	4633      	movge	r3, r6
 800beb0:	1ad2      	subs	r2, r2, r3
 800beb2:	9200      	str	r2, [sp, #0]
 800beb4:	9a06      	ldr	r2, [sp, #24]
 800beb6:	1af6      	subs	r6, r6, r3
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	9306      	str	r3, [sp, #24]
 800bebc:	9b08      	ldr	r3, [sp, #32]
 800bebe:	b30b      	cbz	r3, 800bf04 <_dtoa_r+0x794>
 800bec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80c6 	beq.w	800c054 <_dtoa_r+0x8e4>
 800bec8:	2c00      	cmp	r4, #0
 800beca:	f000 80c0 	beq.w	800c04e <_dtoa_r+0x8de>
 800bece:	4629      	mov	r1, r5
 800bed0:	4622      	mov	r2, r4
 800bed2:	4648      	mov	r0, r9
 800bed4:	f000 fcc8 	bl	800c868 <__pow5mult>
 800bed8:	9a02      	ldr	r2, [sp, #8]
 800beda:	4601      	mov	r1, r0
 800bedc:	4605      	mov	r5, r0
 800bede:	4648      	mov	r0, r9
 800bee0:	f000 fc20 	bl	800c724 <__multiply>
 800bee4:	9902      	ldr	r1, [sp, #8]
 800bee6:	4680      	mov	r8, r0
 800bee8:	4648      	mov	r0, r9
 800beea:	f000 fb51 	bl	800c590 <_Bfree>
 800beee:	9b08      	ldr	r3, [sp, #32]
 800bef0:	1b1b      	subs	r3, r3, r4
 800bef2:	9308      	str	r3, [sp, #32]
 800bef4:	f000 80b1 	beq.w	800c05a <_dtoa_r+0x8ea>
 800bef8:	9a08      	ldr	r2, [sp, #32]
 800befa:	4641      	mov	r1, r8
 800befc:	4648      	mov	r0, r9
 800befe:	f000 fcb3 	bl	800c868 <__pow5mult>
 800bf02:	9002      	str	r0, [sp, #8]
 800bf04:	2101      	movs	r1, #1
 800bf06:	4648      	mov	r0, r9
 800bf08:	f000 fbf6 	bl	800c6f8 <__i2b>
 800bf0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf0e:	4604      	mov	r4, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f000 81d8 	beq.w	800c2c6 <_dtoa_r+0xb56>
 800bf16:	461a      	mov	r2, r3
 800bf18:	4601      	mov	r1, r0
 800bf1a:	4648      	mov	r0, r9
 800bf1c:	f000 fca4 	bl	800c868 <__pow5mult>
 800bf20:	9b07      	ldr	r3, [sp, #28]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	4604      	mov	r4, r0
 800bf26:	f300 809f 	bgt.w	800c068 <_dtoa_r+0x8f8>
 800bf2a:	9b04      	ldr	r3, [sp, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f040 8097 	bne.w	800c060 <_dtoa_r+0x8f0>
 800bf32:	9b05      	ldr	r3, [sp, #20]
 800bf34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f040 8093 	bne.w	800c064 <_dtoa_r+0x8f4>
 800bf3e:	9b05      	ldr	r3, [sp, #20]
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	0d1b      	lsrs	r3, r3, #20
 800bf46:	051b      	lsls	r3, r3, #20
 800bf48:	b133      	cbz	r3, 800bf58 <_dtoa_r+0x7e8>
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	9b06      	ldr	r3, [sp, #24]
 800bf52:	3301      	adds	r3, #1
 800bf54:	9306      	str	r3, [sp, #24]
 800bf56:	2301      	movs	r3, #1
 800bf58:	9308      	str	r3, [sp, #32]
 800bf5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 81b8 	beq.w	800c2d2 <_dtoa_r+0xb62>
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf68:	6918      	ldr	r0, [r3, #16]
 800bf6a:	f000 fb79 	bl	800c660 <__hi0bits>
 800bf6e:	f1c0 0020 	rsb	r0, r0, #32
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	4418      	add	r0, r3
 800bf76:	f010 001f 	ands.w	r0, r0, #31
 800bf7a:	f000 8082 	beq.w	800c082 <_dtoa_r+0x912>
 800bf7e:	f1c0 0320 	rsb	r3, r0, #32
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	dd73      	ble.n	800c06e <_dtoa_r+0x8fe>
 800bf86:	9b00      	ldr	r3, [sp, #0]
 800bf88:	f1c0 001c 	rsb	r0, r0, #28
 800bf8c:	4403      	add	r3, r0
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	9b06      	ldr	r3, [sp, #24]
 800bf92:	4403      	add	r3, r0
 800bf94:	4406      	add	r6, r0
 800bf96:	9306      	str	r3, [sp, #24]
 800bf98:	9b00      	ldr	r3, [sp, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	dd05      	ble.n	800bfaa <_dtoa_r+0x83a>
 800bf9e:	9902      	ldr	r1, [sp, #8]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4648      	mov	r0, r9
 800bfa4:	f000 fcba 	bl	800c91c <__lshift>
 800bfa8:	9002      	str	r0, [sp, #8]
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dd05      	ble.n	800bfbc <_dtoa_r+0x84c>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	4648      	mov	r0, r9
 800bfb6:	f000 fcb1 	bl	800c91c <__lshift>
 800bfba:	4604      	mov	r4, r0
 800bfbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d061      	beq.n	800c086 <_dtoa_r+0x916>
 800bfc2:	9802      	ldr	r0, [sp, #8]
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	f000 fd15 	bl	800c9f4 <__mcmp>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	da5b      	bge.n	800c086 <_dtoa_r+0x916>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9902      	ldr	r1, [sp, #8]
 800bfd2:	220a      	movs	r2, #10
 800bfd4:	4648      	mov	r0, r9
 800bfd6:	f000 fafd 	bl	800c5d4 <__multadd>
 800bfda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	f107 38ff 	add.w	r8, r7, #4294967295
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 8177 	beq.w	800c2d6 <_dtoa_r+0xb66>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	2300      	movs	r3, #0
 800bfec:	220a      	movs	r2, #10
 800bfee:	4648      	mov	r0, r9
 800bff0:	f000 faf0 	bl	800c5d4 <__multadd>
 800bff4:	f1bb 0f00 	cmp.w	fp, #0
 800bff8:	4605      	mov	r5, r0
 800bffa:	dc6f      	bgt.n	800c0dc <_dtoa_r+0x96c>
 800bffc:	9b07      	ldr	r3, [sp, #28]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	dc49      	bgt.n	800c096 <_dtoa_r+0x926>
 800c002:	e06b      	b.n	800c0dc <_dtoa_r+0x96c>
 800c004:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c006:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c00a:	e73c      	b.n	800be86 <_dtoa_r+0x716>
 800c00c:	3fe00000 	.word	0x3fe00000
 800c010:	40240000 	.word	0x40240000
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	1e5c      	subs	r4, r3, #1
 800c018:	9b08      	ldr	r3, [sp, #32]
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	db09      	blt.n	800c032 <_dtoa_r+0x8c2>
 800c01e:	1b1c      	subs	r4, r3, r4
 800c020:	9b03      	ldr	r3, [sp, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f6bf af30 	bge.w	800be88 <_dtoa_r+0x718>
 800c028:	9b00      	ldr	r3, [sp, #0]
 800c02a:	9a03      	ldr	r2, [sp, #12]
 800c02c:	1a9e      	subs	r6, r3, r2
 800c02e:	2300      	movs	r3, #0
 800c030:	e72b      	b.n	800be8a <_dtoa_r+0x71a>
 800c032:	9b08      	ldr	r3, [sp, #32]
 800c034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c036:	9408      	str	r4, [sp, #32]
 800c038:	1ae3      	subs	r3, r4, r3
 800c03a:	441a      	add	r2, r3
 800c03c:	9e00      	ldr	r6, [sp, #0]
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	920d      	str	r2, [sp, #52]	@ 0x34
 800c042:	2400      	movs	r4, #0
 800c044:	e721      	b.n	800be8a <_dtoa_r+0x71a>
 800c046:	9c08      	ldr	r4, [sp, #32]
 800c048:	9e00      	ldr	r6, [sp, #0]
 800c04a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c04c:	e728      	b.n	800bea0 <_dtoa_r+0x730>
 800c04e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c052:	e751      	b.n	800bef8 <_dtoa_r+0x788>
 800c054:	9a08      	ldr	r2, [sp, #32]
 800c056:	9902      	ldr	r1, [sp, #8]
 800c058:	e750      	b.n	800befc <_dtoa_r+0x78c>
 800c05a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c05e:	e751      	b.n	800bf04 <_dtoa_r+0x794>
 800c060:	2300      	movs	r3, #0
 800c062:	e779      	b.n	800bf58 <_dtoa_r+0x7e8>
 800c064:	9b04      	ldr	r3, [sp, #16]
 800c066:	e777      	b.n	800bf58 <_dtoa_r+0x7e8>
 800c068:	2300      	movs	r3, #0
 800c06a:	9308      	str	r3, [sp, #32]
 800c06c:	e779      	b.n	800bf62 <_dtoa_r+0x7f2>
 800c06e:	d093      	beq.n	800bf98 <_dtoa_r+0x828>
 800c070:	9a00      	ldr	r2, [sp, #0]
 800c072:	331c      	adds	r3, #28
 800c074:	441a      	add	r2, r3
 800c076:	9200      	str	r2, [sp, #0]
 800c078:	9a06      	ldr	r2, [sp, #24]
 800c07a:	441a      	add	r2, r3
 800c07c:	441e      	add	r6, r3
 800c07e:	9206      	str	r2, [sp, #24]
 800c080:	e78a      	b.n	800bf98 <_dtoa_r+0x828>
 800c082:	4603      	mov	r3, r0
 800c084:	e7f4      	b.n	800c070 <_dtoa_r+0x900>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	46b8      	mov	r8, r7
 800c08c:	dc20      	bgt.n	800c0d0 <_dtoa_r+0x960>
 800c08e:	469b      	mov	fp, r3
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	2b02      	cmp	r3, #2
 800c094:	dd1e      	ble.n	800c0d4 <_dtoa_r+0x964>
 800c096:	f1bb 0f00 	cmp.w	fp, #0
 800c09a:	f47f adb1 	bne.w	800bc00 <_dtoa_r+0x490>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	465b      	mov	r3, fp
 800c0a2:	2205      	movs	r2, #5
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	f000 fa95 	bl	800c5d4 <__multadd>
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	9802      	ldr	r0, [sp, #8]
 800c0b0:	f000 fca0 	bl	800c9f4 <__mcmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	f77f ada3 	ble.w	800bc00 <_dtoa_r+0x490>
 800c0ba:	4656      	mov	r6, sl
 800c0bc:	2331      	movs	r3, #49	@ 0x31
 800c0be:	f806 3b01 	strb.w	r3, [r6], #1
 800c0c2:	f108 0801 	add.w	r8, r8, #1
 800c0c6:	e59f      	b.n	800bc08 <_dtoa_r+0x498>
 800c0c8:	9c03      	ldr	r4, [sp, #12]
 800c0ca:	46b8      	mov	r8, r7
 800c0cc:	4625      	mov	r5, r4
 800c0ce:	e7f4      	b.n	800c0ba <_dtoa_r+0x94a>
 800c0d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8101 	beq.w	800c2de <_dtoa_r+0xb6e>
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	dd05      	ble.n	800c0ec <_dtoa_r+0x97c>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4632      	mov	r2, r6
 800c0e4:	4648      	mov	r0, r9
 800c0e6:	f000 fc19 	bl	800c91c <__lshift>
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d05c      	beq.n	800c1ac <_dtoa_r+0xa3c>
 800c0f2:	6869      	ldr	r1, [r5, #4]
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f000 fa0b 	bl	800c510 <_Balloc>
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	b928      	cbnz	r0, 800c10a <_dtoa_r+0x99a>
 800c0fe:	4b82      	ldr	r3, [pc, #520]	@ (800c308 <_dtoa_r+0xb98>)
 800c100:	4602      	mov	r2, r0
 800c102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c106:	f7ff bb4a 	b.w	800b79e <_dtoa_r+0x2e>
 800c10a:	692a      	ldr	r2, [r5, #16]
 800c10c:	3202      	adds	r2, #2
 800c10e:	0092      	lsls	r2, r2, #2
 800c110:	f105 010c 	add.w	r1, r5, #12
 800c114:	300c      	adds	r0, #12
 800c116:	f001 f969 	bl	800d3ec <memcpy>
 800c11a:	2201      	movs	r2, #1
 800c11c:	4631      	mov	r1, r6
 800c11e:	4648      	mov	r0, r9
 800c120:	f000 fbfc 	bl	800c91c <__lshift>
 800c124:	f10a 0301 	add.w	r3, sl, #1
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	eb0a 030b 	add.w	r3, sl, fp
 800c12e:	9308      	str	r3, [sp, #32]
 800c130:	9b04      	ldr	r3, [sp, #16]
 800c132:	f003 0301 	and.w	r3, r3, #1
 800c136:	462f      	mov	r7, r5
 800c138:	9306      	str	r3, [sp, #24]
 800c13a:	4605      	mov	r5, r0
 800c13c:	9b00      	ldr	r3, [sp, #0]
 800c13e:	9802      	ldr	r0, [sp, #8]
 800c140:	4621      	mov	r1, r4
 800c142:	f103 3bff 	add.w	fp, r3, #4294967295
 800c146:	f7ff fa8a 	bl	800b65e <quorem>
 800c14a:	4603      	mov	r3, r0
 800c14c:	3330      	adds	r3, #48	@ 0x30
 800c14e:	9003      	str	r0, [sp, #12]
 800c150:	4639      	mov	r1, r7
 800c152:	9802      	ldr	r0, [sp, #8]
 800c154:	9309      	str	r3, [sp, #36]	@ 0x24
 800c156:	f000 fc4d 	bl	800c9f4 <__mcmp>
 800c15a:	462a      	mov	r2, r5
 800c15c:	9004      	str	r0, [sp, #16]
 800c15e:	4621      	mov	r1, r4
 800c160:	4648      	mov	r0, r9
 800c162:	f000 fc63 	bl	800ca2c <__mdiff>
 800c166:	68c2      	ldr	r2, [r0, #12]
 800c168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c16a:	4606      	mov	r6, r0
 800c16c:	bb02      	cbnz	r2, 800c1b0 <_dtoa_r+0xa40>
 800c16e:	4601      	mov	r1, r0
 800c170:	9802      	ldr	r0, [sp, #8]
 800c172:	f000 fc3f 	bl	800c9f4 <__mcmp>
 800c176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c178:	4602      	mov	r2, r0
 800c17a:	4631      	mov	r1, r6
 800c17c:	4648      	mov	r0, r9
 800c17e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c180:	9309      	str	r3, [sp, #36]	@ 0x24
 800c182:	f000 fa05 	bl	800c590 <_Bfree>
 800c186:	9b07      	ldr	r3, [sp, #28]
 800c188:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c18a:	9e00      	ldr	r6, [sp, #0]
 800c18c:	ea42 0103 	orr.w	r1, r2, r3
 800c190:	9b06      	ldr	r3, [sp, #24]
 800c192:	4319      	orrs	r1, r3
 800c194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c196:	d10d      	bne.n	800c1b4 <_dtoa_r+0xa44>
 800c198:	2b39      	cmp	r3, #57	@ 0x39
 800c19a:	d027      	beq.n	800c1ec <_dtoa_r+0xa7c>
 800c19c:	9a04      	ldr	r2, [sp, #16]
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	dd01      	ble.n	800c1a6 <_dtoa_r+0xa36>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3331      	adds	r3, #49	@ 0x31
 800c1a6:	f88b 3000 	strb.w	r3, [fp]
 800c1aa:	e52e      	b.n	800bc0a <_dtoa_r+0x49a>
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e7b9      	b.n	800c124 <_dtoa_r+0x9b4>
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	e7e2      	b.n	800c17a <_dtoa_r+0xa0a>
 800c1b4:	9904      	ldr	r1, [sp, #16]
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	db04      	blt.n	800c1c4 <_dtoa_r+0xa54>
 800c1ba:	9807      	ldr	r0, [sp, #28]
 800c1bc:	4301      	orrs	r1, r0
 800c1be:	9806      	ldr	r0, [sp, #24]
 800c1c0:	4301      	orrs	r1, r0
 800c1c2:	d120      	bne.n	800c206 <_dtoa_r+0xa96>
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	ddee      	ble.n	800c1a6 <_dtoa_r+0xa36>
 800c1c8:	9902      	ldr	r1, [sp, #8]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	4648      	mov	r0, r9
 800c1d0:	f000 fba4 	bl	800c91c <__lshift>
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	9002      	str	r0, [sp, #8]
 800c1d8:	f000 fc0c 	bl	800c9f4 <__mcmp>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	dc02      	bgt.n	800c1e8 <_dtoa_r+0xa78>
 800c1e2:	d1e0      	bne.n	800c1a6 <_dtoa_r+0xa36>
 800c1e4:	07da      	lsls	r2, r3, #31
 800c1e6:	d5de      	bpl.n	800c1a6 <_dtoa_r+0xa36>
 800c1e8:	2b39      	cmp	r3, #57	@ 0x39
 800c1ea:	d1da      	bne.n	800c1a2 <_dtoa_r+0xa32>
 800c1ec:	2339      	movs	r3, #57	@ 0x39
 800c1ee:	f88b 3000 	strb.w	r3, [fp]
 800c1f2:	4633      	mov	r3, r6
 800c1f4:	461e      	mov	r6, r3
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1fc:	2a39      	cmp	r2, #57	@ 0x39
 800c1fe:	d04e      	beq.n	800c29e <_dtoa_r+0xb2e>
 800c200:	3201      	adds	r2, #1
 800c202:	701a      	strb	r2, [r3, #0]
 800c204:	e501      	b.n	800bc0a <_dtoa_r+0x49a>
 800c206:	2a00      	cmp	r2, #0
 800c208:	dd03      	ble.n	800c212 <_dtoa_r+0xaa2>
 800c20a:	2b39      	cmp	r3, #57	@ 0x39
 800c20c:	d0ee      	beq.n	800c1ec <_dtoa_r+0xa7c>
 800c20e:	3301      	adds	r3, #1
 800c210:	e7c9      	b.n	800c1a6 <_dtoa_r+0xa36>
 800c212:	9a00      	ldr	r2, [sp, #0]
 800c214:	9908      	ldr	r1, [sp, #32]
 800c216:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c21a:	428a      	cmp	r2, r1
 800c21c:	d028      	beq.n	800c270 <_dtoa_r+0xb00>
 800c21e:	9902      	ldr	r1, [sp, #8]
 800c220:	2300      	movs	r3, #0
 800c222:	220a      	movs	r2, #10
 800c224:	4648      	mov	r0, r9
 800c226:	f000 f9d5 	bl	800c5d4 <__multadd>
 800c22a:	42af      	cmp	r7, r5
 800c22c:	9002      	str	r0, [sp, #8]
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	f04f 020a 	mov.w	r2, #10
 800c236:	4639      	mov	r1, r7
 800c238:	4648      	mov	r0, r9
 800c23a:	d107      	bne.n	800c24c <_dtoa_r+0xadc>
 800c23c:	f000 f9ca 	bl	800c5d4 <__multadd>
 800c240:	4607      	mov	r7, r0
 800c242:	4605      	mov	r5, r0
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	3301      	adds	r3, #1
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	e777      	b.n	800c13c <_dtoa_r+0x9cc>
 800c24c:	f000 f9c2 	bl	800c5d4 <__multadd>
 800c250:	4629      	mov	r1, r5
 800c252:	4607      	mov	r7, r0
 800c254:	2300      	movs	r3, #0
 800c256:	220a      	movs	r2, #10
 800c258:	4648      	mov	r0, r9
 800c25a:	f000 f9bb 	bl	800c5d4 <__multadd>
 800c25e:	4605      	mov	r5, r0
 800c260:	e7f0      	b.n	800c244 <_dtoa_r+0xad4>
 800c262:	f1bb 0f00 	cmp.w	fp, #0
 800c266:	bfcc      	ite	gt
 800c268:	465e      	movgt	r6, fp
 800c26a:	2601      	movle	r6, #1
 800c26c:	4456      	add	r6, sl
 800c26e:	2700      	movs	r7, #0
 800c270:	9902      	ldr	r1, [sp, #8]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	2201      	movs	r2, #1
 800c276:	4648      	mov	r0, r9
 800c278:	f000 fb50 	bl	800c91c <__lshift>
 800c27c:	4621      	mov	r1, r4
 800c27e:	9002      	str	r0, [sp, #8]
 800c280:	f000 fbb8 	bl	800c9f4 <__mcmp>
 800c284:	2800      	cmp	r0, #0
 800c286:	dcb4      	bgt.n	800c1f2 <_dtoa_r+0xa82>
 800c288:	d102      	bne.n	800c290 <_dtoa_r+0xb20>
 800c28a:	9b00      	ldr	r3, [sp, #0]
 800c28c:	07db      	lsls	r3, r3, #31
 800c28e:	d4b0      	bmi.n	800c1f2 <_dtoa_r+0xa82>
 800c290:	4633      	mov	r3, r6
 800c292:	461e      	mov	r6, r3
 800c294:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c298:	2a30      	cmp	r2, #48	@ 0x30
 800c29a:	d0fa      	beq.n	800c292 <_dtoa_r+0xb22>
 800c29c:	e4b5      	b.n	800bc0a <_dtoa_r+0x49a>
 800c29e:	459a      	cmp	sl, r3
 800c2a0:	d1a8      	bne.n	800c1f4 <_dtoa_r+0xa84>
 800c2a2:	2331      	movs	r3, #49	@ 0x31
 800c2a4:	f108 0801 	add.w	r8, r8, #1
 800c2a8:	f88a 3000 	strb.w	r3, [sl]
 800c2ac:	e4ad      	b.n	800bc0a <_dtoa_r+0x49a>
 800c2ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c30c <_dtoa_r+0xb9c>
 800c2b4:	b11b      	cbz	r3, 800c2be <_dtoa_r+0xb4e>
 800c2b6:	f10a 0308 	add.w	r3, sl, #8
 800c2ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c2bc:	6013      	str	r3, [r2, #0]
 800c2be:	4650      	mov	r0, sl
 800c2c0:	b017      	add	sp, #92	@ 0x5c
 800c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	f77f ae2e 	ble.w	800bf2a <_dtoa_r+0x7ba>
 800c2ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2d0:	9308      	str	r3, [sp, #32]
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	e64d      	b.n	800bf72 <_dtoa_r+0x802>
 800c2d6:	f1bb 0f00 	cmp.w	fp, #0
 800c2da:	f77f aed9 	ble.w	800c090 <_dtoa_r+0x920>
 800c2de:	4656      	mov	r6, sl
 800c2e0:	9802      	ldr	r0, [sp, #8]
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	f7ff f9bb 	bl	800b65e <quorem>
 800c2e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c2ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c2f0:	eba6 020a 	sub.w	r2, r6, sl
 800c2f4:	4593      	cmp	fp, r2
 800c2f6:	ddb4      	ble.n	800c262 <_dtoa_r+0xaf2>
 800c2f8:	9902      	ldr	r1, [sp, #8]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4648      	mov	r0, r9
 800c300:	f000 f968 	bl	800c5d4 <__multadd>
 800c304:	9002      	str	r0, [sp, #8]
 800c306:	e7eb      	b.n	800c2e0 <_dtoa_r+0xb70>
 800c308:	0800e090 	.word	0x0800e090
 800c30c:	0800e014 	.word	0x0800e014

0800c310 <_free_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	2900      	cmp	r1, #0
 800c316:	d041      	beq.n	800c39c <_free_r+0x8c>
 800c318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c31c:	1f0c      	subs	r4, r1, #4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfb8      	it	lt
 800c322:	18e4      	addlt	r4, r4, r3
 800c324:	f000 f8e8 	bl	800c4f8 <__malloc_lock>
 800c328:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a0 <_free_r+0x90>)
 800c32a:	6813      	ldr	r3, [r2, #0]
 800c32c:	b933      	cbnz	r3, 800c33c <_free_r+0x2c>
 800c32e:	6063      	str	r3, [r4, #4]
 800c330:	6014      	str	r4, [r2, #0]
 800c332:	4628      	mov	r0, r5
 800c334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c338:	f000 b8e4 	b.w	800c504 <__malloc_unlock>
 800c33c:	42a3      	cmp	r3, r4
 800c33e:	d908      	bls.n	800c352 <_free_r+0x42>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	1821      	adds	r1, r4, r0
 800c344:	428b      	cmp	r3, r1
 800c346:	bf01      	itttt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	1809      	addeq	r1, r1, r0
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	e7ed      	b.n	800c32e <_free_r+0x1e>
 800c352:	461a      	mov	r2, r3
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	b10b      	cbz	r3, 800c35c <_free_r+0x4c>
 800c358:	42a3      	cmp	r3, r4
 800c35a:	d9fa      	bls.n	800c352 <_free_r+0x42>
 800c35c:	6811      	ldr	r1, [r2, #0]
 800c35e:	1850      	adds	r0, r2, r1
 800c360:	42a0      	cmp	r0, r4
 800c362:	d10b      	bne.n	800c37c <_free_r+0x6c>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	4401      	add	r1, r0
 800c368:	1850      	adds	r0, r2, r1
 800c36a:	4283      	cmp	r3, r0
 800c36c:	6011      	str	r1, [r2, #0]
 800c36e:	d1e0      	bne.n	800c332 <_free_r+0x22>
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	6053      	str	r3, [r2, #4]
 800c376:	4408      	add	r0, r1
 800c378:	6010      	str	r0, [r2, #0]
 800c37a:	e7da      	b.n	800c332 <_free_r+0x22>
 800c37c:	d902      	bls.n	800c384 <_free_r+0x74>
 800c37e:	230c      	movs	r3, #12
 800c380:	602b      	str	r3, [r5, #0]
 800c382:	e7d6      	b.n	800c332 <_free_r+0x22>
 800c384:	6820      	ldr	r0, [r4, #0]
 800c386:	1821      	adds	r1, r4, r0
 800c388:	428b      	cmp	r3, r1
 800c38a:	bf04      	itt	eq
 800c38c:	6819      	ldreq	r1, [r3, #0]
 800c38e:	685b      	ldreq	r3, [r3, #4]
 800c390:	6063      	str	r3, [r4, #4]
 800c392:	bf04      	itt	eq
 800c394:	1809      	addeq	r1, r1, r0
 800c396:	6021      	streq	r1, [r4, #0]
 800c398:	6054      	str	r4, [r2, #4]
 800c39a:	e7ca      	b.n	800c332 <_free_r+0x22>
 800c39c:	bd38      	pop	{r3, r4, r5, pc}
 800c39e:	bf00      	nop
 800c3a0:	200028a8 	.word	0x200028a8

0800c3a4 <malloc>:
 800c3a4:	4b02      	ldr	r3, [pc, #8]	@ (800c3b0 <malloc+0xc>)
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f000 b825 	b.w	800c3f8 <_malloc_r>
 800c3ae:	bf00      	nop
 800c3b0:	20000030 	.word	0x20000030

0800c3b4 <sbrk_aligned>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c3f4 <sbrk_aligned+0x40>)
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	6831      	ldr	r1, [r6, #0]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	b911      	cbnz	r1, 800c3c6 <sbrk_aligned+0x12>
 800c3c0:	f001 f804 	bl	800d3cc <_sbrk_r>
 800c3c4:	6030      	str	r0, [r6, #0]
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f000 ffff 	bl	800d3cc <_sbrk_r>
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	d103      	bne.n	800c3da <sbrk_aligned+0x26>
 800c3d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	1cc4      	adds	r4, r0, #3
 800c3dc:	f024 0403 	bic.w	r4, r4, #3
 800c3e0:	42a0      	cmp	r0, r4
 800c3e2:	d0f8      	beq.n	800c3d6 <sbrk_aligned+0x22>
 800c3e4:	1a21      	subs	r1, r4, r0
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 fff0 	bl	800d3cc <_sbrk_r>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	d1f2      	bne.n	800c3d6 <sbrk_aligned+0x22>
 800c3f0:	e7ef      	b.n	800c3d2 <sbrk_aligned+0x1e>
 800c3f2:	bf00      	nop
 800c3f4:	200028a4 	.word	0x200028a4

0800c3f8 <_malloc_r>:
 800c3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3fc:	1ccd      	adds	r5, r1, #3
 800c3fe:	f025 0503 	bic.w	r5, r5, #3
 800c402:	3508      	adds	r5, #8
 800c404:	2d0c      	cmp	r5, #12
 800c406:	bf38      	it	cc
 800c408:	250c      	movcc	r5, #12
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	4606      	mov	r6, r0
 800c40e:	db01      	blt.n	800c414 <_malloc_r+0x1c>
 800c410:	42a9      	cmp	r1, r5
 800c412:	d904      	bls.n	800c41e <_malloc_r+0x26>
 800c414:	230c      	movs	r3, #12
 800c416:	6033      	str	r3, [r6, #0]
 800c418:	2000      	movs	r0, #0
 800c41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c41e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4f4 <_malloc_r+0xfc>
 800c422:	f000 f869 	bl	800c4f8 <__malloc_lock>
 800c426:	f8d8 3000 	ldr.w	r3, [r8]
 800c42a:	461c      	mov	r4, r3
 800c42c:	bb44      	cbnz	r4, 800c480 <_malloc_r+0x88>
 800c42e:	4629      	mov	r1, r5
 800c430:	4630      	mov	r0, r6
 800c432:	f7ff ffbf 	bl	800c3b4 <sbrk_aligned>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	4604      	mov	r4, r0
 800c43a:	d158      	bne.n	800c4ee <_malloc_r+0xf6>
 800c43c:	f8d8 4000 	ldr.w	r4, [r8]
 800c440:	4627      	mov	r7, r4
 800c442:	2f00      	cmp	r7, #0
 800c444:	d143      	bne.n	800c4ce <_malloc_r+0xd6>
 800c446:	2c00      	cmp	r4, #0
 800c448:	d04b      	beq.n	800c4e2 <_malloc_r+0xea>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	4639      	mov	r1, r7
 800c44e:	4630      	mov	r0, r6
 800c450:	eb04 0903 	add.w	r9, r4, r3
 800c454:	f000 ffba 	bl	800d3cc <_sbrk_r>
 800c458:	4581      	cmp	r9, r0
 800c45a:	d142      	bne.n	800c4e2 <_malloc_r+0xea>
 800c45c:	6821      	ldr	r1, [r4, #0]
 800c45e:	1a6d      	subs	r5, r5, r1
 800c460:	4629      	mov	r1, r5
 800c462:	4630      	mov	r0, r6
 800c464:	f7ff ffa6 	bl	800c3b4 <sbrk_aligned>
 800c468:	3001      	adds	r0, #1
 800c46a:	d03a      	beq.n	800c4e2 <_malloc_r+0xea>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	442b      	add	r3, r5
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	f8d8 3000 	ldr.w	r3, [r8]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	bb62      	cbnz	r2, 800c4d4 <_malloc_r+0xdc>
 800c47a:	f8c8 7000 	str.w	r7, [r8]
 800c47e:	e00f      	b.n	800c4a0 <_malloc_r+0xa8>
 800c480:	6822      	ldr	r2, [r4, #0]
 800c482:	1b52      	subs	r2, r2, r5
 800c484:	d420      	bmi.n	800c4c8 <_malloc_r+0xd0>
 800c486:	2a0b      	cmp	r2, #11
 800c488:	d917      	bls.n	800c4ba <_malloc_r+0xc2>
 800c48a:	1961      	adds	r1, r4, r5
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	6025      	str	r5, [r4, #0]
 800c490:	bf18      	it	ne
 800c492:	6059      	strne	r1, [r3, #4]
 800c494:	6863      	ldr	r3, [r4, #4]
 800c496:	bf08      	it	eq
 800c498:	f8c8 1000 	streq.w	r1, [r8]
 800c49c:	5162      	str	r2, [r4, r5]
 800c49e:	604b      	str	r3, [r1, #4]
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f000 f82f 	bl	800c504 <__malloc_unlock>
 800c4a6:	f104 000b 	add.w	r0, r4, #11
 800c4aa:	1d23      	adds	r3, r4, #4
 800c4ac:	f020 0007 	bic.w	r0, r0, #7
 800c4b0:	1ac2      	subs	r2, r0, r3
 800c4b2:	bf1c      	itt	ne
 800c4b4:	1a1b      	subne	r3, r3, r0
 800c4b6:	50a3      	strne	r3, [r4, r2]
 800c4b8:	e7af      	b.n	800c41a <_malloc_r+0x22>
 800c4ba:	6862      	ldr	r2, [r4, #4]
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	bf0c      	ite	eq
 800c4c0:	f8c8 2000 	streq.w	r2, [r8]
 800c4c4:	605a      	strne	r2, [r3, #4]
 800c4c6:	e7eb      	b.n	800c4a0 <_malloc_r+0xa8>
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	6864      	ldr	r4, [r4, #4]
 800c4cc:	e7ae      	b.n	800c42c <_malloc_r+0x34>
 800c4ce:	463c      	mov	r4, r7
 800c4d0:	687f      	ldr	r7, [r7, #4]
 800c4d2:	e7b6      	b.n	800c442 <_malloc_r+0x4a>
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	d1fb      	bne.n	800c4d4 <_malloc_r+0xdc>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6053      	str	r3, [r2, #4]
 800c4e0:	e7de      	b.n	800c4a0 <_malloc_r+0xa8>
 800c4e2:	230c      	movs	r3, #12
 800c4e4:	6033      	str	r3, [r6, #0]
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f000 f80c 	bl	800c504 <__malloc_unlock>
 800c4ec:	e794      	b.n	800c418 <_malloc_r+0x20>
 800c4ee:	6005      	str	r5, [r0, #0]
 800c4f0:	e7d6      	b.n	800c4a0 <_malloc_r+0xa8>
 800c4f2:	bf00      	nop
 800c4f4:	200028a8 	.word	0x200028a8

0800c4f8 <__malloc_lock>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	@ (800c500 <__malloc_lock+0x8>)
 800c4fa:	f7ff b8ae 	b.w	800b65a <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	200028a0 	.word	0x200028a0

0800c504 <__malloc_unlock>:
 800c504:	4801      	ldr	r0, [pc, #4]	@ (800c50c <__malloc_unlock+0x8>)
 800c506:	f7ff b8a9 	b.w	800b65c <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	200028a0 	.word	0x200028a0

0800c510 <_Balloc>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	69c6      	ldr	r6, [r0, #28]
 800c514:	4604      	mov	r4, r0
 800c516:	460d      	mov	r5, r1
 800c518:	b976      	cbnz	r6, 800c538 <_Balloc+0x28>
 800c51a:	2010      	movs	r0, #16
 800c51c:	f7ff ff42 	bl	800c3a4 <malloc>
 800c520:	4602      	mov	r2, r0
 800c522:	61e0      	str	r0, [r4, #28]
 800c524:	b920      	cbnz	r0, 800c530 <_Balloc+0x20>
 800c526:	4b18      	ldr	r3, [pc, #96]	@ (800c588 <_Balloc+0x78>)
 800c528:	4818      	ldr	r0, [pc, #96]	@ (800c58c <_Balloc+0x7c>)
 800c52a:	216b      	movs	r1, #107	@ 0x6b
 800c52c:	f000 ff6c 	bl	800d408 <__assert_func>
 800c530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c534:	6006      	str	r6, [r0, #0]
 800c536:	60c6      	str	r6, [r0, #12]
 800c538:	69e6      	ldr	r6, [r4, #28]
 800c53a:	68f3      	ldr	r3, [r6, #12]
 800c53c:	b183      	cbz	r3, 800c560 <_Balloc+0x50>
 800c53e:	69e3      	ldr	r3, [r4, #28]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c546:	b9b8      	cbnz	r0, 800c578 <_Balloc+0x68>
 800c548:	2101      	movs	r1, #1
 800c54a:	fa01 f605 	lsl.w	r6, r1, r5
 800c54e:	1d72      	adds	r2, r6, #5
 800c550:	0092      	lsls	r2, r2, #2
 800c552:	4620      	mov	r0, r4
 800c554:	f000 ff76 	bl	800d444 <_calloc_r>
 800c558:	b160      	cbz	r0, 800c574 <_Balloc+0x64>
 800c55a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c55e:	e00e      	b.n	800c57e <_Balloc+0x6e>
 800c560:	2221      	movs	r2, #33	@ 0x21
 800c562:	2104      	movs	r1, #4
 800c564:	4620      	mov	r0, r4
 800c566:	f000 ff6d 	bl	800d444 <_calloc_r>
 800c56a:	69e3      	ldr	r3, [r4, #28]
 800c56c:	60f0      	str	r0, [r6, #12]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1e4      	bne.n	800c53e <_Balloc+0x2e>
 800c574:	2000      	movs	r0, #0
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	6802      	ldr	r2, [r0, #0]
 800c57a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c57e:	2300      	movs	r3, #0
 800c580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c584:	e7f7      	b.n	800c576 <_Balloc+0x66>
 800c586:	bf00      	nop
 800c588:	0800e021 	.word	0x0800e021
 800c58c:	0800e0a1 	.word	0x0800e0a1

0800c590 <_Bfree>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	69c6      	ldr	r6, [r0, #28]
 800c594:	4605      	mov	r5, r0
 800c596:	460c      	mov	r4, r1
 800c598:	b976      	cbnz	r6, 800c5b8 <_Bfree+0x28>
 800c59a:	2010      	movs	r0, #16
 800c59c:	f7ff ff02 	bl	800c3a4 <malloc>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	61e8      	str	r0, [r5, #28]
 800c5a4:	b920      	cbnz	r0, 800c5b0 <_Bfree+0x20>
 800c5a6:	4b09      	ldr	r3, [pc, #36]	@ (800c5cc <_Bfree+0x3c>)
 800c5a8:	4809      	ldr	r0, [pc, #36]	@ (800c5d0 <_Bfree+0x40>)
 800c5aa:	218f      	movs	r1, #143	@ 0x8f
 800c5ac:	f000 ff2c 	bl	800d408 <__assert_func>
 800c5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5b4:	6006      	str	r6, [r0, #0]
 800c5b6:	60c6      	str	r6, [r0, #12]
 800c5b8:	b13c      	cbz	r4, 800c5ca <_Bfree+0x3a>
 800c5ba:	69eb      	ldr	r3, [r5, #28]
 800c5bc:	6862      	ldr	r2, [r4, #4]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5c4:	6021      	str	r1, [r4, #0]
 800c5c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	0800e021 	.word	0x0800e021
 800c5d0:	0800e0a1 	.word	0x0800e0a1

0800c5d4 <__multadd>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	690d      	ldr	r5, [r1, #16]
 800c5da:	4607      	mov	r7, r0
 800c5dc:	460c      	mov	r4, r1
 800c5de:	461e      	mov	r6, r3
 800c5e0:	f101 0c14 	add.w	ip, r1, #20
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5ea:	b299      	uxth	r1, r3
 800c5ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c5f0:	0c1e      	lsrs	r6, r3, #16
 800c5f2:	0c0b      	lsrs	r3, r1, #16
 800c5f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5f8:	b289      	uxth	r1, r1
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c600:	4285      	cmp	r5, r0
 800c602:	f84c 1b04 	str.w	r1, [ip], #4
 800c606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c60a:	dcec      	bgt.n	800c5e6 <__multadd+0x12>
 800c60c:	b30e      	cbz	r6, 800c652 <__multadd+0x7e>
 800c60e:	68a3      	ldr	r3, [r4, #8]
 800c610:	42ab      	cmp	r3, r5
 800c612:	dc19      	bgt.n	800c648 <__multadd+0x74>
 800c614:	6861      	ldr	r1, [r4, #4]
 800c616:	4638      	mov	r0, r7
 800c618:	3101      	adds	r1, #1
 800c61a:	f7ff ff79 	bl	800c510 <_Balloc>
 800c61e:	4680      	mov	r8, r0
 800c620:	b928      	cbnz	r0, 800c62e <__multadd+0x5a>
 800c622:	4602      	mov	r2, r0
 800c624:	4b0c      	ldr	r3, [pc, #48]	@ (800c658 <__multadd+0x84>)
 800c626:	480d      	ldr	r0, [pc, #52]	@ (800c65c <__multadd+0x88>)
 800c628:	21ba      	movs	r1, #186	@ 0xba
 800c62a:	f000 feed 	bl	800d408 <__assert_func>
 800c62e:	6922      	ldr	r2, [r4, #16]
 800c630:	3202      	adds	r2, #2
 800c632:	f104 010c 	add.w	r1, r4, #12
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	300c      	adds	r0, #12
 800c63a:	f000 fed7 	bl	800d3ec <memcpy>
 800c63e:	4621      	mov	r1, r4
 800c640:	4638      	mov	r0, r7
 800c642:	f7ff ffa5 	bl	800c590 <_Bfree>
 800c646:	4644      	mov	r4, r8
 800c648:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c64c:	3501      	adds	r5, #1
 800c64e:	615e      	str	r6, [r3, #20]
 800c650:	6125      	str	r5, [r4, #16]
 800c652:	4620      	mov	r0, r4
 800c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c658:	0800e090 	.word	0x0800e090
 800c65c:	0800e0a1 	.word	0x0800e0a1

0800c660 <__hi0bits>:
 800c660:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c664:	4603      	mov	r3, r0
 800c666:	bf36      	itet	cc
 800c668:	0403      	lslcc	r3, r0, #16
 800c66a:	2000      	movcs	r0, #0
 800c66c:	2010      	movcc	r0, #16
 800c66e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c672:	bf3c      	itt	cc
 800c674:	021b      	lslcc	r3, r3, #8
 800c676:	3008      	addcc	r0, #8
 800c678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c67c:	bf3c      	itt	cc
 800c67e:	011b      	lslcc	r3, r3, #4
 800c680:	3004      	addcc	r0, #4
 800c682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c686:	bf3c      	itt	cc
 800c688:	009b      	lslcc	r3, r3, #2
 800c68a:	3002      	addcc	r0, #2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	db05      	blt.n	800c69c <__hi0bits+0x3c>
 800c690:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c694:	f100 0001 	add.w	r0, r0, #1
 800c698:	bf08      	it	eq
 800c69a:	2020      	moveq	r0, #32
 800c69c:	4770      	bx	lr

0800c69e <__lo0bits>:
 800c69e:	6803      	ldr	r3, [r0, #0]
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	f013 0007 	ands.w	r0, r3, #7
 800c6a6:	d00b      	beq.n	800c6c0 <__lo0bits+0x22>
 800c6a8:	07d9      	lsls	r1, r3, #31
 800c6aa:	d421      	bmi.n	800c6f0 <__lo0bits+0x52>
 800c6ac:	0798      	lsls	r0, r3, #30
 800c6ae:	bf49      	itett	mi
 800c6b0:	085b      	lsrmi	r3, r3, #1
 800c6b2:	089b      	lsrpl	r3, r3, #2
 800c6b4:	2001      	movmi	r0, #1
 800c6b6:	6013      	strmi	r3, [r2, #0]
 800c6b8:	bf5c      	itt	pl
 800c6ba:	6013      	strpl	r3, [r2, #0]
 800c6bc:	2002      	movpl	r0, #2
 800c6be:	4770      	bx	lr
 800c6c0:	b299      	uxth	r1, r3
 800c6c2:	b909      	cbnz	r1, 800c6c8 <__lo0bits+0x2a>
 800c6c4:	0c1b      	lsrs	r3, r3, #16
 800c6c6:	2010      	movs	r0, #16
 800c6c8:	b2d9      	uxtb	r1, r3
 800c6ca:	b909      	cbnz	r1, 800c6d0 <__lo0bits+0x32>
 800c6cc:	3008      	adds	r0, #8
 800c6ce:	0a1b      	lsrs	r3, r3, #8
 800c6d0:	0719      	lsls	r1, r3, #28
 800c6d2:	bf04      	itt	eq
 800c6d4:	091b      	lsreq	r3, r3, #4
 800c6d6:	3004      	addeq	r0, #4
 800c6d8:	0799      	lsls	r1, r3, #30
 800c6da:	bf04      	itt	eq
 800c6dc:	089b      	lsreq	r3, r3, #2
 800c6de:	3002      	addeq	r0, #2
 800c6e0:	07d9      	lsls	r1, r3, #31
 800c6e2:	d403      	bmi.n	800c6ec <__lo0bits+0x4e>
 800c6e4:	085b      	lsrs	r3, r3, #1
 800c6e6:	f100 0001 	add.w	r0, r0, #1
 800c6ea:	d003      	beq.n	800c6f4 <__lo0bits+0x56>
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	4770      	bx	lr
 800c6f0:	2000      	movs	r0, #0
 800c6f2:	4770      	bx	lr
 800c6f4:	2020      	movs	r0, #32
 800c6f6:	4770      	bx	lr

0800c6f8 <__i2b>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	f7ff ff07 	bl	800c510 <_Balloc>
 800c702:	4602      	mov	r2, r0
 800c704:	b928      	cbnz	r0, 800c712 <__i2b+0x1a>
 800c706:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <__i2b+0x24>)
 800c708:	4805      	ldr	r0, [pc, #20]	@ (800c720 <__i2b+0x28>)
 800c70a:	f240 1145 	movw	r1, #325	@ 0x145
 800c70e:	f000 fe7b 	bl	800d408 <__assert_func>
 800c712:	2301      	movs	r3, #1
 800c714:	6144      	str	r4, [r0, #20]
 800c716:	6103      	str	r3, [r0, #16]
 800c718:	bd10      	pop	{r4, pc}
 800c71a:	bf00      	nop
 800c71c:	0800e090 	.word	0x0800e090
 800c720:	0800e0a1 	.word	0x0800e0a1

0800c724 <__multiply>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	4617      	mov	r7, r2
 800c72a:	690a      	ldr	r2, [r1, #16]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	429a      	cmp	r2, r3
 800c730:	bfa8      	it	ge
 800c732:	463b      	movge	r3, r7
 800c734:	4689      	mov	r9, r1
 800c736:	bfa4      	itt	ge
 800c738:	460f      	movge	r7, r1
 800c73a:	4699      	movge	r9, r3
 800c73c:	693d      	ldr	r5, [r7, #16]
 800c73e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	eb05 060a 	add.w	r6, r5, sl
 800c74a:	42b3      	cmp	r3, r6
 800c74c:	b085      	sub	sp, #20
 800c74e:	bfb8      	it	lt
 800c750:	3101      	addlt	r1, #1
 800c752:	f7ff fedd 	bl	800c510 <_Balloc>
 800c756:	b930      	cbnz	r0, 800c766 <__multiply+0x42>
 800c758:	4602      	mov	r2, r0
 800c75a:	4b41      	ldr	r3, [pc, #260]	@ (800c860 <__multiply+0x13c>)
 800c75c:	4841      	ldr	r0, [pc, #260]	@ (800c864 <__multiply+0x140>)
 800c75e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c762:	f000 fe51 	bl	800d408 <__assert_func>
 800c766:	f100 0414 	add.w	r4, r0, #20
 800c76a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c76e:	4623      	mov	r3, r4
 800c770:	2200      	movs	r2, #0
 800c772:	4573      	cmp	r3, lr
 800c774:	d320      	bcc.n	800c7b8 <__multiply+0x94>
 800c776:	f107 0814 	add.w	r8, r7, #20
 800c77a:	f109 0114 	add.w	r1, r9, #20
 800c77e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c782:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c786:	9302      	str	r3, [sp, #8]
 800c788:	1beb      	subs	r3, r5, r7
 800c78a:	3b15      	subs	r3, #21
 800c78c:	f023 0303 	bic.w	r3, r3, #3
 800c790:	3304      	adds	r3, #4
 800c792:	3715      	adds	r7, #21
 800c794:	42bd      	cmp	r5, r7
 800c796:	bf38      	it	cc
 800c798:	2304      	movcc	r3, #4
 800c79a:	9301      	str	r3, [sp, #4]
 800c79c:	9b02      	ldr	r3, [sp, #8]
 800c79e:	9103      	str	r1, [sp, #12]
 800c7a0:	428b      	cmp	r3, r1
 800c7a2:	d80c      	bhi.n	800c7be <__multiply+0x9a>
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	dd03      	ble.n	800c7b0 <__multiply+0x8c>
 800c7a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d055      	beq.n	800c85c <__multiply+0x138>
 800c7b0:	6106      	str	r6, [r0, #16]
 800c7b2:	b005      	add	sp, #20
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	f843 2b04 	str.w	r2, [r3], #4
 800c7bc:	e7d9      	b.n	800c772 <__multiply+0x4e>
 800c7be:	f8b1 a000 	ldrh.w	sl, [r1]
 800c7c2:	f1ba 0f00 	cmp.w	sl, #0
 800c7c6:	d01f      	beq.n	800c808 <__multiply+0xe4>
 800c7c8:	46c4      	mov	ip, r8
 800c7ca:	46a1      	mov	r9, r4
 800c7cc:	2700      	movs	r7, #0
 800c7ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7d2:	f8d9 3000 	ldr.w	r3, [r9]
 800c7d6:	fa1f fb82 	uxth.w	fp, r2
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c7e0:	443b      	add	r3, r7
 800c7e2:	f8d9 7000 	ldr.w	r7, [r9]
 800c7e6:	0c12      	lsrs	r2, r2, #16
 800c7e8:	0c3f      	lsrs	r7, r7, #16
 800c7ea:	fb0a 7202 	mla	r2, sl, r2, r7
 800c7ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7f8:	4565      	cmp	r5, ip
 800c7fa:	f849 3b04 	str.w	r3, [r9], #4
 800c7fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c802:	d8e4      	bhi.n	800c7ce <__multiply+0xaa>
 800c804:	9b01      	ldr	r3, [sp, #4]
 800c806:	50e7      	str	r7, [r4, r3]
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c80e:	3104      	adds	r1, #4
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	d020      	beq.n	800c858 <__multiply+0x134>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	4647      	mov	r7, r8
 800c81a:	46a4      	mov	ip, r4
 800c81c:	f04f 0a00 	mov.w	sl, #0
 800c820:	f8b7 b000 	ldrh.w	fp, [r7]
 800c824:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c828:	fb09 220b 	mla	r2, r9, fp, r2
 800c82c:	4452      	add	r2, sl
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c834:	f84c 3b04 	str.w	r3, [ip], #4
 800c838:	f857 3b04 	ldr.w	r3, [r7], #4
 800c83c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c840:	f8bc 3000 	ldrh.w	r3, [ip]
 800c844:	fb09 330a 	mla	r3, r9, sl, r3
 800c848:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c84c:	42bd      	cmp	r5, r7
 800c84e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c852:	d8e5      	bhi.n	800c820 <__multiply+0xfc>
 800c854:	9a01      	ldr	r2, [sp, #4]
 800c856:	50a3      	str	r3, [r4, r2]
 800c858:	3404      	adds	r4, #4
 800c85a:	e79f      	b.n	800c79c <__multiply+0x78>
 800c85c:	3e01      	subs	r6, #1
 800c85e:	e7a1      	b.n	800c7a4 <__multiply+0x80>
 800c860:	0800e090 	.word	0x0800e090
 800c864:	0800e0a1 	.word	0x0800e0a1

0800c868 <__pow5mult>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	4615      	mov	r5, r2
 800c86e:	f012 0203 	ands.w	r2, r2, #3
 800c872:	4607      	mov	r7, r0
 800c874:	460e      	mov	r6, r1
 800c876:	d007      	beq.n	800c888 <__pow5mult+0x20>
 800c878:	4c25      	ldr	r4, [pc, #148]	@ (800c910 <__pow5mult+0xa8>)
 800c87a:	3a01      	subs	r2, #1
 800c87c:	2300      	movs	r3, #0
 800c87e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c882:	f7ff fea7 	bl	800c5d4 <__multadd>
 800c886:	4606      	mov	r6, r0
 800c888:	10ad      	asrs	r5, r5, #2
 800c88a:	d03d      	beq.n	800c908 <__pow5mult+0xa0>
 800c88c:	69fc      	ldr	r4, [r7, #28]
 800c88e:	b97c      	cbnz	r4, 800c8b0 <__pow5mult+0x48>
 800c890:	2010      	movs	r0, #16
 800c892:	f7ff fd87 	bl	800c3a4 <malloc>
 800c896:	4602      	mov	r2, r0
 800c898:	61f8      	str	r0, [r7, #28]
 800c89a:	b928      	cbnz	r0, 800c8a8 <__pow5mult+0x40>
 800c89c:	4b1d      	ldr	r3, [pc, #116]	@ (800c914 <__pow5mult+0xac>)
 800c89e:	481e      	ldr	r0, [pc, #120]	@ (800c918 <__pow5mult+0xb0>)
 800c8a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8a4:	f000 fdb0 	bl	800d408 <__assert_func>
 800c8a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8ac:	6004      	str	r4, [r0, #0]
 800c8ae:	60c4      	str	r4, [r0, #12]
 800c8b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8b8:	b94c      	cbnz	r4, 800c8ce <__pow5mult+0x66>
 800c8ba:	f240 2171 	movw	r1, #625	@ 0x271
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f7ff ff1a 	bl	800c6f8 <__i2b>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	f04f 0900 	mov.w	r9, #0
 800c8d2:	07eb      	lsls	r3, r5, #31
 800c8d4:	d50a      	bpl.n	800c8ec <__pow5mult+0x84>
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4622      	mov	r2, r4
 800c8da:	4638      	mov	r0, r7
 800c8dc:	f7ff ff22 	bl	800c724 <__multiply>
 800c8e0:	4631      	mov	r1, r6
 800c8e2:	4680      	mov	r8, r0
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	f7ff fe53 	bl	800c590 <_Bfree>
 800c8ea:	4646      	mov	r6, r8
 800c8ec:	106d      	asrs	r5, r5, #1
 800c8ee:	d00b      	beq.n	800c908 <__pow5mult+0xa0>
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	b938      	cbnz	r0, 800c904 <__pow5mult+0x9c>
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f7ff ff13 	bl	800c724 <__multiply>
 800c8fe:	6020      	str	r0, [r4, #0]
 800c900:	f8c0 9000 	str.w	r9, [r0]
 800c904:	4604      	mov	r4, r0
 800c906:	e7e4      	b.n	800c8d2 <__pow5mult+0x6a>
 800c908:	4630      	mov	r0, r6
 800c90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c90e:	bf00      	nop
 800c910:	0800e154 	.word	0x0800e154
 800c914:	0800e021 	.word	0x0800e021
 800c918:	0800e0a1 	.word	0x0800e0a1

0800c91c <__lshift>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	460c      	mov	r4, r1
 800c922:	6849      	ldr	r1, [r1, #4]
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	4607      	mov	r7, r0
 800c92e:	4691      	mov	r9, r2
 800c930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c934:	f108 0601 	add.w	r6, r8, #1
 800c938:	42b3      	cmp	r3, r6
 800c93a:	db0b      	blt.n	800c954 <__lshift+0x38>
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff fde7 	bl	800c510 <_Balloc>
 800c942:	4605      	mov	r5, r0
 800c944:	b948      	cbnz	r0, 800c95a <__lshift+0x3e>
 800c946:	4602      	mov	r2, r0
 800c948:	4b28      	ldr	r3, [pc, #160]	@ (800c9ec <__lshift+0xd0>)
 800c94a:	4829      	ldr	r0, [pc, #164]	@ (800c9f0 <__lshift+0xd4>)
 800c94c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c950:	f000 fd5a 	bl	800d408 <__assert_func>
 800c954:	3101      	adds	r1, #1
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	e7ee      	b.n	800c938 <__lshift+0x1c>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f100 0114 	add.w	r1, r0, #20
 800c960:	f100 0210 	add.w	r2, r0, #16
 800c964:	4618      	mov	r0, r3
 800c966:	4553      	cmp	r3, sl
 800c968:	db33      	blt.n	800c9d2 <__lshift+0xb6>
 800c96a:	6920      	ldr	r0, [r4, #16]
 800c96c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c970:	f104 0314 	add.w	r3, r4, #20
 800c974:	f019 091f 	ands.w	r9, r9, #31
 800c978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c97c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c980:	d02b      	beq.n	800c9da <__lshift+0xbe>
 800c982:	f1c9 0e20 	rsb	lr, r9, #32
 800c986:	468a      	mov	sl, r1
 800c988:	2200      	movs	r2, #0
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	fa00 f009 	lsl.w	r0, r0, r9
 800c990:	4310      	orrs	r0, r2
 800c992:	f84a 0b04 	str.w	r0, [sl], #4
 800c996:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99a:	459c      	cmp	ip, r3
 800c99c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9a0:	d8f3      	bhi.n	800c98a <__lshift+0x6e>
 800c9a2:	ebac 0304 	sub.w	r3, ip, r4
 800c9a6:	3b15      	subs	r3, #21
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	f104 0015 	add.w	r0, r4, #21
 800c9b2:	4560      	cmp	r0, ip
 800c9b4:	bf88      	it	hi
 800c9b6:	2304      	movhi	r3, #4
 800c9b8:	50ca      	str	r2, [r1, r3]
 800c9ba:	b10a      	cbz	r2, 800c9c0 <__lshift+0xa4>
 800c9bc:	f108 0602 	add.w	r6, r8, #2
 800c9c0:	3e01      	subs	r6, #1
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	612e      	str	r6, [r5, #16]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	f7ff fde2 	bl	800c590 <_Bfree>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	e7c5      	b.n	800c966 <__lshift+0x4a>
 800c9da:	3904      	subs	r1, #4
 800c9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9e4:	459c      	cmp	ip, r3
 800c9e6:	d8f9      	bhi.n	800c9dc <__lshift+0xc0>
 800c9e8:	e7ea      	b.n	800c9c0 <__lshift+0xa4>
 800c9ea:	bf00      	nop
 800c9ec:	0800e090 	.word	0x0800e090
 800c9f0:	0800e0a1 	.word	0x0800e0a1

0800c9f4 <__mcmp>:
 800c9f4:	690a      	ldr	r2, [r1, #16]
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	6900      	ldr	r0, [r0, #16]
 800c9fa:	1a80      	subs	r0, r0, r2
 800c9fc:	b530      	push	{r4, r5, lr}
 800c9fe:	d10e      	bne.n	800ca1e <__mcmp+0x2a>
 800ca00:	3314      	adds	r3, #20
 800ca02:	3114      	adds	r1, #20
 800ca04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca14:	4295      	cmp	r5, r2
 800ca16:	d003      	beq.n	800ca20 <__mcmp+0x2c>
 800ca18:	d205      	bcs.n	800ca26 <__mcmp+0x32>
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1e:	bd30      	pop	{r4, r5, pc}
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	d3f3      	bcc.n	800ca0c <__mcmp+0x18>
 800ca24:	e7fb      	b.n	800ca1e <__mcmp+0x2a>
 800ca26:	2001      	movs	r0, #1
 800ca28:	e7f9      	b.n	800ca1e <__mcmp+0x2a>
	...

0800ca2c <__mdiff>:
 800ca2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	4689      	mov	r9, r1
 800ca32:	4606      	mov	r6, r0
 800ca34:	4611      	mov	r1, r2
 800ca36:	4648      	mov	r0, r9
 800ca38:	4614      	mov	r4, r2
 800ca3a:	f7ff ffdb 	bl	800c9f4 <__mcmp>
 800ca3e:	1e05      	subs	r5, r0, #0
 800ca40:	d112      	bne.n	800ca68 <__mdiff+0x3c>
 800ca42:	4629      	mov	r1, r5
 800ca44:	4630      	mov	r0, r6
 800ca46:	f7ff fd63 	bl	800c510 <_Balloc>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	b928      	cbnz	r0, 800ca5a <__mdiff+0x2e>
 800ca4e:	4b3f      	ldr	r3, [pc, #252]	@ (800cb4c <__mdiff+0x120>)
 800ca50:	f240 2137 	movw	r1, #567	@ 0x237
 800ca54:	483e      	ldr	r0, [pc, #248]	@ (800cb50 <__mdiff+0x124>)
 800ca56:	f000 fcd7 	bl	800d408 <__assert_func>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca60:	4610      	mov	r0, r2
 800ca62:	b003      	add	sp, #12
 800ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca68:	bfbc      	itt	lt
 800ca6a:	464b      	movlt	r3, r9
 800ca6c:	46a1      	movlt	r9, r4
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ca74:	bfba      	itte	lt
 800ca76:	461c      	movlt	r4, r3
 800ca78:	2501      	movlt	r5, #1
 800ca7a:	2500      	movge	r5, #0
 800ca7c:	f7ff fd48 	bl	800c510 <_Balloc>
 800ca80:	4602      	mov	r2, r0
 800ca82:	b918      	cbnz	r0, 800ca8c <__mdiff+0x60>
 800ca84:	4b31      	ldr	r3, [pc, #196]	@ (800cb4c <__mdiff+0x120>)
 800ca86:	f240 2145 	movw	r1, #581	@ 0x245
 800ca8a:	e7e3      	b.n	800ca54 <__mdiff+0x28>
 800ca8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ca90:	6926      	ldr	r6, [r4, #16]
 800ca92:	60c5      	str	r5, [r0, #12]
 800ca94:	f109 0310 	add.w	r3, r9, #16
 800ca98:	f109 0514 	add.w	r5, r9, #20
 800ca9c:	f104 0e14 	add.w	lr, r4, #20
 800caa0:	f100 0b14 	add.w	fp, r0, #20
 800caa4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800caa8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	46d9      	mov	r9, fp
 800cab0:	f04f 0c00 	mov.w	ip, #0
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800caba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cabe:	9301      	str	r3, [sp, #4]
 800cac0:	fa1f f38a 	uxth.w	r3, sl
 800cac4:	4619      	mov	r1, r3
 800cac6:	b283      	uxth	r3, r0
 800cac8:	1acb      	subs	r3, r1, r3
 800caca:	0c00      	lsrs	r0, r0, #16
 800cacc:	4463      	add	r3, ip
 800cace:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cad2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cadc:	4576      	cmp	r6, lr
 800cade:	f849 3b04 	str.w	r3, [r9], #4
 800cae2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cae6:	d8e5      	bhi.n	800cab4 <__mdiff+0x88>
 800cae8:	1b33      	subs	r3, r6, r4
 800caea:	3b15      	subs	r3, #21
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	3415      	adds	r4, #21
 800caf2:	3304      	adds	r3, #4
 800caf4:	42a6      	cmp	r6, r4
 800caf6:	bf38      	it	cc
 800caf8:	2304      	movcc	r3, #4
 800cafa:	441d      	add	r5, r3
 800cafc:	445b      	add	r3, fp
 800cafe:	461e      	mov	r6, r3
 800cb00:	462c      	mov	r4, r5
 800cb02:	4544      	cmp	r4, r8
 800cb04:	d30e      	bcc.n	800cb24 <__mdiff+0xf8>
 800cb06:	f108 0103 	add.w	r1, r8, #3
 800cb0a:	1b49      	subs	r1, r1, r5
 800cb0c:	f021 0103 	bic.w	r1, r1, #3
 800cb10:	3d03      	subs	r5, #3
 800cb12:	45a8      	cmp	r8, r5
 800cb14:	bf38      	it	cc
 800cb16:	2100      	movcc	r1, #0
 800cb18:	440b      	add	r3, r1
 800cb1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb1e:	b191      	cbz	r1, 800cb46 <__mdiff+0x11a>
 800cb20:	6117      	str	r7, [r2, #16]
 800cb22:	e79d      	b.n	800ca60 <__mdiff+0x34>
 800cb24:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb28:	46e6      	mov	lr, ip
 800cb2a:	0c08      	lsrs	r0, r1, #16
 800cb2c:	fa1c fc81 	uxtah	ip, ip, r1
 800cb30:	4471      	add	r1, lr
 800cb32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb36:	b289      	uxth	r1, r1
 800cb38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb3c:	f846 1b04 	str.w	r1, [r6], #4
 800cb40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb44:	e7dd      	b.n	800cb02 <__mdiff+0xd6>
 800cb46:	3f01      	subs	r7, #1
 800cb48:	e7e7      	b.n	800cb1a <__mdiff+0xee>
 800cb4a:	bf00      	nop
 800cb4c:	0800e090 	.word	0x0800e090
 800cb50:	0800e0a1 	.word	0x0800e0a1

0800cb54 <__d2b>:
 800cb54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	460f      	mov	r7, r1
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	ec59 8b10 	vmov	r8, r9, d0
 800cb60:	4616      	mov	r6, r2
 800cb62:	f7ff fcd5 	bl	800c510 <_Balloc>
 800cb66:	4604      	mov	r4, r0
 800cb68:	b930      	cbnz	r0, 800cb78 <__d2b+0x24>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	4b23      	ldr	r3, [pc, #140]	@ (800cbfc <__d2b+0xa8>)
 800cb6e:	4824      	ldr	r0, [pc, #144]	@ (800cc00 <__d2b+0xac>)
 800cb70:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb74:	f000 fc48 	bl	800d408 <__assert_func>
 800cb78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb80:	b10d      	cbz	r5, 800cb86 <__d2b+0x32>
 800cb82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb86:	9301      	str	r3, [sp, #4]
 800cb88:	f1b8 0300 	subs.w	r3, r8, #0
 800cb8c:	d023      	beq.n	800cbd6 <__d2b+0x82>
 800cb8e:	4668      	mov	r0, sp
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	f7ff fd84 	bl	800c69e <__lo0bits>
 800cb96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb9a:	b1d0      	cbz	r0, 800cbd2 <__d2b+0x7e>
 800cb9c:	f1c0 0320 	rsb	r3, r0, #32
 800cba0:	fa02 f303 	lsl.w	r3, r2, r3
 800cba4:	430b      	orrs	r3, r1
 800cba6:	40c2      	lsrs	r2, r0
 800cba8:	6163      	str	r3, [r4, #20]
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	61a3      	str	r3, [r4, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	bf0c      	ite	eq
 800cbb4:	2201      	moveq	r2, #1
 800cbb6:	2202      	movne	r2, #2
 800cbb8:	6122      	str	r2, [r4, #16]
 800cbba:	b1a5      	cbz	r5, 800cbe6 <__d2b+0x92>
 800cbbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbc0:	4405      	add	r5, r0
 800cbc2:	603d      	str	r5, [r7, #0]
 800cbc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbc8:	6030      	str	r0, [r6, #0]
 800cbca:	4620      	mov	r0, r4
 800cbcc:	b003      	add	sp, #12
 800cbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd2:	6161      	str	r1, [r4, #20]
 800cbd4:	e7ea      	b.n	800cbac <__d2b+0x58>
 800cbd6:	a801      	add	r0, sp, #4
 800cbd8:	f7ff fd61 	bl	800c69e <__lo0bits>
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	6163      	str	r3, [r4, #20]
 800cbe0:	3020      	adds	r0, #32
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	e7e8      	b.n	800cbb8 <__d2b+0x64>
 800cbe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cbee:	6038      	str	r0, [r7, #0]
 800cbf0:	6918      	ldr	r0, [r3, #16]
 800cbf2:	f7ff fd35 	bl	800c660 <__hi0bits>
 800cbf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbfa:	e7e5      	b.n	800cbc8 <__d2b+0x74>
 800cbfc:	0800e090 	.word	0x0800e090
 800cc00:	0800e0a1 	.word	0x0800e0a1

0800cc04 <__ssputs_r>:
 800cc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	688e      	ldr	r6, [r1, #8]
 800cc0a:	461f      	mov	r7, r3
 800cc0c:	42be      	cmp	r6, r7
 800cc0e:	680b      	ldr	r3, [r1, #0]
 800cc10:	4682      	mov	sl, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	4690      	mov	r8, r2
 800cc16:	d82d      	bhi.n	800cc74 <__ssputs_r+0x70>
 800cc18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc20:	d026      	beq.n	800cc70 <__ssputs_r+0x6c>
 800cc22:	6965      	ldr	r5, [r4, #20]
 800cc24:	6909      	ldr	r1, [r1, #16]
 800cc26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc2a:	eba3 0901 	sub.w	r9, r3, r1
 800cc2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc32:	1c7b      	adds	r3, r7, #1
 800cc34:	444b      	add	r3, r9
 800cc36:	106d      	asrs	r5, r5, #1
 800cc38:	429d      	cmp	r5, r3
 800cc3a:	bf38      	it	cc
 800cc3c:	461d      	movcc	r5, r3
 800cc3e:	0553      	lsls	r3, r2, #21
 800cc40:	d527      	bpl.n	800cc92 <__ssputs_r+0x8e>
 800cc42:	4629      	mov	r1, r5
 800cc44:	f7ff fbd8 	bl	800c3f8 <_malloc_r>
 800cc48:	4606      	mov	r6, r0
 800cc4a:	b360      	cbz	r0, 800cca6 <__ssputs_r+0xa2>
 800cc4c:	6921      	ldr	r1, [r4, #16]
 800cc4e:	464a      	mov	r2, r9
 800cc50:	f000 fbcc 	bl	800d3ec <memcpy>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc5e:	81a3      	strh	r3, [r4, #12]
 800cc60:	6126      	str	r6, [r4, #16]
 800cc62:	6165      	str	r5, [r4, #20]
 800cc64:	444e      	add	r6, r9
 800cc66:	eba5 0509 	sub.w	r5, r5, r9
 800cc6a:	6026      	str	r6, [r4, #0]
 800cc6c:	60a5      	str	r5, [r4, #8]
 800cc6e:	463e      	mov	r6, r7
 800cc70:	42be      	cmp	r6, r7
 800cc72:	d900      	bls.n	800cc76 <__ssputs_r+0x72>
 800cc74:	463e      	mov	r6, r7
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	4632      	mov	r2, r6
 800cc7a:	4641      	mov	r1, r8
 800cc7c:	f000 fb6a 	bl	800d354 <memmove>
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	1b9b      	subs	r3, r3, r6
 800cc84:	60a3      	str	r3, [r4, #8]
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	4433      	add	r3, r6
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc92:	462a      	mov	r2, r5
 800cc94:	f000 fbfc 	bl	800d490 <_realloc_r>
 800cc98:	4606      	mov	r6, r0
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d1e0      	bne.n	800cc60 <__ssputs_r+0x5c>
 800cc9e:	6921      	ldr	r1, [r4, #16]
 800cca0:	4650      	mov	r0, sl
 800cca2:	f7ff fb35 	bl	800c310 <_free_r>
 800cca6:	230c      	movs	r3, #12
 800cca8:	f8ca 3000 	str.w	r3, [sl]
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb2:	81a3      	strh	r3, [r4, #12]
 800ccb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb8:	e7e9      	b.n	800cc8e <__ssputs_r+0x8a>
	...

0800ccbc <_svfiprintf_r>:
 800ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc0:	4698      	mov	r8, r3
 800ccc2:	898b      	ldrh	r3, [r1, #12]
 800ccc4:	061b      	lsls	r3, r3, #24
 800ccc6:	b09d      	sub	sp, #116	@ 0x74
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460d      	mov	r5, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	d510      	bpl.n	800ccf2 <_svfiprintf_r+0x36>
 800ccd0:	690b      	ldr	r3, [r1, #16]
 800ccd2:	b973      	cbnz	r3, 800ccf2 <_svfiprintf_r+0x36>
 800ccd4:	2140      	movs	r1, #64	@ 0x40
 800ccd6:	f7ff fb8f 	bl	800c3f8 <_malloc_r>
 800ccda:	6028      	str	r0, [r5, #0]
 800ccdc:	6128      	str	r0, [r5, #16]
 800ccde:	b930      	cbnz	r0, 800ccee <_svfiprintf_r+0x32>
 800cce0:	230c      	movs	r3, #12
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	b01d      	add	sp, #116	@ 0x74
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	2340      	movs	r3, #64	@ 0x40
 800ccf0:	616b      	str	r3, [r5, #20]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf6:	2320      	movs	r3, #32
 800ccf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd00:	2330      	movs	r3, #48	@ 0x30
 800cd02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cea0 <_svfiprintf_r+0x1e4>
 800cd06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd0a:	f04f 0901 	mov.w	r9, #1
 800cd0e:	4623      	mov	r3, r4
 800cd10:	469a      	mov	sl, r3
 800cd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd16:	b10a      	cbz	r2, 800cd1c <_svfiprintf_r+0x60>
 800cd18:	2a25      	cmp	r2, #37	@ 0x25
 800cd1a:	d1f9      	bne.n	800cd10 <_svfiprintf_r+0x54>
 800cd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd20:	d00b      	beq.n	800cd3a <_svfiprintf_r+0x7e>
 800cd22:	465b      	mov	r3, fp
 800cd24:	4622      	mov	r2, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	4638      	mov	r0, r7
 800cd2a:	f7ff ff6b 	bl	800cc04 <__ssputs_r>
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f000 80a7 	beq.w	800ce82 <_svfiprintf_r+0x1c6>
 800cd34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd36:	445a      	add	r2, fp
 800cd38:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 809f 	beq.w	800ce82 <_svfiprintf_r+0x1c6>
 800cd44:	2300      	movs	r3, #0
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4e:	f10a 0a01 	add.w	sl, sl, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	9307      	str	r3, [sp, #28]
 800cd56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd5c:	4654      	mov	r4, sl
 800cd5e:	2205      	movs	r2, #5
 800cd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd64:	484e      	ldr	r0, [pc, #312]	@ (800cea0 <_svfiprintf_r+0x1e4>)
 800cd66:	f7f3 fa6b 	bl	8000240 <memchr>
 800cd6a:	9a04      	ldr	r2, [sp, #16]
 800cd6c:	b9d8      	cbnz	r0, 800cda6 <_svfiprintf_r+0xea>
 800cd6e:	06d0      	lsls	r0, r2, #27
 800cd70:	bf44      	itt	mi
 800cd72:	2320      	movmi	r3, #32
 800cd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd78:	0711      	lsls	r1, r2, #28
 800cd7a:	bf44      	itt	mi
 800cd7c:	232b      	movmi	r3, #43	@ 0x2b
 800cd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd82:	f89a 3000 	ldrb.w	r3, [sl]
 800cd86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd88:	d015      	beq.n	800cdb6 <_svfiprintf_r+0xfa>
 800cd8a:	9a07      	ldr	r2, [sp, #28]
 800cd8c:	4654      	mov	r4, sl
 800cd8e:	2000      	movs	r0, #0
 800cd90:	f04f 0c0a 	mov.w	ip, #10
 800cd94:	4621      	mov	r1, r4
 800cd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd9a:	3b30      	subs	r3, #48	@ 0x30
 800cd9c:	2b09      	cmp	r3, #9
 800cd9e:	d94b      	bls.n	800ce38 <_svfiprintf_r+0x17c>
 800cda0:	b1b0      	cbz	r0, 800cdd0 <_svfiprintf_r+0x114>
 800cda2:	9207      	str	r2, [sp, #28]
 800cda4:	e014      	b.n	800cdd0 <_svfiprintf_r+0x114>
 800cda6:	eba0 0308 	sub.w	r3, r0, r8
 800cdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	9304      	str	r3, [sp, #16]
 800cdb2:	46a2      	mov	sl, r4
 800cdb4:	e7d2      	b.n	800cd5c <_svfiprintf_r+0xa0>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	1d19      	adds	r1, r3, #4
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	9103      	str	r1, [sp, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	bfbb      	ittet	lt
 800cdc2:	425b      	neglt	r3, r3
 800cdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc8:	9307      	strge	r3, [sp, #28]
 800cdca:	9307      	strlt	r3, [sp, #28]
 800cdcc:	bfb8      	it	lt
 800cdce:	9204      	strlt	r2, [sp, #16]
 800cdd0:	7823      	ldrb	r3, [r4, #0]
 800cdd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdd4:	d10a      	bne.n	800cdec <_svfiprintf_r+0x130>
 800cdd6:	7863      	ldrb	r3, [r4, #1]
 800cdd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdda:	d132      	bne.n	800ce42 <_svfiprintf_r+0x186>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	1d1a      	adds	r2, r3, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9203      	str	r2, [sp, #12]
 800cde4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cde8:	3402      	adds	r4, #2
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ceb0 <_svfiprintf_r+0x1f4>
 800cdf0:	7821      	ldrb	r1, [r4, #0]
 800cdf2:	2203      	movs	r2, #3
 800cdf4:	4650      	mov	r0, sl
 800cdf6:	f7f3 fa23 	bl	8000240 <memchr>
 800cdfa:	b138      	cbz	r0, 800ce0c <_svfiprintf_r+0x150>
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	eba0 000a 	sub.w	r0, r0, sl
 800ce02:	2240      	movs	r2, #64	@ 0x40
 800ce04:	4082      	lsls	r2, r0
 800ce06:	4313      	orrs	r3, r2
 800ce08:	3401      	adds	r4, #1
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce10:	4824      	ldr	r0, [pc, #144]	@ (800cea4 <_svfiprintf_r+0x1e8>)
 800ce12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce16:	2206      	movs	r2, #6
 800ce18:	f7f3 fa12 	bl	8000240 <memchr>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d036      	beq.n	800ce8e <_svfiprintf_r+0x1d2>
 800ce20:	4b21      	ldr	r3, [pc, #132]	@ (800cea8 <_svfiprintf_r+0x1ec>)
 800ce22:	bb1b      	cbnz	r3, 800ce6c <_svfiprintf_r+0x1b0>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	3307      	adds	r3, #7
 800ce28:	f023 0307 	bic.w	r3, r3, #7
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce32:	4433      	add	r3, r6
 800ce34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce36:	e76a      	b.n	800cd0e <_svfiprintf_r+0x52>
 800ce38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	2001      	movs	r0, #1
 800ce40:	e7a8      	b.n	800cd94 <_svfiprintf_r+0xd8>
 800ce42:	2300      	movs	r3, #0
 800ce44:	3401      	adds	r4, #1
 800ce46:	9305      	str	r3, [sp, #20]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f04f 0c0a 	mov.w	ip, #10
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce54:	3a30      	subs	r2, #48	@ 0x30
 800ce56:	2a09      	cmp	r2, #9
 800ce58:	d903      	bls.n	800ce62 <_svfiprintf_r+0x1a6>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0c6      	beq.n	800cdec <_svfiprintf_r+0x130>
 800ce5e:	9105      	str	r1, [sp, #20]
 800ce60:	e7c4      	b.n	800cdec <_svfiprintf_r+0x130>
 800ce62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce66:	4604      	mov	r4, r0
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e7f0      	b.n	800ce4e <_svfiprintf_r+0x192>
 800ce6c:	ab03      	add	r3, sp, #12
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	462a      	mov	r2, r5
 800ce72:	4b0e      	ldr	r3, [pc, #56]	@ (800ceac <_svfiprintf_r+0x1f0>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	4638      	mov	r0, r7
 800ce78:	f7fd fd7e 	bl	800a978 <_printf_float>
 800ce7c:	1c42      	adds	r2, r0, #1
 800ce7e:	4606      	mov	r6, r0
 800ce80:	d1d6      	bne.n	800ce30 <_svfiprintf_r+0x174>
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	065b      	lsls	r3, r3, #25
 800ce86:	f53f af2d 	bmi.w	800cce4 <_svfiprintf_r+0x28>
 800ce8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce8c:	e72c      	b.n	800cce8 <_svfiprintf_r+0x2c>
 800ce8e:	ab03      	add	r3, sp, #12
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	462a      	mov	r2, r5
 800ce94:	4b05      	ldr	r3, [pc, #20]	@ (800ceac <_svfiprintf_r+0x1f0>)
 800ce96:	a904      	add	r1, sp, #16
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7fe f805 	bl	800aea8 <_printf_i>
 800ce9e:	e7ed      	b.n	800ce7c <_svfiprintf_r+0x1c0>
 800cea0:	0800e0fa 	.word	0x0800e0fa
 800cea4:	0800e104 	.word	0x0800e104
 800cea8:	0800a979 	.word	0x0800a979
 800ceac:	0800cc05 	.word	0x0800cc05
 800ceb0:	0800e100 	.word	0x0800e100

0800ceb4 <__sfputc_r>:
 800ceb4:	6893      	ldr	r3, [r2, #8]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	b410      	push	{r4}
 800cebc:	6093      	str	r3, [r2, #8]
 800cebe:	da08      	bge.n	800ced2 <__sfputc_r+0x1e>
 800cec0:	6994      	ldr	r4, [r2, #24]
 800cec2:	42a3      	cmp	r3, r4
 800cec4:	db01      	blt.n	800ceca <__sfputc_r+0x16>
 800cec6:	290a      	cmp	r1, #10
 800cec8:	d103      	bne.n	800ced2 <__sfputc_r+0x1e>
 800ceca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cece:	f7fe baa0 	b.w	800b412 <__swbuf_r>
 800ced2:	6813      	ldr	r3, [r2, #0]
 800ced4:	1c58      	adds	r0, r3, #1
 800ced6:	6010      	str	r0, [r2, #0]
 800ced8:	7019      	strb	r1, [r3, #0]
 800ceda:	4608      	mov	r0, r1
 800cedc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <__sfputs_r>:
 800cee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	4614      	mov	r4, r2
 800ceea:	18d5      	adds	r5, r2, r3
 800ceec:	42ac      	cmp	r4, r5
 800ceee:	d101      	bne.n	800cef4 <__sfputs_r+0x12>
 800cef0:	2000      	movs	r0, #0
 800cef2:	e007      	b.n	800cf04 <__sfputs_r+0x22>
 800cef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef8:	463a      	mov	r2, r7
 800cefa:	4630      	mov	r0, r6
 800cefc:	f7ff ffda 	bl	800ceb4 <__sfputc_r>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d1f3      	bne.n	800ceec <__sfputs_r+0xa>
 800cf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf08 <_vfiprintf_r>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	b09d      	sub	sp, #116	@ 0x74
 800cf10:	4614      	mov	r4, r2
 800cf12:	4698      	mov	r8, r3
 800cf14:	4606      	mov	r6, r0
 800cf16:	b118      	cbz	r0, 800cf20 <_vfiprintf_r+0x18>
 800cf18:	6a03      	ldr	r3, [r0, #32]
 800cf1a:	b90b      	cbnz	r3, 800cf20 <_vfiprintf_r+0x18>
 800cf1c:	f7fe f96e 	bl	800b1fc <__sinit>
 800cf20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf22:	07d9      	lsls	r1, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_vfiprintf_r+0x2a>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	059a      	lsls	r2, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_vfiprintf_r+0x2a>
 800cf2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf2e:	f7fe fb94 	bl	800b65a <__retarget_lock_acquire_recursive>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	071b      	lsls	r3, r3, #28
 800cf36:	d501      	bpl.n	800cf3c <_vfiprintf_r+0x34>
 800cf38:	692b      	ldr	r3, [r5, #16]
 800cf3a:	b99b      	cbnz	r3, 800cf64 <_vfiprintf_r+0x5c>
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f7fe faa6 	bl	800b490 <__swsetup_r>
 800cf44:	b170      	cbz	r0, 800cf64 <_vfiprintf_r+0x5c>
 800cf46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf48:	07dc      	lsls	r4, r3, #31
 800cf4a:	d504      	bpl.n	800cf56 <_vfiprintf_r+0x4e>
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	b01d      	add	sp, #116	@ 0x74
 800cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf56:	89ab      	ldrh	r3, [r5, #12]
 800cf58:	0598      	lsls	r0, r3, #22
 800cf5a:	d4f7      	bmi.n	800cf4c <_vfiprintf_r+0x44>
 800cf5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf5e:	f7fe fb7d 	bl	800b65c <__retarget_lock_release_recursive>
 800cf62:	e7f3      	b.n	800cf4c <_vfiprintf_r+0x44>
 800cf64:	2300      	movs	r3, #0
 800cf66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf68:	2320      	movs	r3, #32
 800cf6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf72:	2330      	movs	r3, #48	@ 0x30
 800cf74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d124 <_vfiprintf_r+0x21c>
 800cf78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf7c:	f04f 0901 	mov.w	r9, #1
 800cf80:	4623      	mov	r3, r4
 800cf82:	469a      	mov	sl, r3
 800cf84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf88:	b10a      	cbz	r2, 800cf8e <_vfiprintf_r+0x86>
 800cf8a:	2a25      	cmp	r2, #37	@ 0x25
 800cf8c:	d1f9      	bne.n	800cf82 <_vfiprintf_r+0x7a>
 800cf8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf92:	d00b      	beq.n	800cfac <_vfiprintf_r+0xa4>
 800cf94:	465b      	mov	r3, fp
 800cf96:	4622      	mov	r2, r4
 800cf98:	4629      	mov	r1, r5
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f7ff ffa1 	bl	800cee2 <__sfputs_r>
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	f000 80a7 	beq.w	800d0f4 <_vfiprintf_r+0x1ec>
 800cfa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfa8:	445a      	add	r2, fp
 800cfaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfac:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 809f 	beq.w	800d0f4 <_vfiprintf_r+0x1ec>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfc0:	f10a 0a01 	add.w	sl, sl, #1
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	9307      	str	r3, [sp, #28]
 800cfc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfce:	4654      	mov	r4, sl
 800cfd0:	2205      	movs	r2, #5
 800cfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd6:	4853      	ldr	r0, [pc, #332]	@ (800d124 <_vfiprintf_r+0x21c>)
 800cfd8:	f7f3 f932 	bl	8000240 <memchr>
 800cfdc:	9a04      	ldr	r2, [sp, #16]
 800cfde:	b9d8      	cbnz	r0, 800d018 <_vfiprintf_r+0x110>
 800cfe0:	06d1      	lsls	r1, r2, #27
 800cfe2:	bf44      	itt	mi
 800cfe4:	2320      	movmi	r3, #32
 800cfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfea:	0713      	lsls	r3, r2, #28
 800cfec:	bf44      	itt	mi
 800cfee:	232b      	movmi	r3, #43	@ 0x2b
 800cff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cff4:	f89a 3000 	ldrb.w	r3, [sl]
 800cff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cffa:	d015      	beq.n	800d028 <_vfiprintf_r+0x120>
 800cffc:	9a07      	ldr	r2, [sp, #28]
 800cffe:	4654      	mov	r4, sl
 800d000:	2000      	movs	r0, #0
 800d002:	f04f 0c0a 	mov.w	ip, #10
 800d006:	4621      	mov	r1, r4
 800d008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d00c:	3b30      	subs	r3, #48	@ 0x30
 800d00e:	2b09      	cmp	r3, #9
 800d010:	d94b      	bls.n	800d0aa <_vfiprintf_r+0x1a2>
 800d012:	b1b0      	cbz	r0, 800d042 <_vfiprintf_r+0x13a>
 800d014:	9207      	str	r2, [sp, #28]
 800d016:	e014      	b.n	800d042 <_vfiprintf_r+0x13a>
 800d018:	eba0 0308 	sub.w	r3, r0, r8
 800d01c:	fa09 f303 	lsl.w	r3, r9, r3
 800d020:	4313      	orrs	r3, r2
 800d022:	9304      	str	r3, [sp, #16]
 800d024:	46a2      	mov	sl, r4
 800d026:	e7d2      	b.n	800cfce <_vfiprintf_r+0xc6>
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	1d19      	adds	r1, r3, #4
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	9103      	str	r1, [sp, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	bfbb      	ittet	lt
 800d034:	425b      	neglt	r3, r3
 800d036:	f042 0202 	orrlt.w	r2, r2, #2
 800d03a:	9307      	strge	r3, [sp, #28]
 800d03c:	9307      	strlt	r3, [sp, #28]
 800d03e:	bfb8      	it	lt
 800d040:	9204      	strlt	r2, [sp, #16]
 800d042:	7823      	ldrb	r3, [r4, #0]
 800d044:	2b2e      	cmp	r3, #46	@ 0x2e
 800d046:	d10a      	bne.n	800d05e <_vfiprintf_r+0x156>
 800d048:	7863      	ldrb	r3, [r4, #1]
 800d04a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d04c:	d132      	bne.n	800d0b4 <_vfiprintf_r+0x1ac>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	1d1a      	adds	r2, r3, #4
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	9203      	str	r2, [sp, #12]
 800d056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d05a:	3402      	adds	r4, #2
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d134 <_vfiprintf_r+0x22c>
 800d062:	7821      	ldrb	r1, [r4, #0]
 800d064:	2203      	movs	r2, #3
 800d066:	4650      	mov	r0, sl
 800d068:	f7f3 f8ea 	bl	8000240 <memchr>
 800d06c:	b138      	cbz	r0, 800d07e <_vfiprintf_r+0x176>
 800d06e:	9b04      	ldr	r3, [sp, #16]
 800d070:	eba0 000a 	sub.w	r0, r0, sl
 800d074:	2240      	movs	r2, #64	@ 0x40
 800d076:	4082      	lsls	r2, r0
 800d078:	4313      	orrs	r3, r2
 800d07a:	3401      	adds	r4, #1
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d082:	4829      	ldr	r0, [pc, #164]	@ (800d128 <_vfiprintf_r+0x220>)
 800d084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d088:	2206      	movs	r2, #6
 800d08a:	f7f3 f8d9 	bl	8000240 <memchr>
 800d08e:	2800      	cmp	r0, #0
 800d090:	d03f      	beq.n	800d112 <_vfiprintf_r+0x20a>
 800d092:	4b26      	ldr	r3, [pc, #152]	@ (800d12c <_vfiprintf_r+0x224>)
 800d094:	bb1b      	cbnz	r3, 800d0de <_vfiprintf_r+0x1d6>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	3307      	adds	r3, #7
 800d09a:	f023 0307 	bic.w	r3, r3, #7
 800d09e:	3308      	adds	r3, #8
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a4:	443b      	add	r3, r7
 800d0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0a8:	e76a      	b.n	800cf80 <_vfiprintf_r+0x78>
 800d0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	e7a8      	b.n	800d006 <_vfiprintf_r+0xfe>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	3401      	adds	r4, #1
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	f04f 0c0a 	mov.w	ip, #10
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c6:	3a30      	subs	r2, #48	@ 0x30
 800d0c8:	2a09      	cmp	r2, #9
 800d0ca:	d903      	bls.n	800d0d4 <_vfiprintf_r+0x1cc>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d0c6      	beq.n	800d05e <_vfiprintf_r+0x156>
 800d0d0:	9105      	str	r1, [sp, #20]
 800d0d2:	e7c4      	b.n	800d05e <_vfiprintf_r+0x156>
 800d0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0d8:	4604      	mov	r4, r0
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e7f0      	b.n	800d0c0 <_vfiprintf_r+0x1b8>
 800d0de:	ab03      	add	r3, sp, #12
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	4b12      	ldr	r3, [pc, #72]	@ (800d130 <_vfiprintf_r+0x228>)
 800d0e6:	a904      	add	r1, sp, #16
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7fd fc45 	bl	800a978 <_printf_float>
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	1c78      	adds	r0, r7, #1
 800d0f2:	d1d6      	bne.n	800d0a2 <_vfiprintf_r+0x19a>
 800d0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0f6:	07d9      	lsls	r1, r3, #31
 800d0f8:	d405      	bmi.n	800d106 <_vfiprintf_r+0x1fe>
 800d0fa:	89ab      	ldrh	r3, [r5, #12]
 800d0fc:	059a      	lsls	r2, r3, #22
 800d0fe:	d402      	bmi.n	800d106 <_vfiprintf_r+0x1fe>
 800d100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d102:	f7fe faab 	bl	800b65c <__retarget_lock_release_recursive>
 800d106:	89ab      	ldrh	r3, [r5, #12]
 800d108:	065b      	lsls	r3, r3, #25
 800d10a:	f53f af1f 	bmi.w	800cf4c <_vfiprintf_r+0x44>
 800d10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d110:	e71e      	b.n	800cf50 <_vfiprintf_r+0x48>
 800d112:	ab03      	add	r3, sp, #12
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	462a      	mov	r2, r5
 800d118:	4b05      	ldr	r3, [pc, #20]	@ (800d130 <_vfiprintf_r+0x228>)
 800d11a:	a904      	add	r1, sp, #16
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7fd fec3 	bl	800aea8 <_printf_i>
 800d122:	e7e4      	b.n	800d0ee <_vfiprintf_r+0x1e6>
 800d124:	0800e0fa 	.word	0x0800e0fa
 800d128:	0800e104 	.word	0x0800e104
 800d12c:	0800a979 	.word	0x0800a979
 800d130:	0800cee3 	.word	0x0800cee3
 800d134:	0800e100 	.word	0x0800e100

0800d138 <__sflush_r>:
 800d138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d140:	0716      	lsls	r6, r2, #28
 800d142:	4605      	mov	r5, r0
 800d144:	460c      	mov	r4, r1
 800d146:	d454      	bmi.n	800d1f2 <__sflush_r+0xba>
 800d148:	684b      	ldr	r3, [r1, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dc02      	bgt.n	800d154 <__sflush_r+0x1c>
 800d14e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d150:	2b00      	cmp	r3, #0
 800d152:	dd48      	ble.n	800d1e6 <__sflush_r+0xae>
 800d154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d156:	2e00      	cmp	r6, #0
 800d158:	d045      	beq.n	800d1e6 <__sflush_r+0xae>
 800d15a:	2300      	movs	r3, #0
 800d15c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d160:	682f      	ldr	r7, [r5, #0]
 800d162:	6a21      	ldr	r1, [r4, #32]
 800d164:	602b      	str	r3, [r5, #0]
 800d166:	d030      	beq.n	800d1ca <__sflush_r+0x92>
 800d168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d16a:	89a3      	ldrh	r3, [r4, #12]
 800d16c:	0759      	lsls	r1, r3, #29
 800d16e:	d505      	bpl.n	800d17c <__sflush_r+0x44>
 800d170:	6863      	ldr	r3, [r4, #4]
 800d172:	1ad2      	subs	r2, r2, r3
 800d174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d176:	b10b      	cbz	r3, 800d17c <__sflush_r+0x44>
 800d178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d17a:	1ad2      	subs	r2, r2, r3
 800d17c:	2300      	movs	r3, #0
 800d17e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d180:	6a21      	ldr	r1, [r4, #32]
 800d182:	4628      	mov	r0, r5
 800d184:	47b0      	blx	r6
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	d106      	bne.n	800d19a <__sflush_r+0x62>
 800d18c:	6829      	ldr	r1, [r5, #0]
 800d18e:	291d      	cmp	r1, #29
 800d190:	d82b      	bhi.n	800d1ea <__sflush_r+0xb2>
 800d192:	4a2a      	ldr	r2, [pc, #168]	@ (800d23c <__sflush_r+0x104>)
 800d194:	40ca      	lsrs	r2, r1
 800d196:	07d6      	lsls	r6, r2, #31
 800d198:	d527      	bpl.n	800d1ea <__sflush_r+0xb2>
 800d19a:	2200      	movs	r2, #0
 800d19c:	6062      	str	r2, [r4, #4]
 800d19e:	04d9      	lsls	r1, r3, #19
 800d1a0:	6922      	ldr	r2, [r4, #16]
 800d1a2:	6022      	str	r2, [r4, #0]
 800d1a4:	d504      	bpl.n	800d1b0 <__sflush_r+0x78>
 800d1a6:	1c42      	adds	r2, r0, #1
 800d1a8:	d101      	bne.n	800d1ae <__sflush_r+0x76>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	b903      	cbnz	r3, 800d1b0 <__sflush_r+0x78>
 800d1ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1b2:	602f      	str	r7, [r5, #0]
 800d1b4:	b1b9      	cbz	r1, 800d1e6 <__sflush_r+0xae>
 800d1b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1ba:	4299      	cmp	r1, r3
 800d1bc:	d002      	beq.n	800d1c4 <__sflush_r+0x8c>
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f7ff f8a6 	bl	800c310 <_free_r>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1c8:	e00d      	b.n	800d1e6 <__sflush_r+0xae>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	47b0      	blx	r6
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	1c50      	adds	r0, r2, #1
 800d1d4:	d1c9      	bne.n	800d16a <__sflush_r+0x32>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0c6      	beq.n	800d16a <__sflush_r+0x32>
 800d1dc:	2b1d      	cmp	r3, #29
 800d1de:	d001      	beq.n	800d1e4 <__sflush_r+0xac>
 800d1e0:	2b16      	cmp	r3, #22
 800d1e2:	d11e      	bne.n	800d222 <__sflush_r+0xea>
 800d1e4:	602f      	str	r7, [r5, #0]
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e022      	b.n	800d230 <__sflush_r+0xf8>
 800d1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ee:	b21b      	sxth	r3, r3
 800d1f0:	e01b      	b.n	800d22a <__sflush_r+0xf2>
 800d1f2:	690f      	ldr	r7, [r1, #16]
 800d1f4:	2f00      	cmp	r7, #0
 800d1f6:	d0f6      	beq.n	800d1e6 <__sflush_r+0xae>
 800d1f8:	0793      	lsls	r3, r2, #30
 800d1fa:	680e      	ldr	r6, [r1, #0]
 800d1fc:	bf08      	it	eq
 800d1fe:	694b      	ldreq	r3, [r1, #20]
 800d200:	600f      	str	r7, [r1, #0]
 800d202:	bf18      	it	ne
 800d204:	2300      	movne	r3, #0
 800d206:	eba6 0807 	sub.w	r8, r6, r7
 800d20a:	608b      	str	r3, [r1, #8]
 800d20c:	f1b8 0f00 	cmp.w	r8, #0
 800d210:	dde9      	ble.n	800d1e6 <__sflush_r+0xae>
 800d212:	6a21      	ldr	r1, [r4, #32]
 800d214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d216:	4643      	mov	r3, r8
 800d218:	463a      	mov	r2, r7
 800d21a:	4628      	mov	r0, r5
 800d21c:	47b0      	blx	r6
 800d21e:	2800      	cmp	r0, #0
 800d220:	dc08      	bgt.n	800d234 <__sflush_r+0xfc>
 800d222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d22a:	81a3      	strh	r3, [r4, #12]
 800d22c:	f04f 30ff 	mov.w	r0, #4294967295
 800d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d234:	4407      	add	r7, r0
 800d236:	eba8 0800 	sub.w	r8, r8, r0
 800d23a:	e7e7      	b.n	800d20c <__sflush_r+0xd4>
 800d23c:	20400001 	.word	0x20400001

0800d240 <_fflush_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	690b      	ldr	r3, [r1, #16]
 800d244:	4605      	mov	r5, r0
 800d246:	460c      	mov	r4, r1
 800d248:	b913      	cbnz	r3, 800d250 <_fflush_r+0x10>
 800d24a:	2500      	movs	r5, #0
 800d24c:	4628      	mov	r0, r5
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	b118      	cbz	r0, 800d25a <_fflush_r+0x1a>
 800d252:	6a03      	ldr	r3, [r0, #32]
 800d254:	b90b      	cbnz	r3, 800d25a <_fflush_r+0x1a>
 800d256:	f7fd ffd1 	bl	800b1fc <__sinit>
 800d25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d0f3      	beq.n	800d24a <_fflush_r+0xa>
 800d262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d264:	07d0      	lsls	r0, r2, #31
 800d266:	d404      	bmi.n	800d272 <_fflush_r+0x32>
 800d268:	0599      	lsls	r1, r3, #22
 800d26a:	d402      	bmi.n	800d272 <_fflush_r+0x32>
 800d26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d26e:	f7fe f9f4 	bl	800b65a <__retarget_lock_acquire_recursive>
 800d272:	4628      	mov	r0, r5
 800d274:	4621      	mov	r1, r4
 800d276:	f7ff ff5f 	bl	800d138 <__sflush_r>
 800d27a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d27c:	07da      	lsls	r2, r3, #31
 800d27e:	4605      	mov	r5, r0
 800d280:	d4e4      	bmi.n	800d24c <_fflush_r+0xc>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	059b      	lsls	r3, r3, #22
 800d286:	d4e1      	bmi.n	800d24c <_fflush_r+0xc>
 800d288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d28a:	f7fe f9e7 	bl	800b65c <__retarget_lock_release_recursive>
 800d28e:	e7dd      	b.n	800d24c <_fflush_r+0xc>

0800d290 <__swhatbuf_r>:
 800d290:	b570      	push	{r4, r5, r6, lr}
 800d292:	460c      	mov	r4, r1
 800d294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d298:	2900      	cmp	r1, #0
 800d29a:	b096      	sub	sp, #88	@ 0x58
 800d29c:	4615      	mov	r5, r2
 800d29e:	461e      	mov	r6, r3
 800d2a0:	da0d      	bge.n	800d2be <__swhatbuf_r+0x2e>
 800d2a2:	89a3      	ldrh	r3, [r4, #12]
 800d2a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2a8:	f04f 0100 	mov.w	r1, #0
 800d2ac:	bf14      	ite	ne
 800d2ae:	2340      	movne	r3, #64	@ 0x40
 800d2b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	6031      	str	r1, [r6, #0]
 800d2b8:	602b      	str	r3, [r5, #0]
 800d2ba:	b016      	add	sp, #88	@ 0x58
 800d2bc:	bd70      	pop	{r4, r5, r6, pc}
 800d2be:	466a      	mov	r2, sp
 800d2c0:	f000 f862 	bl	800d388 <_fstat_r>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	dbec      	blt.n	800d2a2 <__swhatbuf_r+0x12>
 800d2c8:	9901      	ldr	r1, [sp, #4]
 800d2ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2d2:	4259      	negs	r1, r3
 800d2d4:	4159      	adcs	r1, r3
 800d2d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2da:	e7eb      	b.n	800d2b4 <__swhatbuf_r+0x24>

0800d2dc <__smakebuf_r>:
 800d2dc:	898b      	ldrh	r3, [r1, #12]
 800d2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2e0:	079d      	lsls	r5, r3, #30
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	d507      	bpl.n	800d2f8 <__smakebuf_r+0x1c>
 800d2e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	6123      	str	r3, [r4, #16]
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	6163      	str	r3, [r4, #20]
 800d2f4:	b003      	add	sp, #12
 800d2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f8:	ab01      	add	r3, sp, #4
 800d2fa:	466a      	mov	r2, sp
 800d2fc:	f7ff ffc8 	bl	800d290 <__swhatbuf_r>
 800d300:	9f00      	ldr	r7, [sp, #0]
 800d302:	4605      	mov	r5, r0
 800d304:	4639      	mov	r1, r7
 800d306:	4630      	mov	r0, r6
 800d308:	f7ff f876 	bl	800c3f8 <_malloc_r>
 800d30c:	b948      	cbnz	r0, 800d322 <__smakebuf_r+0x46>
 800d30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d312:	059a      	lsls	r2, r3, #22
 800d314:	d4ee      	bmi.n	800d2f4 <__smakebuf_r+0x18>
 800d316:	f023 0303 	bic.w	r3, r3, #3
 800d31a:	f043 0302 	orr.w	r3, r3, #2
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	e7e2      	b.n	800d2e8 <__smakebuf_r+0xc>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	6020      	str	r0, [r4, #0]
 800d326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d332:	b15b      	cbz	r3, 800d34c <__smakebuf_r+0x70>
 800d334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d338:	4630      	mov	r0, r6
 800d33a:	f000 f837 	bl	800d3ac <_isatty_r>
 800d33e:	b128      	cbz	r0, 800d34c <__smakebuf_r+0x70>
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f023 0303 	bic.w	r3, r3, #3
 800d346:	f043 0301 	orr.w	r3, r3, #1
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	431d      	orrs	r5, r3
 800d350:	81a5      	strh	r5, [r4, #12]
 800d352:	e7cf      	b.n	800d2f4 <__smakebuf_r+0x18>

0800d354 <memmove>:
 800d354:	4288      	cmp	r0, r1
 800d356:	b510      	push	{r4, lr}
 800d358:	eb01 0402 	add.w	r4, r1, r2
 800d35c:	d902      	bls.n	800d364 <memmove+0x10>
 800d35e:	4284      	cmp	r4, r0
 800d360:	4623      	mov	r3, r4
 800d362:	d807      	bhi.n	800d374 <memmove+0x20>
 800d364:	1e43      	subs	r3, r0, #1
 800d366:	42a1      	cmp	r1, r4
 800d368:	d008      	beq.n	800d37c <memmove+0x28>
 800d36a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d36e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d372:	e7f8      	b.n	800d366 <memmove+0x12>
 800d374:	4402      	add	r2, r0
 800d376:	4601      	mov	r1, r0
 800d378:	428a      	cmp	r2, r1
 800d37a:	d100      	bne.n	800d37e <memmove+0x2a>
 800d37c:	bd10      	pop	{r4, pc}
 800d37e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d386:	e7f7      	b.n	800d378 <memmove+0x24>

0800d388 <_fstat_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d07      	ldr	r5, [pc, #28]	@ (800d3a8 <_fstat_r+0x20>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	4611      	mov	r1, r2
 800d394:	602b      	str	r3, [r5, #0]
 800d396:	f7f5 f8ad 	bl	80024f4 <_fstat>
 800d39a:	1c43      	adds	r3, r0, #1
 800d39c:	d102      	bne.n	800d3a4 <_fstat_r+0x1c>
 800d39e:	682b      	ldr	r3, [r5, #0]
 800d3a0:	b103      	cbz	r3, 800d3a4 <_fstat_r+0x1c>
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	bd38      	pop	{r3, r4, r5, pc}
 800d3a6:	bf00      	nop
 800d3a8:	2000289c 	.word	0x2000289c

0800d3ac <_isatty_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4d06      	ldr	r5, [pc, #24]	@ (800d3c8 <_isatty_r+0x1c>)
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	602b      	str	r3, [r5, #0]
 800d3b8:	f7f5 f8ac 	bl	8002514 <_isatty>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_isatty_r+0x1a>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_isatty_r+0x1a>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	2000289c 	.word	0x2000289c

0800d3cc <_sbrk_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4d06      	ldr	r5, [pc, #24]	@ (800d3e8 <_sbrk_r+0x1c>)
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4608      	mov	r0, r1
 800d3d6:	602b      	str	r3, [r5, #0]
 800d3d8:	f7f5 f8b4 	bl	8002544 <_sbrk>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d102      	bne.n	800d3e6 <_sbrk_r+0x1a>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	b103      	cbz	r3, 800d3e6 <_sbrk_r+0x1a>
 800d3e4:	6023      	str	r3, [r4, #0]
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	2000289c 	.word	0x2000289c

0800d3ec <memcpy>:
 800d3ec:	440a      	add	r2, r1
 800d3ee:	4291      	cmp	r1, r2
 800d3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3f4:	d100      	bne.n	800d3f8 <memcpy+0xc>
 800d3f6:	4770      	bx	lr
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d402:	4291      	cmp	r1, r2
 800d404:	d1f9      	bne.n	800d3fa <memcpy+0xe>
 800d406:	bd10      	pop	{r4, pc}

0800d408 <__assert_func>:
 800d408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d40a:	4614      	mov	r4, r2
 800d40c:	461a      	mov	r2, r3
 800d40e:	4b09      	ldr	r3, [pc, #36]	@ (800d434 <__assert_func+0x2c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4605      	mov	r5, r0
 800d414:	68d8      	ldr	r0, [r3, #12]
 800d416:	b14c      	cbz	r4, 800d42c <__assert_func+0x24>
 800d418:	4b07      	ldr	r3, [pc, #28]	@ (800d438 <__assert_func+0x30>)
 800d41a:	9100      	str	r1, [sp, #0]
 800d41c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d420:	4906      	ldr	r1, [pc, #24]	@ (800d43c <__assert_func+0x34>)
 800d422:	462b      	mov	r3, r5
 800d424:	f000 f870 	bl	800d508 <fiprintf>
 800d428:	f000 f880 	bl	800d52c <abort>
 800d42c:	4b04      	ldr	r3, [pc, #16]	@ (800d440 <__assert_func+0x38>)
 800d42e:	461c      	mov	r4, r3
 800d430:	e7f3      	b.n	800d41a <__assert_func+0x12>
 800d432:	bf00      	nop
 800d434:	20000030 	.word	0x20000030
 800d438:	0800e115 	.word	0x0800e115
 800d43c:	0800e122 	.word	0x0800e122
 800d440:	0800e150 	.word	0x0800e150

0800d444 <_calloc_r>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	fba1 5402 	umull	r5, r4, r1, r2
 800d44a:	b934      	cbnz	r4, 800d45a <_calloc_r+0x16>
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7fe ffd3 	bl	800c3f8 <_malloc_r>
 800d452:	4606      	mov	r6, r0
 800d454:	b928      	cbnz	r0, 800d462 <_calloc_r+0x1e>
 800d456:	4630      	mov	r0, r6
 800d458:	bd70      	pop	{r4, r5, r6, pc}
 800d45a:	220c      	movs	r2, #12
 800d45c:	6002      	str	r2, [r0, #0]
 800d45e:	2600      	movs	r6, #0
 800d460:	e7f9      	b.n	800d456 <_calloc_r+0x12>
 800d462:	462a      	mov	r2, r5
 800d464:	4621      	mov	r1, r4
 800d466:	f7fe f869 	bl	800b53c <memset>
 800d46a:	e7f4      	b.n	800d456 <_calloc_r+0x12>

0800d46c <__ascii_mbtowc>:
 800d46c:	b082      	sub	sp, #8
 800d46e:	b901      	cbnz	r1, 800d472 <__ascii_mbtowc+0x6>
 800d470:	a901      	add	r1, sp, #4
 800d472:	b142      	cbz	r2, 800d486 <__ascii_mbtowc+0x1a>
 800d474:	b14b      	cbz	r3, 800d48a <__ascii_mbtowc+0x1e>
 800d476:	7813      	ldrb	r3, [r2, #0]
 800d478:	600b      	str	r3, [r1, #0]
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	1e10      	subs	r0, r2, #0
 800d47e:	bf18      	it	ne
 800d480:	2001      	movne	r0, #1
 800d482:	b002      	add	sp, #8
 800d484:	4770      	bx	lr
 800d486:	4610      	mov	r0, r2
 800d488:	e7fb      	b.n	800d482 <__ascii_mbtowc+0x16>
 800d48a:	f06f 0001 	mvn.w	r0, #1
 800d48e:	e7f8      	b.n	800d482 <__ascii_mbtowc+0x16>

0800d490 <_realloc_r>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	4607      	mov	r7, r0
 800d496:	4614      	mov	r4, r2
 800d498:	460d      	mov	r5, r1
 800d49a:	b921      	cbnz	r1, 800d4a6 <_realloc_r+0x16>
 800d49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	f7fe bfa9 	b.w	800c3f8 <_malloc_r>
 800d4a6:	b92a      	cbnz	r2, 800d4b4 <_realloc_r+0x24>
 800d4a8:	f7fe ff32 	bl	800c310 <_free_r>
 800d4ac:	4625      	mov	r5, r4
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b4:	f000 f841 	bl	800d53a <_malloc_usable_size_r>
 800d4b8:	4284      	cmp	r4, r0
 800d4ba:	4606      	mov	r6, r0
 800d4bc:	d802      	bhi.n	800d4c4 <_realloc_r+0x34>
 800d4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4c2:	d8f4      	bhi.n	800d4ae <_realloc_r+0x1e>
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	f7fe ff96 	bl	800c3f8 <_malloc_r>
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	b908      	cbnz	r0, 800d4d4 <_realloc_r+0x44>
 800d4d0:	4645      	mov	r5, r8
 800d4d2:	e7ec      	b.n	800d4ae <_realloc_r+0x1e>
 800d4d4:	42b4      	cmp	r4, r6
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	4629      	mov	r1, r5
 800d4da:	bf28      	it	cs
 800d4dc:	4632      	movcs	r2, r6
 800d4de:	f7ff ff85 	bl	800d3ec <memcpy>
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f7fe ff13 	bl	800c310 <_free_r>
 800d4ea:	e7f1      	b.n	800d4d0 <_realloc_r+0x40>

0800d4ec <__ascii_wctomb>:
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	b141      	cbz	r1, 800d504 <__ascii_wctomb+0x18>
 800d4f2:	2aff      	cmp	r2, #255	@ 0xff
 800d4f4:	d904      	bls.n	800d500 <__ascii_wctomb+0x14>
 800d4f6:	228a      	movs	r2, #138	@ 0x8a
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	4770      	bx	lr
 800d500:	700a      	strb	r2, [r1, #0]
 800d502:	2001      	movs	r0, #1
 800d504:	4770      	bx	lr
	...

0800d508 <fiprintf>:
 800d508:	b40e      	push	{r1, r2, r3}
 800d50a:	b503      	push	{r0, r1, lr}
 800d50c:	4601      	mov	r1, r0
 800d50e:	ab03      	add	r3, sp, #12
 800d510:	4805      	ldr	r0, [pc, #20]	@ (800d528 <fiprintf+0x20>)
 800d512:	f853 2b04 	ldr.w	r2, [r3], #4
 800d516:	6800      	ldr	r0, [r0, #0]
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	f7ff fcf5 	bl	800cf08 <_vfiprintf_r>
 800d51e:	b002      	add	sp, #8
 800d520:	f85d eb04 	ldr.w	lr, [sp], #4
 800d524:	b003      	add	sp, #12
 800d526:	4770      	bx	lr
 800d528:	20000030 	.word	0x20000030

0800d52c <abort>:
 800d52c:	b508      	push	{r3, lr}
 800d52e:	2006      	movs	r0, #6
 800d530:	f000 f834 	bl	800d59c <raise>
 800d534:	2001      	movs	r0, #1
 800d536:	f7f4 ff8d 	bl	8002454 <_exit>

0800d53a <_malloc_usable_size_r>:
 800d53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d53e:	1f18      	subs	r0, r3, #4
 800d540:	2b00      	cmp	r3, #0
 800d542:	bfbc      	itt	lt
 800d544:	580b      	ldrlt	r3, [r1, r0]
 800d546:	18c0      	addlt	r0, r0, r3
 800d548:	4770      	bx	lr

0800d54a <_raise_r>:
 800d54a:	291f      	cmp	r1, #31
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4605      	mov	r5, r0
 800d550:	460c      	mov	r4, r1
 800d552:	d904      	bls.n	800d55e <_raise_r+0x14>
 800d554:	2316      	movs	r3, #22
 800d556:	6003      	str	r3, [r0, #0]
 800d558:	f04f 30ff 	mov.w	r0, #4294967295
 800d55c:	bd38      	pop	{r3, r4, r5, pc}
 800d55e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d560:	b112      	cbz	r2, 800d568 <_raise_r+0x1e>
 800d562:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d566:	b94b      	cbnz	r3, 800d57c <_raise_r+0x32>
 800d568:	4628      	mov	r0, r5
 800d56a:	f000 f831 	bl	800d5d0 <_getpid_r>
 800d56e:	4622      	mov	r2, r4
 800d570:	4601      	mov	r1, r0
 800d572:	4628      	mov	r0, r5
 800d574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d578:	f000 b818 	b.w	800d5ac <_kill_r>
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d00a      	beq.n	800d596 <_raise_r+0x4c>
 800d580:	1c59      	adds	r1, r3, #1
 800d582:	d103      	bne.n	800d58c <_raise_r+0x42>
 800d584:	2316      	movs	r3, #22
 800d586:	6003      	str	r3, [r0, #0]
 800d588:	2001      	movs	r0, #1
 800d58a:	e7e7      	b.n	800d55c <_raise_r+0x12>
 800d58c:	2100      	movs	r1, #0
 800d58e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d592:	4620      	mov	r0, r4
 800d594:	4798      	blx	r3
 800d596:	2000      	movs	r0, #0
 800d598:	e7e0      	b.n	800d55c <_raise_r+0x12>
	...

0800d59c <raise>:
 800d59c:	4b02      	ldr	r3, [pc, #8]	@ (800d5a8 <raise+0xc>)
 800d59e:	4601      	mov	r1, r0
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	f7ff bfd2 	b.w	800d54a <_raise_r>
 800d5a6:	bf00      	nop
 800d5a8:	20000030 	.word	0x20000030

0800d5ac <_kill_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4d07      	ldr	r5, [pc, #28]	@ (800d5cc <_kill_r+0x20>)
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	4608      	mov	r0, r1
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	602b      	str	r3, [r5, #0]
 800d5ba:	f7f4 ff3b 	bl	8002434 <_kill>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d102      	bne.n	800d5c8 <_kill_r+0x1c>
 800d5c2:	682b      	ldr	r3, [r5, #0]
 800d5c4:	b103      	cbz	r3, 800d5c8 <_kill_r+0x1c>
 800d5c6:	6023      	str	r3, [r4, #0]
 800d5c8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2000289c 	.word	0x2000289c

0800d5d0 <_getpid_r>:
 800d5d0:	f7f4 bf28 	b.w	8002424 <_getpid>

0800d5d4 <_init>:
 800d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d6:	bf00      	nop
 800d5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5da:	bc08      	pop	{r3}
 800d5dc:	469e      	mov	lr, r3
 800d5de:	4770      	bx	lr

0800d5e0 <_fini>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	bf00      	nop
 800d5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e6:	bc08      	pop	{r3}
 800d5e8:	469e      	mov	lr, r3
 800d5ea:	4770      	bx	lr
