
EX_OLED_BTN_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  080028bc  080028bc  000038bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003064  08003064  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003064  08003064  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003064  08003064  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003068  08003068  00004068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800306c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08003078  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003078  000050a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079a1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a54  00000000  00000000  0000c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001ca3d  00000000  00000000  0000ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009ecf  00000000  00000000  0002b6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b21de  00000000  00000000  000355a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e7782  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000623  00000000  00000000  000e77c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fa0  00000000  00000000  000e7de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e9d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080028a4 	.word	0x080028a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080028a4 	.word	0x080028a4

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b56      	ldr	r3, [pc, #344]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a55      	ldr	r2, [pc, #340]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b53      	ldr	r3, [pc, #332]	@ (8000388 <MX_GPIO_Init+0x170>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b50      	ldr	r3, [pc, #320]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a4f      	ldr	r2, [pc, #316]	@ (8000388 <MX_GPIO_Init+0x170>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b4d      	ldr	r3, [pc, #308]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b4a      	ldr	r3, [pc, #296]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a49      	ldr	r2, [pc, #292]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b47      	ldr	r3, [pc, #284]	@ (8000388 <MX_GPIO_Init+0x170>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	4b44      	ldr	r3, [pc, #272]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a43      	ldr	r2, [pc, #268]	@ (8000388 <MX_GPIO_Init+0x170>)
 800027c:	f043 0302 	orr.w	r3, r3, #2
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b41      	ldr	r3, [pc, #260]	@ (8000388 <MX_GPIO_Init+0x170>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINK_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000294:	483d      	ldr	r0, [pc, #244]	@ (800038c <MX_GPIO_Init+0x174>)
 8000296:	f001 f979 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f248 1103 	movw	r1, #33027	@ 0x8103
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a4:	f001 f972 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80002ae:	4838      	ldr	r0, [pc, #224]	@ (8000390 <MX_GPIO_Init+0x178>)
 80002b0:	f001 f96c 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LINK_LED_Pin STATUS_LED_Pin */
  GPIO_InitStruct.Pin = LINK_LED_Pin|STATUS_LED_Pin;
 80002b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	4619      	mov	r1, r3
 80002cc:	482f      	ldr	r0, [pc, #188]	@ (800038c <MX_GPIO_Init+0x174>)
 80002ce:	f000 ffc3 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80002d2:	f248 1303 	movw	r3, #33027	@ 0x8103
 80002d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	2301      	movs	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	4619      	mov	r1, r3
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ee:	f000 ffb3 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80002f2:	2301      	movs	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80002fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4619      	mov	r1, r3
 8000306:	4822      	ldr	r0, [pc, #136]	@ (8000390 <MX_GPIO_Init+0x178>)
 8000308:	f000 ffa6 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN4_Pin;
 800030c:	2306      	movs	r3, #6
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4619      	mov	r1, r3
 800031e:	481c      	ldr	r0, [pc, #112]	@ (8000390 <MX_GPIO_Init+0x178>)
 8000320:	f000 ff9a 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LCD_RST_Pin;
 8000324:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	4814      	ldr	r0, [pc, #80]	@ (8000390 <MX_GPIO_Init+0x178>)
 800033e:	f000 ff8b 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000348:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f000 ff7c 	bl	8001258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	2006      	movs	r0, #6
 8000366:	f000 ff42 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036a:	2006      	movs	r0, #6
 800036c:	f000 ff59 	bl	8001222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	2017      	movs	r0, #23
 8000376:	f000 ff3a 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800037a:	2017      	movs	r0, #23
 800037c:	f000 ff51 	bl	8001222 <HAL_NVIC_EnableIRQ>

}
 8000380:	bf00      	nop
 8000382:	3728      	adds	r7, #40	@ 0x28
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	48000400 	.word	0x48000400

08000394 <DebouncedBTN>:
 */



static void DebouncedBTN(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
  uint32_t now = HAL_GetTick();
 800039a:	f000 fe1f 	bl	8000fdc <HAL_GetTick>
 800039e:	6078      	str	r0, [r7, #4]

  // BTN1: pending이면 DEBOUNCE_MS 지난 뒤 현재 레벨을 읽어 상태 확정, (한번더 체크)
  if (btn1_keep && (now - btn1_last_edge) >= DEBOUNCE_MS)
 80003a0:	4b35      	ldr	r3, [pc, #212]	@ (8000478 <DebouncedBTN+0xe4>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d02f      	beq.n	800040a <DebouncedBTN+0x76>
 80003aa:	4b34      	ldr	r3, [pc, #208]	@ (800047c <DebouncedBTN+0xe8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	2b09      	cmp	r3, #9
 80003b4:	d929      	bls.n	800040a <DebouncedBTN+0x76>
  {
    btn1_keep = 0; // 이번 변화에 대한 판정을 시작하므로 keep 클리어
 80003b6:	4b30      	ldr	r3, [pc, #192]	@ (8000478 <DebouncedBTN+0xe4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]


    uint8_t cur = (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET); // 현재 핀상태
 80003bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c4:	f001 f8ca 	bl	800155c <HAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	bf0c      	ite	eq
 80003ce:	2301      	moveq	r3, #1
 80003d0:	2300      	movne	r3, #0
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	70fb      	strb	r3, [r7, #3]

    // 상태가 바뀌었을 때만 OLED/LED를 갱신하도록 플래그 및 출력 처리
    if (cur != btn1_state)
 80003d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <DebouncedBTN+0xec>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	78fa      	ldrb	r2, [r7, #3]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d013      	beq.n	800040a <DebouncedBTN+0x76>
    {
      btn1_state = cur;
 80003e2:	4a27      	ldr	r2, [pc, #156]	@ (8000480 <DebouncedBTN+0xec>)
 80003e4:	78fb      	ldrb	r3, [r7, #3]
 80003e6:	7013      	strb	r3, [r2, #0]
      btn1_oled_flag = 1; // 메인 루프에서 한 번만 OLED 갱신
 80003e8:	4b26      	ldr	r3, [pc, #152]	@ (8000484 <DebouncedBTN+0xf0>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]

      // 버튼 눌림에 따라 LED on/off (active-low LED 가정)
      HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin,
 80003ee:	4b24      	ldr	r3, [pc, #144]	@ (8000480 <DebouncedBTN+0xec>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf0c      	ite	eq
 80003f8:	2301      	moveq	r3, #1
 80003fa:	2300      	movne	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000404:	4820      	ldr	r0, [pc, #128]	@ (8000488 <DebouncedBTN+0xf4>)
 8000406:	f001 f8c1 	bl	800158c <HAL_GPIO_WritePin>
                        btn1_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
  }

  // BTN2: BTN1과 동일한 로직
  if (btn2_keep && (now - btn2_last_edge) >= DEBOUNCE_MS)
 800040a:	4b20      	ldr	r3, [pc, #128]	@ (800048c <DebouncedBTN+0xf8>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d02d      	beq.n	8000470 <DebouncedBTN+0xdc>
 8000414:	4b1e      	ldr	r3, [pc, #120]	@ (8000490 <DebouncedBTN+0xfc>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	2b09      	cmp	r3, #9
 800041e:	d927      	bls.n	8000470 <DebouncedBTN+0xdc>
  {
    btn2_keep = 0;
 8000420:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <DebouncedBTN+0xf8>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]

    uint8_t cur = (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET);
 8000426:	2101      	movs	r1, #1
 8000428:	481a      	ldr	r0, [pc, #104]	@ (8000494 <DebouncedBTN+0x100>)
 800042a:	f001 f897 	bl	800155c <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf0c      	ite	eq
 8000434:	2301      	moveq	r3, #1
 8000436:	2300      	movne	r3, #0
 8000438:	b2db      	uxtb	r3, r3
 800043a:	70bb      	strb	r3, [r7, #2]

    if (cur != btn2_state)
 800043c:	4b16      	ldr	r3, [pc, #88]	@ (8000498 <DebouncedBTN+0x104>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	78ba      	ldrb	r2, [r7, #2]
 8000444:	429a      	cmp	r2, r3
 8000446:	d013      	beq.n	8000470 <DebouncedBTN+0xdc>
    {
      btn2_state = cur;
 8000448:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <DebouncedBTN+0x104>)
 800044a:	78bb      	ldrb	r3, [r7, #2]
 800044c:	7013      	strb	r3, [r2, #0]
      btn2_oled_flag = 1;
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <DebouncedBTN+0x108>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(LINK_LED_GPIO_Port, LINK_LED_Pin,
 8000454:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <DebouncedBTN+0x104>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800046a:	4807      	ldr	r0, [pc, #28]	@ (8000488 <DebouncedBTN+0xf4>)
 800046c:	f001 f88e 	bl	800158c <HAL_GPIO_WritePin>
                        btn2_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
  }
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	2000002c 	.word	0x2000002c
 800047c:	20000030 	.word	0x20000030
 8000480:	20000028 	.word	0x20000028
 8000484:	2000002a 	.word	0x2000002a
 8000488:	48000800 	.word	0x48000800
 800048c:	2000002d 	.word	0x2000002d
 8000490:	20000034 	.word	0x20000034
 8000494:	48000400 	.word	0x48000400
 8000498:	20000029 	.word	0x20000029
 800049c:	2000002b 	.word	0x2000002b

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 fd34 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f8b9 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f7ff feb3 	bl	8000218 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004b2:	f000 fc0f 	bl	8000cd4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	// 가장 작은 폰트로 첫 글자만
	OLED_init(); // oled 초기화
 80004b6:	f000 f9a9 	bl	800080c <OLED_init>

	OLED_fill(0); // oled 전체를 검은색으로 칠함
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fa80 	bl	80009c0 <OLED_fill>

	// (x좌표, y좌표, String, font, 밝기)
	oled_drawString(20, 0, "Button List", &font_07x10, 15); // 화면 위쪽
 80004c0:	230f      	movs	r3, #15
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	4b4c      	ldr	r3, [pc, #304]	@ (80005f8 <main+0x158>)
 80004c6:	4a4d      	ldr	r2, [pc, #308]	@ (80005fc <main+0x15c>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	2014      	movs	r0, #20
 80004cc:	f000 fbcc 	bl	8000c68 <oled_drawString>
	oled_drawString(0, 20, "Button1", &font_07x10, 15); // 화면 왼쪽
 80004d0:	230f      	movs	r3, #15
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	4b48      	ldr	r3, [pc, #288]	@ (80005f8 <main+0x158>)
 80004d6:	4a4a      	ldr	r2, [pc, #296]	@ (8000600 <main+0x160>)
 80004d8:	2114      	movs	r1, #20
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 fbc4 	bl	8000c68 <oled_drawString>
	oled_drawString(60, 20, "OFF", &font_07x10, 1); // 화면 중앙, OFF는 어둡게...
 80004e0:	2301      	movs	r3, #1
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b44      	ldr	r3, [pc, #272]	@ (80005f8 <main+0x158>)
 80004e6:	4a47      	ldr	r2, [pc, #284]	@ (8000604 <main+0x164>)
 80004e8:	2114      	movs	r1, #20
 80004ea:	203c      	movs	r0, #60	@ 0x3c
 80004ec:	f000 fbbc 	bl	8000c68 <oled_drawString>
	oled_drawString(0, 40, "Button2", &font_07x10, 15); // Button1 아래
 80004f0:	230f      	movs	r3, #15
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	4b40      	ldr	r3, [pc, #256]	@ (80005f8 <main+0x158>)
 80004f6:	4a44      	ldr	r2, [pc, #272]	@ (8000608 <main+0x168>)
 80004f8:	2128      	movs	r1, #40	@ 0x28
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fbb4 	bl	8000c68 <oled_drawString>
	oled_drawString(60, 40, "OFF", &font_07x10, 1);
 8000500:	2301      	movs	r3, #1
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	4b3c      	ldr	r3, [pc, #240]	@ (80005f8 <main+0x158>)
 8000506:	4a3f      	ldr	r2, [pc, #252]	@ (8000604 <main+0x164>)
 8000508:	2128      	movs	r1, #40	@ 0x28
 800050a:	203c      	movs	r0, #60	@ 0x3c
 800050c:	f000 fbac 	bl	8000c68 <oled_drawString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		DebouncedBTN();
 8000510:	f7ff ff40 	bl	8000394 <DebouncedBTN>
		  if (btn1_oled_flag || btn2_oled_flag)
 8000514:	4b3d      	ldr	r3, [pc, #244]	@ (800060c <main+0x16c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d104      	bne.n	8000528 <main+0x88>
 800051e:	4b3c      	ldr	r3, [pc, #240]	@ (8000610 <main+0x170>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f3      	beq.n	8000510 <main+0x70>
		  {
		    btn1_oled_flag = 0;
 8000528:	4b38      	ldr	r3, [pc, #224]	@ (800060c <main+0x16c>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
		    btn2_oled_flag = 0;
 800052e:	4b38      	ldr	r3, [pc, #224]	@ (8000610 <main+0x170>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]

		    if (btn1_state && btn2_state)
 8000534:	4b37      	ldr	r3, [pc, #220]	@ (8000614 <main+0x174>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d015      	beq.n	800056a <main+0xca>
 800053e:	4b36      	ldr	r3, [pc, #216]	@ (8000618 <main+0x178>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d010      	beq.n	800056a <main+0xca>
		    {
		      oled_drawString(60, 20, "ON ",  &font_07x10, 15);
 8000548:	230f      	movs	r3, #15
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <main+0x158>)
 800054e:	4a33      	ldr	r2, [pc, #204]	@ (800061c <main+0x17c>)
 8000550:	2114      	movs	r1, #20
 8000552:	203c      	movs	r0, #60	@ 0x3c
 8000554:	f000 fb88 	bl	8000c68 <oled_drawString>
		      oled_drawString(60, 40, "ON ",  &font_07x10, 15);
 8000558:	230f      	movs	r3, #15
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <main+0x158>)
 800055e:	4a2f      	ldr	r2, [pc, #188]	@ (800061c <main+0x17c>)
 8000560:	2128      	movs	r1, #40	@ 0x28
 8000562:	203c      	movs	r0, #60	@ 0x3c
 8000564:	f000 fb80 	bl	8000c68 <oled_drawString>
 8000568:	e045      	b.n	80005f6 <main+0x156>

		    } else if (btn1_state && !btn2_state)
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <main+0x174>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d015      	beq.n	80005a0 <main+0x100>
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <main+0x178>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d110      	bne.n	80005a0 <main+0x100>
		    {
		      oled_drawString(60, 20, "ON ",  &font_07x10, 15);
 800057e:	230f      	movs	r3, #15
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0x158>)
 8000584:	4a25      	ldr	r2, [pc, #148]	@ (800061c <main+0x17c>)
 8000586:	2114      	movs	r1, #20
 8000588:	203c      	movs	r0, #60	@ 0x3c
 800058a:	f000 fb6d 	bl	8000c68 <oled_drawString>
		      oled_drawString(60, 40, "OFF",  &font_07x10, 1);
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <main+0x158>)
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <main+0x164>)
 8000596:	2128      	movs	r1, #40	@ 0x28
 8000598:	203c      	movs	r0, #60	@ 0x3c
 800059a:	f000 fb65 	bl	8000c68 <oled_drawString>
 800059e:	e02a      	b.n	80005f6 <main+0x156>

		    } else if (!btn1_state && btn2_state)
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <main+0x174>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d115      	bne.n	80005d6 <main+0x136>
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <main+0x178>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d010      	beq.n	80005d6 <main+0x136>
		    {
		      oled_drawString(60, 20, "OFF",  &font_07x10, 1);
 80005b4:	2301      	movs	r3, #1
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x158>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <main+0x164>)
 80005bc:	2114      	movs	r1, #20
 80005be:	203c      	movs	r0, #60	@ 0x3c
 80005c0:	f000 fb52 	bl	8000c68 <oled_drawString>
		      oled_drawString(60, 40, "ON ",  &font_07x10, 15);
 80005c4:	230f      	movs	r3, #15
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <main+0x158>)
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <main+0x17c>)
 80005cc:	2128      	movs	r1, #40	@ 0x28
 80005ce:	203c      	movs	r0, #60	@ 0x3c
 80005d0:	f000 fb4a 	bl	8000c68 <oled_drawString>
 80005d4:	e00f      	b.n	80005f6 <main+0x156>

		    } else
		    {
		      oled_drawString(60, 20, "OFF",  &font_07x10, 1);
 80005d6:	2301      	movs	r3, #1
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <main+0x158>)
 80005dc:	4a09      	ldr	r2, [pc, #36]	@ (8000604 <main+0x164>)
 80005de:	2114      	movs	r1, #20
 80005e0:	203c      	movs	r0, #60	@ 0x3c
 80005e2:	f000 fb41 	bl	8000c68 <oled_drawString>
		      oled_drawString(60, 40, "OFF",  &font_07x10, 1);
 80005e6:	2301      	movs	r3, #1
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <main+0x158>)
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <main+0x164>)
 80005ee:	2128      	movs	r1, #40	@ 0x28
 80005f0:	203c      	movs	r0, #60	@ 0x3c
 80005f2:	f000 fb39 	bl	8000c68 <oled_drawString>
		DebouncedBTN();
 80005f6:	e78b      	b.n	8000510 <main+0x70>
 80005f8:	0800304c 	.word	0x0800304c
 80005fc:	080028bc 	.word	0x080028bc
 8000600:	080028c8 	.word	0x080028c8
 8000604:	080028d0 	.word	0x080028d0
 8000608:	080028d4 	.word	0x080028d4
 800060c:	2000002a 	.word	0x2000002a
 8000610:	2000002b 	.word	0x2000002b
 8000614:	20000028 	.word	0x20000028
 8000618:	20000029 	.word	0x20000029
 800061c:	080028dc 	.word	0x080028dc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	@ 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f90c 	bl	800284c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 ffd2 	bl	80015ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	2303      	movs	r3, #3
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800065a:	2301      	movs	r3, #1
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800065e:	2328      	movs	r3, #40	@ 0x28
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f86e 	bl	8001754 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800067e:	f000 f841 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fb6c 	bl	8001d78 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006a6:	f000 f82d 	bl	8000704 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_GPIO_EXTI_Callback>:

//========= 인터럽트 발생 콜백함수 추가!! ======================


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	80fb      	strh	r3, [r7, #6]
  uint32_t now = HAL_GetTick();
 80006be:	f000 fc8d 	bl	8000fdc <HAL_GetTick>
 80006c2:	60f8      	str	r0, [r7, #12]
  if (GPIO_Pin == BTN1_Pin)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ca:	d106      	bne.n	80006da <HAL_GPIO_EXTI_Callback+0x26>
  {
    btn1_last_edge = now;
 80006cc:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6013      	str	r3, [r2, #0]
    btn1_keep = 1;          // 상태 확정은 메인루프로 미룸
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0x44>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
  } else if (GPIO_Pin == BTN2_Pin)
  {
    btn2_last_edge = now;
    btn2_keep = 1;
  }
}
 80006d8:	e008      	b.n	80006ec <HAL_GPIO_EXTI_Callback+0x38>
  } else if (GPIO_Pin == BTN2_Pin)
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <HAL_GPIO_EXTI_Callback+0x38>
    btn2_last_edge = now;
 80006e0:	4a06      	ldr	r2, [pc, #24]	@ (80006fc <HAL_GPIO_EXTI_Callback+0x48>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6013      	str	r3, [r2, #0]
    btn2_keep = 1;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000030 	.word	0x20000030
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	20000034 	.word	0x20000034
 8000700:	2000002d 	.word	0x2000002d

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <OLED_write_cmd>:

/* ======== Static 함수들 ======== */

// OLED 명령어 모드!
static void OLED_write_cmd(uint8_t cmd)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  DC_CMD();     // DC핀을 LOW로 설정 (명령어 모드)
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000724:	f000 ff32 	bl	800158c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000732:	f000 ff2b 	bl	800158c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);  // SPI로 명령어 전송
 8000736:	1df9      	adds	r1, r7, #7
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2201      	movs	r2, #1
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <OLED_write_cmd+0x4c>)
 8000740:	f001 fda9 	bl	8002296 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074e:	f000 ff1d 	bl	800158c <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000003c 	.word	0x2000003c

08000760 <OLED_write_data>:

// OLED 데이터 모드!
static void OLED_write_data(const uint8_t* p, uint16_t len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
  DC_DATA();    // DC핀을 HIGH로 설정 (데이터 모드)
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 ff09 	bl	800158c <HAL_GPIO_WritePin>
  CS_L();       // CS핀을 LOW로 설정 (통신 시작)
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 ff02 	bl	800158c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)p, len, HAL_MAX_DELAY);  // SPI로 데이터 전송
 8000788:	887a      	ldrh	r2, [r7, #2]
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	4806      	ldr	r0, [pc, #24]	@ (80007ac <OLED_write_data+0x4c>)
 8000792:	f001 fd80 	bl	8002296 <HAL_SPI_Transmit>
  CS_H();       // CS핀을 HIGH로 설정 (통신 종료)
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 fef4 	bl	800158c <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000003c 	.word	0x2000003c

080007b0 <OLED_set_window>:

// 화면의 특정 영역을 선택하는 함수 (그리기 영역 설정)
static void OLED_set_window(uint8_t col_start, uint8_t col_end,
                            uint8_t row_start, uint8_t row_end)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	4603      	mov	r3, r0
 80007c4:	71bb      	strb	r3, [r7, #6]
 80007c6:	460b      	mov	r3, r1
 80007c8:	717b      	strb	r3, [r7, #5]
 80007ca:	4613      	mov	r3, r2
 80007cc:	713b      	strb	r3, [r7, #4]
  // 열(가로) 범위 설정
  OLED_write_cmd(OLED_SETCOLUMNADDR);
 80007ce:	2015      	movs	r0, #21
 80007d0:	f7ff ff9e 	bl	8000710 <OLED_write_cmd>
  uint8_t col[2] = { col_start, col_end };
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	733b      	strb	r3, [r7, #12]
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	737b      	strb	r3, [r7, #13]
  OLED_write_data(col, 2);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2102      	movs	r1, #2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffbc 	bl	8000760 <OLED_write_data>

  // 행(세로) 범위 설정
  OLED_write_cmd(OLED_SETROWADDR);
 80007e8:	2075      	movs	r0, #117	@ 0x75
 80007ea:	f7ff ff91 	bl	8000710 <OLED_write_cmd>
  uint8_t row[2] = { row_start, row_end };
 80007ee:	797b      	ldrb	r3, [r7, #5]
 80007f0:	723b      	strb	r3, [r7, #8]
 80007f2:	793b      	ldrb	r3, [r7, #4]
 80007f4:	727b      	strb	r3, [r7, #9]
  OLED_write_data(row, 2);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2102      	movs	r1, #2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffaf 	bl	8000760 <OLED_write_data>
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}
	...

0800080c <OLED_init>:

/* ======== Public 함수들 ======== */

/* OLED 디스플레이를 초기화하는 함수 */
void OLED_init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
  // 1단계: 하드웨어 리셋
  RST_L();
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	4867      	ldr	r0, [pc, #412]	@ (80009b8 <OLED_init+0x1ac>)
 800081a:	f000 feb7 	bl	800158c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 LOW로 10ms
 800081e:	200a      	movs	r0, #10
 8000820:	f000 fbe8 	bl	8000ff4 <HAL_Delay>
  RST_H();
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082a:	4863      	ldr	r0, [pc, #396]	@ (80009b8 <OLED_init+0x1ac>)
 800082c:	f000 feae 	bl	800158c <HAL_GPIO_WritePin>
  HAL_Delay(10);    // RESET핀을 HIGH로 10ms
 8000830:	200a      	movs	r0, #10
 8000832:	f000 fbdf 	bl	8000ff4 <HAL_Delay>

  // 2단계: 디스플레이 끄기
  OLED_write_cmd(OLED_DISPLAYOFF);
 8000836:	20ae      	movs	r0, #174	@ 0xae
 8000838:	f7ff ff6a 	bl	8000710 <OLED_write_cmd>

  // 3단계: 기본 설정들
  OLED_write_cmd(OLED_SETCOMMANDLOCK);  // 명령어 잠금 해제
 800083c:	20fd      	movs	r0, #253	@ 0xfd
 800083e:	f7ff ff67 	bl	8000710 <OLED_write_cmd>
  d = 0x12;
 8000842:	4b5e      	ldr	r3, [pc, #376]	@ (80009bc <OLED_init+0x1b0>)
 8000844:	2212      	movs	r2, #18
 8000846:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000848:	2101      	movs	r1, #1
 800084a:	485c      	ldr	r0, [pc, #368]	@ (80009bc <OLED_init+0x1b0>)
 800084c:	f7ff ff88 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETCLOCKDIVIDER); // 클럭 주파수 설정
 8000850:	20b3      	movs	r0, #179	@ 0xb3
 8000852:	f7ff ff5d 	bl	8000710 <OLED_write_cmd>
  d = 0x91;
 8000856:	4b59      	ldr	r3, [pc, #356]	@ (80009bc <OLED_init+0x1b0>)
 8000858:	2291      	movs	r2, #145	@ 0x91
 800085a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800085c:	2101      	movs	r1, #1
 800085e:	4857      	ldr	r0, [pc, #348]	@ (80009bc <OLED_init+0x1b0>)
 8000860:	f7ff ff7e 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETMUXRATIO);     // 화면 높이 설정 (64줄)
 8000864:	20ca      	movs	r0, #202	@ 0xca
 8000866:	f7ff ff53 	bl	8000710 <OLED_write_cmd>
  d = 0x3F;
 800086a:	4b54      	ldr	r3, [pc, #336]	@ (80009bc <OLED_init+0x1b0>)
 800086c:	223f      	movs	r2, #63	@ 0x3f
 800086e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000870:	2101      	movs	r1, #1
 8000872:	4852      	ldr	r0, [pc, #328]	@ (80009bc <OLED_init+0x1b0>)
 8000874:	f7ff ff74 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETDISPLAYOFFSET); // 화면 위치 오프셋
 8000878:	20a2      	movs	r0, #162	@ 0xa2
 800087a:	f7ff ff49 	bl	8000710 <OLED_write_cmd>
  d = 0x00;
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <OLED_init+0x1b0>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000884:	2101      	movs	r1, #1
 8000886:	484d      	ldr	r0, [pc, #308]	@ (80009bc <OLED_init+0x1b0>)
 8000888:	f7ff ff6a 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETSTARTLINE);     // 시작 줄 설정
 800088c:	20a1      	movs	r0, #161	@ 0xa1
 800088e:	f7ff ff3f 	bl	8000710 <OLED_write_cmd>
  d = 0x00;
 8000892:	4b4a      	ldr	r3, [pc, #296]	@ (80009bc <OLED_init+0x1b0>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	4848      	ldr	r0, [pc, #288]	@ (80009bc <OLED_init+0x1b0>)
 800089c:	f7ff ff60 	bl	8000760 <OLED_write_data>

  // 4단계: 화면 방향과 색상 배치 설정
  OLED_write_cmd(OLED_SETREMAP);
 80008a0:	20a0      	movs	r0, #160	@ 0xa0
 80008a2:	f7ff ff35 	bl	8000710 <OLED_write_cmd>
  {
    uint8_t remap[2] = {0x14, 0x11};  // 니블 순서, 듀얼COM 설정
 80008a6:	f241 1314 	movw	r3, #4372	@ 0x1114
 80008aa:	81bb      	strh	r3, [r7, #12]
    OLED_write_data(remap, 2);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff54 	bl	8000760 <OLED_write_data>
  } // Dual COM 모드로 설정시, Column 범위가 [ 0x1C <= x <= 0x5B ]가 됩니다.



  // 5단계: GPIO와 기능 설정 ( 안씀 )
  OLED_write_cmd(OLED_SETGPIO);
 80008b8:	20b5      	movs	r0, #181	@ 0xb5
 80008ba:	f7ff ff29 	bl	8000710 <OLED_write_cmd>
  d = 0x00;
 80008be:	4b3f      	ldr	r3, [pc, #252]	@ (80009bc <OLED_init+0x1b0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80008c4:	2101      	movs	r1, #1
 80008c6:	483d      	ldr	r0, [pc, #244]	@ (80009bc <OLED_init+0x1b0>)
 80008c8:	f7ff ff4a 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_FUNCTIONSELECT);  // 내부 전원 사용
 80008cc:	20ab      	movs	r0, #171	@ 0xab
 80008ce:	f7ff ff1f 	bl	8000710 <OLED_write_cmd>
  d = 0x01;
 80008d2:	4b3a      	ldr	r3, [pc, #232]	@ (80009bc <OLED_init+0x1b0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 80008d8:	2101      	movs	r1, #1
 80008da:	4838      	ldr	r0, [pc, #224]	@ (80009bc <OLED_init+0x1b0>)
 80008dc:	f7ff ff40 	bl	8000760 <OLED_write_data>

  // 6단계: 화면 품질 향상 설정
  OLED_write_cmd(OLED_DISPLAYENHANCE_A);
 80008e0:	20b4      	movs	r0, #180	@ 0xb4
 80008e2:	f7ff ff15 	bl	8000710 <OLED_write_cmd>
  {
    uint8_t enhA[2] = {0xA0, 0xFD};
 80008e6:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80008ea:	813b      	strh	r3, [r7, #8]
    OLED_write_data(enhA, 2);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff34 	bl	8000760 <OLED_write_data>
  }

  // 7단계: 밝기와 전류 설정
  OLED_write_cmd(OLED_SETCONTRAST);     // 최대 밝기
 80008f8:	20c1      	movs	r0, #193	@ 0xc1
 80008fa:	f7ff ff09 	bl	8000710 <OLED_write_cmd>
  d = 0xFF;
 80008fe:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <OLED_init+0x1b0>)
 8000900:	22ff      	movs	r2, #255	@ 0xff
 8000902:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000904:	2101      	movs	r1, #1
 8000906:	482d      	ldr	r0, [pc, #180]	@ (80009bc <OLED_init+0x1b0>)
 8000908:	f7ff ff2a 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_MASTERCURRENT);   // 마스터 전류
 800090c:	20c7      	movs	r0, #199	@ 0xc7
 800090e:	f7ff feff 	bl	8000710 <OLED_write_cmd>
  d = 0x0F;
 8000912:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <OLED_init+0x1b0>)
 8000914:	220f      	movs	r2, #15
 8000916:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000918:	2101      	movs	r1, #1
 800091a:	4828      	ldr	r0, [pc, #160]	@ (80009bc <OLED_init+0x1b0>)
 800091c:	f7ff ff20 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_DEFAULTGRAYSCALE); // 기본 그레이스케일 사용
 8000920:	20b9      	movs	r0, #185	@ 0xb9
 8000922:	f7ff fef5 	bl	8000710 <OLED_write_cmd>

  // 8단계: 전기적 특성 설정
  OLED_write_cmd(OLED_SETPHASELENGTH);  // 페이즈 길이
 8000926:	20b1      	movs	r0, #177	@ 0xb1
 8000928:	f7ff fef2 	bl	8000710 <OLED_write_cmd>
  d = 0xE2;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <OLED_init+0x1b0>)
 800092e:	22e2      	movs	r2, #226	@ 0xe2
 8000930:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000932:	2101      	movs	r1, #1
 8000934:	4821      	ldr	r0, [pc, #132]	@ (80009bc <OLED_init+0x1b0>)
 8000936:	f7ff ff13 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_DISPLAYENHANCE_B); // 화면 품질 향상 B
 800093a:	20d1      	movs	r0, #209	@ 0xd1
 800093c:	f7ff fee8 	bl	8000710 <OLED_write_cmd>
  {
    uint8_t enhB[2] = {0x82, 0x20};
 8000940:	f242 0382 	movw	r3, #8322	@ 0x2082
 8000944:	80bb      	strh	r3, [r7, #4]
    OLED_write_data(enhB, 2);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff08 	bl	8000760 <OLED_write_data>
  }

  OLED_write_cmd(OLED_SETPRECHARGEVOLTAGE); // 프리차지 전압
 8000950:	20bb      	movs	r0, #187	@ 0xbb
 8000952:	f7ff fedd 	bl	8000710 <OLED_write_cmd>
  d = 0x1F;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <OLED_init+0x1b0>)
 8000958:	221f      	movs	r2, #31
 800095a:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 800095c:	2101      	movs	r1, #1
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <OLED_init+0x1b0>)
 8000960:	f7ff fefe 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETSECONDPRECHARGE);  // 두 번째 프리차지
 8000964:	20b6      	movs	r0, #182	@ 0xb6
 8000966:	f7ff fed3 	bl	8000710 <OLED_write_cmd>
  d = 0x08;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <OLED_init+0x1b0>)
 800096c:	2208      	movs	r2, #8
 800096e:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000970:	2101      	movs	r1, #1
 8000972:	4812      	ldr	r0, [pc, #72]	@ (80009bc <OLED_init+0x1b0>)
 8000974:	f7ff fef4 	bl	8000760 <OLED_write_data>

  OLED_write_cmd(OLED_SETVCOMH);            // VCOM 전압
 8000978:	20be      	movs	r0, #190	@ 0xbe
 800097a:	f7ff fec9 	bl	8000710 <OLED_write_cmd>
  d = 0x07;
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <OLED_init+0x1b0>)
 8000980:	2207      	movs	r2, #7
 8000982:	701a      	strb	r2, [r3, #0]
  OLED_write_data(&d, 1);
 8000984:	2101      	movs	r1, #1
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <OLED_init+0x1b0>)
 8000988:	f7ff feea 	bl	8000760 <OLED_write_data>

  // 9단계: 디스플레이 모드 설정
  OLED_write_cmd(OLED_NORMALDISPLAY);       // 정상 디스플레이 모드
 800098c:	20a6      	movs	r0, #166	@ 0xa6
 800098e:	f7ff febf 	bl	8000710 <OLED_write_cmd>
  OLED_write_cmd(OLED_EXITPARTIALDISPLAY);  // 부분 디스플레이 모드 해제
 8000992:	20a9      	movs	r0, #169	@ 0xa9
 8000994:	f7ff febc 	bl	8000710 <OLED_write_cmd>

  // 10단계: 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 8000998:	233f      	movs	r3, #63	@ 0x3f
 800099a:	2200      	movs	r2, #0
 800099c:	215b      	movs	r1, #91	@ 0x5b
 800099e:	201c      	movs	r0, #28
 80009a0:	f7ff ff06 	bl	80007b0 <OLED_set_window>

  // 11단계: 디스플레이 켜기
  OLED_write_cmd(OLED_DISPLAYON);
 80009a4:	20af      	movs	r0, #175	@ 0xaf
 80009a6:	f7ff feb3 	bl	8000710 <OLED_write_cmd>
  HAL_Delay(50);  // 안정화 대기
 80009aa:	2032      	movs	r0, #50	@ 0x32
 80009ac:	f000 fb22 	bl	8000ff4 <HAL_Delay>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	48000400 	.word	0x48000400
 80009bc:	20000038 	.word	0x20000038

080009c0 <OLED_fill>:

/* 화면 전체를 하나의 색으로 채우는 함수 */
void OLED_fill(uint8_t gray)  // gray: 0(검정)~15(흰색)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a4      	sub	sp, #144	@ 0x90
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  // 4bpp에서는 1바이트에 2픽셀이 들어감 (4bit씩)
  uint8_t b = (gray << 4) | (gray & 0x0F);  // 왼쪽4bit + 오른쪽4bit
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t line[OLED_W/2];  // 한 줄에 필요한 바이트 수 (256픽셀 / 2 = 128바이트)
  memset(line, b, sizeof(line));  // 배열을 같은 값으로 채움
 80009e4:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 ff2c 	bl	800284c <memset>

  // 전체 화면을 그리기 영역으로 설정
  OLED_set_window(OLED_COL_START, OLED_COL_END, OLED_ROW_START, OLED_ROW_END);
 80009f4:	233f      	movs	r3, #63	@ 0x3f
 80009f6:	2200      	movs	r2, #0
 80009f8:	215b      	movs	r1, #91	@ 0x5b
 80009fa:	201c      	movs	r0, #28
 80009fc:	f7ff fed8 	bl	80007b0 <OLED_set_window>
  OLED_write_cmd(OLED_WRITERAM);  // 메모리 쓰기 시작
 8000a00:	205c      	movs	r0, #92	@ 0x5c
 8000a02:	f7ff fe85 	bl	8000710 <OLED_write_cmd>

  // 64줄을 반복해서 같은 데이터 전송
  for (int y = 0; y < OLED_H; y++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a0c:	e00a      	b.n	8000a24 <OLED_fill+0x64>
    OLED_write_data(line, sizeof(line));
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fea3 	bl	8000760 <OLED_write_data>
  for (int y = 0; y < OLED_H; y++) {
 8000a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a1e:	3301      	adds	r3, #1
 8000a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a28:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a2a:	ddf0      	ble.n	8000a0e <OLED_fill+0x4e>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3790      	adds	r7, #144	@ 0x90
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <colbyte_from_x>:

/* ======== 좌표 변환 함수들 ======== */

/* 픽셀의 x좌표를 OLED의 column 바이트 주소로 변환 */
static uint8_t colbyte_from_x(int x)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  // 4bpp에서는 2픽셀당 1바이트이므로 x를 2로 나눔
  return OLED_COL_START + (x >> 1);  // x >> 1은 x / 2와 같음
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	105b      	asrs	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	331c      	adds	r3, #28
 8000a46:	b2db      	uxtb	r3, r3
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <rowaddr_from_y>:

/* 픽셀의 y좌표를 OLED의 row 주소로 변환 */
static uint8_t rowaddr_from_y(int y)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  return OLED_ROW_START + y;  // y좌표는 그대로 사용
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <oled_drawChar>:

/* ======== 문자 그리기 함수들 ======== */

/* 하나의 문자를 화면에 그리는 함수 */
void oled_drawChar(int x, int y, char ch, const FontDef *font, uint8_t gray)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71fb      	strb	r3, [r7, #7]
  // 1단계: 입력값 검증
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b1f      	cmp	r3, #31
 8000a80:	f240 80ea 	bls.w	8000c58 <oled_drawChar+0x1ec>
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a88:	f200 80e6 	bhi.w	8000c58 <oled_drawChar+0x1ec>
  if (gray > 15) gray = 15;         // 최대 밝기 제한
 8000a8c:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d902      	bls.n	8000a9a <oled_drawChar+0x2e>
 8000a94:	230f      	movs	r3, #15
 8000a96:	f887 30c0 	strb.w	r3, [r7, #192]	@ 0xc0

  // 2단계: 화면 범위 검사
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f2c0 80dd 	blt.w	8000c5c <oled_drawChar+0x1f0>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab0:	f300 80d4 	bgt.w	8000c5c <oled_drawChar+0x1f0>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f2c0 80d2 	blt.w	8000c60 <oled_drawChar+0x1f4>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	2b40      	cmp	r3, #64	@ 0x40
 8000ac8:	f300 80ca 	bgt.w	8000c60 <oled_drawChar+0x1f4>

  // 3단계: 폰트 데이터에서 문자 찾기
  const int stride = font->height;           // 한 문자의 데이터 줄 수
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const int start  = (ch - 32) * stride;     // 문자 데이터 시작 위치 ('A'는 65-32=33번째)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f1a3 0220 	sub.w	r2, r3, #32
 8000ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const int bytes_per_row = (font->width + 1) / 2;  // 한 줄당 필요한 바이트 수
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	0fda      	lsrs	r2, r3, #31
 8000aee:	4413      	add	r3, r2
 8000af0:	105b      	asrs	r3, r3, #1
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  uint8_t linebuf[OLED_W/2];  // 한 줄 데이터를 저장할 버퍼

  // 4단계: 문자의 각 줄을 처리
  for (int row = 0; row < font->height; row++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000afc:	e0a3      	b.n	8000c46 <oled_drawChar+0x1da>
  {
    // 폰트 데이터에서 현재 줄의 비트맵 가져오기
    uint16_t mask = font->data[start + row];
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b0a:	440b      	add	r3, r1
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    // 줄 버퍼를 0으로 초기화 (배경색)
    memset(linebuf, 0x00, bytes_per_row);
 8000b16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fe93 	bl	800284c <memset>

    // 5단계: 각 픽셀을 처리 (왼쪽부터 오른쪽으로)
    for (int col = 0; col < font->width; col++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b2c:	e04f      	b.n	8000bce <oled_drawChar+0x162>
    {
      int byte_idx = (col >> 1);              // 현재 픽셀이 들어갈 바이트 위치
 8000b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b32:	105b      	asrs	r3, r3, #1
 8000b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      int left_nibble = ((col & 1) == 0);     // 바이트의 왼쪽 4bit인지 오른쪽 4bit인지
 8000b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      // 현재 픽셀이 켜져있는지 확인
      if (mask & (0x8000 >> col))  // 0x8000에서 오른쪽으로 col번 이동한 비트 확인
 8000b4e:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8000b52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b5a:	fa41 f303 	asr.w	r3, r1, r3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d02f      	beq.n	8000bc4 <oled_drawChar+0x158>
      {
        // 픽셀이 켜져있으면 해당 위치에 색상 설정
        if (left_nibble)
 8000b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d015      	beq.n	8000b98 <oled_drawChar+0x12c>
          linebuf[byte_idx] |= (gray << 4);   // 왼쪽 4bit에 색상
 8000b6c:	f107 0214 	add.w	r2, r7, #20
 8000b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25a      	sxtb	r2, r3
 8000b7a:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	b2d9      	uxtb	r1, r3
 8000b88:	f107 0214 	add.w	r2, r7, #20
 8000b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b90:	4413      	add	r3, r2
 8000b92:	460a      	mov	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e015      	b.n	8000bc4 <oled_drawChar+0x158>
        else
          linebuf[byte_idx] |= (gray & 0x0F); // 오른쪽 4bit에 색상
 8000b98:	f107 0214 	add.w	r2, r7, #20
 8000b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	f997 30c0 	ldrsb.w	r3, [r7, #192]	@ 0xc0
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	b2d9      	uxtb	r1, r3
 8000bb6:	f107 0214 	add.w	r2, r7, #20
 8000bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bbe:	4413      	add	r3, r2
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	701a      	strb	r2, [r3, #0]
    for (int col = 0; col < font->width; col++)
 8000bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	dba8      	blt.n	8000b2e <oled_drawChar+0xc2>
      }
    }

    // 6단계: 현재 줄을 OLED에 전송
    uint8_t col_start = colbyte_from_x(x);           // 시작 column 주소
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff ff2a 	bl	8000a36 <colbyte_from_x>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
    uint8_t col_end   = col_start + bytes_per_row - 1;  // 끝 column 주소
 8000be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    uint8_t row_addr  = rowaddr_from_y(y + row);     // 현재 row 주소
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c02:	4413      	add	r3, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff25 	bl	8000a54 <rowaddr_from_y>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    OLED_set_window(col_start, col_end, row_addr, row_addr);  // 그리기 영역 설정
 8000c10:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000c14:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000c18:	f897 10a0 	ldrb.w	r1, [r7, #160]	@ 0xa0
 8000c1c:	f897 00a1 	ldrb.w	r0, [r7, #161]	@ 0xa1
 8000c20:	f7ff fdc6 	bl	80007b0 <OLED_set_window>
    OLED_write_cmd(OLED_WRITERAM);                   // 메모리 쓰기 시작
 8000c24:	205c      	movs	r0, #92	@ 0x5c
 8000c26:	f7ff fd73 	bl	8000710 <OLED_write_cmd>
    OLED_write_data(linebuf, bytes_per_row);         // 데이터 전송
 8000c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd92 	bl	8000760 <OLED_write_data>
  for (int row = 0; row < font->height; row++)
 8000c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f6ff af54 	blt.w	8000afe <oled_drawChar+0x92>
 8000c56:	e004      	b.n	8000c62 <oled_drawChar+0x1f6>
  if (ch < 32 || ch > 126) return;  // 출력 가능한 ASCII 문자만 허용
 8000c58:	bf00      	nop
 8000c5a:	e002      	b.n	8000c62 <oled_drawChar+0x1f6>
  if (x < 0 || (x + font->width) > OLED_W)   return;  // 가로 범위 초과
 8000c5c:	bf00      	nop
 8000c5e:	e000      	b.n	8000c62 <oled_drawChar+0x1f6>
  if (y < 0 || (y + font->height) > OLED_H)  return;  // 세로 범위 초과
 8000c60:	bf00      	nop
  }
}
 8000c62:	37b8      	adds	r7, #184	@ 0xb8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <oled_drawString>:

/* 문자열을 화면에 그리는 함수 */
void oled_drawString(int x, int y, const char *str, const FontDef *font, uint8_t gray)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
  int cx = x, cy = y;  // 현재 커서 위치
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	613b      	str	r3, [r7, #16]

  // 문자열의 끝까지 반복
  while (*str) {
 8000c7e:	e020      	b.n	8000cc2 <oled_drawString+0x5a>
    if (*str == '\n') {  // 줄바꿈 문자
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b0a      	cmp	r3, #10
 8000c86:	d108      	bne.n	8000c9a <oled_drawString+0x32>
      cy += font->height + 1;  // 다음 줄로 이동 (+1은 줄 간격)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      cx = x;                  // 맨 왼쪽으로 돌아가기
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e010      	b.n	8000cbc <oled_drawString+0x54>
     // if (cx & 1) cx--;        // 시작 위치를 짝수로 맞춤 (니블 정렬)
    } // 사용시 "str\nstr" 이런식으로 쓰시면 됩니다.

    else if (*str != '\r') {   // 캐리지 리턴이 아닌 일반 문자
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d00c      	beq.n	8000cbc <oled_drawString+0x54>
      oled_drawChar(cx, cy, *str, font, gray);  // 현재 위치에 문자 그리기
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6939      	ldr	r1, [r7, #16]
 8000cb0:	6978      	ldr	r0, [r7, #20]
 8000cb2:	f7ff fedb 	bl	8000a6c <oled_drawChar>
      cx += 4;  // 다음 문자 위치로 이동 (4픽셀 간격으로 설정)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	617b      	str	r3, [r7, #20]

      // 원래 코드: cx += font->width + 1; (폰트 너비 + 1픽셀 간격)
      // 원래 코드: if (cx & 1) cx++;      (다음 위치를 짝수로 맞춤)
      // → 이 두 줄이 문자 사이에 큰 간격을 만들었음
    }
    str++;  // 다음 문자로 이동
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
  while (*str) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1da      	bne.n	8000c80 <oled_drawString+0x18>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <MX_SPI3_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000cee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cf2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d0a:	2228      	movs	r2, #40	@ 0x28
 8000d0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d22:	2207      	movs	r2, #7
 8000d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d2e:	2208      	movs	r2, #8
 8000d30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_SPI3_Init+0x74>)
 8000d34:	f001 fa04 	bl	8002140 <HAL_SPI_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f7ff fce1 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000003c 	.word	0x2000003c
 8000d4c:	40003c00 	.word	0x40003c00

08000d50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_SPI_MspInit+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d127      	bne.n	8000dc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000da2:	2328      	movs	r3, #40	@ 0x28
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db2:	2306      	movs	r3, #6
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_SPI_MspInit+0x84>)
 8000dbe:	f000 fa4b 	bl	8001258 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e0e:	f000 fc91 	bl	8001734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f89f 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fb9a 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000e90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e94:	f000 fb92 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f001 fcb5 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fad5 	bl	80004a0 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	200000a4 	.word	0x200000a4

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f95b 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff ff50 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]

}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <HAL_InitTick+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d022      	beq.n	8000f9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_InitTick+0x6c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_InitTick+0x68>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f966 	bl	800123e <HAL_SYSTICK_Config>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10f      	bne.n	8000f98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d809      	bhi.n	8000f92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
 8000f86:	f000 f932 	bl	80011ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_InitTick+0x70>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e007      	b.n	8000fa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e004      	b.n	8000fa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a03      	ldr	r2, [pc, #12]	@ (8000fd4 <HAL_IncTick+0x1c>)
 8000fc8:	6013      	str	r3, [r2, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200000a0 	.word	0x200000a0
 8000fd8:	20000008 	.word	0x20000008

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200000a0 	.word	0x200000a0

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d004      	beq.n	8001018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_Delay+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001018:	bf00      	nop
 800101a:	f7ff ffdf 	bl	8000fdc <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d8f7      	bhi.n	800101a <HAL_Delay+0x26>
  {
  }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	@ (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	@ 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff40 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff90 	bl	800112c <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5f 	bl	80010d8 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff33 	bl	800109c <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa4 	bl	8001194 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001266:	e15a      	b.n	800151e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 814c 	beq.w	8001518 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0203 	and.w	r2, r3, #3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80a6 	beq.w	8001518 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <HAL_GPIO_Init+0x2e4>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d0:	4a5a      	ldr	r2, [pc, #360]	@ (800153c <HAL_GPIO_Init+0x2e4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80013d8:	4b58      	ldr	r3, [pc, #352]	@ (800153c <HAL_GPIO_Init+0x2e4>)
 80013da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e4:	4a56      	ldr	r2, [pc, #344]	@ (8001540 <HAL_GPIO_Init+0x2e8>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800140e:	d01f      	beq.n	8001450 <HAL_GPIO_Init+0x1f8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4c      	ldr	r2, [pc, #304]	@ (8001544 <HAL_GPIO_Init+0x2ec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d019      	beq.n	800144c <HAL_GPIO_Init+0x1f4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4b      	ldr	r2, [pc, #300]	@ (8001548 <HAL_GPIO_Init+0x2f0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d013      	beq.n	8001448 <HAL_GPIO_Init+0x1f0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a4a      	ldr	r2, [pc, #296]	@ (800154c <HAL_GPIO_Init+0x2f4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1ec>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a49      	ldr	r2, [pc, #292]	@ (8001550 <HAL_GPIO_Init+0x2f8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1e8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a48      	ldr	r2, [pc, #288]	@ (8001554 <HAL_GPIO_Init+0x2fc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1e4>
 8001438:	2305      	movs	r3, #5
 800143a:	e00a      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 800143c:	2306      	movs	r3, #6
 800143e:	e008      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 8001440:	2304      	movs	r3, #4
 8001442:	e006      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 8001444:	2303      	movs	r3, #3
 8001446:	e004      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 8001448:	2302      	movs	r3, #2
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_GPIO_Init+0x1fa>
 8001450:	2300      	movs	r3, #0
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4093      	lsls	r3, r2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001462:	4937      	ldr	r1, [pc, #220]	@ (8001540 <HAL_GPIO_Init+0x2e8>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001470:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <HAL_GPIO_Init+0x300>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001494:	4a30      	ldr	r2, [pc, #192]	@ (8001558 <HAL_GPIO_Init+0x300>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <HAL_GPIO_Init+0x300>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014be:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001512:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <HAL_GPIO_Init+0x300>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f ae9d 	bne.w	8001268 <HAL_GPIO_Init+0x10>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f86a 	bl	80006b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d141      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001606:	d131      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001608:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800160e:	4a46      	ldr	r2, [pc, #280]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001620:	4a41      	ldr	r2, [pc, #260]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2232      	movs	r2, #50	@ 0x32
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a3f      	ldr	r2, [pc, #252]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163e:	e002      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3b01      	subs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001646:	4b38      	ldr	r3, [pc, #224]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001652:	d102      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f2      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001666:	d158      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e057      	b.n	800171c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001672:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800167c:	e04d      	b.n	800171a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001684:	d141      	bne.n	800170a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001692:	d131      	bne.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2232      	movs	r2, #50	@ 0x32
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9b      	lsrs	r3, r3, #18
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ca:	e002      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016de:	d102      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f2      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f2:	d112      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e011      	b.n	800171c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001708:	e007      	b.n	800171a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001718:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40007000 	.word	0x40007000
 800172c:	20000000 	.word	0x20000000
 8001730:	431bde83 	.word	0x431bde83

08001734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	6093      	str	r3, [r2, #8]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e2fe      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d075      	beq.n	800185e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4b97      	ldr	r3, [pc, #604]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177c:	4b94      	ldr	r3, [pc, #592]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d102      	bne.n	8001792 <HAL_RCC_OscConfig+0x3e>
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d002      	beq.n	8001798 <HAL_RCC_OscConfig+0x44>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d10b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	4b8d      	ldr	r3, [pc, #564]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d05b      	beq.n	800185c <HAL_RCC_OscConfig+0x108>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d157      	bne.n	800185c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e2d9      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x74>
 80017ba:	4b85      	ldr	r3, [pc, #532]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a84      	ldr	r2, [pc, #528]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b7c      	ldr	r3, [pc, #496]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7b      	ldr	r2, [pc, #492]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017ec:	4b78      	ldr	r3, [pc, #480]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a77      	ldr	r2, [pc, #476]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b75      	ldr	r3, [pc, #468]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a74      	ldr	r2, [pc, #464]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fbe6 	bl	8000fdc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fbe2 	bl	8000fdc <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e29e      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xc0>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fbd2 	bl	8000fdc <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fbce 	bl	8000fdc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e28a      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184e:	4b60      	ldr	r3, [pc, #384]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0xe8>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d075      	beq.n	8001956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b56      	ldr	r3, [pc, #344]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0x136>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d002      	beq.n	8001890 <HAL_RCC_OscConfig+0x13c>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d11f      	bne.n	80018d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x154>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e25d      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b49      	ldr	r3, [pc, #292]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4946      	ldr	r1, [pc, #280]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018bc:	4b45      	ldr	r3, [pc, #276]	@ (80019d4 <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb3f 	bl	8000f44 <HAL_InitTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d043      	beq.n	8001954 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e249      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b3d      	ldr	r3, [pc, #244]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3c      	ldr	r2, [pc, #240]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb7a 	bl	8000fdc <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb76 	bl	8000fdc <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e232      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fe:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	061b      	lsls	r3, r3, #24
 8001918:	492d      	ldr	r1, [pc, #180]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
 800191e:	e01a      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2a      	ldr	r2, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb56 	bl	8000fdc <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fb52 	bl	8000fdc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e20e      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x1e0>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d041      	beq.n	80019e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001970:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff fb2f 	bl	8000fdc <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fb2b 	bl	8000fdc <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1e7      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ef      	beq.n	8001982 <HAL_RCC_OscConfig+0x22e>
 80019a2:	e020      	b.n	80019e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019aa:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fb12 	bl	8000fdc <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ba:	e00d      	b.n	80019d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fb0e 	bl	8000fdc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d906      	bls.n	80019d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1ca      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ea      	bne.n	80019bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a6 	beq.w	8001b40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f8:	4b84      	ldr	r3, [pc, #528]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2b4>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x2b6>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a7e      	ldr	r2, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	4b79      	ldr	r3, [pc, #484]	@ (8001c10 <HAL_RCC_OscConfig+0x4bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a36:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <HAL_RCC_OscConfig+0x4bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a75      	ldr	r2, [pc, #468]	@ (8001c10 <HAL_RCC_OscConfig+0x4bc>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff facb 	bl	8000fdc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fac7 	bl	8000fdc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e183      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c10 <HAL_RCC_OscConfig+0x4bc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d108      	bne.n	8001a82 <HAL_RCC_OscConfig+0x32e>
 8001a70:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a76:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a80:	e024      	b.n	8001acc <HAL_RCC_OscConfig+0x378>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d110      	bne.n	8001aac <HAL_RCC_OscConfig+0x358>
 8001a8a:	4b60      	ldr	r3, [pc, #384]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a90:	4a5e      	ldr	r2, [pc, #376]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aaa:	e00f      	b.n	8001acc <HAL_RCC_OscConfig+0x378>
 8001aac:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab2:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	4a52      	ldr	r2, [pc, #328]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d016      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa82 	bl	8000fdc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff fa7e 	bl	8000fdc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e138      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	4b46      	ldr	r3, [pc, #280]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ed      	beq.n	8001adc <HAL_RCC_OscConfig+0x388>
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa6b 	bl	8000fdc <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa67 	bl	8000fdc <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e121      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	4b3a      	ldr	r3, [pc, #232]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ed      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	4a34      	ldr	r2, [pc, #208]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b54:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fa3a 	bl	8000fdc <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6c:	f7ff fa36 	bl	8000fdc <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0f2      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ef      	beq.n	8001b6c <HAL_RCC_OscConfig+0x418>
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b94:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fa1d 	bl	8000fdc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba6:	f7ff fa19 	bl	8000fdc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0d5      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ef      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80c9 	beq.w	8001d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	f000 8083 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d15e      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f9f3 	bl	8000fdc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e00c      	b.n	8001c14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f9ef 	bl	8000fdc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d905      	bls.n	8001c14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0ab      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ec      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <HAL_RCC_OscConfig+0x61c>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6a11      	ldr	r1, [r2, #32]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c3a:	0212      	lsls	r2, r2, #8
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0652      	lsls	r2, r2, #25
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c5a:	06d2      	lsls	r2, r2, #27
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4943      	ldr	r1, [pc, #268]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a40      	ldr	r2, [pc, #256]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a3d      	ldr	r2, [pc, #244]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9ae 	bl	8000fdc <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f9aa 	bl	8000fdc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e066      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x530>
 8001ca2:	e05e      	b.n	8001d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a30      	ldr	r2, [pc, #192]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f994 	bl	8000fdc <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f990 	bl	8000fdc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04c      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cca:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4924      	ldr	r1, [pc, #144]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001cdc:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <HAL_RCC_OscConfig+0x620>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60cb      	str	r3, [r1, #12]
 8001ce2:	e03e      	b.n	8001d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e039      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_RCC_OscConfig+0x618>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d12c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d123      	bne.n	8001d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d11b      	bne.n	8001d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d113      	bne.n	8001d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	019f800c 	.word	0x019f800c
 8001d74:	feeefffc 	.word	0xfeeefffc

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e11e      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b91      	ldr	r3, [pc, #580]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	498c      	ldr	r1, [pc, #560]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b8a      	ldr	r3, [pc, #552]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e106      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d073      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d129      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	4b81      	ldr	r3, [pc, #516]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0f4      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001de4:	f000 f966 	bl	80020b4 <RCC_GetSysClockFreqFromPLLSource>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4a7c      	ldr	r2, [pc, #496]	@ (8001fe0 <HAL_RCC_ClockConfig+0x268>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d93f      	bls.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001df2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d033      	beq.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12f      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e12:	4b72      	ldr	r3, [pc, #456]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e1a:	4a70      	ldr	r2, [pc, #448]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e024      	b.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e30:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0c6      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0be      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e50:	f000 f8ce 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4a61      	ldr	r2, [pc, #388]	@ (8001fe0 <HAL_RCC_ClockConfig+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d909      	bls.n	8001e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e66:	4a5d      	ldr	r2, [pc, #372]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b5a      	ldr	r3, [pc, #360]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4957      	ldr	r1, [pc, #348]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e84:	f7ff f8aa 	bl	8000fdc <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f8a6 	bl	8000fdc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e095      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b43      	ldr	r3, [pc, #268]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a42      	ldr	r2, [pc, #264]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001eec:	4a3b      	ldr	r2, [pc, #236]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b39      	ldr	r3, [pc, #228]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4936      	ldr	r1, [pc, #216]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b80      	cmp	r3, #128	@ 0x80
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f0e:	4b33      	ldr	r3, [pc, #204]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d21d      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 020f 	bic.w	r2, r3, #15
 8001f30:	4929      	ldr	r1, [pc, #164]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f38:	f7ff f850 	bl	8000fdc <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7ff f84c 	bl	8000fdc <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e03b      	b.n	8001fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1ed      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4917      	ldr	r1, [pc, #92]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490f      	ldr	r1, [pc, #60]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa2:	f000 f825 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_RCC_ClockConfig+0x264>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <HAL_RCC_ClockConfig+0x26c>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_RCC_ClockConfig+0x270>)
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_RCC_ClockConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ffbc 	bl	8000f44 <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	04c4b400 	.word	0x04c4b400
 8001fe4:	08003054 	.word	0x08003054
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d102      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002002:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	e047      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e03e      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d136      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d10c      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002044:	4a1a      	ldr	r2, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	0a12      	lsrs	r2, r2, #8
 8002052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
      break;
 800205c:	e00c      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205e:	4a13      	ldr	r2, [pc, #76]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	68d2      	ldr	r2, [r2, #12]
 800206a:	0a12      	lsrs	r2, r2, #8
 800206c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0e5b      	lsrs	r3, r3, #25
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e001      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002098:	693b      	ldr	r3, [r7, #16]
}
 800209a:	4618      	mov	r0, r3
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	00f42400 	.word	0x00f42400
 80020b0:	007a1200 	.word	0x007a1200

080020b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d10c      	bne.n	80020f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d8:	4a17      	ldr	r2, [pc, #92]	@ (8002138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	0a12      	lsrs	r2, r2, #8
 80020e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
    break;
 80020f0:	e00c      	b.n	800210c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0a12      	lsrs	r2, r2, #8
 8002100:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    break;
 800210a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	00f42400 	.word	0x00f42400

08002140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09d      	b.n	800228e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002162:	d009      	beq.n	8002178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
 800216a:	e005      	b.n	8002178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fddc 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021b8:	d902      	bls.n	80021c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e002      	b.n	80021c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80021ce:	d007      	beq.n	80021e0 <HAL_SPI_Init+0xa0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021d8:	d002      	beq.n	80021e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002222:	ea42 0103 	orr.w	r1, r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0204 	and.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022a6:	f7fe fe99 	bl	8000fdc <HAL_GetTick>
 80022aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d001      	beq.n	80022c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e15c      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_SPI_Transmit+0x36>
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e154      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_SPI_Transmit+0x48>
 80022da:	2302      	movs	r3, #2
 80022dc:	e14d      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2203      	movs	r2, #3
 80022ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002330:	d10f      	bne.n	8002352 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002350:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d007      	beq.n	8002370 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800236e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002378:	d952      	bls.n	8002420 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0xf2>
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d145      	bne.n	8002414 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	1c9a      	adds	r2, r3, #2
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023ac:	e032      	b.n	8002414 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d112      	bne.n	80023e2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	1c9a      	adds	r2, r3, #2
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023e0:	e018      	b.n	8002414 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e2:	f7fe fdfb 	bl	8000fdc <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d803      	bhi.n	80023fa <HAL_SPI_Transmit+0x164>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d102      	bne.n	8002400 <HAL_SPI_Transmit+0x16a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0b2      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1c7      	bne.n	80023ae <HAL_SPI_Transmit+0x118>
 800241e:	e083      	b.n	8002528 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Transmit+0x198>
 8002428:	8b7b      	ldrh	r3, [r7, #26]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d177      	bne.n	800251e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d912      	bls.n	800245e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b02      	subs	r3, #2
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800245c:	e05f      	b.n	800251e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002484:	e04b      	b.n	800251e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	d12b      	bne.n	80024ec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d912      	bls.n	80024c4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	1c9a      	adds	r2, r3, #2
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b02      	subs	r3, #2
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024c2:	e02c      	b.n	800251e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024ea:	e018      	b.n	800251e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ec:	f7fe fd76 	bl	8000fdc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d803      	bhi.n	8002504 <HAL_SPI_Transmit+0x26e>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d102      	bne.n	800250a <HAL_SPI_Transmit+0x274>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e02d      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ae      	bne.n	8002486 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f947 	bl	80027c0 <SPI_EndRxTxTransaction>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002578:	2300      	movs	r3, #0
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002594:	f7fe fd22 	bl	8000fdc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025a4:	f7fe fd1a 	bl	8000fdc <HAL_GetTick>
 80025a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	015b      	lsls	r3, r3, #5
 80025b0:	0d1b      	lsrs	r3, r3, #20
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ba:	e054      	b.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d050      	beq.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025c4:	f7fe fd0a 	bl	8000fdc <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d902      	bls.n	80025da <SPI_WaitFlagStateUntilTimeout+0x56>
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d13d      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f2:	d111      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025fc:	d004      	beq.n	8002608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d107      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002620:	d10f      	bne.n	8002642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e017      	b.n	8002686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3b01      	subs	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	429a      	cmp	r2, r3
 8002682:	d19b      	bne.n	80025bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000000 	.word	0x20000000

08002694 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	@ 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026a6:	f7fe fc99 	bl	8000fdc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026b6:	f7fe fc91 	bl	8000fdc <HAL_GetTick>
 80026ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026c4:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00da      	lsls	r2, r3, #3
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	0d1b      	lsrs	r3, r3, #20
 80026d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026dc:	e060      	b.n	80027a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026e4:	d107      	bne.n	80026f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d050      	beq.n	80027a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026fe:	f7fe fc6d 	bl	8000fdc <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270a:	429a      	cmp	r2, r3
 800270c:	d902      	bls.n	8002714 <SPI_WaitFifoStateUntilTimeout+0x80>
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d13d      	bne.n	8002790 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002722:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800272c:	d111      	bne.n	8002752 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002736:	d004      	beq.n	8002742 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002740:	d107      	bne.n	8002752 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002750:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275a:	d10f      	bne.n	800277c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e010      	b.n	80027b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3b01      	subs	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d196      	bne.n	80026de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000

080027c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff ff5b 	bl	8002694 <SPI_WaitFifoStateUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e027      	b.n	8002844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fec0 	bl	8002584 <SPI_WaitFlagStateUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e014      	b.n	8002844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff ff34 	bl	8002694 <SPI_WaitFifoStateUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e000      	b.n	8002844 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <memset>:
 800284c:	4402      	add	r2, r0
 800284e:	4603      	mov	r3, r0
 8002850:	4293      	cmp	r3, r2
 8002852:	d100      	bne.n	8002856 <memset+0xa>
 8002854:	4770      	bx	lr
 8002856:	f803 1b01 	strb.w	r1, [r3], #1
 800285a:	e7f9      	b.n	8002850 <memset+0x4>

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4d0d      	ldr	r5, [pc, #52]	@ (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	@ (8002898 <__libc_init_array+0x3c>)
 8002862:	1b64      	subs	r4, r4, r5
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2600      	movs	r6, #0
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4d0b      	ldr	r5, [pc, #44]	@ (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	@ (80028a0 <__libc_init_array+0x44>)
 8002870:	f000 f818 	bl	80028a4 <_init>
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2600      	movs	r6, #0
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	08003064 	.word	0x08003064
 8002898:	08003064 	.word	0x08003064
 800289c:	08003064 	.word	0x08003064
 80028a0:	08003068 	.word	0x08003068

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
